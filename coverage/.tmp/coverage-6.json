{"/workspaces/sophra/src/app/api/nous/signals/process/route.ts":{"path":"/workspaces/sophra/src/app/api/nous/signals/process/route.ts","statementMap":{"0":{"start":{"line":6,"column":23},"end":{"line":6,"column":31}},"1":{"start":{"line":7,"column":28},"end":{"line":37,"column":2}},"2":{"start":{"line":39,"column":2},"end":{"line":100,"column":3}},"3":{"start":{"line":40,"column":17},"end":{"line":40,"column":33}},"4":{"start":{"line":41,"column":23},"end":{"line":41,"column":58}},"5":{"start":{"line":42,"column":4},"end":{"line":60,"column":5}},"6":{"start":{"line":43,"column":6},"end":{"line":46,"column":9}},"7":{"start":{"line":47,"column":6},"end":{"line":59,"column":8}},"8":{"start":{"line":61,"column":22},"end":{"line":61,"column":32}},"9":{"start":{"line":62,"column":64},"end":{"line":62,"column":79}},"10":{"start":{"line":63,"column":23},"end":{"line":73,"column":6}},"11":{"start":{"line":74,"column":4},"end":{"line":79,"column":7}},"12":{"start":{"line":80,"column":4},"end":{"line":88,"column":7}},"13":{"start":{"line":90,"column":4},"end":{"line":95,"column":7}},"14":{"start":{"line":96,"column":4},"end":{"line":99,"column":6}},"15":{"start":{"line":103,"column":2},"end":{"line":135,"column":3}},"16":{"start":{"line":104,"column":16},"end":{"line":104,"column":32}},"17":{"start":{"line":105,"column":19},"end":{"line":105,"column":49}},"18":{"start":{"line":106,"column":18},"end":{"line":106,"column":65}},"19":{"start":{"line":107,"column":20},"end":{"line":119,"column":6}},"20":{"start":{"line":120,"column":4},"end":{"line":128,"column":7}},"21":{"start":{"line":130,"column":4},"end":{"line":130,"column":63}},"22":{"start":{"line":131,"column":4},"end":{"line":134,"column":6}}},"fnMap":{"0":{"name":"POST","decl":{"start":{"line":38,"column":22},"end":{"line":38,"column":26}},"loc":{"start":{"line":38,"column":32},"end":{"line":101,"column":1}},"line":38},"1":{"name":"GET","decl":{"start":{"line":102,"column":22},"end":{"line":102,"column":25}},"loc":{"start":{"line":102,"column":31},"end":{"line":136,"column":1}},"line":102}},"branchMap":{"0":{"loc":{"start":{"line":42,"column":4},"end":{"line":60,"column":5}},"type":"if","locations":[{"start":{"line":42,"column":4},"end":{"line":60,"column":5}},{"start":{},"end":{}}],"line":42},"1":{"loc":{"start":{"line":71,"column":15},"end":{"line":71,"column":28}},"type":"binary-expr","locations":[{"start":{"line":71,"column":15},"end":{"line":71,"column":20}},{"start":{"line":71,"column":24},"end":{"line":71,"column":28}}],"line":71},"2":{"loc":{"start":{"line":91,"column":13},"end":{"line":94,"column":15}},"type":"cond-expr","locations":[{"start":{"line":91,"column":38},"end":{"line":94,"column":7}},{"start":{"line":94,"column":10},"end":{"line":94,"column":15}}],"line":91},"3":{"loc":{"start":{"line":106,"column":27},"end":{"line":106,"column":64}},"type":"binary-expr","locations":[{"start":{"line":106,"column":27},"end":{"line":106,"column":56}},{"start":{"line":106,"column":60},"end":{"line":106,"column":64}}],"line":106},"4":{"loc":{"start":{"line":112,"column":18},"end":{"line":112,"column":37}},"type":"binary-expr","locations":[{"start":{"line":112,"column":18},"end":{"line":112,"column":24}},{"start":{"line":112,"column":28},"end":{"line":112,"column":37}}],"line":112}},"s":{"0":1,"1":1,"2":4,"3":4,"4":4,"5":4,"6":1,"7":1,"8":3,"9":3,"10":3,"11":2,"12":2,"13":1,"14":1,"15":3,"16":3,"17":3,"18":3,"19":3,"20":2,"21":1,"22":1},"f":{"0":4,"1":3},"b":{"0":[1,3],"1":[3,2],"2":[1,0],"3":[3,3],"4":[3,2]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/api/nous/signals/process/route.ts"],"sourcesContent":["import { prisma } from \"../../../../../lib/shared/database/client\";\nimport logger from \"../../../../../lib/shared/logger\";\nimport { Prisma, SignalType } from \"@prisma/client\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { z } from \"zod\";\n// Declare Node.js runtime\nexport const runtime = \"nodejs\";\n\n\nconst ProcessUpdateSchema = z.object({\n  signalId: z.string(),\n  status: z.enum([\"PENDING\", \"PROCESSING\", \"COMPLETED\", \"FAILED\"]),\n  type: z.nativeEnum(SignalType),\n  result: z.record(z.unknown()).optional(),\n  error: z.string().optional(),\n  metadata: z\n    .object({\n      processingTime: z.number().optional(),\n      processor: z.string().optional(),\n      attemptCount: z.number().optional(),\n      failureReason: z.string().optional(),\n      processingSteps: z\n        .array(\n          z.object({\n            step: z.string(),\n            status: z.string(),\n            duration: z.number(),\n            timestamp: z.string().datetime(),\n          })\n        )\n        .optional(),\n      performance: z\n        .object({\n          cpuUsage: z.number().optional(),\n          memoryUsage: z.number().optional(),\n          latency: z.number().optional(),\n        })\n        .optional(),\n      context: z\n        .object({\n          environment: z.string().optional(),\n          version: z.string().optional(),\n          batchId: z.string().optional(),\n        })\n        .optional(),\n    })\n    .optional(),\n});\n\nexport async function POST(req: NextRequest): Promise<NextResponse> {\n  try {\n    const body = await req.json();\n    const validation = ProcessUpdateSchema.safeParse(body);\n\n    if (!validation.success) {\n      logger.error(\"Invalid process update request\", {\n        errors: validation.error.format(),\n        received: body,\n      });\n      return NextResponse.json(\n        {\n          success: false,\n          error: \"Invalid request format\",\n          details: validation.error.format(),\n          metadata: {\n            processingDuration: 0,\n            apiVersion: process.env.NEXT_PUBLIC_API_VERSION,\n            timestamp: new Date().toISOString(),\n          },\n        },\n        { status: 400 }\n      );\n    }\n\n    const startTime = Date.now();\n    const { signalId, status, type, result, error, metadata } = validation.data;\n\n    const processing = await prisma.signal.update({\n      where: { id: signalId },\n      data: {\n        type,\n        value: result as unknown as Prisma.InputJsonValue,\n        processed: true,\n        processedAt: new Date(),\n        metadata: metadata as unknown as Prisma.InputJsonValue,\n        error: error || null,\n      },\n    });\n\n    logger.info(\"Updated signal processing\", {\n      signalId,\n      status,\n      processed: processing.processed,\n      duration: Date.now() - startTime,\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: processing,\n      metadata: {\n        processingDuration: Date.now() - startTime,\n        apiVersion: process.env.NEXT_PUBLIC_API_VERSION,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    logger.error(\"Failed to update signal processing\", {\n      error:\n        error instanceof Error\n          ? {\n              message: error.message,\n              stack: error.stack,\n            }\n          : error,\n    });\n    return NextResponse.json(\n      { success: false, error: \"Failed to update signal processing\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(req: NextRequest): Promise<NextResponse> {\n  try {\n    const url = new URL(req.url);\n    const status = url.searchParams.get(\"status\");\n    const limit = parseInt(url.searchParams.get(\"limit\") || \"50\");\n\n    const pending = await prisma.signal.findMany({\n      where: {\n        processed: status === \"COMPLETED\",\n        metadata: {\n          path: [\"status\"],\n          equals: status || \"PENDING\",\n        },\n      },\n      orderBy: {\n        timestamp: \"asc\",\n      },\n      take: limit,\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: pending,\n      metadata: {\n        count: pending.length,\n        status,\n        limit,\n      },\n    });\n  } catch (error) {\n    logger.error(\"Failed to fetch pending signals\", { error });\n    return NextResponse.json(\n      { success: false, error: \"Failed to fetch pending signals\" },\n      { status: 500 }\n    );\n  }\n}\n"],"mappings":"AAAA,SAAS,cAAc;AACvB,OAAO,YAAY;AACnB,SAAiB,kBAAkB;AACnC,SAAsB,oBAAoB;AAC1C,SAAS,SAAS;AAEX,aAAM,UAAU;AAGvB,MAAM,sBAAsB,EAAE,OAAO;AAAA,EACnC,UAAU,EAAE,OAAO;AAAA,EACnB,QAAQ,EAAE,KAAK,CAAC,WAAW,cAAc,aAAa,QAAQ,CAAC;AAAA,EAC/D,MAAM,EAAE,WAAW,UAAU;AAAA,EAC7B,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,SAAS;AAAA,EACvC,OAAO,EAAE,OAAO,EAAE,SAAS;AAAA,EAC3B,UAAU,EACP,OAAO;AAAA,IACN,gBAAgB,EAAE,OAAO,EAAE,SAAS;AAAA,IACpC,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,IAC/B,cAAc,EAAE,OAAO,EAAE,SAAS;AAAA,IAClC,eAAe,EAAE,OAAO,EAAE,SAAS;AAAA,IACnC,iBAAiB,EACd;AAAA,MACC,EAAE,OAAO;AAAA,QACP,MAAM,EAAE,OAAO;AAAA,QACf,QAAQ,EAAE,OAAO;AAAA,QACjB,UAAU,EAAE,OAAO;AAAA,QACnB,WAAW,EAAE,OAAO,EAAE,SAAS;AAAA,MACjC,CAAC;AAAA,IACH,EACC,SAAS;AAAA,IACZ,aAAa,EACV,OAAO;AAAA,MACN,UAAU,EAAE,OAAO,EAAE,SAAS;AAAA,MAC9B,aAAa,EAAE,OAAO,EAAE,SAAS;AAAA,MACjC,SAAS,EAAE,OAAO,EAAE,SAAS;AAAA,IAC/B,CAAC,EACA,SAAS;AAAA,IACZ,SAAS,EACN,OAAO;AAAA,MACN,aAAa,EAAE,OAAO,EAAE,SAAS;AAAA,MACjC,SAAS,EAAE,OAAO,EAAE,SAAS;AAAA,MAC7B,SAAS,EAAE,OAAO,EAAE,SAAS;AAAA,IAC/B,CAAC,EACA,SAAS;AAAA,EACd,CAAC,EACA,SAAS;AACd,CAAC;AAED,sBAAsB,KAAK,KAAyC;AAClE,MAAI;AACF,UAAM,OAAO,MAAM,IAAI,KAAK;AAC5B,UAAM,aAAa,oBAAoB,UAAU,IAAI;AAErD,QAAI,CAAC,WAAW,SAAS;AACvB,aAAO,MAAM,kCAAkC;AAAA,QAC7C,QAAQ,WAAW,MAAM,OAAO;AAAA,QAChC,UAAU;AAAA,MACZ,CAAC;AACD,aAAO,aAAa;AAAA,QAClB;AAAA,UACE,SAAS;AAAA,UACT,OAAO;AAAA,UACP,SAAS,WAAW,MAAM,OAAO;AAAA,UACjC,UAAU;AAAA,YACR,oBAAoB;AAAA,YACpB,YAAY,QAAQ,IAAI;AAAA,YACxB,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,UACpC;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,IAAI;AAAA,MAChB;AAAA,IACF;AAEA,UAAM,YAAY,KAAK,IAAI;AAC3B,UAAM,EAAE,UAAU,QAAQ,MAAM,QAAQ,OAAO,SAAS,IAAI,WAAW;AAEvE,UAAM,aAAa,MAAM,OAAO,OAAO,OAAO;AAAA,MAC5C,OAAO,EAAE,IAAI,SAAS;AAAA,MACtB,MAAM;AAAA,QACJ;AAAA,QACA,OAAO;AAAA,QACP,WAAW;AAAA,QACX,aAAa,oBAAI,KAAK;AAAA,QACtB;AAAA,QACA,OAAO,SAAS;AAAA,MAClB;AAAA,IACF,CAAC;AAED,WAAO,KAAK,6BAA6B;AAAA,MACvC;AAAA,MACA;AAAA,MACA,WAAW,WAAW;AAAA,MACtB,UAAU,KAAK,IAAI,IAAI;AAAA,IACzB,CAAC;AAED,WAAO,aAAa,KAAK;AAAA,MACvB,SAAS;AAAA,MACT,MAAM;AAAA,MACN,UAAU;AAAA,QACR,oBAAoB,KAAK,IAAI,IAAI;AAAA,QACjC,YAAY,QAAQ,IAAI;AAAA,QACxB,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MACpC;AAAA,IACF,CAAC;AAAA,EACH,SAAS,OAAO;AACd,WAAO,MAAM,sCAAsC;AAAA,MACjD,OACE,iBAAiB,QACb;AAAA,QACE,SAAS,MAAM;AAAA,QACf,OAAO,MAAM;AAAA,MACf,IACA;AAAA,IACR,CAAC;AACD,WAAO,aAAa;AAAA,MAClB,EAAE,SAAS,OAAO,OAAO,qCAAqC;AAAA,MAC9D,EAAE,QAAQ,IAAI;AAAA,IAChB;AAAA,EACF;AACF;AAEA,sBAAsB,IAAI,KAAyC;AACjE,MAAI;AACF,UAAM,MAAM,IAAI,IAAI,IAAI,GAAG;AAC3B,UAAM,SAAS,IAAI,aAAa,IAAI,QAAQ;AAC5C,UAAM,QAAQ,SAAS,IAAI,aAAa,IAAI,OAAO,KAAK,IAAI;AAE5D,UAAM,UAAU,MAAM,OAAO,OAAO,SAAS;AAAA,MAC3C,OAAO;AAAA,QACL,WAAW,WAAW;AAAA,QACtB,UAAU;AAAA,UACR,MAAM,CAAC,QAAQ;AAAA,UACf,QAAQ,UAAU;AAAA,QACpB;AAAA,MACF;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,MACb;AAAA,MACA,MAAM;AAAA,IACR,CAAC;AAED,WAAO,aAAa,KAAK;AAAA,MACvB,SAAS;AAAA,MACT,MAAM;AAAA,MACN,UAAU;AAAA,QACR,OAAO,QAAQ;AAAA,QACf;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,SAAS,OAAO;AACd,WAAO,MAAM,mCAAmC,EAAE,MAAM,CAAC;AACzD,WAAO,aAAa;AAAA,MAClB,EAAE,SAAS,OAAO,OAAO,kCAAkC;AAAA,MAC3D,EAAE,QAAQ,IAAI;AAAA,IAChB;AAAA,EACF;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"9cafc8561def7e11f4f8dfd87df2a0a44246a8b4"}}