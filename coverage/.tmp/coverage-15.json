{"/workspaces/sophra/src/lib/cortex/feedback/ab-testing.ts":{"path":"/workspaces/sophra/src/lib/cortex/feedback/ab-testing.ts","statementMap":{"0":{"start":{"line":14,"column":4},"end":{"line":14,"column":32}},"1":{"start":{"line":15,"column":4},"end":{"line":15,"column":32}},"2":{"start":{"line":16,"column":4},"end":{"line":16,"column":34}},"3":{"start":{"line":30,"column":4},"end":{"line":32,"column":5}},"4":{"start":{"line":31,"column":6},"end":{"line":31,"column":45}},"5":{"start":{"line":33,"column":17},"end":{"line":40,"column":6}},"6":{"start":{"line":41,"column":4},"end":{"line":43,"column":5}},"7":{"start":{"line":42,"column":6},"end":{"line":42,"column":64}},"8":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"9":{"start":{"line":45,"column":6},"end":{"line":45,"column":70}},"10":{"start":{"line":47,"column":4},"end":{"line":55,"column":6}},"11":{"start":{"line":49,"column":62},"end":{"line":53,"column":7}},"12":{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},"13":{"start":{"line":71,"column":6},"end":{"line":71,"column":61}},"14":{"start":{"line":73,"column":17},"end":{"line":73,"column":49}},"15":{"start":{"line":74,"column":20},"end":{"line":74,"column":65}},"16":{"start":{"line":74,"column":46},"end":{"line":74,"column":64}},"17":{"start":{"line":75,"column":4},"end":{"line":77,"column":5}},"18":{"start":{"line":76,"column":6},"end":{"line":76,"column":74}},"19":{"start":{"line":78,"column":4},"end":{"line":82,"column":6}},"20":{"start":{"line":96,"column":4},"end":{"line":98,"column":5}},"21":{"start":{"line":97,"column":6},"end":{"line":97,"column":46}},"22":{"start":{"line":99,"column":28},"end":{"line":102,"column":5}},"23":{"start":{"line":100,"column":18},"end":{"line":100,"column":43}},"24":{"start":{"line":103,"column":4},"end":{"line":110,"column":5}},"25":{"start":{"line":104,"column":29},"end":{"line":104,"column":53}},"26":{"start":{"line":105,"column":6},"end":{"line":105,"column":66}},"27":{"start":{"line":105,"column":35},"end":{"line":105,"column":64}},"28":{"start":{"line":106,"column":11},"end":{"line":110,"column":5}},"29":{"start":{"line":107,"column":6},"end":{"line":109,"column":8}},"30":{"start":{"line":108,"column":15},"end":{"line":108,"column":67}},"31":{"start":{"line":111,"column":19},"end":{"line":111,"column":32}},"32":{"start":{"line":112,"column":21},"end":{"line":112,"column":22}},"33":{"start":{"line":113,"column":4},"end":{"line":118,"column":5}},"34":{"start":{"line":114,"column":6},"end":{"line":114,"column":39}},"35":{"start":{"line":115,"column":6},"end":{"line":117,"column":7}},"36":{"start":{"line":116,"column":8},"end":{"line":116,"column":23}},"37":{"start":{"line":119,"column":4},"end":{"line":119,"column":28}},"38":{"start":{"line":133,"column":4},"end":{"line":135,"column":5}},"39":{"start":{"line":134,"column":6},"end":{"line":134,"column":61}},"40":{"start":{"line":136,"column":4},"end":{"line":187,"column":5}},"41":{"start":{"line":137,"column":23},"end":{"line":142,"column":8}},"42":{"start":{"line":143,"column":6},"end":{"line":150,"column":7}},"43":{"start":{"line":144,"column":8},"end":{"line":148,"column":11}},"44":{"start":{"line":149,"column":8},"end":{"line":149,"column":59}},"45":{"start":{"line":151,"column":19},"end":{"line":151,"column":51}},"46":{"start":{"line":152,"column":6},"end":{"line":162,"column":7}},"47":{"start":{"line":153,"column":8},"end":{"line":160,"column":10}},"48":{"start":{"line":161,"column":8},"end":{"line":161,"column":32}},"49":{"start":{"line":163,"column":22},"end":{"line":163,"column":46}},"50":{"start":{"line":164,"column":6},"end":{"line":171,"column":9}},"51":{"start":{"line":172,"column":6},"end":{"line":176,"column":9}},"52":{"start":{"line":177,"column":6},"end":{"line":177,"column":21}},"53":{"start":{"line":179,"column":6},"end":{"line":185,"column":9}},"54":{"start":{"line":186,"column":6},"end":{"line":186,"column":18}},"55":{"start":{"line":203,"column":4},"end":{"line":226,"column":5}},"56":{"start":{"line":204,"column":6},"end":{"line":212,"column":9}},"57":{"start":{"line":213,"column":6},"end":{"line":222,"column":9}},"58":{"start":{"line":224,"column":6},"end":{"line":224,"column":76}},"59":{"start":{"line":225,"column":6},"end":{"line":225,"column":18}},"60":{"start":{"line":229,"column":4},"end":{"line":238,"column":7}},"61":{"start":{"line":241,"column":4},"end":{"line":262,"column":5}},"62":{"start":{"line":242,"column":19},"end":{"line":253,"column":8}},"63":{"start":{"line":254,"column":6},"end":{"line":257,"column":7}},"64":{"start":{"line":255,"column":8},"end":{"line":255,"column":70}},"65":{"start":{"line":256,"column":8},"end":{"line":256,"column":20}},"66":{"start":{"line":258,"column":6},"end":{"line":258,"column":18}},"67":{"start":{"line":260,"column":6},"end":{"line":260,"column":71}},"68":{"start":{"line":261,"column":6},"end":{"line":261,"column":18}},"69":{"start":{"line":265,"column":4},"end":{"line":277,"column":7}},"70":{"start":{"line":280,"column":20},"end":{"line":287,"column":6}},"71":{"start":{"line":288,"column":4},"end":{"line":297,"column":6}},"72":{"start":{"line":289,"column":24},"end":{"line":295,"column":7}},"73":{"start":{"line":300,"column":4},"end":{"line":307,"column":6}},"74":{"start":{"line":310,"column":20},"end":{"line":321,"column":6}},"75":{"start":{"line":322,"column":4},"end":{"line":328,"column":6}},"76":{"start":{"line":331,"column":4},"end":{"line":340,"column":6}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":13,"column":2},"end":{"line":13,"column":3}},"loc":{"start":{"line":13,"column":22},"end":{"line":17,"column":3}},"line":13},"1":{"name":"(anonymous_1)","decl":{"start":{"line":29,"column":2},"end":{"line":29,"column":3}},"loc":{"start":{"line":29,"column":30},"end":{"line":56,"column":3}},"line":29},"2":{"name":"(anonymous_2)","decl":{"start":{"line":49,"column":48},"end":{"line":49,"column":49}},"loc":{"start":{"line":49,"column":62},"end":{"line":53,"column":7}},"line":49},"3":{"name":"(anonymous_3)","decl":{"start":{"line":69,"column":2},"end":{"line":69,"column":3}},"loc":{"start":{"line":69,"column":38},"end":{"line":83,"column":3}},"line":69},"4":{"name":"(anonymous_4)","decl":{"start":{"line":74,"column":39},"end":{"line":74,"column":40}},"loc":{"start":{"line":74,"column":46},"end":{"line":74,"column":64}},"line":74},"5":{"name":"(anonymous_5)","decl":{"start":{"line":95,"column":2},"end":{"line":95,"column":3}},"loc":{"start":{"line":95,"column":22},"end":{"line":120,"column":3}},"line":95},"6":{"name":"(anonymous_6)","decl":{"start":{"line":100,"column":6},"end":{"line":100,"column":7}},"loc":{"start":{"line":100,"column":18},"end":{"line":100,"column":43}},"line":100},"7":{"name":"(anonymous_7)","decl":{"start":{"line":105,"column":28},"end":{"line":105,"column":29}},"loc":{"start":{"line":105,"column":35},"end":{"line":105,"column":64}},"line":105},"8":{"name":"(anonymous_8)","decl":{"start":{"line":108,"column":8},"end":{"line":108,"column":9}},"loc":{"start":{"line":108,"column":15},"end":{"line":108,"column":67}},"line":108},"9":{"name":"(anonymous_9)","decl":{"start":{"line":132,"column":2},"end":{"line":132,"column":3}},"loc":{"start":{"line":132,"column":41},"end":{"line":188,"column":3}},"line":132},"10":{"name":"(anonymous_10)","decl":{"start":{"line":202,"column":2},"end":{"line":202,"column":3}},"loc":{"start":{"line":202,"column":34},"end":{"line":227,"column":3}},"line":202},"11":{"name":"(anonymous_11)","decl":{"start":{"line":228,"column":2},"end":{"line":228,"column":3}},"loc":{"start":{"line":228,"column":27},"end":{"line":239,"column":3}},"line":228},"12":{"name":"(anonymous_12)","decl":{"start":{"line":240,"column":2},"end":{"line":240,"column":3}},"loc":{"start":{"line":240,"column":28},"end":{"line":263,"column":3}},"line":240},"13":{"name":"(anonymous_13)","decl":{"start":{"line":264,"column":2},"end":{"line":264,"column":3}},"loc":{"start":{"line":264,"column":30},"end":{"line":278,"column":3}},"line":264},"14":{"name":"(anonymous_14)","decl":{"start":{"line":279,"column":2},"end":{"line":279,"column":3}},"loc":{"start":{"line":279,"column":33},"end":{"line":298,"column":3}},"line":279},"15":{"name":"(anonymous_15)","decl":{"start":{"line":289,"column":6},"end":{"line":289,"column":7}},"loc":{"start":{"line":289,"column":24},"end":{"line":295,"column":7}},"line":289},"16":{"name":"(anonymous_16)","decl":{"start":{"line":299,"column":2},"end":{"line":299,"column":3}},"loc":{"start":{"line":299,"column":38},"end":{"line":308,"column":3}},"line":299},"17":{"name":"(anonymous_17)","decl":{"start":{"line":309,"column":2},"end":{"line":309,"column":3}},"loc":{"start":{"line":309,"column":67},"end":{"line":329,"column":3}},"line":309},"18":{"name":"(anonymous_18)","decl":{"start":{"line":330,"column":2},"end":{"line":330,"column":3}},"loc":{"start":{"line":330,"column":44},"end":{"line":341,"column":3}},"line":330}},"branchMap":{"0":{"loc":{"start":{"line":30,"column":4},"end":{"line":32,"column":5}},"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":32,"column":5}},{"start":{},"end":{}}],"line":30},"1":{"loc":{"start":{"line":41,"column":4},"end":{"line":43,"column":5}},"type":"if","locations":[{"start":{"line":41,"column":4},"end":{"line":43,"column":5}},{"start":{},"end":{}}],"line":41},"2":{"loc":{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":46,"column":5}},{"start":{},"end":{}}],"line":44},"3":{"loc":{"start":{"line":44,"column":8},"end":{"line":44,"column":84}},"type":"binary-expr","locations":[{"start":{"line":44,"column":8},"end":{"line":44,"column":37}},{"start":{"line":44,"column":41},"end":{"line":44,"column":84}}],"line":44},"4":{"loc":{"start":{"line":51,"column":20},"end":{"line":51,"column":43}},"type":"binary-expr","locations":[{"start":{"line":51,"column":20},"end":{"line":51,"column":38}},{"start":{"line":51,"column":42},"end":{"line":51,"column":43}}],"line":51},"5":{"loc":{"start":{"line":52,"column":17},"end":{"line":52,"column":38}},"type":"binary-expr","locations":[{"start":{"line":52,"column":17},"end":{"line":52,"column":32}},{"start":{"line":52,"column":36},"end":{"line":52,"column":38}}],"line":52},"6":{"loc":{"start":{"line":54,"column":25},"end":{"line":54,"column":66}},"type":"binary-expr","locations":[{"start":{"line":54,"column":25},"end":{"line":54,"column":61}},{"start":{"line":54,"column":65},"end":{"line":54,"column":66}}],"line":54},"7":{"loc":{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},{"start":{},"end":{}}],"line":70},"8":{"loc":{"start":{"line":70,"column":8},"end":{"line":70,"column":29}},"type":"binary-expr","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":15}},{"start":{"line":70,"column":19},"end":{"line":70,"column":29}}],"line":70},"9":{"loc":{"start":{"line":75,"column":4},"end":{"line":77,"column":5}},"type":"if","locations":[{"start":{"line":75,"column":4},"end":{"line":77,"column":5}},{"start":{},"end":{}}],"line":75},"10":{"loc":{"start":{"line":80,"column":18},"end":{"line":80,"column":41}},"type":"binary-expr","locations":[{"start":{"line":80,"column":18},"end":{"line":80,"column":36}},{"start":{"line":80,"column":40},"end":{"line":80,"column":41}}],"line":80},"11":{"loc":{"start":{"line":81,"column":15},"end":{"line":81,"column":36}},"type":"binary-expr","locations":[{"start":{"line":81,"column":15},"end":{"line":81,"column":30}},{"start":{"line":81,"column":34},"end":{"line":81,"column":36}}],"line":81},"12":{"loc":{"start":{"line":96,"column":4},"end":{"line":98,"column":5}},"type":"if","locations":[{"start":{"line":96,"column":4},"end":{"line":98,"column":5}},{"start":{},"end":{}}],"line":96},"13":{"loc":{"start":{"line":96,"column":8},"end":{"line":96,"column":52}},"type":"binary-expr","locations":[{"start":{"line":96,"column":8},"end":{"line":96,"column":22}},{"start":{"line":96,"column":26},"end":{"line":96,"column":52}}],"line":96},"14":{"loc":{"start":{"line":100,"column":25},"end":{"line":100,"column":42}},"type":"binary-expr","locations":[{"start":{"line":100,"column":25},"end":{"line":100,"column":37}},{"start":{"line":100,"column":41},"end":{"line":100,"column":42}}],"line":100},"15":{"loc":{"start":{"line":103,"column":4},"end":{"line":110,"column":5}},"type":"if","locations":[{"start":{"line":103,"column":4},"end":{"line":110,"column":5}},{"start":{"line":106,"column":11},"end":{"line":110,"column":5}}],"line":103},"16":{"loc":{"start":{"line":106,"column":11},"end":{"line":110,"column":5}},"type":"if","locations":[{"start":{"line":106,"column":11},"end":{"line":110,"column":5}},{"start":{},"end":{}}],"line":106},"17":{"loc":{"start":{"line":108,"column":31},"end":{"line":108,"column":48}},"type":"binary-expr","locations":[{"start":{"line":108,"column":31},"end":{"line":108,"column":43}},{"start":{"line":108,"column":47},"end":{"line":108,"column":48}}],"line":108},"18":{"loc":{"start":{"line":115,"column":6},"end":{"line":117,"column":7}},"type":"if","locations":[{"start":{"line":115,"column":6},"end":{"line":117,"column":7}},{"start":{},"end":{}}],"line":115},"19":{"loc":{"start":{"line":133,"column":4},"end":{"line":135,"column":5}},"type":"if","locations":[{"start":{"line":133,"column":4},"end":{"line":135,"column":5}},{"start":{},"end":{}}],"line":133},"20":{"loc":{"start":{"line":133,"column":8},"end":{"line":133,"column":29}},"type":"binary-expr","locations":[{"start":{"line":133,"column":8},"end":{"line":133,"column":18}},{"start":{"line":133,"column":22},"end":{"line":133,"column":29}}],"line":133},"21":{"loc":{"start":{"line":143,"column":6},"end":{"line":150,"column":7}},"type":"if","locations":[{"start":{"line":143,"column":6},"end":{"line":150,"column":7}},{"start":{},"end":{}}],"line":143},"22":{"loc":{"start":{"line":152,"column":6},"end":{"line":162,"column":7}},"type":"if","locations":[{"start":{"line":152,"column":6},"end":{"line":162,"column":7}},{"start":{},"end":{}}],"line":152},"23":{"loc":{"start":{"line":183,"column":19},"end":{"line":183,"column":69}},"type":"cond-expr","locations":[{"start":{"line":183,"column":44},"end":{"line":183,"column":54}},{"start":{"line":183,"column":57},"end":{"line":183,"column":69}}],"line":183},"24":{"loc":{"start":{"line":184,"column":17},"end":{"line":184,"column":71}},"type":"cond-expr","locations":[{"start":{"line":184,"column":42},"end":{"line":184,"column":55}},{"start":{"line":184,"column":58},"end":{"line":184,"column":71}}],"line":184},"25":{"loc":{"start":{"line":254,"column":6},"end":{"line":257,"column":7}},"type":"if","locations":[{"start":{"line":254,"column":6},"end":{"line":257,"column":7}},{"start":{},"end":{}}],"line":254},"26":{"loc":{"start":{"line":292,"column":28},"end":{"line":292,"column":50}},"type":"binary-expr","locations":[{"start":{"line":292,"column":28},"end":{"line":292,"column":45}},{"start":{"line":292,"column":49},"end":{"line":292,"column":50}}],"line":292}},"s":{"0":11,"1":11,"2":11,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0},"f":{"0":11,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/feedback/ab-testing.ts"],"sourcesContent":["import type { MetricsService } from \"@/lib/cortex/monitoring/metrics\";\nimport type { Logger } from \"@/lib/shared/types\";\nimport type { ExperimentStatus, PrismaClient } from \"@prisma/client\";\n\n/**\n * 🧪 A/B Test Configuration: Your Experiment Blueprint\n *\n * All the details needed to run a search experiment.\n * Like a recipe for testing different search approaches! 🔬\n *\n * @interface ABTestConfig\n * @property {string} id - Unique test identifier\n * @property {string} name - What we're testing\n * @property {SearchVariant[]} variants - Different versions to test\n * @property {Date} startDate - When to start testing\n * @property {Date} endDate - When to stop testing\n * @property {number} trafficAllocation - How many users to include (0-1)\n */\ninterface ABTestConfig {\n  id: string;\n  name: string;\n  variants: SearchVariant[];\n  startDate: Date;\n  endDate: Date;\n  trafficAllocation: number;\n}\n\n/**\n * 🔄 Search Variant: A Different Way to Search\n *\n * One version of search we want to test.\n * Like trying a different recipe to make the same dish! 🍳\n *\n * @interface SearchVariant\n * @property {string} id - Unique variant identifier\n * @property {string} name - What makes this version special\n * @property {Record<string, number>} weights - How important different factors are\n * @property {number} allocation - How many users should try this version (0-1)\n */\ninterface SearchVariant {\n  id: string;\n  name: string;\n  weights: Record<string, number>;\n  allocation: number;\n}\n\n/**\n * 📋 A/B Test Record: Test Details in the Database\n *\n * How we store test information.\n * Like keeping a lab notebook of our experiments! 📔\n *\n * @interface ABTestRecord\n */\ninterface ABTestRecord {\n  id: string;\n  name: string;\n  description?: string;\n  startDate: Date;\n  endDate: Date;\n  status: string;\n  configuration: {\n    variants: SearchVariant[];\n    trafficAllocation: number;\n  };\n}\n\n/**\n * 🧪 Search A/B Testing Service: Your Experiment Lab!\n *\n * This service helps us run controlled experiments to make search better.\n * Think of it as a scientific laboratory for improving search! 🔬\n *\n * Features:\n * - 🎯 Runs controlled experiments\n * - 🎲 Fairly assigns users to test groups\n * - 📊 Tracks experiment results\n * - 📈 Measures improvements\n * - 🔄 Manages test lifecycles\n *\n * @class SearchABTestingService\n */\nexport class SearchABTestingService {\n  private readonly logger: Logger;\n  private readonly prisma: PrismaClient;\n  private readonly metrics: MetricsService;\n\n  /**\n   * 🎒 Sets Up Your Testing Lab\n   *\n   * Gets everything ready to run experiments.\n   * Like preparing all your lab equipment! 🧪\n   *\n   * @param {Object} config - Everything we need to run tests\n   * @param {Logger} config.logger - Our lab notebook\n   * @param {PrismaClient} config.prisma - Our data storage\n   * @param {MetricsService} config.metrics - Our measuring tools\n   */\n  constructor(config: {\n    logger: Logger;\n    prisma: PrismaClient;\n    metrics: MetricsService;\n  }) {\n    this.logger = config.logger;\n    this.prisma = config.prisma;\n    this.metrics = config.metrics;\n  }\n\n  /**\n   * 🔍 Finds an Active Test\n   *\n   * Looks up details about a running experiment.\n   * Like checking what's currently in your test tubes! 🧪\n   *\n   * @private\n   * @param {string} testId - Which test to look for\n   * @returns {Promise<ABTestConfig>} The test details\n   * @throws {Error} If the test isn't found or is invalid\n   */\n  private async getActiveTest(testId: string): Promise<ABTestConfig> {\n    if (!testId) {\n      throw new Error(\"Test ID is required\");\n    }\n\n    const test = (await this.prisma.aBTest.findFirst({\n      where: {\n        id: testId,\n        status: \"ACTIVE\",\n        startDate: { lte: new Date() },\n        endDate: { gte: new Date() },\n      },\n    })) as unknown as ABTestRecord;\n\n    if (!test) {\n      throw new Error(`No active test found for ID: ${testId}`);\n    }\n\n    if (\n      !test.configuration?.variants ||\n      !Array.isArray(test.configuration.variants)\n    ) {\n      throw new Error(`Invalid test configuration for ID: ${testId}`);\n    }\n\n    return {\n      ...test,\n      variants: test.configuration.variants.map((variant) => ({\n        ...variant,\n        allocation: variant.allocation || 0,\n        weights: variant.weights || {},\n      })),\n      trafficAllocation: test.configuration.trafficAllocation || 1,\n    };\n  }\n\n  /**\n   * 🔎 Gets a Specific Test Version\n   *\n   * Finds details about one version of a test.\n   * Like examining one specific sample in your lab! 🔬\n   *\n   * @private\n   * @param {string} testId - Which test to look in\n   * @param {string} variantId - Which version to find\n   * @returns {Promise<SearchVariant>} The version details\n   * @throws {Error} If the version isn't found\n   */\n  private async getVariant(\n    testId: string,\n    variantId: string\n  ): Promise<SearchVariant> {\n    if (!testId || !variantId) {\n      throw new Error(\"Test ID and variant ID are required\");\n    }\n\n    const test = await this.getActiveTest(testId);\n    const variant = test.variants.find((v) => v.id === variantId);\n\n    if (!variant) {\n      throw new Error(`Variant ${variantId} not found in test ${testId}`);\n    }\n\n    return {\n      ...variant,\n      allocation: variant.allocation || 0,\n      weights: variant.weights || {},\n    };\n  }\n\n  /**\n   * 🎲 Picks a Test Version\n   *\n   * Fairly chooses which version a user should see.\n   * Like randomly selecting a test tube for your experiment! 🧪\n   *\n   * @private\n   * @param {ABTestConfig} test - The test to pick from\n   * @returns {SearchVariant} The chosen version\n   * @throws {Error} If there are no versions to pick from\n   */\n  private selectVariant(test: ABTestConfig): SearchVariant {\n    if (!test.variants || test.variants.length === 0) {\n      throw new Error(\"Test has no variants\");\n    }\n\n    // Normalize allocations if they don't sum to 1\n    const totalAllocation = test.variants.reduce(\n      (sum, v) => sum + (v.allocation || 0),\n      0\n    );\n    if (totalAllocation === 0) {\n      // If no allocations set, distribute evenly\n      const evenAllocation = 1 / test.variants.length;\n      test.variants.forEach((v) => (v.allocation = evenAllocation));\n    } else if (totalAllocation !== 1) {\n      // Normalize to sum to 1\n      test.variants.forEach(\n        (v) => (v.allocation = (v.allocation || 0) / totalAllocation)\n      );\n    }\n\n    const random = Math.random();\n    let cumulative = 0;\n\n    for (const variant of test.variants) {\n      cumulative += variant.allocation;\n      if (random <= cumulative) {\n        return variant;\n      }\n    }\n\n    return test.variants[0];\n  }\n\n  /**\n   * 🎯 Assigns a User to a Test Version\n   *\n   * Decides which version of search a user should see.\n   * Like assigning a participant to a test group! 👥\n   *\n   * @param {string} sessionId - Which user we're assigning\n   * @param {string} testId - Which test we're running\n   * @returns {Promise<SearchVariant>} The assigned version\n   * @throws {Error} If something goes wrong during assignment\n   */\n  async assignVariant(\n    sessionId: string,\n    testId: string\n  ): Promise<SearchVariant> {\n    if (!sessionId || !testId) {\n      throw new Error(\"Session ID and test ID are required\");\n    }\n\n    try {\n      // First check if this session already has an assignment\n      const existing = await this.prisma.aBTestAssignment.findFirst({\n        where: {\n          sessionId,\n          testId,\n        },\n      });\n\n      if (existing) {\n        this.logger.debug(\"Found existing variant assignment\", {\n          sessionId,\n          testId,\n          variantId: existing.variantId,\n        });\n        return this.getVariant(testId, existing.variantId);\n      }\n\n      // Get active test configuration\n      const test = await this.getActiveTest(testId);\n\n      // Check if user should be included in test based on traffic allocation\n      if (Math.random() > test.trafficAllocation) {\n        this.logger.debug(\n          \"Session excluded from test based on traffic allocation\",\n          {\n            sessionId,\n            testId,\n            allocation: test.trafficAllocation,\n          }\n        );\n        // Return default variant\n        return test.variants[0];\n      }\n\n      // Select a variant\n      const variant = this.selectVariant(test);\n\n      // Create assignment record\n      await this.prisma.aBTestAssignment.create({\n        data: {\n          sessionId,\n          testId,\n          variantId: variant.id,\n          timestamp: new Date(),\n        },\n      });\n\n      this.logger.debug(\"Created new variant assignment\", {\n        sessionId,\n        testId,\n        variantId: variant.id,\n      });\n\n      return variant;\n    } catch (error) {\n      this.logger.error(\"Failed to assign test variant\", {\n        error,\n        sessionId,\n        testId,\n        errorType: error instanceof Error ? error.name : typeof error,\n        message: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * 📊 Records Test Results\n   *\n   * Saves how well each version is performing.\n   * Like recording the results of your experiment! 📈\n   *\n   * @param {Object} data - The test results\n   * @param {string} data.testId - Which test these results are for\n   * @param {string} data.variantId - Which version these results are for\n   * @param {string} data.queryHash - Which search query was tested\n   * @param {Object} data.metrics - How well it performed\n   * @throws {Error} If something goes wrong while saving\n   */\n  async trackVariantMetrics(data: {\n    testId: string;\n    variantId: string;\n    queryHash: string;\n    metrics: {\n      clickThroughRate: number;\n      averageRelevance: number;\n      conversionRate: number;\n    };\n  }): Promise<void> {\n    try {\n      await this.prisma.aBTestMetrics.create({\n        data: {\n          testId: data.testId,\n          variantId: data.variantId,\n          queryHash: data.queryHash,\n          metrics: data.metrics,\n          timestamp: new Date(),\n        },\n      });\n      // Update Prometheus metrics\n      this.metrics.updateABTestMetrics({\n        test_id: data.testId,\n        variant_id: data.variantId,\n        query_hash: data.queryHash,\n        metrics: {\n          clickThroughRate: data.metrics.clickThroughRate,\n          averageRelevance: data.metrics.averageRelevance,\n          conversionRate: data.metrics.conversionRate,\n        },\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to track variant metrics\", { error, data });\n      throw error;\n    }\n  }\n\n  async createTest(params: {\n    name: string;\n    description?: string;\n    startDate: Date;\n    endDate: Date;\n    status: string;\n    configuration: {\n      variants: SearchVariant[];\n    };\n  }): Promise<ABTestRecord> {\n    return (await this.prisma.aBTest.create({\n      data: {\n        name: params.name,\n        description: params.description,\n        startDate: params.startDate,\n        endDate: params.endDate,\n        status: params.status as ExperimentStatus,\n        configuration: JSON.parse(JSON.stringify(params.configuration)),\n      },\n    })) as unknown as ABTestRecord;\n  }\n\n  async getTestByName(name: string): Promise<ABTestRecord | null> {\n    try {\n      const test = await this.prisma.aBTest.findFirst({\n        where: {\n          name,\n          status: \"ACTIVE\",\n          startDate: {\n            lte: new Date(),\n          },\n          endDate: {\n            gte: new Date(),\n          },\n        },\n      });\n\n      if (!test) {\n        this.logger.debug(\"No active test found with name\", { name });\n        return null;\n      }\n\n      return test as unknown as ABTestRecord;\n    } catch (error) {\n      this.logger.error(\"Failed to get test by name\", { error, name });\n      throw error;\n    }\n  }\n\n  async trackConversion(data: ConversionEvent): Promise<void> {\n    await this.prisma.aBTestMetric.create({\n      data: {\n        test: {\n          connect: { id: data.testId },\n        },\n        session: {\n          connect: { id: data.sessionId },\n        },\n        variantId: data.variantId,\n        eventType: data.event,\n        value: data.value,\n      },\n    });\n  }\n\n  async calculateMetrics(testId: string): Promise<MetricsResult> {\n    const metrics = await this.prisma.aBTestMetric.groupBy({\n      by: [\"variantId\"],\n      where: { testId },\n      _count: true,\n      _sum: {\n        value: true,\n      },\n    });\n\n    return metrics.reduce(\n      (acc, metric) => ({\n        ...acc,\n        [metric.variantId]: {\n          conversion_rate: (metric._sum.value || 0) / metric._count,\n          sample_size: metric._count,\n        },\n      }),\n      {}\n    );\n  }\n\n  async calculateSignificance(testId: string): Promise<SignificanceResult> {\n    // Implement statistical significance calculation\n    // This is a simplified example\n    return {\n      pValue: 0.05,\n      significant: true,\n      confidenceInterval: {\n        lower: 0.1,\n        upper: 0.2,\n      },\n    };\n  }\n\n  async getTimeSeriesMetrics(\n    testId: string,\n    startDate: Date,\n    endDate: Date,\n    interval: string\n  ): Promise<TimeSeriesMetrics> {\n    const metrics = await this.prisma.aBTestMetric.findMany({\n      where: {\n        testId,\n        timestamp: {\n          gte: startDate,\n          lte: endDate,\n        },\n      },\n      orderBy: {\n        timestamp: \"asc\",\n      },\n    });\n\n    // Process metrics into time series format\n    return {\n      dates: [],\n      metrics: {\n        control: [],\n        variant_a: [],\n      },\n    };\n  }\n\n  async getSegmentMetrics(\n    testId: string,\n    segments: Record<string, string[]>\n  ): Promise<SegmentMetrics> {\n    // Return segmented metrics analysis\n    return {\n      userType: {\n        new: {},\n        returning: {},\n      },\n      device: {\n        mobile: {},\n        desktop: {},\n      },\n    };\n  }\n}\n\ninterface ConversionEvent {\n  testId: string;\n  variantId: string;\n  sessionId: string;\n  event: string;\n  value: number;\n}\n\ninterface MetricsResult {\n  [variantId: string]: {\n    conversion_rate: number;\n    sample_size: number;\n  };\n}\n\ninterface SignificanceResult {\n  pValue: number;\n  significant: boolean;\n  confidenceInterval: {\n    lower: number;\n    upper: number;\n  };\n}\n\ninterface TimeSeriesMetrics {\n  dates: Date[];\n  metrics: {\n    [variantId: string]: number[];\n  };\n}\n\ninterface SegmentMetrics {\n  [segmentType: string]: {\n    [segmentValue: string]: {\n      conversion_rate?: number;\n      sample_size?: number;\n      confidence_interval?: {\n        lower: number;\n        upper: number;\n      };\n    };\n  };\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3109152a52983d52b22a4c7fe445d8830cd46f78"},"/workspaces/sophra/src/lib/cortex/feedback/automated-processor.ts":{"path":"/workspaces/sophra/src/lib/cortex/feedback/automated-processor.ts","statementMap":{"0":{"start":{"line":14,"column":4},"end":{"line":14,"column":32}},"1":{"start":{"line":15,"column":4},"end":{"line":15,"column":32}},"2":{"start":{"line":16,"column":4},"end":{"line":16,"column":46}},"3":{"start":{"line":17,"column":4},"end":{"line":17,"column":34}},"4":{"start":{"line":29,"column":4},"end":{"line":68,"column":5}},"5":{"start":{"line":30,"column":29},"end":{"line":51,"column":8}},"6":{"start":{"line":52,"column":27},"end":{"line":52,"column":71}},"7":{"start":{"line":53,"column":22},"end":{"line":53,"column":65}},"8":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"9":{"start":{"line":55,"column":8},"end":{"line":55,"column":52}},"10":{"start":{"line":57,"column":6},"end":{"line":61,"column":9}},"11":{"start":{"line":63,"column":6},"end":{"line":66,"column":9}},"12":{"start":{"line":67,"column":6},"end":{"line":67,"column":18}},"13":{"start":{"line":81,"column":4},"end":{"line":88,"column":5}},"14":{"start":{"line":82,"column":6},"end":{"line":87,"column":8}},"15":{"start":{"line":89,"column":19},"end":{"line":89,"column":76}},"16":{"start":{"line":89,"column":42},"end":{"line":89,"column":68}},"17":{"start":{"line":90,"column":24},"end":{"line":92,"column":12}},"18":{"start":{"line":91,"column":13},"end":{"line":91,"column":41}},"19":{"start":{"line":93,"column":27},"end":{"line":96,"column":5}},"20":{"start":{"line":94,"column":18},"end":{"line":94,"column":40}},"21":{"start":{"line":97,"column":18},"end":{"line":97,"column":33}},"22":{"start":{"line":98,"column":20},"end":{"line":103,"column":5}},"23":{"start":{"line":104,"column":4},"end":{"line":104,"column":98}},"24":{"start":{"line":105,"column":4},"end":{"line":105,"column":19}},"25":{"start":{"line":119,"column":4},"end":{"line":138,"column":5}},"26":{"start":{"line":120,"column":29},"end":{"line":120,"column":80}},"27":{"start":{"line":121,"column":30},"end":{"line":124,"column":7}},"28":{"start":{"line":125,"column":6},"end":{"line":125,"column":72}},"29":{"start":{"line":126,"column":6},"end":{"line":130,"column":9}},"30":{"start":{"line":132,"column":6},"end":{"line":136,"column":9}},"31":{"start":{"line":137,"column":6},"end":{"line":137,"column":18}},"32":{"start":{"line":151,"column":4},"end":{"line":151,"column":35}},"33":{"start":{"line":151,"column":25},"end":{"line":151,"column":35}},"34":{"start":{"line":152,"column":4},"end":{"line":162,"column":7}},"35":{"start":{"line":153,"column":22},"end":{"line":153,"column":38}},"36":{"start":{"line":154,"column":6},"end":{"line":161,"column":8}},"37":{"start":{"line":176,"column":24},"end":{"line":176,"column":45}},"38":{"start":{"line":177,"column":4},"end":{"line":179,"column":5}},"39":{"start":{"line":178,"column":6},"end":{"line":178,"column":60}},"40":{"start":{"line":180,"column":4},"end":{"line":182,"column":5}},"41":{"start":{"line":181,"column":6},"end":{"line":181,"column":64}},"42":{"start":{"line":183,"column":4},"end":{"line":183,"column":23}},"43":{"start":{"line":186,"column":27},"end":{"line":188,"column":5}},"44":{"start":{"line":187,"column":13},"end":{"line":187,"column":55}},"45":{"start":{"line":189,"column":21},"end":{"line":204,"column":7}},"46":{"start":{"line":189,"column":52},"end":{"line":204,"column":5}},"47":{"start":{"line":205,"column":4},"end":{"line":205,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":13,"column":2},"end":{"line":13,"column":3}},"loc":{"start":{"line":13,"column":22},"end":{"line":18,"column":3}},"line":13},"1":{"name":"(anonymous_1)","decl":{"start":{"line":28,"column":2},"end":{"line":28,"column":3}},"loc":{"start":{"line":28,"column":42},"end":{"line":69,"column":3}},"line":28},"2":{"name":"(anonymous_2)","decl":{"start":{"line":80,"column":2},"end":{"line":80,"column":3}},"loc":{"start":{"line":80,"column":37},"end":{"line":106,"column":3}},"line":80},"3":{"name":"(anonymous_3)","decl":{"start":{"line":89,"column":35},"end":{"line":89,"column":36}},"loc":{"start":{"line":89,"column":42},"end":{"line":89,"column":68}},"line":89},"4":{"name":"(anonymous_4)","decl":{"start":{"line":91,"column":6},"end":{"line":91,"column":7}},"loc":{"start":{"line":91,"column":13},"end":{"line":91,"column":41}},"line":91},"5":{"name":"(anonymous_5)","decl":{"start":{"line":94,"column":6},"end":{"line":94,"column":7}},"loc":{"start":{"line":94,"column":18},"end":{"line":94,"column":40}},"line":94},"6":{"name":"(anonymous_6)","decl":{"start":{"line":118,"column":2},"end":{"line":118,"column":3}},"loc":{"start":{"line":118,"column":41},"end":{"line":139,"column":3}},"line":118},"7":{"name":"(anonymous_7)","decl":{"start":{"line":150,"column":2},"end":{"line":150,"column":3}},"loc":{"start":{"line":150,"column":42},"end":{"line":163,"column":3}},"line":150},"8":{"name":"(anonymous_8)","decl":{"start":{"line":152,"column":30},"end":{"line":152,"column":31}},"loc":{"start":{"line":152,"column":44},"end":{"line":162,"column":5}},"line":152},"9":{"name":"(anonymous_9)","decl":{"start":{"line":175,"column":2},"end":{"line":175,"column":3}},"loc":{"start":{"line":175,"column":52},"end":{"line":184,"column":3}},"line":175},"10":{"name":"(anonymous_10)","decl":{"start":{"line":185,"column":2},"end":{"line":185,"column":3}},"loc":{"start":{"line":185,"column":32},"end":{"line":206,"column":3}},"line":185},"11":{"name":"(anonymous_11)","decl":{"start":{"line":187,"column":6},"end":{"line":187,"column":7}},"loc":{"start":{"line":187,"column":13},"end":{"line":187,"column":55}},"line":187},"12":{"name":"(anonymous_12)","decl":{"start":{"line":189,"column":40},"end":{"line":189,"column":41}},"loc":{"start":{"line":189,"column":52},"end":{"line":204,"column":5}},"line":189}},"branchMap":{"0":{"loc":{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},"type":"if","locations":[{"start":{"line":54,"column":6},"end":{"line":56,"column":7}},{"start":{},"end":{}}],"line":54},"1":{"loc":{"start":{"line":81,"column":4},"end":{"line":88,"column":5}},"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":88,"column":5}},{"start":{},"end":{}}],"line":81},"2":{"loc":{"start":{"line":104,"column":33},"end":{"line":104,"column":97}},"type":"binary-expr","locations":[{"start":{"line":104,"column":33},"end":{"line":104,"column":63}},{"start":{"line":104,"column":67},"end":{"line":104,"column":97}}],"line":104},"3":{"loc":{"start":{"line":151,"column":4},"end":{"line":151,"column":35}},"type":"if","locations":[{"start":{"line":151,"column":4},"end":{"line":151,"column":35}},{"start":{},"end":{}}],"line":151},"4":{"loc":{"start":{"line":158,"column":24},"end":{"line":158,"column":51}},"type":"binary-expr","locations":[{"start":{"line":158,"column":24},"end":{"line":158,"column":46}},{"start":{"line":158,"column":50},"end":{"line":158,"column":51}}],"line":158},"5":{"loc":{"start":{"line":159,"column":20},"end":{"line":159,"column":51}},"type":"binary-expr","locations":[{"start":{"line":159,"column":20},"end":{"line":159,"column":38}},{"start":{"line":159,"column":42},"end":{"line":159,"column":51}}],"line":159},"6":{"loc":{"start":{"line":177,"column":4},"end":{"line":179,"column":5}},"type":"if","locations":[{"start":{"line":177,"column":4},"end":{"line":179,"column":5}},{"start":{},"end":{}}],"line":177},"7":{"loc":{"start":{"line":178,"column":27},"end":{"line":178,"column":52}},"type":"binary-expr","locations":[{"start":{"line":178,"column":27},"end":{"line":178,"column":47}},{"start":{"line":178,"column":51},"end":{"line":178,"column":52}}],"line":178},"8":{"loc":{"start":{"line":180,"column":4},"end":{"line":182,"column":5}},"type":"if","locations":[{"start":{"line":180,"column":4},"end":{"line":182,"column":5}},{"start":{},"end":{}}],"line":180},"9":{"loc":{"start":{"line":181,"column":29},"end":{"line":181,"column":56}},"type":"binary-expr","locations":[{"start":{"line":181,"column":29},"end":{"line":181,"column":51}},{"start":{"line":181,"column":55},"end":{"line":181,"column":56}}],"line":181},"10":{"loc":{"start":{"line":195,"column":22},"end":{"line":195,"column":111}},"type":"cond-expr","locations":[{"start":{"line":195,"column":77},"end":{"line":195,"column":104}},{"start":{"line":195,"column":107},"end":{"line":195,"column":111}}],"line":195},"11":{"loc":{"start":{"line":195,"column":22},"end":{"line":195,"column":74}},"type":"binary-expr","locations":[{"start":{"line":195,"column":22},"end":{"line":195,"column":36}},{"start":{"line":195,"column":40},"end":{"line":195,"column":74}}],"line":195},"12":{"loc":{"start":{"line":196,"column":19},"end":{"line":196,"column":105}},"type":"cond-expr","locations":[{"start":{"line":196,"column":74},"end":{"line":196,"column":98}},{"start":{"line":196,"column":101},"end":{"line":196,"column":105}}],"line":196},"13":{"loc":{"start":{"line":196,"column":19},"end":{"line":196,"column":71}},"type":"binary-expr","locations":[{"start":{"line":196,"column":19},"end":{"line":196,"column":33}},{"start":{"line":196,"column":37},"end":{"line":196,"column":71}}],"line":196}},"s":{"0":11,"1":11,"2":11,"3":11,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0},"f":{"0":11,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/feedback/automated-processor.ts"],"sourcesContent":["import type { ElasticsearchService } from \"@/lib/cortex/elasticsearch/services\";\nimport type { MetricsService } from \"@/lib/cortex/monitoring/metrics\";\nimport { SearchEvent } from \"@/lib/shared/database/validation/generated\";\nimport type { Logger } from \"@/lib/shared/types\";\nimport type { PrismaClient } from \"@prisma/client\";\nimport {\n  LearningEvent,\n  LearningEventType,\n  LearningPattern,\n} from \"@prisma/client\";\nimport type { SearchFeedbackData } from \"./service\";\n\n/**\n * ⚙️ Automated Processor Configuration\n *\n * Everything our automated helper needs to do its job.\n * Like giving a robot all its tools and instructions! 🤖\n *\n * @interface AutomatedProcessorConfig\n * @property {Logger} logger - Takes notes about what's happening\n * @property {PrismaClient} prisma - Stores and retrieves data\n * @property {ElasticsearchService} elasticsearch - Handles search operations\n * @property {MetricsService} metrics - Tracks performance\n */\ninterface AutomatedProcessorConfig {\n  logger: Logger;\n  prisma: PrismaClient;\n  elasticsearch: ElasticsearchService;\n  metrics: MetricsService;\n}\n\n/**\n * 📊 Feedback Metrics: How Well Search is Working\n *\n * A collection of numbers that tell us if search is doing a good job.\n * Like a report card for our search system! 📈\n *\n * @interface FeedbackMetrics\n * @property {number} clickThroughRate - How often people click results\n * @property {number} averageRelevance - How good the results usually are\n * @property {number} conversionRate - How often people find what they need\n * @property {boolean} requiresAdjustment - If we need to make changes\n */\ninterface FeedbackMetrics {\n  clickThroughRate: number;\n  averageRelevance: number;\n  conversionRate: number;\n  requiresAdjustment: boolean;\n}\n\n/**\n * 🤖 Automated Feedback Processor: Your Smart Search Assistant!\n *\n * This service automatically improves search based on how people use it.\n * Like having a robot librarian that learns from experience! 📚\n *\n * Features:\n * - 📊 Analyzes user feedback\n * - 🔄 Makes real-time adjustments\n * - 📈 Tracks performance metrics\n * - 🎯 Improves search accuracy\n * - 🔧 Auto-tunes search settings\n *\n * @class AutomatedFeedbackProcessor\n */\nexport class AutomatedFeedbackProcessor {\n  private readonly logger: Logger;\n  private readonly prisma: PrismaClient;\n  private readonly elasticsearch: ElasticsearchService;\n  private readonly metrics: MetricsService;\n\n  /**\n   * 🎒 Sets Up Your Smart Assistant\n   *\n   * Gets the automated processor ready to help improve search.\n   * Like booting up your helpful robot friend! 🤖\n   *\n   * @param {AutomatedProcessorConfig} config - Everything needed to work\n   */\n  constructor(config: AutomatedProcessorConfig) {\n    this.logger = config.logger;\n    this.prisma = config.prisma;\n    this.elasticsearch = config.elasticsearch;\n    this.metrics = config.metrics;\n  }\n\n  /**\n   * ⚡ Processes Feedback in Real-Time\n   *\n   * Quickly learns from how people are using search right now.\n   * Like having a librarian who instantly learns from every visitor! 📚\n   *\n   * @param {string} searchId - Which search to analyze\n   * @throws {Error} If something goes wrong during processing\n   */\n  async processRealTimeFeedback(searchId: string): Promise<void> {\n    try {\n      const recentFeedback = await this.prisma.searchEvent.findMany({\n        where: {\n          id: searchId,\n          timestamp: {\n            gte: new Date(Date.now() - 24 * 60 * 60 * 1000),\n          },\n        },\n        select: {\n          id: true,\n          query: true,\n          timestamp: true,\n          filters: true,\n          sessionId: true,\n          searchType: true,\n          totalHits: true,\n          took: true,\n          facetsUsed: true,\n          resultIds: true,\n          page: true,\n          pageSize: true,\n        },\n      });\n\n      const feedbackData = this.mapPrismaToFeedbackData(recentFeedback);\n      const metrics = this.calculateFeedbackMetrics(feedbackData);\n\n      if (metrics.requiresAdjustment) {\n        await this.adjustWeights(searchId, metrics);\n      }\n\n      this.metrics.updateSearchQuality({\n        relevance: metrics.averageRelevance,\n        conversion_rate: metrics.conversionRate,\n        click_through_rate: metrics.clickThroughRate,\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to process real-time feedback\", {\n        error,\n        searchId,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * 📊 Calculates Performance Metrics\n   *\n   * Crunches numbers to see how well search is working.\n   * Like getting a report card for our search system! 📈\n   *\n   * @private\n   * @param {SearchFeedbackData[]} feedback - User feedback to analyze\n   * @returns {FeedbackMetrics} How well search is performing\n   */\n  private calculateFeedbackMetrics(\n    feedback: SearchFeedbackData[]\n  ): FeedbackMetrics {\n    if (feedback.length === 0) {\n      return {\n        clickThroughRate: 0,\n        averageRelevance: 0,\n        conversionRate: 0,\n        requiresAdjustment: false,\n      };\n    }\n\n    const clicks = feedback.filter((f) => f.userAction === \"clicked\").length;\n    const conversions = feedback.filter(\n      (f) => f.userAction === \"converted\"\n    ).length;\n    const totalRelevance = feedback.reduce(\n      (sum, f) => sum + f.relevanceScore,\n      0\n    );\n    const total = feedback.length;\n\n    const metrics = {\n      clickThroughRate: clicks / total,\n      averageRelevance: totalRelevance / total,\n      conversionRate: conversions / total,\n      requiresAdjustment: false,\n    };\n\n    metrics.requiresAdjustment =\n      metrics.clickThroughRate < 0.2 || metrics.averageRelevance < 0.5;\n\n    return metrics;\n  }\n\n  /**\n   * 🔧 Adjusts Search Settings\n   *\n   * Changes how search works based on performance metrics.\n   * Like fine-tuning a machine to work better! ⚙️\n   *\n   * @private\n   * @param {string} searchId - Which search to adjust\n   * @param {FeedbackMetrics} metrics - Current performance numbers\n   * @throws {Error} If adjustments can't be made\n   */\n  private async adjustWeights(\n    searchId: string,\n    metrics: FeedbackMetrics\n  ): Promise<void> {\n    try {\n      const currentWeights =\n        await this.elasticsearch.getSearchWeights(searchId);\n      const adjustedWeights = this.computeWeightAdjustments(\n        currentWeights,\n        metrics\n      );\n\n      await this.elasticsearch.updateWeights(searchId, adjustedWeights);\n\n      this.logger.info(\"Search weights adjusted\", {\n        searchId,\n        metrics,\n        adjustedWeights,\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to adjust weights\", {\n        error,\n        searchId,\n        metrics,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * 🔄 Converts Database Data to Feedback\n   *\n   * Transforms raw database records into useful feedback data.\n   * Like translating notes into actionable insights! 📝\n   *\n   * @private\n   * @param {Prisma.SearchEvent | null} prismaFeedback - Raw database records\n   * @returns {SearchFeedbackData[]} Processed feedback data\n   */\n  private mapPrismaToFeedbackData(\n    prismaFeedback: SearchEvent[] | null\n  ): SearchFeedbackData[] {\n    if (!prismaFeedback) return [];\n\n    return prismaFeedback.map((feedback) => {\n      const filters = feedback.filters as Record<string, unknown>;\n      return {\n        searchId: feedback.id,\n        queryHash: feedback.id,\n        resultId: feedback.id,\n        relevanceScore: (filters.relevanceScore as number) || 0,\n        userAction:\n          (filters.userAction as SearchFeedbackData[\"userAction\"]) || \"ignored\",\n        metadata: filters,\n      };\n    });\n  }\n\n  /**\n   * ⚖️ Calculates New Search Settings\n   *\n   * Figures out how to adjust search to work better.\n   * Like a chef adjusting a recipe based on taste tests! 👨‍🍳\n   *\n   * @private\n   * @param {Record<string, number>} currentWeights - Current search settings\n   * @param {FeedbackMetrics} metrics - How well search is working\n   * @returns {Record<string, number>} Adjusted search settings\n   */\n  private computeWeightAdjustments(\n    currentWeights: Record<string, number>,\n    metrics: FeedbackMetrics\n  ): Record<string, number> {\n    const adjustments = { ...currentWeights };\n\n    if (metrics.clickThroughRate < 0.2) {\n      adjustments.title = (currentWeights.title || 1) * 1.2;\n    }\n\n    if (metrics.averageRelevance < 0.5) {\n      adjustments.content = (currentWeights.content || 1) * 1.5;\n    }\n\n    return adjustments;\n  }\n\n  async analyzeFeedback(events: LearningEvent[]): Promise<LearningPattern[]> {\n    const feedbackEvents = events.filter(\n      (e) => e.type === LearningEventType.USER_FEEDBACK\n    );\n\n    const patterns: LearningPattern[] = feedbackEvents.map((event) => ({\n      id: `feedback_${event.id}`,\n      type: \"USER_FEEDBACK\",\n      confidence: 0.8,\n      eventId: event.id,\n      features: JSON.stringify({\n        relevantHits:\n          event.metadata && typeof event.metadata === \"object\"\n            ? (event.metadata as Record<string, unknown>).relevantHits\n            : null,\n        totalHits:\n          event.metadata && typeof event.metadata === \"object\"\n            ? (event.metadata as Record<string, unknown>).totalHits\n            : null,\n      }),\n      metadata: JSON.stringify({\n        source: \"feedback_analysis\",\n        detectedAt: new Date().toISOString(),\n      }),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }));\n\n    return patterns;\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"353b1f64f4d78bbd4901f23304a7f03c5651f911"},"/workspaces/sophra/src/lib/cortex/monitoring/metrics-config.ts":{"path":"/workspaces/sophra/src/lib/cortex/monitoring/metrics-config.ts","statementMap":{"0":{"start":{"line":1,"column":29},"end":{"line":11,"column":1}}},"fnMap":{},"branchMap":{"0":{"loc":{"start":{"line":6,"column":17},"end":{"line":6,"column":54}},"type":"binary-expr","locations":[{"start":{"line":6,"column":17},"end":{"line":6,"column":37}},{"start":{"line":6,"column":41},"end":{"line":6,"column":54}}],"line":6}},"s":{"0":1},"f":{},"b":{"0":[1,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/monitoring/metrics-config.ts"],"sourcesContent":["/**\n * 📊 Metrics Configuration: Your Monitoring Control Panel!\n *\n * This is where we set up how we want to track our application's health.\n * Like configuring all the dials and gauges on your car's dashboard! 🚗\n *\n * Features:\n * - ⚡ Event loop monitoring\n * - 🗑️ Garbage collection tracking\n * - 🏷️ Application labeling\n * - 📏 Metric prefixing\n * - ⏰ Collection intervals\n *\n * @const {Object} metricsConfig\n * @property {boolean} eventLoopMonitoring - Watch how fast we process tasks\n * @property {boolean} gcMonitoring - Track memory cleanup\n * @property {Object} defaultLabels - Tags for all metrics\n * @property {string} prefix - Start all metric names with this\n * @property {boolean} collectDefaultMetrics - Gather standard stats\n * @property {number} defaultMetricsInterval - How often to check (ms)\n */\nexport const metricsConfig = {\n  eventLoopMonitoring: true,\n  gcMonitoring: true,\n  defaultLabels: {\n    app: \"sophra\",\n    environment: process.env.NODE_ENV || \"development\",\n  },\n  prefix: \"sophra_\",\n  collectDefaultMetrics: true,\n  defaultMetricsInterval: 10000,\n};\n"],"mappings":"AAqBO,aAAM,gBAAgB;AAAA,EAC3B,qBAAqB;AAAA,EACrB,cAAc;AAAA,EACd,eAAe;AAAA,IACb,KAAK;AAAA,IACL,aAAa,QAAQ,IAAI,YAAY;AAAA,EACvC;AAAA,EACA,QAAQ;AAAA,EACR,uBAAuB;AAAA,EACvB,wBAAwB;AAC1B;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"03911af9e14bfc53cabc408de339163b6b95b167"},"/workspaces/sophra/src/lib/cortex/monitoring/metrics.ts":{"path":"/workspaces/sophra/src/lib/cortex/monitoring/metrics.ts","statementMap":{"0":{"start":{"line":5,"column":4},"end":{"line":15,"column":6}},"1":{"start":{"line":16,"column":4},"end":{"line":16,"column":24}},"2":{"start":{"line":17,"column":4},"end":{"line":17,"column":25}},"3":{"start":{"line":18,"column":4},"end":{"line":18,"column":26}},"4":{"start":{"line":19,"column":4},"end":{"line":19,"column":25}},"5":{"start":{"line":20,"column":4},"end":{"line":33,"column":6}},"6":{"start":{"line":21,"column":6},"end":{"line":32,"column":7}},"7":{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},"8":{"start":{"line":23,"column":10},"end":{"line":23,"column":50}},"9":{"start":{"line":25,"column":8},"end":{"line":25,"column":115}},"10":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"11":{"start":{"line":28,"column":8},"end":{"line":31,"column":11}},"12":{"start":{"line":34,"column":4},"end":{"line":37,"column":6}},"13":{"start":{"line":35,"column":6},"end":{"line":35,"column":97}},"14":{"start":{"line":36,"column":6},"end":{"line":36,"column":31}},"15":{"start":{"line":38,"column":4},"end":{"line":38,"column":25}},"16":{"start":{"line":39,"column":4},"end":{"line":39,"column":35}},"17":{"start":{"line":40,"column":4},"end":{"line":45,"column":7}},"18":{"start":{"line":46,"column":4},"end":{"line":51,"column":7}},"19":{"start":{"line":52,"column":4},"end":{"line":57,"column":7}},"20":{"start":{"line":58,"column":4},"end":{"line":63,"column":7}},"21":{"start":{"line":64,"column":4},"end":{"line":69,"column":7}},"22":{"start":{"line":70,"column":4},"end":{"line":75,"column":7}},"23":{"start":{"line":78,"column":22},"end":{"line":78,"column":53}},"24":{"start":{"line":79,"column":4},"end":{"line":79,"column":114}},"25":{"start":{"line":80,"column":4},"end":{"line":80,"column":125}},"26":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"27":{"start":{"line":82,"column":6},"end":{"line":82,"column":136}},"28":{"start":{"line":84,"column":4},"end":{"line":87,"column":7}},"29":{"start":{"line":90,"column":4},"end":{"line":90,"column":105}},"30":{"start":{"line":91,"column":4},"end":{"line":91,"column":115}},"31":{"start":{"line":92,"column":4},"end":{"line":95,"column":7}},"32":{"start":{"line":98,"column":4},"end":{"line":102,"column":34}},"33":{"start":{"line":103,"column":4},"end":{"line":105,"column":7}},"34":{"start":{"line":108,"column":18},"end":{"line":108,"column":31}},"35":{"start":{"line":109,"column":4},"end":{"line":113,"column":5}},"36":{"start":{"line":110,"column":20},"end":{"line":110,"column":32}},"37":{"start":{"line":111,"column":6},"end":{"line":111,"column":89}},"38":{"start":{"line":112,"column":6},"end":{"line":112,"column":77}},"39":{"start":{"line":116,"column":4},"end":{"line":116,"column":61}},"40":{"start":{"line":117,"column":4},"end":{"line":121,"column":7}},"41":{"start":{"line":124,"column":4},"end":{"line":124,"column":79}},"42":{"start":{"line":125,"column":4},"end":{"line":129,"column":7}},"43":{"start":{"line":132,"column":4},"end":{"line":136,"column":12}},"44":{"start":{"line":139,"column":4},"end":{"line":143,"column":6}},"45":{"start":{"line":146,"column":4},"end":{"line":150,"column":6}},"46":{"start":{"line":153,"column":4},"end":{"line":157,"column":6}},"47":{"start":{"line":160,"column":4},"end":{"line":164,"column":6}},"48":{"start":{"line":167,"column":4},"end":{"line":171,"column":6}},"49":{"start":{"line":174,"column":57},"end":{"line":174,"column":63}},"50":{"start":{"line":175,"column":4},"end":{"line":177,"column":7}},"51":{"start":{"line":176,"column":6},"end":{"line":176,"column":89}},"52":{"start":{"line":180,"column":53},"end":{"line":180,"column":60}},"53":{"start":{"line":181,"column":30},"end":{"line":191,"column":5}},"54":{"start":{"line":183,"column":25},"end":{"line":186,"column":9}},"55":{"start":{"line":185,"column":22},"end":{"line":185,"column":48}},"56":{"start":{"line":187,"column":8},"end":{"line":187,"column":62}},"57":{"start":{"line":188,"column":8},"end":{"line":188,"column":19}},"58":{"start":{"line":192,"column":4},"end":{"line":194,"column":7}},"59":{"start":{"line":193,"column":6},"end":{"line":193,"column":94}},"60":{"start":{"line":197,"column":4},"end":{"line":197,"column":41}},"61":{"start":{"line":200,"column":29},"end":{"line":206,"column":5}},"62":{"start":{"line":202,"column":8},"end":{"line":202,"column":74}},"63":{"start":{"line":203,"column":8},"end":{"line":203,"column":19}},"64":{"start":{"line":207,"column":4},"end":{"line":211,"column":12}},"65":{"start":{"line":214,"column":4},"end":{"line":232,"column":5}},"66":{"start":{"line":215,"column":30},"end":{"line":215,"column":37}},"67":{"start":{"line":216,"column":6},"end":{"line":218,"column":7}},"68":{"start":{"line":217,"column":8},"end":{"line":217,"column":52}},"69":{"start":{"line":219,"column":6},"end":{"line":219,"column":99}},"70":{"start":{"line":220,"column":6},"end":{"line":220,"column":102}},"71":{"start":{"line":221,"column":6},"end":{"line":221,"column":93}},"72":{"start":{"line":222,"column":6},"end":{"line":226,"column":9}},"73":{"start":{"line":228,"column":6},"end":{"line":231,"column":9}},"74":{"start":{"line":235,"column":4},"end":{"line":235,"column":58}},"75":{"start":{"line":238,"column":4},"end":{"line":245,"column":5}},"76":{"start":{"line":239,"column":6},"end":{"line":244,"column":9}},"77":{"start":{"line":248,"column":4},"end":{"line":255,"column":5}},"78":{"start":{"line":249,"column":6},"end":{"line":254,"column":9}},"79":{"start":{"line":258,"column":4},"end":{"line":268,"column":6}},"80":{"start":{"line":271,"column":4},"end":{"line":271,"column":39}},"81":{"start":{"line":274,"column":4},"end":{"line":274,"column":35}},"82":{"start":{"line":277,"column":4},"end":{"line":277,"column":34}},"83":{"start":{"line":280,"column":4},"end":{"line":280,"column":33}},"84":{"start":{"line":283,"column":4},"end":{"line":283,"column":36}},"85":{"start":{"line":286,"column":4},"end":{"line":286,"column":40}},"86":{"start":{"line":289,"column":4},"end":{"line":289,"column":45}},"87":{"start":{"line":292,"column":4},"end":{"line":292,"column":41}},"88":{"start":{"line":295,"column":4},"end":{"line":295,"column":42}},"89":{"start":{"line":298,"column":4},"end":{"line":298,"column":50}},"90":{"start":{"line":299,"column":4},"end":{"line":299,"column":68}},"91":{"start":{"line":302,"column":4},"end":{"line":302,"column":28}},"92":{"start":{"line":305,"column":4},"end":{"line":305,"column":29}},"93":{"start":{"line":308,"column":26},"end":{"line":308,"column":56}},"94":{"start":{"line":309,"column":4},"end":{"line":309,"column":42}},"95":{"start":{"line":309,"column":31},"end":{"line":309,"column":42}},"96":{"start":{"line":310,"column":17},"end":{"line":310,"column":88}},"97":{"start":{"line":310,"column":52},"end":{"line":310,"column":61}},"98":{"start":{"line":311,"column":21},"end":{"line":311,"column":112}},"99":{"start":{"line":311,"column":56},"end":{"line":311,"column":85}},"100":{"start":{"line":312,"column":4},"end":{"line":312,"column":38}},"101":{"start":{"line":315,"column":4},"end":{"line":315,"column":35}},"102":{"start":{"line":318,"column":26},"end":{"line":320,"column":5}},"103":{"start":{"line":321,"column":4},"end":{"line":321,"column":34}},"104":{"start":{"line":321,"column":24},"end":{"line":321,"column":34}},"105":{"start":{"line":322,"column":4},"end":{"line":324,"column":6}},"106":{"start":{"line":323,"column":13},"end":{"line":323,"column":20}},"107":{"start":{"line":327,"column":4},"end":{"line":333,"column":6}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":2},"end":{"line":4,"column":3}},"loc":{"start":{"line":4,"column":39},"end":{"line":76,"column":3}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":30},"end":{"line":20,"column":31}},"loc":{"start":{"line":20,"column":46},"end":{"line":33,"column":5}},"line":20},"2":{"name":"(anonymous_2)","decl":{"start":{"line":34,"column":33},"end":{"line":34,"column":34}},"loc":{"start":{"line":34,"column":43},"end":{"line":37,"column":5}},"line":34},"3":{"name":"(anonymous_3)","decl":{"start":{"line":77,"column":2},"end":{"line":77,"column":3}},"loc":{"start":{"line":77,"column":31},"end":{"line":88,"column":3}},"line":77},"4":{"name":"(anonymous_4)","decl":{"start":{"line":89,"column":2},"end":{"line":89,"column":3}},"loc":{"start":{"line":89,"column":28},"end":{"line":96,"column":3}},"line":89},"5":{"name":"(anonymous_5)","decl":{"start":{"line":97,"column":2},"end":{"line":97,"column":3}},"loc":{"start":{"line":97,"column":35},"end":{"line":106,"column":3}},"line":97},"6":{"name":"(anonymous_6)","decl":{"start":{"line":107,"column":2},"end":{"line":107,"column":3}},"loc":{"start":{"line":107,"column":36},"end":{"line":114,"column":3}},"line":107},"7":{"name":"(anonymous_7)","decl":{"start":{"line":115,"column":2},"end":{"line":115,"column":3}},"loc":{"start":{"line":115,"column":43},"end":{"line":122,"column":3}},"line":115},"8":{"name":"(anonymous_8)","decl":{"start":{"line":123,"column":2},"end":{"line":123,"column":3}},"loc":{"start":{"line":123,"column":43},"end":{"line":130,"column":3}},"line":123},"9":{"name":"(anonymous_9)","decl":{"start":{"line":131,"column":2},"end":{"line":131,"column":3}},"loc":{"start":{"line":131,"column":34},"end":{"line":137,"column":3}},"line":131},"10":{"name":"(anonymous_10)","decl":{"start":{"line":138,"column":2},"end":{"line":138,"column":3}},"loc":{"start":{"line":138,"column":31},"end":{"line":144,"column":3}},"line":138},"11":{"name":"(anonymous_11)","decl":{"start":{"line":145,"column":2},"end":{"line":145,"column":3}},"loc":{"start":{"line":145,"column":30},"end":{"line":151,"column":3}},"line":145},"12":{"name":"(anonymous_12)","decl":{"start":{"line":152,"column":2},"end":{"line":152,"column":3}},"loc":{"start":{"line":152,"column":31},"end":{"line":158,"column":3}},"line":152},"13":{"name":"(anonymous_13)","decl":{"start":{"line":159,"column":2},"end":{"line":159,"column":3}},"loc":{"start":{"line":159,"column":31},"end":{"line":165,"column":3}},"line":159},"14":{"name":"(anonymous_14)","decl":{"start":{"line":166,"column":2},"end":{"line":166,"column":3}},"loc":{"start":{"line":166,"column":29},"end":{"line":172,"column":3}},"line":166},"15":{"name":"(anonymous_15)","decl":{"start":{"line":173,"column":2},"end":{"line":173,"column":3}},"loc":{"start":{"line":173,"column":30},"end":{"line":178,"column":3}},"line":173},"16":{"name":"(anonymous_16)","decl":{"start":{"line":175,"column":36},"end":{"line":175,"column":37}},"loc":{"start":{"line":175,"column":62},"end":{"line":177,"column":5}},"line":175},"17":{"name":"(anonymous_17)","decl":{"start":{"line":179,"column":2},"end":{"line":179,"column":3}},"loc":{"start":{"line":179,"column":27},"end":{"line":195,"column":3}},"line":179},"18":{"name":"(anonymous_18)","decl":{"start":{"line":182,"column":6},"end":{"line":182,"column":7}},"loc":{"start":{"line":182,"column":29},"end":{"line":189,"column":7}},"line":182},"19":{"name":"(anonymous_19)","decl":{"start":{"line":185,"column":10},"end":{"line":185,"column":11}},"loc":{"start":{"line":185,"column":22},"end":{"line":185,"column":48}},"line":185},"20":{"name":"(anonymous_20)","decl":{"start":{"line":192,"column":46},"end":{"line":192,"column":47}},"loc":{"start":{"line":192,"column":72},"end":{"line":194,"column":5}},"line":192},"21":{"name":"(anonymous_21)","decl":{"start":{"line":196,"column":2},"end":{"line":196,"column":3}},"loc":{"start":{"line":196,"column":21},"end":{"line":198,"column":3}},"line":196},"22":{"name":"(anonymous_22)","decl":{"start":{"line":199,"column":2},"end":{"line":199,"column":3}},"loc":{"start":{"line":199,"column":32},"end":{"line":212,"column":3}},"line":199},"23":{"name":"(anonymous_23)","decl":{"start":{"line":201,"column":6},"end":{"line":201,"column":7}},"loc":{"start":{"line":201,"column":29},"end":{"line":204,"column":7}},"line":201},"24":{"name":"(anonymous_24)","decl":{"start":{"line":213,"column":2},"end":{"line":213,"column":3}},"loc":{"start":{"line":213,"column":31},"end":{"line":233,"column":3}},"line":213},"25":{"name":"(anonymous_25)","decl":{"start":{"line":234,"column":2},"end":{"line":234,"column":3}},"loc":{"start":{"line":234,"column":18},"end":{"line":236,"column":3}},"line":234},"26":{"name":"(anonymous_26)","decl":{"start":{"line":237,"column":2},"end":{"line":237,"column":3}},"loc":{"start":{"line":237,"column":30},"end":{"line":246,"column":3}},"line":237},"27":{"name":"(anonymous_27)","decl":{"start":{"line":247,"column":2},"end":{"line":247,"column":3}},"loc":{"start":{"line":247,"column":28},"end":{"line":256,"column":3}},"line":247},"28":{"name":"(anonymous_28)","decl":{"start":{"line":257,"column":2},"end":{"line":257,"column":3}},"loc":{"start":{"line":257,"column":34},"end":{"line":269,"column":3}},"line":257},"29":{"name":"(anonymous_29)","decl":{"start":{"line":270,"column":2},"end":{"line":270,"column":3}},"loc":{"start":{"line":270,"column":28},"end":{"line":272,"column":3}},"line":270},"30":{"name":"(anonymous_30)","decl":{"start":{"line":273,"column":2},"end":{"line":273,"column":3}},"loc":{"start":{"line":273,"column":24},"end":{"line":275,"column":3}},"line":273},"31":{"name":"(anonymous_31)","decl":{"start":{"line":276,"column":2},"end":{"line":276,"column":3}},"loc":{"start":{"line":276,"column":23},"end":{"line":278,"column":3}},"line":276},"32":{"name":"(anonymous_32)","decl":{"start":{"line":279,"column":2},"end":{"line":279,"column":3}},"loc":{"start":{"line":279,"column":22},"end":{"line":281,"column":3}},"line":279},"33":{"name":"(anonymous_33)","decl":{"start":{"line":282,"column":2},"end":{"line":282,"column":3}},"loc":{"start":{"line":282,"column":25},"end":{"line":284,"column":3}},"line":282},"34":{"name":"(anonymous_34)","decl":{"start":{"line":285,"column":2},"end":{"line":285,"column":3}},"loc":{"start":{"line":285,"column":28},"end":{"line":287,"column":3}},"line":285},"35":{"name":"(anonymous_35)","decl":{"start":{"line":288,"column":2},"end":{"line":288,"column":3}},"loc":{"start":{"line":288,"column":34},"end":{"line":290,"column":3}},"line":288},"36":{"name":"(anonymous_36)","decl":{"start":{"line":291,"column":2},"end":{"line":291,"column":3}},"loc":{"start":{"line":291,"column":30},"end":{"line":293,"column":3}},"line":291},"37":{"name":"(anonymous_37)","decl":{"start":{"line":294,"column":2},"end":{"line":294,"column":3}},"loc":{"start":{"line":294,"column":31},"end":{"line":296,"column":3}},"line":294},"38":{"name":"(anonymous_38)","decl":{"start":{"line":297,"column":2},"end":{"line":297,"column":3}},"loc":{"start":{"line":297,"column":30},"end":{"line":300,"column":3}},"line":297},"39":{"name":"(anonymous_39)","decl":{"start":{"line":301,"column":2},"end":{"line":301,"column":3}},"loc":{"start":{"line":301,"column":19},"end":{"line":303,"column":3}},"line":301},"40":{"name":"(anonymous_40)","decl":{"start":{"line":304,"column":2},"end":{"line":304,"column":3}},"loc":{"start":{"line":304,"column":20},"end":{"line":306,"column":3}},"line":304},"41":{"name":"(anonymous_41)","decl":{"start":{"line":307,"column":2},"end":{"line":307,"column":3}},"loc":{"start":{"line":307,"column":31},"end":{"line":313,"column":3}},"line":307},"42":{"name":"(anonymous_42)","decl":{"start":{"line":310,"column":38},"end":{"line":310,"column":39}},"loc":{"start":{"line":310,"column":52},"end":{"line":310,"column":61}},"line":310},"43":{"name":"(anonymous_43)","decl":{"start":{"line":311,"column":42},"end":{"line":311,"column":43}},"loc":{"start":{"line":311,"column":56},"end":{"line":311,"column":85}},"line":311},"44":{"name":"(anonymous_44)","decl":{"start":{"line":314,"column":2},"end":{"line":314,"column":3}},"loc":{"start":{"line":314,"column":34},"end":{"line":316,"column":3}},"line":314},"45":{"name":"(anonymous_45)","decl":{"start":{"line":317,"column":2},"end":{"line":317,"column":3}},"loc":{"start":{"line":317,"column":28},"end":{"line":325,"column":3}},"line":317},"46":{"name":"(anonymous_46)","decl":{"start":{"line":323,"column":6},"end":{"line":323,"column":7}},"loc":{"start":{"line":323,"column":13},"end":{"line":323,"column":20}},"line":323},"47":{"name":"(anonymous_47)","decl":{"start":{"line":326,"column":2},"end":{"line":326,"column":3}},"loc":{"start":{"line":326,"column":50},"end":{"line":334,"column":3}},"line":326}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},"type":"if","locations":[{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},{"start":{},"end":{}}],"line":22},"1":{"loc":{"start":{"line":25,"column":68},"end":{"line":25,"column":97}},"type":"binary-expr","locations":[{"start":{"line":25,"column":68},"end":{"line":25,"column":84}},{"start":{"line":25,"column":88},"end":{"line":25,"column":97}}],"line":25},"2":{"loc":{"start":{"line":78,"column":22},"end":{"line":78,"column":53}},"type":"binary-expr","locations":[{"start":{"line":78,"column":22},"end":{"line":78,"column":40}},{"start":{"line":78,"column":44},"end":{"line":78,"column":53}}],"line":78},"3":{"loc":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},{"start":{},"end":{}}],"line":81},"4":{"loc":{"start":{"line":109,"column":4},"end":{"line":113,"column":5}},"type":"if","locations":[{"start":{"line":109,"column":4},"end":{"line":113,"column":5}},{"start":{},"end":{}}],"line":109},"5":{"loc":{"start":{"line":142,"column":6},"end":{"line":142,"column":100}},"type":"cond-expr","locations":[{"start":{"line":142,"column":27},"end":{"line":142,"column":73}},{"start":{"line":142,"column":76},"end":{"line":142,"column":100}}],"line":142},"6":{"loc":{"start":{"line":180,"column":12},"end":{"line":180,"column":33}},"type":"default-arg","locations":[{"start":{"line":180,"column":25},"end":{"line":180,"column":33}}],"line":180},"7":{"loc":{"start":{"line":187,"column":24},"end":{"line":187,"column":61}},"type":"cond-expr","locations":[{"start":{"line":187,"column":52},"end":{"line":187,"column":57}},{"start":{"line":187,"column":60},"end":{"line":187,"column":61}}],"line":187},"8":{"loc":{"start":{"line":208,"column":6},"end":{"line":208,"column":40}},"type":"binary-expr","locations":[{"start":{"line":208,"column":6},"end":{"line":208,"column":27}},{"start":{"line":208,"column":31},"end":{"line":208,"column":40}}],"line":208},"9":{"loc":{"start":{"line":209,"column":6},"end":{"line":209,"column":43}},"type":"binary-expr","locations":[{"start":{"line":209,"column":6},"end":{"line":209,"column":30}},{"start":{"line":209,"column":34},"end":{"line":209,"column":43}}],"line":209},"10":{"loc":{"start":{"line":210,"column":6},"end":{"line":210,"column":40}},"type":"binary-expr","locations":[{"start":{"line":210,"column":6},"end":{"line":210,"column":32}},{"start":{"line":210,"column":36},"end":{"line":210,"column":40}}],"line":210},"11":{"loc":{"start":{"line":216,"column":6},"end":{"line":218,"column":7}},"type":"if","locations":[{"start":{"line":216,"column":6},"end":{"line":218,"column":7}},{"start":{},"end":{}}],"line":216},"12":{"loc":{"start":{"line":216,"column":10},"end":{"line":216,"column":129}},"type":"binary-expr","locations":[{"start":{"line":216,"column":10},"end":{"line":216,"column":17}},{"start":{"line":216,"column":21},"end":{"line":216,"column":25}},{"start":{"line":216,"column":29},"end":{"line":216,"column":60}},{"start":{"line":216,"column":64},"end":{"line":216,"column":96}},{"start":{"line":216,"column":100},"end":{"line":216,"column":129}}],"line":216},"13":{"loc":{"start":{"line":238,"column":4},"end":{"line":245,"column":5}},"type":"if","locations":[{"start":{"line":238,"column":4},"end":{"line":245,"column":5}},{"start":{},"end":{}}],"line":238},"14":{"loc":{"start":{"line":248,"column":4},"end":{"line":255,"column":5}},"type":"if","locations":[{"start":{"line":248,"column":4},"end":{"line":255,"column":5}},{"start":{},"end":{}}],"line":248},"15":{"loc":{"start":{"line":309,"column":4},"end":{"line":309,"column":42}},"type":"if","locations":[{"start":{"line":309,"column":4},"end":{"line":309,"column":42}},{"start":{},"end":{}}],"line":309},"16":{"loc":{"start":{"line":321,"column":4},"end":{"line":321,"column":34}},"type":"if","locations":[{"start":{"line":321,"column":4},"end":{"line":321,"column":34}},{"start":{},"end":{}}],"line":321}},"s":{"0":11,"1":11,"2":11,"3":11,"4":11,"5":11,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":11,"13":0,"14":0,"15":11,"16":11,"17":11,"18":11,"19":11,"20":11,"21":11,"22":11,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":5,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0},"f":{"0":11,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":5,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/monitoring/metrics.ts"],"sourcesContent":["import { AnalyticsMetrics } from \"@/lib/cortex/analytics/types\";\nimport type { SearchFeedbackData } from \"@/lib/cortex/feedback/service\";\nimport { MetricsService as NousMetricsService } from \"@/lib/cortex/monitoring/metrics\";\nimport { TestMetrics } from \"@/lib/nous/engine/types\";\nimport type { Logger } from \"@/lib/shared/types\";\nimport { MetricType } from \"@prisma/client\";\nimport { Counter, Gauge, Registry, collectDefaultMetrics } from \"prom-client\";\nimport { metricsConfig } from \"./metrics-config\";\n\ninterface _MetricsLabels {\n  type: string;\n  service: string;\n  operation: string;\n}\n\ninterface ElasticsearchErrorParams {\n  error_type: string;\n  index: string;\n  search_type?: string;\n}\n\nexport interface IMetricsService {\n  recordLatency(name: string, type: string, value: number): void;\n  incrementError(name: string, service: string, operation: string): void;\n  updateResourceUsage(metrics: ResourceMetrics): void;\n  updateCacheHitRatio(hits: number, misses: number): void;\n  updateSearchQuality(metrics: {\n    relevance: number;\n    conversion_rate: number;\n    click_through_rate?: number;\n    query_hash?: string;\n  }): void;\n  recordAlert(\n    metric: string,\n    data: {\n      threshold: number;\n      value: number;\n      actual: number;\n      severity: \"info\" | \"warning\" | \"critical\";\n    }\n  ): void;\n  recordReportDistribution(params: {\n    report_type: string;\n    recipient_count: number;\n    type: string;\n    timeWindow: string;\n  }): void;\n}\n\ninterface ResourceMetrics {\n  memory: {\n    used: number;\n    total: number;\n  };\n  cpu: {\n    usage: number;\n  };\n}\n\nexport interface EngineMetrics {\n  averageLatency: number;\n  requestsPerSecond: number;\n  errorRate: number;\n  cpuUsage: number;\n  memoryUsage: number;\n  totalOperations: number;\n  successfulOperations: number;\n  failedOperations: number;\n  pendingOperations: number;\n}\n\nexport class MetricsService implements NousMetricsService {\n  private readonly logger: Logger;\n  private readonly registry: Registry;\n  private readonly errorCounter: Counter<string>;\n  private readonly operationLatency: Gauge<string>;\n  private readonly abTestMetrics: Gauge<string>;\n  private readonly analyticsMetrics: Gauge<string>;\n  private readonly searchFeedback: Counter<string>;\n  private metrics = {\n    averageLatency: 0,\n    throughput: 0,\n    errorRate: 0,\n    cpuUsage: 0,\n    memoryUsage: 0,\n    totalOperations: 0,\n    successfulOperations: 0,\n    failedOperations: 0,\n    pendingOperations: 0,\n  };\n  public sampleRate: number = 1.0;\n  public batchSize: number = 100;\n  private baselineLoad = 0;\n  private currentLoad = 0;\n\n  public recordEngineMetric = async (data: {\n    type: MetricType;\n    value: number;\n    confidence: number;\n    metadata?: Record<string, unknown>;\n    operationId?: string;\n  }): Promise<void> => {\n    try {\n      if (typeof data.value !== 'number') {\n        throw new Error('Invalid metric value');\n      }\n\n      this.analyticsMetrics\n        .labels(data.type, String(data.value), data.operationId || \"default\")\n        .set(data.value);\n\n      this.logger.debug('Recording engine metric', data);\n    } catch (error) {\n      this.logger.error('Failed to record engine metric', {\n        error,\n        metric: data\n      });\n    }\n  };\n\n  public recordLearningMetrics = (\n    data: {\n      type: MetricType;\n      value: number;\n      interval: string;\n      sessionId?: string;\n      modelId?: string;\n      metadata?: Record<string, unknown>;\n    }\n  ): Promise<void> => {\n    this.analyticsMetrics\n      .labels(data.type, String(data.value), data.interval)\n      .set(data.value);\n    return Promise.resolve();\n  };\n\n  constructor({ logger, environment }: { logger: Logger; environment: string }) {\n    this.logger = logger;\n    this.registry = new Registry();\n\n    // Initialize default metrics collection\n    collectDefaultMetrics({\n      register: this.registry,\n      prefix: metricsConfig.prefix,\n      labels: { ...metricsConfig.defaultLabels },\n      gcDurationBuckets: [0.001, 0.01, 0.1, 1, 2, 5],\n    });\n\n    this.errorCounter = new Counter({\n      name: \"sophra_errors_total\",\n      help: \"Total number of errors\",\n      labelNames: [\"type\", \"service\", \"operation\"],\n      registers: [this.registry],\n    });\n\n    this.operationLatency = new Gauge({\n      name: \"sophra_operation_latency\",\n      help: \"Operation latency in milliseconds\",\n      labelNames: [\"operation\", \"service\", \"value\"],\n      registers: [this.registry],\n    });\n\n    this.searchFeedback = new Counter({\n      name: \"sophra_search_feedback\",\n      help: \"Search feedback metrics\",\n      labelNames: [\"user_action\", \"query_hash\", \"relevance_score\"],\n      registers: [this.registry],\n    });\n\n    this.abTestMetrics = new Gauge({\n      name: \"sophra_abtest_metrics\",\n      help: \"A/B test metrics\",\n      labelNames: [\"test_id\", \"variant_id\", \"query_hash\", \"metric_type\"],\n      registers: [this.registry],\n    });\n\n    this.analyticsMetrics = new Gauge({\n      name: \"sophra_analytics_metrics\",\n      help: \"Analytics metrics\",\n      labelNames: [\"metric_type\", \"value\", \"time_window\"],\n      registers: [this.registry],\n    });\n  }\n  updateSearchQuality(metrics: {\n    relevance: number;\n    conversion_rate: number;\n    click_through_rate?: number;\n    query_hash?: string;\n  }): void {\n    const queryHash = metrics.query_hash || \"current\";\n\n    this.analyticsMetrics\n      .labels(\"search_relevance\", String(metrics.relevance), queryHash)\n      .set(metrics.relevance);\n\n    this.analyticsMetrics\n      .labels(\"conversion_rate\", String(metrics.conversion_rate), queryHash)\n      .set(metrics.conversion_rate);\n\n    if (metrics.click_through_rate !== undefined) {\n      this.analyticsMetrics\n        .labels(\"click_through_rate\", String(metrics.click_through_rate), queryHash)\n        .set(metrics.click_through_rate);\n    }\n\n    this.logger.debug('Updating search quality metrics', {\n      ...metrics,\n      query_hash: queryHash\n    });\n  }\n  recordAlert(\n    metric: string,\n    data: {\n      threshold: number;\n      value: number;\n      actual: number;\n      severity: \"info\" | \"warning\" | \"critical\";\n    }\n  ): void {\n    this.analyticsMetrics\n      .labels(`${metric}_alert`, String(data.actual), data.severity)\n      .set(data.actual);\n\n    this.analyticsMetrics\n      .labels(`${metric}_threshold`, String(data.threshold), data.severity)\n      .set(data.threshold);\n\n    this.logger.debug('Recording metric alert', {\n      metric,\n      ...data\n    });\n  }\n  recordReportDistribution(params: {\n    report_type: string;\n    recipient_count: number;\n    type: string;\n    timeWindow: string;\n  }): void {\n    this.analyticsMetrics\n      .labels(\n        \"report_distribution\",\n        String(params.recipient_count),\n        params.timeWindow\n      )\n      .set(params.recipient_count);\n\n    this.logger.debug('Recording report distribution', {\n      ...params\n    });\n  }\n\n  public updateCacheHitRatio(hits: number, misses: number): void {\n    const total = hits + misses;\n    if (total > 0) {\n      const ratio = hits / total;\n      this.analyticsMetrics\n        .labels(\"cache_hit_ratio\", ratio.toString(), \"1m\")\n        .set(ratio);\n      this.logger.debug(\"Updating cache hit ratio\", { hits, misses, ratio });\n    }\n  }\n\n  public incrementError(type: string, service: string, operation: string): void {\n    this.errorCounter.labels(type, service, operation).inc();\n    this.logger.debug('Incrementing error counter', {\n      error: type,\n      service,\n      operation\n    });\n  }\n\n  public recordLatency(\n    operation: string,\n    service: string,\n    value: number\n  ): void {\n    this.operationLatency\n      .labels(operation, service, String(value))\n      .set(value);\n    \n    this.logger.debug('Recording latency', {\n      operation,\n      service,\n      latency: value\n    });\n  }\n\n  public observeSearchFeedback(feedback: SearchFeedbackData): void {\n    this.searchFeedback\n      .labels(\n        feedback.userAction,\n        feedback.queryHash,\n        feedback.relevanceScore.toString()\n      )\n      .inc();\n  }\n\n  public incrementSearchError(params: ElasticsearchErrorParams): void {\n    this.incrementError(\n      params.error_type,\n      \"search\",\n      params.search_type\n        ? `${params.search_type}_search_${params.index}`\n        : `search_${params.index}`\n    );\n  }\n\n  public incrementIndexError(params: ElasticsearchErrorParams): void {\n    this.incrementError(\n      params.error_type,\n      \"elasticsearch\",\n      `index_${params.index}`\n    );\n  }\n\n  public incrementUpdateError(params: ElasticsearchErrorParams): void {\n    this.incrementError(\n      params.error_type,\n      \"elasticsearch\",\n      `update_${params.index}`\n    );\n  }\n\n  public incrementDeleteError(params: ElasticsearchErrorParams): void {\n    this.incrementError(\n      params.error_type,\n      \"elasticsearch\",\n      `delete_${params.index}`\n    );\n  }\n\n  public incrementBulkError(params: ElasticsearchErrorParams): void {\n    this.incrementError(\n      params.error_type,\n      \"elasticsearch\",\n      `bulk_${params.index}`\n    );\n  }\n\n  public updateABTestMetrics(params: {\n    test_id: string;\n    variant_id: string;\n    query_hash: string;\n    metrics: Record<string, number>;\n  }): void {\n    const { test_id, variant_id, query_hash, metrics } = params;\n    Object.entries(metrics).forEach(([metric_type, value]) => {\n      this.abTestMetrics\n        .labels(test_id, variant_id, query_hash, metric_type)\n        .set(value);\n    });\n  }\n  public updateAnalytics(metrics: AnalyticsMetrics): void {\n    const { timeWindow = \"hourly\", ...rawMetrics } = metrics;\n\n    // Normalize metrics keys to snake_case for consistency\n    const normalizedMetrics = Object.entries(rawMetrics).reduce(\n      (acc, [key, value]) => {\n        const snakeKey = key.replace(\n          /[A-Z]/g,\n          (letter) => `_${letter.toLowerCase()}`\n        );\n        acc[snakeKey] = typeof value === \"number\" ? value : 0;\n        return acc;\n      },\n      {} as Record<string, number>\n    );\n\n    Object.entries(normalizedMetrics).forEach(([metric_type, value]) => {\n      this.analyticsMetrics\n        .labels(metric_type, String(value), String(timeWindow))\n        .set(value);\n    });\n  }\n\n  public async getMetrics(): Promise<string> {\n    return await this.registry.metrics();\n  }\n\n  public incrementMetric(\n    name: string,\n    labels: Record<string, string | number>\n  ): void {\n    const normalizedLabels = Object.entries(labels).reduce(\n      (acc, [key, value]) => {\n        acc[key.replace(/([A-Z])/g, \"_$1\").toLowerCase()] = String(value);\n        return acc;\n      },\n      {} as Record<string, string>\n    );\n\n    this.errorCounter\n      .labels(\n        normalizedLabels.type || \"unknown\",\n        normalizedLabels.service || \"unknown\",\n        normalizedLabels.operation || name\n      )\n      .inc();\n  }\n\n  public updateResourceUsage(metrics: ResourceMetrics): void {\n    try {\n      const { memory, cpu } = metrics;\n\n      if (!memory || !cpu || typeof memory.used !== 'number' || typeof memory.total !== 'number' || typeof cpu.usage !== 'number') {\n        throw new Error('Invalid resource metrics');\n      }\n\n      this.analyticsMetrics\n        .labels(\"memory_used\", String(memory.used), \"current\")\n        .set(memory.used);\n\n      this.analyticsMetrics\n        .labels(\"memory_total\", String(memory.total), \"current\")\n        .set(memory.total);\n\n      this.analyticsMetrics\n        .labels(\"cpu_usage\", String(cpu.usage), \"current\")\n        .set(cpu.usage);\n\n      this.logger.debug('Updating resource usage metrics', {\n        cpuUsage: cpu.usage,\n        memoryUsage: memory.used,\n        memoryTotal: memory.total\n      });\n    } catch (error) {\n      this.logger.error('Failed to update resource metrics', {\n        error,\n        metrics\n      });\n    }\n  }\n\n  public hasMetric(name: string): boolean {\n    return this.registry.getSingleMetric(name) !== undefined;\n  }\n\n  public createHistogram(name: string, help: string): void {\n    if (!this.hasMetric(name)) {\n      new Counter({\n        name: `sophra_${name}`,\n        help,\n        labelNames: [\"operation\", \"service\"],\n        registers: [this.registry],\n      });\n    }\n  }\n\n  public createCounter(name: string, help: string): void {\n    if (!this.hasMetric(name)) {\n      new Counter({\n        name: `sophra_${name}`,\n        help,\n        labelNames: [\"type\", \"service\", \"operation\"],\n        registers: [this.registry],\n      });\n    }\n  }\n\n  public static async getEngineMetrics(): Promise<EngineMetrics> {\n    return {\n      averageLatency: 0,\n      requestsPerSecond: 0,\n      errorRate: 0,\n      cpuUsage: 0,\n      memoryUsage: 0,\n      totalOperations: 0,\n      successfulOperations: 0,\n      failedOperations: 0,\n      pendingOperations: 0,\n    };\n  }\n\n  async getAverageLatency(): Promise<number> {\n    return this.metrics.averageLatency;\n  }\n\n  async getThroughput(): Promise<number> {\n    return this.metrics.throughput;\n  }\n\n  async getErrorRate(): Promise<number> {\n    return this.metrics.errorRate;\n  }\n\n  async getCPUUsage(): Promise<number> {\n    return this.metrics.cpuUsage;\n  }\n\n  async getMemoryUsage(): Promise<number> {\n    return this.metrics.memoryUsage;\n  }\n\n  async getOperationCount(): Promise<number> {\n    return this.metrics.totalOperations;\n  }\n\n  async getSuccessfulOperations(): Promise<number> {\n    return this.metrics.successfulOperations;\n  }\n\n  async getFailedOperations(): Promise<number> {\n    return this.metrics.failedOperations;\n  }\n\n  async getPendingOperations(): Promise<number> {\n    return this.metrics.pendingOperations;\n  }\n\n  async updateMetrics(update: Partial<typeof this.metrics>): Promise<void> {\n    this.metrics = { ...this.metrics, ...update };\n    this.logger.debug(\"Updated metrics\", { metrics: this.metrics });\n  }\n\n  public getCurrentLoad(): number {\n    return this.currentLoad;\n  }\n\n  public getBaselineLoad(): number {\n    return this.baselineLoad;\n  }\n\n  public async getMetricVariability(): Promise<number> {\n    const latencyValues = await this.getLatencyHistory();\n    if (!latencyValues.length) return 0.1; // default variability\n\n    const mean =\n      latencyValues.reduce((sum, val) => sum + val, 0) / latencyValues.length;\n    const variance =\n      latencyValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) /\n      latencyValues.length;\n    return Math.sqrt(variance) / mean; // coefficient of variation\n  }\n\n  public async getAverageTrafficVolume(): Promise<number> {\n    return this.metrics.throughput;\n  }\n\n  private async getLatencyHistory(): Promise<number[]> {\n    const latencyMetric = this.registry.getSingleMetric(\n      \"sophra_operation_latency\"\n    );\n    if (!latencyMetric) return [];\n\n    return (await (latencyMetric as Gauge<string>).get()).values.map(\n      (v) => v.value\n    );\n  }\n\n  public async getMetricsForVariant(\n    _variant: string,\n    startTime: number\n  ): Promise<TestMetrics> {\n    return {\n      latency: await this.getAverageLatency(),\n      errorRate: await this.getErrorRate(),\n      throughput: await this.getThroughput(),\n      cpuUsage: await this.getCPUUsage(),\n      memoryUsage: await this.getMemoryUsage(),\n    };\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2ceecb0bf99cb226061e4f8e5ed3b49fad98efe0"},"/workspaces/sophra/src/lib/cortex/feedback/service.ts":{"path":"/workspaces/sophra/src/lib/cortex/feedback/service.ts","statementMap":{"0":{"start":{"line":17,"column":4},"end":{"line":17,"column":32}},"1":{"start":{"line":18,"column":4},"end":{"line":18,"column":32}},"2":{"start":{"line":19,"column":4},"end":{"line":22,"column":7}},"3":{"start":{"line":23,"column":4},"end":{"line":28,"column":7}},"4":{"start":{"line":29,"column":4},"end":{"line":33,"column":7}},"5":{"start":{"line":46,"column":18},"end":{"line":46,"column":33}},"6":{"start":{"line":47,"column":4},"end":{"line":49,"column":5}},"7":{"start":{"line":48,"column":6},"end":{"line":48,"column":77}},"8":{"start":{"line":50,"column":19},"end":{"line":53,"column":13}},"9":{"start":{"line":51,"column":22},"end":{"line":51,"column":31}},"10":{"start":{"line":52,"column":6},"end":{"line":52,"column":47}},"11":{"start":{"line":54,"column":4},"end":{"line":58,"column":6}},"12":{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},"13":{"start":{"line":71,"column":6},"end":{"line":71,"column":88}},"14":{"start":{"line":73,"column":4},"end":{"line":90,"column":5}},"15":{"start":{"line":74,"column":6},"end":{"line":85,"column":9}},"16":{"start":{"line":86,"column":6},"end":{"line":86,"column":57}},"17":{"start":{"line":88,"column":6},"end":{"line":88,"column":74}},"18":{"start":{"line":89,"column":6},"end":{"line":89,"column":18}},"19":{"start":{"line":103,"column":4},"end":{"line":103,"column":40}},"20":{"start":{"line":103,"column":31},"end":{"line":103,"column":40}},"21":{"start":{"line":104,"column":27},"end":{"line":107,"column":9}},"22":{"start":{"line":105,"column":22},"end":{"line":105,"column":31}},"23":{"start":{"line":106,"column":6},"end":{"line":106,"column":50}},"24":{"start":{"line":108,"column":4},"end":{"line":108,"column":44}},"25":{"start":{"line":121,"column":4},"end":{"line":121,"column":40}},"26":{"start":{"line":121,"column":31},"end":{"line":121,"column":40}},"27":{"start":{"line":122,"column":24},"end":{"line":125,"column":13}},"28":{"start":{"line":123,"column":22},"end":{"line":123,"column":31}},"29":{"start":{"line":124,"column":6},"end":{"line":124,"column":49}},"30":{"start":{"line":126,"column":4},"end":{"line":126,"column":41}},"31":{"start":{"line":138,"column":4},"end":{"line":140,"column":5}},"32":{"start":{"line":139,"column":6},"end":{"line":139,"column":62}},"33":{"start":{"line":141,"column":4},"end":{"line":141,"column":76}},"34":{"start":{"line":142,"column":4},"end":{"line":142,"column":40}},"35":{"start":{"line":143,"column":21},"end":{"line":143,"column":38}},"36":{"start":{"line":144,"column":4},"end":{"line":157,"column":5}},"37":{"start":{"line":145,"column":31},"end":{"line":145,"column":72}},"38":{"start":{"line":146,"column":29},"end":{"line":146,"column":72}},"39":{"start":{"line":147,"column":6},"end":{"line":156,"column":9}},"40":{"start":{"line":158,"column":4},"end":{"line":163,"column":5}},"41":{"start":{"line":159,"column":6},"end":{"line":159,"column":80}},"42":{"start":{"line":161,"column":6},"end":{"line":161,"column":82}},"43":{"start":{"line":162,"column":6},"end":{"line":162,"column":18}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":16,"column":2},"end":{"line":16,"column":3}},"loc":{"start":{"line":16,"column":22},"end":{"line":34,"column":3}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":45,"column":2},"end":{"line":45,"column":3}},"loc":{"start":{"line":45,"column":35},"end":{"line":59,"column":3}},"line":45},"2":{"name":"(anonymous_2)","decl":{"start":{"line":50,"column":35},"end":{"line":50,"column":36}},"loc":{"start":{"line":50,"column":42},"end":{"line":53,"column":5}},"line":50},"3":{"name":"(anonymous_3)","decl":{"start":{"line":69,"column":2},"end":{"line":69,"column":3}},"loc":{"start":{"line":69,"column":33},"end":{"line":91,"column":3}},"line":69},"4":{"name":"(anonymous_4)","decl":{"start":{"line":102,"column":2},"end":{"line":102,"column":3}},"loc":{"start":{"line":102,"column":38},"end":{"line":109,"column":3}},"line":102},"5":{"name":"(anonymous_5)","decl":{"start":{"line":104,"column":43},"end":{"line":104,"column":44}},"loc":{"start":{"line":104,"column":55},"end":{"line":107,"column":5}},"line":104},"6":{"name":"(anonymous_6)","decl":{"start":{"line":120,"column":2},"end":{"line":120,"column":3}},"loc":{"start":{"line":120,"column":36},"end":{"line":127,"column":3}},"line":120},"7":{"name":"(anonymous_7)","decl":{"start":{"line":122,"column":40},"end":{"line":122,"column":41}},"loc":{"start":{"line":122,"column":47},"end":{"line":125,"column":5}},"line":122},"8":{"name":"(anonymous_8)","decl":{"start":{"line":137,"column":2},"end":{"line":137,"column":3}},"loc":{"start":{"line":137,"column":49},"end":{"line":164,"column":3}},"line":137}},"branchMap":{"0":{"loc":{"start":{"line":21,"column":19},"end":{"line":21,"column":56}},"type":"binary-expr","locations":[{"start":{"line":21,"column":19},"end":{"line":21,"column":39}},{"start":{"line":21,"column":43},"end":{"line":21,"column":56}}],"line":21},"1":{"loc":{"start":{"line":47,"column":4},"end":{"line":49,"column":5}},"type":"if","locations":[{"start":{"line":47,"column":4},"end":{"line":49,"column":5}},{"start":{},"end":{}}],"line":47},"2":{"loc":{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},"type":"if","locations":[{"start":{"line":70,"column":4},"end":{"line":72,"column":5}},{"start":{},"end":{}}],"line":70},"3":{"loc":{"start":{"line":70,"column":8},"end":{"line":70,"column":66}},"type":"binary-expr","locations":[{"start":{"line":70,"column":8},"end":{"line":70,"column":35}},{"start":{"line":70,"column":39},"end":{"line":70,"column":66}}],"line":70},"4":{"loc":{"start":{"line":103,"column":4},"end":{"line":103,"column":40}},"type":"if","locations":[{"start":{"line":103,"column":4},"end":{"line":103,"column":40}},{"start":{},"end":{}}],"line":103},"5":{"loc":{"start":{"line":106,"column":20},"end":{"line":106,"column":48}},"type":"binary-expr","locations":[{"start":{"line":106,"column":20},"end":{"line":106,"column":43}},{"start":{"line":106,"column":47},"end":{"line":106,"column":48}}],"line":106},"6":{"loc":{"start":{"line":121,"column":4},"end":{"line":121,"column":40}},"type":"if","locations":[{"start":{"line":121,"column":4},"end":{"line":121,"column":40}},{"start":{},"end":{}}],"line":121},"7":{"loc":{"start":{"line":138,"column":4},"end":{"line":140,"column":5}},"type":"if","locations":[{"start":{"line":138,"column":4},"end":{"line":140,"column":5}},{"start":{},"end":{}}],"line":138},"8":{"loc":{"start":{"line":138,"column":8},"end":{"line":138,"column":66}},"type":"binary-expr","locations":[{"start":{"line":138,"column":8},"end":{"line":138,"column":33}},{"start":{"line":138,"column":37},"end":{"line":138,"column":66}}],"line":138},"9":{"loc":{"start":{"line":144,"column":4},"end":{"line":157,"column":5}},"type":"if","locations":[{"start":{"line":144,"column":4},"end":{"line":157,"column":5}},{"start":{},"end":{}}],"line":144},"10":{"loc":{"start":{"line":144,"column":8},"end":{"line":144,"column":45}},"type":"binary-expr","locations":[{"start":{"line":144,"column":8},"end":{"line":144,"column":23}},{"start":{"line":144,"column":27},"end":{"line":144,"column":45}}],"line":144},"11":{"loc":{"start":{"line":145,"column":31},"end":{"line":145,"column":72}},"type":"cond-expr","locations":[{"start":{"line":145,"column":67},"end":{"line":145,"column":68}},{"start":{"line":145,"column":71},"end":{"line":145,"column":72}}],"line":145},"12":{"loc":{"start":{"line":146,"column":29},"end":{"line":146,"column":72}},"type":"cond-expr","locations":[{"start":{"line":146,"column":67},"end":{"line":146,"column":68}},{"start":{"line":146,"column":71},"end":{"line":146,"column":72}}],"line":146}},"s":{"0":11,"1":11,"2":11,"3":11,"4":11,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":9,"13":1,"14":8,"15":8,"16":6,"17":3,"18":3,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":5,"32":1,"33":4,"34":4,"35":4,"36":4,"37":1,"38":1,"39":1,"40":4,"41":4,"42":2,"43":2},"f":{"0":11,"1":0,"2":0,"3":9,"4":0,"5":0,"6":0,"7":0,"8":5},"b":{"0":[11,0],"1":[0,0],"2":[1,8],"3":[9,8],"4":[0,0],"5":[0,0],"6":[0,0],"7":[1,4],"8":[5,2],"9":[1,3],"10":[4,1],"11":[1,0],"12":[0,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/feedback/service.ts"],"sourcesContent":["import type { ElasticsearchService } from \"@/lib/cortex/elasticsearch/services\";\nimport { SearchABTestingService } from \"@/lib/cortex/feedback/ab-testing\";\nimport { AutomatedFeedbackProcessor } from \"@/lib/cortex/feedback/automated-processor\";\nimport { MetricsService } from \"@/lib/cortex/monitoring/metrics\";\nimport { prisma } from \"@/lib/shared/database/client\";\nimport type { Logger } from \"@/lib/shared/types\";\nimport { JsonValue } from \"@prisma/client/runtime/library\";\n/**\n * 📝 Search Feedback Data: What Users Think About Search Results\n *\n * This is like a report card from users about how well our search is working.\n * It helps us understand if people are finding what they need! 📊\n *\n * @interface SearchFeedbackData\n * @property {string} searchId - Which search this feedback is for\n * @property {string} queryHash - A unique ID for the search query\n * @property {string} resultId - Which result they're giving feedback on\n * @property {number} relevanceScore - How relevant the result was (like a grade!)\n * @property {'clicked' | 'ignored' | 'converted'} userAction - What the user did\n * @property {Record<string, unknown>} metadata - Extra details about the feedback\n */\ninterface SearchMetadata {\n  testId?: string;\n  variantId?: string;\n  [key: string]: unknown;\n}\n\ninterface SearchMetrics {\n  clickThroughRate: number;\n  averageRelevance: number;\n  conversionRate: number;\n}\n\ninterface ABTestMetrics {\n  relevance: number;\n  action: 'clicked' | 'ignored' | 'converted';\n}\n\nexport interface SearchFeedbackData {\n  searchId: string;\n  queryHash: string;\n  resultId: string;\n  relevanceScore: number;\n  userAction: \"clicked\" | \"ignored\" | \"converted\";\n  metadata: SearchMetadata;\n}\n\n/**\n * 📊 Feedback Statistics: The Big Picture of User Feedback\n *\n * A summary of how well our search is performing based on user actions.\n * Like a report card for our entire search system! 📈\n *\n * @interface FeedbackStats\n * @property {number} clickThroughRate - How often users click results\n * @property {number} averageRelevance - How relevant results usually are\n * @property {number} conversionRate - How often users find what they need\n */\ninterface FeedbackStats {\n  clickThroughRate: number;\n  averageRelevance: number;\n  conversionRate: number;\n}\n\n/**\n * 🎯 Feedback Service: Your Search Quality Guardian!\n *\n * This service helps us understand and improve search quality based on user feedback.\n * Think of it as a teacher collecting and analyzing student feedback to make the class better! 📚\n *\n * Features:\n * - 📝 Collects user feedback\n * - 📊 Calculates statistics\n * - 🤖 Processes feedback automatically\n * - 🔬 Runs A/B tests\n * - 📈 Tracks metrics\n *\n * Works with:\n * - 🗄️ Database (Prisma)\n * - 📝 Logger\n * - 🔍 Elasticsearch\n * - 📊 Metrics Service\n * - 🤖 Automated Processor\n * - 🔬 A/B Testing Service\n */\nexport class FeedbackService {\n  private readonly prisma: typeof prisma;\n  private readonly logger: Logger;\n  private readonly metrics: MetricsService;\n  private readonly automatedProcessor: AutomatedFeedbackProcessor;\n  private readonly abTesting: SearchABTestingService;\n\n  /**\n   * 🎒 Sets Up the Feedback Collection System\n   *\n   * Gets everything ready to collect and process user feedback.\n   * Like setting up suggestion boxes all around the library! 📫\n   *\n   * @param {Object} config - Everything we need to get started\n   * @param {PrismaClient} config.prisma - Our database connection\n   * @param {Logger} config.logger - Our note-taker\n   * @param {ElasticsearchService} config.elasticsearch - Our search service\n   */\n  constructor(config: {\n    prisma: typeof prisma;\n    logger: Logger;\n    elasticsearch: ElasticsearchService;\n  }) {\n    this.prisma = config.prisma;\n    this.logger = config.logger;\n    this.metrics = new MetricsService({ \n      logger: this.logger,\n      environment: process.env.NODE_ENV || 'development'\n    });\n    this.automatedProcessor = new AutomatedFeedbackProcessor({\n      logger: this.logger,\n      prisma: this.prisma,\n      elasticsearch: config.elasticsearch,\n      metrics: this.metrics,\n    });\n    this.abTesting = new SearchABTestingService({\n      logger: this.logger,\n      prisma: this.prisma,\n      metrics: this.metrics,\n    });\n  }\n\n  /**\n   * 📊 Calculates Feedback Statistics\n   *\n   * Crunches the numbers to see how well our search is doing.\n   * Like a teacher grading tests to see how well the class is learning! 📚\n   *\n   * @private\n   * @param {PrismaClient['searchEvent']['payload']['default'][]} feedback - All the feedback to analyze\n   * @returns {FeedbackStats} A summary of how we're doing\n   */\n  private calculateFeedbackStats(\n    feedback: Array<{\n      id: string;\n      filters: JsonValue;\n    }>\n  ): FeedbackStats {\n    const total = feedback.length;\n    if (total === 0) {\n      return { clickThroughRate: 0, averageRelevance: 0, conversionRate: 0 };\n    }\n\n    const clicks = feedback.filter((f) => {\n      const filters = f.filters as Record<string, unknown>;\n      return filters?.userAction === \"clicked\";\n    }).length;\n\n    return {\n      clickThroughRate: clicks / total,\n      averageRelevance: this.calculateAverageRelevance(feedback),\n      conversionRate: this.calculateConversionRate(feedback),\n    };\n  }\n\n  /**\n   * 📝 Records User Feedback\n   *\n   * Saves what users think about search results.\n   * Like keeping a diary of what works and what doesn't! 📖\n   *\n   * @param {SearchFeedbackData} feedback - What the user thought\n   * @throws {Error} If something goes wrong while saving\n   */\n  async recordFeedback(feedback: SearchFeedbackData): Promise<void> {\n    // Validate feedback data\n    if (feedback.relevanceScore < 0 || feedback.relevanceScore > 1) {\n      throw new Error('Invalid feedback data: relevance score must be between 0 and 1');\n    }\n\n    try {\n      await this.prisma.searchEvent.update({\n        where: { id: feedback.searchId },\n        data: {\n          filters: {\n            set: {\n              userAction: feedback.userAction,\n              relevanceScore: feedback.relevanceScore,\n              metadata: feedback.metadata,\n            } as JsonValue,\n          },\n        },\n      });\n\n      await this.metrics.observeSearchFeedback(feedback);\n    } catch (error) {\n      this.logger.error('Failed to record feedback', { error, feedback });\n      throw error;\n    }\n  }\n\n  /**\n   * 📊 Calculates Average Relevance Score\n   *\n   * Figures out how relevant our results usually are.\n   * Like getting the class average on a test! 📈\n   *\n   * @private\n   * @param {PrismaClient['searchEvent']['payload']['default'][]} feedback - All feedback to analyze\n   * @returns {number} The average relevance score\n   */\n  private calculateAverageRelevance(\n    feedback: Array<{\n      id: string;\n      filters: JsonValue;\n    }>\n  ): number {\n    if (feedback.length === 0) return 0;\n    const totalRelevance = feedback.reduce((sum, f) => {\n      const filters = f.filters as Record<string, unknown>;\n      return sum + ((filters?.relevanceScore as number) || 0);\n    }, 0);\n    return totalRelevance / feedback.length;\n  }\n\n  /**\n   * 🎯 Calculates Success Rate\n   *\n   * Figures out how often users find exactly what they need.\n   * Like tracking how many students pass the exam! 🎓\n   *\n   * @private\n   * @param {PrismaClient['searchEvent']['payload']['default'][]} feedback - All feedback to analyze\n   * @returns {number} The conversion rate\n   */\n  private calculateConversionRate(\n    feedback: Array<{\n      id: string;\n      filters: JsonValue;\n    }>\n  ): number {\n    if (feedback.length === 0) return 0;\n    const conversions = feedback.filter((f) => {\n      const filters = f.filters as Record<string, unknown>;\n      return filters?.userAction === \"converted\";\n    }).length;\n    return conversions / feedback.length;\n  }\n\n  /**\n   * 🚀 Records Feedback and Optimizes Search\n   *\n   * Not only saves feedback but also uses it to make search better right away!\n   * Like a teacher adjusting their teaching style based on student questions! 📚\n   *\n   * @param {SearchFeedbackData} feedback - What the user thought\n   * @throws {Error} If something goes wrong during processing\n   */\n  async recordFeedbackWithOptimization(\n    feedback: SearchFeedbackData & { testData?: { variantId?: string } }\n  ): Promise<void> {\n    // Validate test data first if present\n    if (feedback.metadata?.testId && !feedback.metadata?.variantId) {\n      throw new Error('Invalid test data: missing variantId');\n    }\n\n    this.logger.debug('Recording feedback with optimization', { feedback });\n\n    // Record the feedback first\n    await this.recordFeedback(feedback);\n\n    // Track A/B test metrics if test data is present\n    const metadata = feedback.metadata as SearchMetadata;\n    if (metadata.testId && metadata.variantId) {\n      // Calculate metrics based on user action and relevance score\n      const clickThroughRate = feedback.userAction === 'clicked' ? 1 : 0;\n      const conversionRate = feedback.userAction === 'converted' ? 1 : 0;\n\n      await this.abTesting.trackVariantMetrics({\n        testId: metadata.testId,\n        variantId: metadata.variantId,\n        queryHash: feedback.queryHash,\n        metrics: {\n          clickThroughRate,\n          averageRelevance: feedback.relevanceScore,\n          conversionRate\n        }\n      });\n    }\n\n    // Trigger automated optimization\n    try {\n      await this.automatedProcessor.processRealTimeFeedback(feedback.queryHash);\n    } catch (error) {\n      this.logger.error('Failed to process feedback for optimization', { error });\n      throw error;\n    }\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b2eca246dc22274f7ee2d6236fe33bfe86374c08"}}