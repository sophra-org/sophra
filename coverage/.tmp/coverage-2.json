{"/workspaces/sophra/src/lib/cortex/utils/errors.ts":{"path":"/workspaces/sophra/src/lib/cortex/utils/errors.ts","statementMap":{"0":{"start":{"line":12,"column":4},"end":{"line":12,"column":42}},"1":{"start":{"line":13,"column":4},"end":{"line":13,"column":21}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":39}},"3":{"start":{"line":15,"column":4},"end":{"line":15,"column":30}},"4":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"5":{"start":{"line":17,"column":6},"end":{"line":17,"column":49}},"6":{"start":{"line":29,"column":4},"end":{"line":39,"column":6}},"7":{"start":{"line":43,"column":2},"end":{"line":45,"column":3}},"8":{"start":{"line":44,"column":4},"end":{"line":44,"column":42}},"9":{"start":{"line":46,"column":2},"end":{"line":50,"column":5}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":2},"end":{"line":11,"column":3}},"loc":{"start":{"line":11,"column":35},"end":{"line":19,"column":3}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":28,"column":2},"end":{"line":28,"column":3}},"loc":{"start":{"line":28,"column":11},"end":{"line":40,"column":3}},"line":28},"2":{"name":"formatError","decl":{"start":{"line":42,"column":16},"end":{"line":42,"column":27}},"loc":{"start":{"line":42,"column":35},"end":{"line":51,"column":1}},"line":42}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":10},"end":{"line":12,"column":40}},"type":"binary-expr","locations":[{"start":{"line":12,"column":10},"end":{"line":12,"column":32}},{"start":{"line":12,"column":36},"end":{"line":12,"column":40}}],"line":12},"1":{"loc":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},{"start":{},"end":{}}],"line":16},"2":{"loc":{"start":{"line":34,"column":21},"end":{"line":38,"column":16}},"type":"cond-expr","locations":[{"start":{"line":34,"column":42},"end":{"line":38,"column":7}},{"start":{"line":38,"column":10},"end":{"line":38,"column":16}}],"line":34},"3":{"loc":{"start":{"line":43,"column":2},"end":{"line":45,"column":3}},"type":"if","locations":[{"start":{"line":43,"column":2},"end":{"line":45,"column":3}},{"start":{},"end":{}}],"line":43}},"s":{"0":6,"1":6,"2":6,"3":6,"4":6,"5":6,"6":0,"7":0,"8":0,"9":0},"f":{"0":6,"1":0,"2":0},"b":{"0":[6,0],"1":[6,0],"2":[0,0],"3":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/utils/errors.ts"],"sourcesContent":["/**\n * 🎯 Error Utilities: Your Error Handling Helper!\n *\n * Makes errors easier to understand and handle.\n * Like having a friendly detective that investigates problems! 🔍\n */\n\n/**\n * 🎨 Custom Error: Your Special Error Type\n *\n * A better way to handle errors in your app.\n * Like having a detailed incident report form! 📝\n *\n * Features:\n * - 🏷️ Error codes\n * - 📚 Stack traces\n * - 🔍 Original error tracking\n * - 📊 JSON formatting\n *\n * @class CustomError\n * @extends {Error}\n */\nexport class CustomError extends Error {\n  readonly code: string;\n  readonly originalError?: Error;\n\n  /**\n   * 🎬 Create New Error\n   *\n   * Makes a new custom error with all the details.\n   * Like filling out an incident report! 📋\n   *\n   * @param {string} code - What kind of error it is\n   * @param {Error} [originalError] - What caused it\n   */\n  constructor(code: string, originalError?: Error) {\n    super(originalError?.message || code);\n    this.code = code;\n    this.originalError = originalError;\n    this.name = \"CustomError\";\n\n    // Maintains proper stack trace for where error was thrown\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CustomError);\n    }\n  }\n\n  /**\n   * 📝 Convert to JSON\n   *\n   * Makes the error easy to save or send.\n   * Like making a clean copy of the incident report! 📄\n   *\n   * @returns {Record<string, unknown>} The error details\n   */\n  toJSON(): Record<string, unknown> {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n      stack: this.stack,\n      originalError: this.originalError\n        ? {\n            name: this.originalError.name,\n            message: this.originalError.message,\n            stack: this.originalError.stack,\n          }\n        : undefined,\n    };\n  }\n}\n\n/**\n * 🎨 Format Error Message\n *\n * Makes errors look nice and readable.\n * Like making a neat summary of what went wrong! 📋\n *\n * @param {Error} error - The error to format\n * @returns {string} A pretty error message\n */\nexport function formatError(error: Error): string {\n  if (error instanceof CustomError) {\n    return JSON.stringify(error.toJSON());\n  }\n  return JSON.stringify({\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n  });\n}\n"],"mappings":"AAsBO,aAAM,oBAAoB,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAarC,YAAY,MAAc,eAAuB;AAC/C,UAAM,eAAe,WAAW,IAAI;AACpC,SAAK,OAAO;AACZ,SAAK,gBAAgB;AACrB,SAAK,OAAO;AAGZ,QAAI,MAAM,mBAAmB;AAC3B,YAAM,kBAAkB,MAAM,WAAW;AAAA,IAC3C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,SAAkC;AAChC,WAAO;AAAA,MACL,MAAM,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,MACX,SAAS,KAAK;AAAA,MACd,OAAO,KAAK;AAAA,MACZ,eAAe,KAAK,gBAChB;AAAA,QACE,MAAM,KAAK,cAAc;AAAA,QACzB,SAAS,KAAK,cAAc;AAAA,QAC5B,OAAO,KAAK,cAAc;AAAA,MAC5B,IACA;AAAA,IACN;AAAA,EACF;AACF;AAWO,gBAAS,YAAY,OAAsB;AAChD,MAAI,iBAAiB,aAAa;AAChC,WAAO,KAAK,UAAU,MAAM,OAAO,CAAC;AAAA,EACtC;AACA,SAAO,KAAK,UAAU;AAAA,IACpB,MAAM,MAAM;AAAA,IACZ,SAAS,MAAM;AAAA,IACf,OAAO,MAAM;AAAA,EACf,CAAC;AACH;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e4db1efd34fa0c30525eab86c6a0af9f3cdf89e7"},"/workspaces/sophra/src/lib/cortex/core/client.ts":{"path":"/workspaces/sophra/src/lib/cortex/core/client.ts","statementMap":{"0":{"start":{"line":18,"column":4},"end":{"line":18,"column":74}},"1":{"start":{"line":19,"column":4},"end":{"line":19,"column":46}},"2":{"start":{"line":33,"column":4},"end":{"line":52,"column":5}},"3":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"4":{"start":{"line":35,"column":8},"end":{"line":35,"column":78}},"5":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"6":{"start":{"line":38,"column":8},"end":{"line":38,"column":73}},"7":{"start":{"line":40,"column":6},"end":{"line":42,"column":7}},"8":{"start":{"line":41,"column":8},"end":{"line":41,"column":51}},"9":{"start":{"line":43,"column":6},"end":{"line":47,"column":7}},"10":{"start":{"line":44,"column":8},"end":{"line":46,"column":10}},"11":{"start":{"line":48,"column":6},"end":{"line":48,"column":20}},"12":{"start":{"line":50,"column":6},"end":{"line":50,"column":70}},"13":{"start":{"line":51,"column":6},"end":{"line":51,"column":53}},"14":{"start":{"line":64,"column":4},"end":{"line":94,"column":5}},"15":{"start":{"line":65,"column":6},"end":{"line":65,"column":30}},"16":{"start":{"line":66,"column":6},"end":{"line":66,"column":58}},"17":{"start":{"line":67,"column":6},"end":{"line":67,"column":38}},"18":{"start":{"line":68,"column":6},"end":{"line":71,"column":7}},"19":{"start":{"line":69,"column":8},"end":{"line":69,"column":52}},"20":{"start":{"line":70,"column":8},"end":{"line":70,"column":38}},"21":{"start":{"line":72,"column":6},"end":{"line":72,"column":65}},"22":{"start":{"line":74,"column":6},"end":{"line":74,"column":73}},"23":{"start":{"line":75,"column":6},"end":{"line":75,"column":33}},"24":{"start":{"line":76,"column":6},"end":{"line":84,"column":7}},"25":{"start":{"line":77,"column":8},"end":{"line":82,"column":9}},"26":{"start":{"line":78,"column":25},"end":{"line":78,"column":55}},"27":{"start":{"line":79,"column":10},"end":{"line":79,"column":31}},"28":{"start":{"line":81,"column":10},"end":{"line":81,"column":88}},"29":{"start":{"line":83,"column":8},"end":{"line":83,"column":36}},"30":{"start":{"line":85,"column":6},"end":{"line":92,"column":7}},"31":{"start":{"line":86,"column":8},"end":{"line":90,"column":9}},"32":{"start":{"line":87,"column":10},"end":{"line":87,"column":46}},"33":{"start":{"line":89,"column":10},"end":{"line":89,"column":80}},"34":{"start":{"line":91,"column":8},"end":{"line":91,"column":34}},"35":{"start":{"line":93,"column":6},"end":{"line":93,"column":47}},"36":{"start":{"line":97,"column":4},"end":{"line":110,"column":5}},"37":{"start":{"line":98,"column":6},"end":{"line":102,"column":7}},"38":{"start":{"line":99,"column":23},"end":{"line":99,"column":53}},"39":{"start":{"line":100,"column":8},"end":{"line":100,"column":29}},"40":{"start":{"line":101,"column":8},"end":{"line":101,"column":36}},"41":{"start":{"line":103,"column":6},"end":{"line":106,"column":7}},"42":{"start":{"line":104,"column":8},"end":{"line":104,"column":44}},"43":{"start":{"line":105,"column":8},"end":{"line":105,"column":34}},"44":{"start":{"line":108,"column":6},"end":{"line":108,"column":53}},"45":{"start":{"line":109,"column":6},"end":{"line":109,"column":40}},"46":{"start":{"line":122,"column":4},"end":{"line":137,"column":5}},"47":{"start":{"line":123,"column":6},"end":{"line":126,"column":7}},"48":{"start":{"line":124,"column":8},"end":{"line":124,"column":44}},"49":{"start":{"line":125,"column":8},"end":{"line":125,"column":34}},"50":{"start":{"line":127,"column":6},"end":{"line":131,"column":7}},"51":{"start":{"line":128,"column":23},"end":{"line":128,"column":53}},"52":{"start":{"line":129,"column":8},"end":{"line":129,"column":29}},"53":{"start":{"line":130,"column":8},"end":{"line":130,"column":36}},"54":{"start":{"line":132,"column":6},"end":{"line":132,"column":33}},"55":{"start":{"line":133,"column":6},"end":{"line":133,"column":62}},"56":{"start":{"line":135,"column":6},"end":{"line":135,"column":71}},"57":{"start":{"line":136,"column":6},"end":{"line":136,"column":18}},"58":{"start":{"line":148,"column":19},"end":{"line":152,"column":5}},"59":{"start":{"line":153,"column":4},"end":{"line":161,"column":5}},"60":{"start":{"line":154,"column":6},"end":{"line":160,"column":7}},"61":{"start":{"line":155,"column":27},"end":{"line":155,"column":58}},"62":{"start":{"line":156,"column":8},"end":{"line":156,"column":51}},"63":{"start":{"line":158,"column":8},"end":{"line":158,"column":74}},"64":{"start":{"line":159,"column":8},"end":{"line":159,"column":37}},"65":{"start":{"line":162,"column":4},"end":{"line":168,"column":5}},"66":{"start":{"line":163,"column":21},"end":{"line":163,"column":53}},"67":{"start":{"line":164,"column":6},"end":{"line":164,"column":98}},"68":{"start":{"line":166,"column":6},"end":{"line":166,"column":67}},"69":{"start":{"line":167,"column":6},"end":{"line":167,"column":30}},"70":{"start":{"line":169,"column":4},"end":{"line":177,"column":5}},"71":{"start":{"line":170,"column":6},"end":{"line":176,"column":7}},"72":{"start":{"line":171,"column":27},"end":{"line":171,"column":56}},"73":{"start":{"line":172,"column":8},"end":{"line":172,"column":43}},"74":{"start":{"line":174,"column":8},"end":{"line":174,"column":66}},"75":{"start":{"line":175,"column":8},"end":{"line":175,"column":29}},"76":{"start":{"line":178,"column":4},"end":{"line":178,"column":18}},"77":{"start":{"line":189,"column":4},"end":{"line":195,"column":5}},"78":{"start":{"line":190,"column":6},"end":{"line":190,"column":87}},"79":{"start":{"line":191,"column":6},"end":{"line":194,"column":8}},"80":{"start":{"line":196,"column":4},"end":{"line":196,"column":30}},"81":{"start":{"line":213,"column":4},"end":{"line":218,"column":5}},"82":{"start":{"line":214,"column":6},"end":{"line":217,"column":8}},"83":{"start":{"line":219,"column":4},"end":{"line":219,"column":28}},"84":{"start":{"line":240,"column":21},"end":{"line":240,"column":49}},"85":{"start":{"line":241,"column":4},"end":{"line":243,"column":5}},"86":{"start":{"line":242,"column":6},"end":{"line":242,"column":54}},"87":{"start":{"line":244,"column":18},"end":{"line":248,"column":6}},"88":{"start":{"line":249,"column":4},"end":{"line":249,"column":47}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":17,"column":2},"end":{"line":17,"column":3}},"loc":{"start":{"line":17,"column":22},"end":{"line":20,"column":3}},"line":17},"1":{"name":"(anonymous_1)","decl":{"start":{"line":32,"column":2},"end":{"line":32,"column":3}},"loc":{"start":{"line":32,"column":25},"end":{"line":53,"column":3}},"line":32},"2":{"name":"(anonymous_2)","decl":{"start":{"line":63,"column":2},"end":{"line":63,"column":3}},"loc":{"start":{"line":63,"column":21},"end":{"line":95,"column":3}},"line":63},"3":{"name":"(anonymous_3)","decl":{"start":{"line":96,"column":2},"end":{"line":96,"column":3}},"loc":{"start":{"line":96,"column":18},"end":{"line":111,"column":3}},"line":96},"4":{"name":"(anonymous_4)","decl":{"start":{"line":121,"column":2},"end":{"line":121,"column":3}},"loc":{"start":{"line":121,"column":19},"end":{"line":138,"column":3}},"line":121},"5":{"name":"(anonymous_5)","decl":{"start":{"line":147,"column":2},"end":{"line":147,"column":3}},"loc":{"start":{"line":147,"column":22},"end":{"line":179,"column":3}},"line":147},"6":{"name":"(anonymous_6)","decl":{"start":{"line":188,"column":2},"end":{"line":188,"column":3}},"loc":{"start":{"line":188,"column":21},"end":{"line":197,"column":3}},"line":188},"7":{"name":"(anonymous_7)","decl":{"start":{"line":212,"column":2},"end":{"line":212,"column":3}},"loc":{"start":{"line":212,"column":19},"end":{"line":220,"column":3}},"line":212},"8":{"name":"(anonymous_8)","decl":{"start":{"line":239,"column":2},"end":{"line":239,"column":3}},"loc":{"start":{"line":239,"column":22},"end":{"line":250,"column":3}},"line":239}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":18},"end":{"line":18,"column":73}},"type":"binary-expr","locations":[{"start":{"line":18,"column":18},"end":{"line":18,"column":31}},{"start":{"line":18,"column":35},"end":{"line":18,"column":73}}],"line":18},"1":{"loc":{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":36,"column":7}},{"start":{},"end":{}}],"line":34},"2":{"loc":{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},"type":"if","locations":[{"start":{"line":37,"column":6},"end":{"line":39,"column":7}},{"start":{},"end":{}}],"line":37},"3":{"loc":{"start":{"line":40,"column":6},"end":{"line":42,"column":7}},"type":"if","locations":[{"start":{"line":40,"column":6},"end":{"line":42,"column":7}},{"start":{},"end":{}}],"line":40},"4":{"loc":{"start":{"line":43,"column":6},"end":{"line":47,"column":7}},"type":"if","locations":[{"start":{"line":43,"column":6},"end":{"line":47,"column":7}},{"start":{},"end":{}}],"line":43},"5":{"loc":{"start":{"line":43,"column":10},"end":{"line":43,"column":78}},"type":"binary-expr","locations":[{"start":{"line":43,"column":10},"end":{"line":43,"column":44}},{"start":{"line":43,"column":48},"end":{"line":43,"column":78}}],"line":43},"6":{"loc":{"start":{"line":68,"column":6},"end":{"line":71,"column":7}},"type":"if","locations":[{"start":{"line":68,"column":6},"end":{"line":71,"column":7}},{"start":{},"end":{}}],"line":68},"7":{"loc":{"start":{"line":76,"column":6},"end":{"line":84,"column":7}},"type":"if","locations":[{"start":{"line":76,"column":6},"end":{"line":84,"column":7}},{"start":{},"end":{}}],"line":76},"8":{"loc":{"start":{"line":85,"column":6},"end":{"line":92,"column":7}},"type":"if","locations":[{"start":{"line":85,"column":6},"end":{"line":92,"column":7}},{"start":{},"end":{}}],"line":85},"9":{"loc":{"start":{"line":98,"column":6},"end":{"line":102,"column":7}},"type":"if","locations":[{"start":{"line":98,"column":6},"end":{"line":102,"column":7}},{"start":{},"end":{}}],"line":98},"10":{"loc":{"start":{"line":103,"column":6},"end":{"line":106,"column":7}},"type":"if","locations":[{"start":{"line":103,"column":6},"end":{"line":106,"column":7}},{"start":{},"end":{}}],"line":103},"11":{"loc":{"start":{"line":123,"column":6},"end":{"line":126,"column":7}},"type":"if","locations":[{"start":{"line":123,"column":6},"end":{"line":126,"column":7}},{"start":{},"end":{}}],"line":123},"12":{"loc":{"start":{"line":127,"column":6},"end":{"line":131,"column":7}},"type":"if","locations":[{"start":{"line":127,"column":6},"end":{"line":131,"column":7}},{"start":{},"end":{}}],"line":127},"13":{"loc":{"start":{"line":153,"column":4},"end":{"line":161,"column":5}},"type":"if","locations":[{"start":{"line":153,"column":4},"end":{"line":161,"column":5}},{"start":{},"end":{}}],"line":153},"14":{"loc":{"start":{"line":164,"column":24},"end":{"line":164,"column":97}},"type":"binary-expr","locations":[{"start":{"line":164,"column":24},"end":{"line":164,"column":45}},{"start":{"line":164,"column":49},"end":{"line":164,"column":66}},{"start":{"line":164,"column":70},"end":{"line":164,"column":97}}],"line":164},"15":{"loc":{"start":{"line":169,"column":4},"end":{"line":177,"column":5}},"type":"if","locations":[{"start":{"line":169,"column":4},"end":{"line":177,"column":5}},{"start":{},"end":{}}],"line":169},"16":{"loc":{"start":{"line":189,"column":4},"end":{"line":195,"column":5}},"type":"if","locations":[{"start":{"line":189,"column":4},"end":{"line":195,"column":5}},{"start":{},"end":{}}],"line":189},"17":{"loc":{"start":{"line":213,"column":4},"end":{"line":218,"column":5}},"type":"if","locations":[{"start":{"line":213,"column":4},"end":{"line":218,"column":5}},{"start":{},"end":{}}],"line":213},"18":{"loc":{"start":{"line":241,"column":4},"end":{"line":243,"column":5}},"type":"if","locations":[{"start":{"line":241,"column":4},"end":{"line":243,"column":5}},{"start":{},"end":{}}],"line":241}},"s":{"0":26,"1":26,"2":26,"3":26,"4":1,"5":25,"6":1,"7":24,"8":1,"9":23,"10":1,"11":22,"12":4,"13":4,"14":9,"15":9,"16":9,"17":9,"18":8,"19":7,"20":7,"21":8,"22":1,"23":1,"24":1,"25":1,"26":1,"27":0,"28":1,"29":1,"30":1,"31":0,"32":0,"33":0,"34":0,"35":1,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":2,"47":2,"48":2,"49":2,"50":2,"51":2,"52":2,"53":2,"54":2,"55":1,"56":1,"57":1,"58":2,"59":2,"60":2,"61":2,"62":1,"63":1,"64":1,"65":2,"66":2,"67":1,"68":1,"69":1,"70":2,"71":2,"72":2,"73":1,"74":1,"75":1,"76":2,"77":2,"78":1,"79":1,"80":1,"81":2,"82":1,"83":1,"84":7,"85":7,"86":0,"87":7,"88":7},"f":{"0":26,"1":26,"2":9,"3":0,"4":2,"5":2,"6":2,"7":2,"8":7},"b":{"0":[26,4],"1":[1,25],"2":[1,24],"3":[1,23],"4":[1,22],"5":[23,1],"6":[7,1],"7":[1,0],"8":[0,1],"9":[0,0],"10":[0,0],"11":[2,0],"12":[2,0],"13":[2,0],"14":[1,1,1],"15":[2,0],"16":[1,1],"17":[1,1],"18":[0,7]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/core/client.ts"],"sourcesContent":["import { ElasticClient } from \"@/lib/cortex/elasticsearch/client\";\nimport { RedisClient } from \"@/lib/cortex/redis/client\";\nimport { CustomError } from \"@/lib/cortex/utils/errors\";\nimport { prisma } from \"@/lib/shared/database/client\";\nimport { logger } from \"@/lib/shared/logger\";\nimport type { Logger } from \"@/lib/shared/types\";\nimport Redis from \"ioredis\";\n\n/**\n * 🎮 Configuration for Our Main Client\n *\n * The essential settings our client needs to know where and how to run.\n * Like setting up your game before you start playing! 🎲\n *\n * @interface SophraClientConfig\n * @property {string} environment - Where we're running: development, production, or test\n * @property {Logger} [logger] - Optional custom logger instance\n */\nexport interface SophraClientConfig {\n  environment: \"development\" | \"production\" | \"test\";\n  logger?: Logger;\n}\n\n/**\n * 🎯 The Main Sophra Client: Your Gateway to All Services!\n *\n * Think of this as your universal remote control - it helps you talk to all\n * our different services (databases, search, cache) in one place!\n *\n * What it helps with:\n * - 🔌 Connecting to all our services\n * - 🏥 Checking if everything's healthy\n * - 🔒 Managing connections safely\n * - 🧹 Cleaning up when we're done\n *\n * @class SophraClient\n *\n * @example\n * const client = new SophraClient({ environment: 'development' });\n * await client.initialize();\n * // Now you can use any service you need!\n * await client.healthCheck();\n * // Don't forget to clean up when done\n * await client.shutdown();\n */\nexport class SophraClient {\n  private readonly logger: Logger;\n  private readonly config: SophraClientConfig;\n  private elasticClient?: ElasticClient;\n  private redisClient?: RedisClient;\n\n  /**\n   * 🎒 Sets Up Your Universal Remote\n   *\n   * Creates a new client with all the settings it needs.\n   * Like packing your backpack before an adventure!\n   *\n   * @param {SophraClientConfig} config - Your essential settings\n   * @throws {CustomError} If any required settings are missing\n   */\n  constructor(config: SophraClientConfig) {\n    this.logger = config.logger || logger.child({ name: \"SophraClient\" }) as Logger;\n    this.config = this.validateConfig(config);\n  }\n\n  /**\n   * 🔍 Makes Sure All Settings Are Valid\n   *\n   * Checks that we have everything we need before starting.\n   * Like checking your packing list before a trip!\n   *\n   * @private\n   * @param {SophraClientConfig} config - Settings to validate\n   * @returns {SophraClientConfig} The validated settings\n   * @throws {CustomError} If anything's missing or incorrect\n   */\n  private validateConfig(config: SophraClientConfig): SophraClientConfig {\n    try {\n      if (!process.env.ELASTICSEARCH_URL) {\n        throw new Error(\"ELASTICSEARCH_URL environment variable is required\");\n      }\n      if (!process.env.DATABASE_URL) {\n        throw new Error(\"DATABASE_URL environment variable is required\");\n      }\n      if (!config.environment) {\n        throw new Error(\"Environment is required\");\n      }\n\n      // Validate Elasticsearch auth - support both key formats\n      if (\n        !process.env.ELASTICSEARCH_API_KEY &&\n        !process.env.SOPHRA_ES_API_KEY\n      ) {\n        throw new Error(\n          \"Either ELASTICSEARCH_API_KEY or SOPHRA_ES_API_KEY is required\"\n        );\n      }\n\n      return config;\n    } catch (error) {\n      this.logger.error(\"Configuration validation failed\", { error });\n      throw new CustomError(\"INVALID_CONFIG\", error as Error);\n    }\n  }\n\n  /**\n   * 🚀 Starts Up All Services\n   *\n   * Gets everything ready for action! Connects to databases,\n   * sets up caching, and makes sure everything's talking to each other.\n   *\n   * @returns {Promise<void>} When everything's ready to go\n   * @throws {CustomError} If something goes wrong during startup\n   */\n  async initialize(): Promise<void> {\n    try {\n      // Initialize database connection first\n      await prisma.$connect();\n\n      // Initialize Elasticsearch client\n      this.elasticClient = new ElasticClient(this.logger);\n      await this.elasticClient.ping();\n\n      // Initialize Redis client if URL is provided\n      if (process.env.SOPHRA_REDIS_URL) {\n        this.redisClient = this.createRedisClient();\n        await this.redisClient.ping();\n      }\n\n      this.logger.info('Sophra client initialized successfully');\n    } catch (error) {\n      this.logger.error('Failed to initialize Sophra client', { error });\n      // Ensure cleanup happens and database disconnects\n      await prisma.$disconnect();\n      if (this.elasticClient) {\n        try {\n          const client = this.elasticClient.getClient();\n          await client.close();\n        } catch (cleanupError) {\n          this.logger.error('Failed to cleanup Elasticsearch client', { cleanupError });\n        }\n        this.elasticClient = undefined;\n      }\n      if (this.redisClient) {\n        try {\n          await this.redisClient.disconnect();\n        } catch (cleanupError) {\n          this.logger.error('Failed to cleanup Redis client', { cleanupError });\n        }\n        this.redisClient = undefined;\n      }\n      throw new Error('Initialization failed');\n    }\n  }\n\n  private async cleanup(): Promise<void> {\n    try {\n      if (this.elasticClient) {\n        const client = this.elasticClient.getClient();\n        await client.close();\n        this.elasticClient = undefined;\n      }\n      if (this.redisClient) {\n        await this.redisClient.disconnect();\n        this.redisClient = undefined;\n      }\n    } catch (error) {\n      this.logger.error('Cleanup failed', { error });\n      throw new Error('Cleanup failed');\n    }\n  }\n\n  /**\n   * 👋 Says Goodbye and Cleans Up\n   *\n   * Safely closes all connections and tidies up.\n   * Always clean up after yourself! 🧹\n   *\n   * @returns {Promise<void>} When cleanup is complete\n   * @throws {CustomError} If something goes wrong during shutdown\n   */\n  async shutdown(): Promise<void> {\n    try {\n      if (this.redisClient) {\n        await this.redisClient.disconnect();\n        this.redisClient = undefined;\n      }\n      if (this.elasticClient) {\n        const client = this.elasticClient.getClient();\n        await client.close();\n        this.elasticClient = undefined;\n      }\n      await prisma.$disconnect();\n      this.logger.info('Sophra client shutdown successfully');\n    } catch (error) {\n      this.logger.error('Failed to shutdown Sophra client', { error });\n      throw error;\n    }\n  }\n\n  /**\n   * 🏥 Checks if Everything's Healthy\n   *\n   * Like a doctor's checkup for our services!\n   * Makes sure everything's feeling good and working well.\n   *\n   * @returns {Promise<Record<string, boolean>>} Health status of each service\n   */\n  async healthCheck(): Promise<Record<string, boolean>> {\n    const health: Record<string, boolean> = {\n      elasticsearch: false,\n      database: false,\n      redis: false,\n    };\n\n    // Check Elasticsearch health if initialized\n    if (this.elasticClient) {\n      try {\n        const pingResult = await this.elasticClient.ping();\n        health.elasticsearch = pingResult === true;\n      } catch (error) {\n        this.logger.error('Elasticsearch health check failed', { error });\n        health.elasticsearch = false;\n      }\n    }\n\n    // Check database health\n    try {\n      const result = await prisma.$queryRaw`SELECT 1`;\n      health.database = Array.isArray(result) && result.length > 0 && result[0]['?column?'] === 1;\n    } catch (error) {\n      this.logger.error('Database health check failed', { error });\n      health.database = false;\n    }\n\n    // Check Redis health if initialized\n    if (this.redisClient) {\n      try {\n        const pingResult = await this.redisClient.ping();\n        health.redis = pingResult === true;\n      } catch (error) {\n        this.logger.error('Redis health check failed', { error });\n        health.redis = false;\n      }\n    }\n\n    return health;\n  }\n\n  /**\n   * 🔍 Gets the Search Service\n   *\n   * Hands you the Elasticsearch client for searching and indexing.\n   *\n   * @returns {ElasticClient} Your search helper\n   * @throws {CustomError} If the service isn't ready yet\n   */\n  getElasticClient(): ElasticClient {\n    if (!this.elasticClient) {\n      this.logger.error('Attempted to get Elasticsearch client before initialization');\n      throw new CustomError(\n        \"CLIENT_NOT_INITIALIZED\",\n        new Error(\"Elasticsearch client not initialized. Call initialize() first.\")\n      );\n    }\n    return this.elasticClient;\n  }\n\n  /**\n   * 💾 Gets the Database Service\n   *\n   * Hands you the PostgreSQL client for data storage.\n   *\n\n  /**\n   * ⚡ Gets the Cache Service\n   *\n   * Hands you the Redis client for fast data access.\n   *\n   * @returns {RedisClient} Your speed booster\n   * @throws {CustomError} If the service isn't ready yet\n   */\n  getRedisClient(): RedisClient {\n    if (!this.redisClient) {\n      throw new CustomError(\n        \"CLIENT_NOT_INITIALIZED\",\n        new Error(\"Redis client not initialized\")\n      );\n    }\n    return this.redisClient;\n  }\n\n  /**\n   * 🏗️ Creates a New Database Connection\n   *\n   * Sets up a fresh connection to PostgreSQL with all the right settings.\n   *\n   * @private\n   * @returns {PostgresClient} A configured database client\n   * @throws {Error} If connection settings are missing\n   */\n  /**\n   * Creates a New Cache Connection\n   *\n   * Sets up a fresh connection to Redis for speedy data access.\n   *\n   * @private\n   * @returns {RedisClient} A configured cache client\n   * @throws {Error} If Redis URL is missing\n   */\n  private createRedisClient(): RedisClient {\n    const redisUrl = process.env.SOPHRA_REDIS_URL;\n    if (!redisUrl) {\n      throw new Error(\"SOPHRA_REDIS_URL is required\");\n    }\n\n    const redis = new Redis(redisUrl, {\n      maxRetriesPerRequest: 3,\n      connectTimeout: 10000,\n      commandTimeout: 5000,\n    });\n\n    return new RedisClient(redis, this.logger);\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"fb5d0da62ad91e151b89c36d868e563fe862751e"}}