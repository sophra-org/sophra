{"/workspaces/sophra/src/app/api/nous/adapt/apply/route.ts":{"path":"/workspaces/sophra/src/app/api/nous/adapt/apply/route.ts","statementMap":{"0":{"start":{"line":6,"column":23},"end":{"line":6,"column":31}},"1":{"start":{"line":7,"column":32},"end":{"line":11,"column":2}},"2":{"start":{"line":12,"column":15},"end":{"line":12,"column":43}},"3":{"start":{"line":14,"column":20},"end":{"line":14,"column":30}},"4":{"start":{"line":15,"column":2},"end":{"line":109,"column":3}},"5":{"start":{"line":16,"column":17},"end":{"line":16,"column":33}},"6":{"start":{"line":17,"column":23},"end":{"line":17,"column":62}},"7":{"start":{"line":18,"column":4},"end":{"line":27,"column":5}},"8":{"start":{"line":19,"column":6},"end":{"line":26,"column":8}},"9":{"start":{"line":28,"column":42},"end":{"line":28,"column":57}},"10":{"start":{"line":29,"column":4},"end":{"line":37,"column":5}},"11":{"start":{"line":30,"column":6},"end":{"line":36,"column":8}},"12":{"start":{"line":39,"column":4},"end":{"line":65,"column":5}},"13":{"start":{"line":40,"column":6},"end":{"line":45,"column":9}},"14":{"start":{"line":46,"column":6},"end":{"line":54,"column":7}},"15":{"start":{"line":47,"column":8},"end":{"line":53,"column":10}},"16":{"start":{"line":56,"column":6},"end":{"line":56,"column":66}},"17":{"start":{"line":57,"column":6},"end":{"line":64,"column":8}},"18":{"start":{"line":66,"column":4},"end":{"line":97,"column":5}},"19":{"start":{"line":67,"column":6},"end":{"line":69,"column":7}},"20":{"start":{"line":68,"column":8},"end":{"line":68,"column":38}},"21":{"start":{"line":70,"column":6},"end":{"line":70,"column":34}},"22":{"start":{"line":71,"column":6},"end":{"line":75,"column":9}},"23":{"start":{"line":73,"column":32},"end":{"line":73,"column":36}},"24":{"start":{"line":76,"column":29},"end":{"line":76,"column":51}},"25":{"start":{"line":77,"column":6},"end":{"line":81,"column":9}},"26":{"start":{"line":82,"column":6},"end":{"line":86,"column":9}},"27":{"start":{"line":88,"column":6},"end":{"line":88,"column":71}},"28":{"start":{"line":89,"column":6},"end":{"line":96,"column":8}},"29":{"start":{"line":99,"column":4},"end":{"line":99,"column":60}},"30":{"start":{"line":100,"column":4},"end":{"line":108,"column":6}}},"fnMap":{"0":{"name":"POST","decl":{"start":{"line":13,"column":22},"end":{"line":13,"column":26}},"loc":{"start":{"line":13,"column":32},"end":{"line":110,"column":1}},"line":13},"1":{"name":"(anonymous_1)","decl":{"start":{"line":73,"column":25},"end":{"line":73,"column":26}},"loc":{"start":{"line":73,"column":32},"end":{"line":73,"column":36}},"line":73}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":4},"end":{"line":27,"column":5}},"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":27,"column":5}},{"start":{},"end":{}}],"line":18},"1":{"loc":{"start":{"line":29,"column":4},"end":{"line":37,"column":5}},"type":"if","locations":[{"start":{"line":29,"column":4},"end":{"line":37,"column":5}},{"start":{},"end":{}}],"line":29},"2":{"loc":{"start":{"line":29,"column":8},"end":{"line":29,"column":67}},"type":"binary-expr","locations":[{"start":{"line":29,"column":8},"end":{"line":29,"column":16}},{"start":{"line":29,"column":20},"end":{"line":29,"column":43}},{"start":{"line":29,"column":47},"end":{"line":29,"column":67}}],"line":29},"3":{"loc":{"start":{"line":46,"column":6},"end":{"line":54,"column":7}},"type":"if","locations":[{"start":{"line":46,"column":6},"end":{"line":54,"column":7}},{"start":{},"end":{}}],"line":46},"4":{"loc":{"start":{"line":46,"column":10},"end":{"line":46,"column":38}},"type":"binary-expr","locations":[{"start":{"line":46,"column":10},"end":{"line":46,"column":16}},{"start":{"line":46,"column":20},"end":{"line":46,"column":38}}],"line":46},"5":{"loc":{"start":{"line":67,"column":6},"end":{"line":69,"column":7}},"type":"if","locations":[{"start":{"line":67,"column":6},"end":{"line":69,"column":7}},{"start":{},"end":{}}],"line":67},"6":{"loc":{"start":{"line":104,"column":17},"end":{"line":104,"column":73}},"type":"cond-expr","locations":[{"start":{"line":104,"column":42},"end":{"line":104,"column":55}},{"start":{"line":104,"column":58},"end":{"line":104,"column":73}}],"line":104},"7":{"loc":{"start":{"line":105,"column":15},"end":{"line":105,"column":102}},"type":"cond-expr","locations":[{"start":{"line":105,"column":82},"end":{"line":105,"column":93}},{"start":{"line":105,"column":96},"end":{"line":105,"column":102}}],"line":105},"8":{"loc":{"start":{"line":105,"column":15},"end":{"line":105,"column":79}},"type":"binary-expr","locations":[{"start":{"line":105,"column":15},"end":{"line":105,"column":53}},{"start":{"line":105,"column":57},"end":{"line":105,"column":79}}],"line":105}},"s":{"0":1,"1":1,"2":1,"3":5,"4":5,"5":5,"6":5,"7":5,"8":1,"9":4,"10":4,"11":0,"12":4,"13":4,"14":3,"15":1,"16":1,"17":1,"18":2,"19":2,"20":1,"21":2,"22":2,"23":2,"24":1,"25":1,"26":1,"27":1,"28":1,"29":0,"30":0},"f":{"0":5,"1":2},"b":{"0":[1,4],"1":[0,4],"2":[4,4,4],"3":[1,2],"4":[3,3],"5":[1,1],"6":[0,0],"7":[0,0],"8":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/api/nous/adapt/apply/route.ts"],"sourcesContent":["import { AdaptationEngine } from \"@lib/shared/engine/adaptation-engine\";\nimport logger from \"@lib/shared/logger\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { z } from \"zod\";\nimport { prisma } from \"@lib/shared/database/client\";\n\n// Declare Node.js runtime\nexport const runtime = \"nodejs\";\n\nconst AdaptationRequestSchema = z.object({\n  ruleIds: z.array(z.string()),\n  context: z.record(z.unknown()),\n  metrics: z.record(z.number()).optional(),\n});\n\nconst engine = new AdaptationEngine(logger);\n\nexport async function POST(req: NextRequest): Promise<NextResponse> {\n  const startTime = Date.now();\n\n  try {\n    const body = await req.json();\n    const validation = AdaptationRequestSchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json(\n        { \n          success: false,\n          error: \"Invalid request format\", \n          details: validation.error.format() \n        },\n        { status: 400 }\n      );\n    }\n\n    const { ruleIds, context, metrics } = validation.data;\n\n    // Validate rule IDs\n    if (!ruleIds || !Array.isArray(ruleIds) || ruleIds.length === 0) {\n      return NextResponse.json(\n        { \n          success: false,\n          error: \"No rule IDs provided\" \n        },\n        { status: 400 }\n      );\n    }\n\n    // Fetch rules from database\n    let rules;\n    try {\n      rules = await prisma.adaptationRule.findMany({\n        where: {\n          id: { in: ruleIds },\n          enabled: true,\n        },\n      });\n\n      if (!rules || rules.length === 0) {\n        return NextResponse.json(\n          { \n            success: false,\n            error: \"No valid rules found\"\n          },\n          { status: 404 }\n        );\n      }\n    } catch (dbError) {\n      logger.error(\"Database error fetching rules:\", { dbError });\n      return NextResponse.json(\n        {\n          success: false,\n          error: \"Failed to apply adaptations\",\n          details: \"Database error\",\n        },\n        { status: 500 }\n      );\n    }\n\n    try {\n      // Update engine state\n      if (metrics) {\n        engine.updateMetrics(metrics);\n      }\n      engine.updateState(context);\n\n      // Apply rules\n      await engine.evaluateEvent({\n        type: \"adaptation_request\",\n        rules: rules.map((r) => r.id),\n        context,\n      });\n\n      const processingTime = Date.now() - startTime;\n\n      logger.info(\"Applied adaptation rules\", {\n        ruleCount: rules.length,\n        processingTime,\n        ruleIds,\n      });\n\n      return NextResponse.json({\n        success: true,\n        applied_rules: rules.length,\n        processing_time_ms: processingTime,\n      });\n    } catch (engineError) {\n      logger.error(\"Engine error during adaptation:\", { engineError });\n      return NextResponse.json(\n        {\n          success: false,\n          error: \"Failed to apply adaptations\",\n          details: \"Engine error\",\n        },\n        { status: 500 }\n      );\n    }\n  } catch (error) {\n    logger.error(\"Failed to apply adaptations:\", { error });\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to apply adaptations\",\n        details: error instanceof Error ? error.message : \"Unknown error\",\n        stack: process.env.NODE_ENV === \"development\" && error instanceof Error \n          ? error.stack \n          : undefined,\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ac31fe2dcfa012f8707b25e7a722c00b95513e4e"}}