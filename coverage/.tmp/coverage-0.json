{"/workspaces/sophra/src/lib/cortex/core/sync-service.ts":{"path":"/workspaces/sophra/src/lib/cortex/core/sync-service.ts","statementMap":{"0":{"start":{"line":4,"column":4},"end":{"line":4,"column":32}},"1":{"start":{"line":5,"column":4},"end":{"line":5,"column":35}},"2":{"start":{"line":6,"column":4},"end":{"line":6,"column":30}},"3":{"start":{"line":7,"column":4},"end":{"line":7,"column":55}},"4":{"start":{"line":8,"column":4},"end":{"line":8,"column":52}},"5":{"start":{"line":26,"column":4},"end":{"line":51,"column":5}},"6":{"start":{"line":27,"column":6},"end":{"line":27,"column":43}},"7":{"start":{"line":28,"column":21},"end":{"line":28,"column":91}},"8":{"start":{"line":29,"column":6},"end":{"line":41,"column":7}},"9":{"start":{"line":30,"column":8},"end":{"line":34,"column":10}},"10":{"start":{"line":36,"column":8},"end":{"line":40,"column":11}},"11":{"start":{"line":42,"column":6},"end":{"line":42,"column":53}},"12":{"start":{"line":43,"column":6},"end":{"line":43,"column":20}},"13":{"start":{"line":45,"column":6},"end":{"line":49,"column":9}},"14":{"start":{"line":50,"column":6},"end":{"line":50,"column":18}},"15":{"start":{"line":63,"column":4},"end":{"line":110,"column":5}},"16":{"start":{"line":64,"column":21},"end":{"line":64,"column":53}},"17":{"start":{"line":65,"column":6},"end":{"line":103,"column":7}},"18":{"start":{"line":66,"column":8},"end":{"line":101,"column":11}},"19":{"start":{"line":102,"column":8},"end":{"line":102,"column":54}},"20":{"start":{"line":105,"column":6},"end":{"line":108,"column":9}},"21":{"start":{"line":109,"column":6},"end":{"line":109,"column":18}},"22":{"start":{"line":131,"column":21},"end":{"line":131,"column":53}},"23":{"start":{"line":132,"column":4},"end":{"line":186,"column":5}},"24":{"start":{"line":133,"column":27},"end":{"line":133,"column":57}},"25":{"start":{"line":134,"column":6},"end":{"line":141,"column":7}},"26":{"start":{"line":135,"column":8},"end":{"line":135,"column":75}},"27":{"start":{"line":136,"column":23},"end":{"line":136,"column":47}},"28":{"start":{"line":137,"column":8},"end":{"line":139,"column":9}},"29":{"start":{"line":138,"column":10},"end":{"line":138,"column":60}},"30":{"start":{"line":140,"column":8},"end":{"line":140,"column":22}},"31":{"start":{"line":142,"column":27},"end":{"line":150,"column":7}},"32":{"start":{"line":151,"column":6},"end":{"line":153,"column":7}},"33":{"start":{"line":152,"column":8},"end":{"line":152,"column":51}},"34":{"start":{"line":154,"column":6},"end":{"line":165,"column":7}},"35":{"start":{"line":155,"column":8},"end":{"line":159,"column":10}},"36":{"start":{"line":161,"column":8},"end":{"line":164,"column":11}},"37":{"start":{"line":166,"column":6},"end":{"line":178,"column":8}},"38":{"start":{"line":172,"column":69},"end":{"line":172,"column":84}},"39":{"start":{"line":180,"column":6},"end":{"line":184,"column":9}},"40":{"start":{"line":185,"column":6},"end":{"line":185,"column":18}},"41":{"start":{"line":192,"column":25},"end":{"line":192,"column":44}},"42":{"start":{"line":193,"column":4},"end":{"line":204,"column":5}},"43":{"start":{"line":194,"column":19},"end":{"line":194,"column":54}},"44":{"start":{"line":195,"column":6},"end":{"line":201,"column":7}},"45":{"start":{"line":196,"column":8},"end":{"line":196,"column":38}},"46":{"start":{"line":197,"column":8},"end":{"line":200,"column":11}},"47":{"start":{"line":203,"column":6},"end":{"line":203,"column":79}},"48":{"start":{"line":210,"column":4},"end":{"line":215,"column":9}},"49":{"start":{"line":221,"column":4},"end":{"line":266,"column":5}},"50":{"start":{"line":222,"column":6},"end":{"line":237,"column":7}},"51":{"start":{"line":223,"column":8},"end":{"line":236,"column":9}},"52":{"start":{"line":224,"column":10},"end":{"line":228,"column":13}},"53":{"start":{"line":230,"column":10},"end":{"line":234,"column":13}},"54":{"start":{"line":235,"column":10},"end":{"line":235,"column":24}},"55":{"start":{"line":238,"column":6},"end":{"line":247,"column":7}},"56":{"start":{"line":239,"column":8},"end":{"line":239,"column":62}},"57":{"start":{"line":241,"column":8},"end":{"line":245,"column":11}},"58":{"start":{"line":246,"column":8},"end":{"line":246,"column":22}},"59":{"start":{"line":248,"column":6},"end":{"line":257,"column":7}},"60":{"start":{"line":249,"column":8},"end":{"line":249,"column":65}},"61":{"start":{"line":250,"column":8},"end":{"line":250,"column":55}},"62":{"start":{"line":252,"column":8},"end":{"line":256,"column":11}},"63":{"start":{"line":259,"column":6},"end":{"line":264,"column":9}},"64":{"start":{"line":265,"column":6},"end":{"line":265,"column":18}},"65":{"start":{"line":272,"column":4},"end":{"line":283,"column":5}},"66":{"start":{"line":273,"column":6},"end":{"line":275,"column":9}},"67":{"start":{"line":277,"column":6},"end":{"line":281,"column":9}},"68":{"start":{"line":282,"column":6},"end":{"line":282,"column":18}},"69":{"start":{"line":286,"column":4},"end":{"line":293,"column":5}},"70":{"start":{"line":287,"column":6},"end":{"line":289,"column":7}},"71":{"start":{"line":288,"column":8},"end":{"line":288,"column":38}},"72":{"start":{"line":290,"column":6},"end":{"line":290,"column":33}},"73":{"start":{"line":292,"column":6},"end":{"line":292,"column":60}},"74":{"start":{"line":297,"column":4},"end":{"line":297,"column":66}},"75":{"start":{"line":300,"column":4},"end":{"line":300,"column":23}},"76":{"start":{"line":303,"column":4},"end":{"line":315,"column":5}},"77":{"start":{"line":304,"column":6},"end":{"line":311,"column":8}},"78":{"start":{"line":313,"column":6},"end":{"line":313,"column":72}},"79":{"start":{"line":314,"column":6},"end":{"line":314,"column":18}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":2},"end":{"line":3,"column":3}},"loc":{"start":{"line":3,"column":22},"end":{"line":9,"column":3}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":25,"column":2},"end":{"line":25,"column":3}},"loc":{"start":{"line":25,"column":31},"end":{"line":52,"column":3}},"line":25},"2":{"name":"(anonymous_2)","decl":{"start":{"line":62,"column":2},"end":{"line":62,"column":3}},"loc":{"start":{"line":62,"column":27},"end":{"line":111,"column":3}},"line":62},"3":{"name":"(anonymous_3)","decl":{"start":{"line":130,"column":2},"end":{"line":130,"column":3}},"loc":{"start":{"line":130,"column":23},"end":{"line":187,"column":3}},"line":130},"4":{"name":"(anonymous_4)","decl":{"start":{"line":172,"column":60},"end":{"line":172,"column":61}},"loc":{"start":{"line":172,"column":69},"end":{"line":172,"column":84}},"line":172},"5":{"name":"(anonymous_5)","decl":{"start":{"line":191,"column":2},"end":{"line":191,"column":3}},"loc":{"start":{"line":191,"column":37},"end":{"line":205,"column":3}},"line":191},"6":{"name":"(anonymous_6)","decl":{"start":{"line":209,"column":2},"end":{"line":209,"column":3}},"loc":{"start":{"line":209,"column":30},"end":{"line":216,"column":3}},"line":209},"7":{"name":"(anonymous_7)","decl":{"start":{"line":220,"column":2},"end":{"line":220,"column":3}},"loc":{"start":{"line":220,"column":31},"end":{"line":267,"column":3}},"line":220},"8":{"name":"(anonymous_8)","decl":{"start":{"line":271,"column":2},"end":{"line":271,"column":3}},"loc":{"start":{"line":271,"column":39},"end":{"line":284,"column":3}},"line":271},"9":{"name":"(anonymous_9)","decl":{"start":{"line":285,"column":2},"end":{"line":285,"column":3}},"loc":{"start":{"line":285,"column":19},"end":{"line":294,"column":3}},"line":285},"10":{"name":"(anonymous_10)","decl":{"start":{"line":296,"column":2},"end":{"line":296,"column":3}},"loc":{"start":{"line":296,"column":27},"end":{"line":298,"column":3}},"line":296},"11":{"name":"(anonymous_11)","decl":{"start":{"line":299,"column":2},"end":{"line":299,"column":3}},"loc":{"start":{"line":299,"column":28},"end":{"line":301,"column":3}},"line":299},"12":{"name":"(anonymous_12)","decl":{"start":{"line":302,"column":2},"end":{"line":302,"column":3}},"loc":{"start":{"line":302,"column":37},"end":{"line":316,"column":3}},"line":302}},"branchMap":{"0":{"loc":{"start":{"line":7,"column":26},"end":{"line":7,"column":54}},"type":"binary-expr","locations":[{"start":{"line":7,"column":26},"end":{"line":7,"column":47}},{"start":{"line":7,"column":51},"end":{"line":7,"column":54}}],"line":7},"1":{"loc":{"start":{"line":65,"column":6},"end":{"line":103,"column":7}},"type":"if","locations":[{"start":{"line":65,"column":6},"end":{"line":103,"column":7}},{"start":{},"end":{}}],"line":65},"2":{"loc":{"start":{"line":107,"column":15},"end":{"line":107,"column":71}},"type":"cond-expr","locations":[{"start":{"line":107,"column":40},"end":{"line":107,"column":53}},{"start":{"line":107,"column":56},"end":{"line":107,"column":71}}],"line":107},"3":{"loc":{"start":{"line":134,"column":6},"end":{"line":141,"column":7}},"type":"if","locations":[{"start":{"line":134,"column":6},"end":{"line":141,"column":7}},{"start":{},"end":{}}],"line":134},"4":{"loc":{"start":{"line":137,"column":8},"end":{"line":139,"column":9}},"type":"if","locations":[{"start":{"line":137,"column":8},"end":{"line":139,"column":9}},{"start":{},"end":{}}],"line":137},"5":{"loc":{"start":{"line":137,"column":12},"end":{"line":137,"column":35}},"type":"binary-expr","locations":[{"start":{"line":137,"column":12},"end":{"line":137,"column":19}},{"start":{"line":137,"column":23},"end":{"line":137,"column":35}}],"line":137},"6":{"loc":{"start":{"line":151,"column":6},"end":{"line":153,"column":7}},"type":"if","locations":[{"start":{"line":151,"column":6},"end":{"line":153,"column":7}},{"start":{},"end":{}}],"line":151},"7":{"loc":{"start":{"line":151,"column":10},"end":{"line":151,"column":45}},"type":"binary-expr","locations":[{"start":{"line":151,"column":10},"end":{"line":151,"column":23}},{"start":{"line":151,"column":27},"end":{"line":151,"column":45}}],"line":151},"8":{"loc":{"start":{"line":168,"column":14},"end":{"line":168,"column":36}},"type":"binary-expr","locations":[{"start":{"line":168,"column":14},"end":{"line":168,"column":31}},{"start":{"line":168,"column":35},"end":{"line":168,"column":36}}],"line":168},"9":{"loc":{"start":{"line":172,"column":69},"end":{"line":172,"column":84}},"type":"binary-expr","locations":[{"start":{"line":172,"column":69},"end":{"line":172,"column":79}},{"start":{"line":172,"column":83},"end":{"line":172,"column":84}}],"line":172},"10":{"loc":{"start":{"line":195,"column":6},"end":{"line":201,"column":7}},"type":"if","locations":[{"start":{"line":195,"column":6},"end":{"line":201,"column":7}},{"start":{},"end":{}}],"line":195},"11":{"loc":{"start":{"line":222,"column":6},"end":{"line":237,"column":7}},"type":"if","locations":[{"start":{"line":222,"column":6},"end":{"line":237,"column":7}},{"start":{},"end":{}}],"line":222},"12":{"loc":{"start":{"line":287,"column":6},"end":{"line":289,"column":7}},"type":"if","locations":[{"start":{"line":287,"column":6},"end":{"line":289,"column":7}},{"start":{},"end":{}}],"line":287},"13":{"loc":{"start":{"line":297,"column":11},"end":{"line":297,"column":65}},"type":"binary-expr","locations":[{"start":{"line":297,"column":11},"end":{"line":297,"column":36}},{"start":{"line":297,"column":40},"end":{"line":297,"column":65}}],"line":297}},"s":{"0":15,"1":15,"2":15,"3":15,"4":15,"5":4,"6":4,"7":3,"8":3,"9":3,"10":1,"11":3,"12":3,"13":1,"14":1,"15":4,"16":4,"17":3,"18":1,"19":1,"20":1,"21":1,"22":3,"23":3,"24":3,"25":3,"26":1,"27":1,"28":1,"29":0,"30":1,"31":2,"32":1,"33":0,"34":1,"35":1,"36":0,"37":1,"38":1,"39":1,"40":1,"41":4,"42":4,"43":4,"44":0,"45":0,"46":0,"47":4,"48":3,"49":2,"50":2,"51":2,"52":2,"53":1,"54":1,"55":1,"56":1,"57":0,"58":0,"59":1,"60":1,"61":1,"62":0,"63":1,"64":1,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0},"f":{"0":15,"1":4,"2":4,"3":3,"4":1,"5":4,"6":3,"7":2,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"0":[15,14],"1":[1,2],"2":[1,0],"3":[1,2],"4":[0,1],"5":[1,1],"6":[0,1],"7":[1,1],"8":[1,0],"9":[1,0],"10":[0,0],"11":[2,0],"12":[0,0],"13":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/core/sync-service.ts"],"sourcesContent":["import type { ElasticsearchService } from \"@/lib/cortex/elasticsearch/services\";\nimport type {\n  BaseDocument,\n  BaseQuery,\n  ElasticsearchClientQuery,\n  ProcessedDocumentMetadata,\n  SearchResponse,\n} from \"@/lib/cortex/elasticsearch/types\";\nimport type { RedisCacheService } from \"@/lib/cortex/redis/services\";\nimport type { VectorizationService } from \"@/lib/cortex/services/vectorization\";\nimport type { SearchResult } from \"@/lib/cortex/types/search\";\nimport { prisma } from \"@/lib/shared/database/client\";\nimport type { Logger } from \"@/lib/shared/types\";\nimport type { estypes } from \"@elastic/elasticsearch\";\n\n/**\n * 🛠️ Configuration needed to set up the sync service\n *\n * Think of this as the instruction manual for building your sync service.\n * Each piece is important for making everything work together smoothly!\n *\n * @interface SyncServiceConfig\n * @property {Logger} logger - 📝 Keeps track of what's happening\n * @property {ElasticsearchService} elasticsearch - 🔍 Handles searching\n * @property {PostgresDataService} postgres - 💾 Stores data permanently\n * @property {RedisCacheService} redis - ⚡ Makes things fast with caching\n * @property {number} [searchCacheTTL] - ⏰ How long to keep search results (in seconds)\n * @property {VectorizationService} embeddingService - 🧮 Processes documents\n */\ninterface SyncServiceConfig {\n  logger: Logger;\n  elasticsearch: ElasticsearchService;\n  redis: RedisCacheService;\n  searchCacheTTL?: number;\n  embeddingService: VectorizationService;\n}\n\n/**\n * 🔄 The Data Sync Service: Your Data's Best Friend!\n *\n * This service is like a super-organized librarian that keeps all our data stores\n * (Elasticsearch, Postgres, and Redis) in perfect harmony. It makes sure that when\n * you update data in one place, it gets updated everywhere else too!\n *\n * 🎯 What This Service Does:\n * - Keeps data consistent across different storage systems\n * - Handles smart caching to make things fast\n * - Manages document processing and vectorization\n * - Takes care of search operations\n *\n * 🔌 Connected Services:\n * - 🔍 Elasticsearch (for searching)\n * - 💾 Postgres (for permanent storage)\n * - ⚡ Redis (for quick access caching)\n * - 🧮 Vectorization (for document processing)\n *\n * @class DataSyncService\n */\nexport class DataSyncService {\n  private readonly logger: Logger;\n  private readonly es: ElasticsearchService;\n  private redis: RedisCacheService;\n  private readonly searchCacheTTL: number;\n  private readonly embeddingService: VectorizationService;\n\n  constructor(config: SyncServiceConfig) {\n    this.logger = config.logger;\n    this.es = config.elasticsearch;\n    this.redis = config.redis;\n    this.searchCacheTTL = config.searchCacheTTL || 300; // 5 minutes default\n    this.embeddingService = config.embeddingService;\n  }\n\n  /**\n   * 📝 Creates or updates a document everywhere it needs to be\n   *\n   * This is like hitting \"save\" but making sure your work is backed up in\n   * multiple places - just to be extra safe!\n   *\n   * @param {Object} params - Everything we need to know about the document\n   * @param {string} params.index - Which collection it belongs to\n   * @param {string} params.id - The document's unique ID\n   * @param {BaseDocument} params.document - The actual content\n   * @param {string} params.tableName - Where to store it in Postgres\n   *\n   * @returns {Promise<ProcessedDocumentMetadata>} Info about the saved document\n   * @throws Will let you know if something goes wrong during saving\n   */\n  async upsertDocument(params: {\n    index: string;\n    id: string;\n    document: BaseDocument;\n    tableName: string;\n  }): Promise<ProcessedDocumentMetadata> {\n    try {\n      // Ensure index exists\n      await this.createIndex(params.index);\n\n      // Store in Elasticsearch\n      const result = await this.es.upsertDocument(params.index, params.id, params.document);\n\n      // Try to cache in Redis, but don't fail if Redis fails\n      try {\n        await this.redis.set(\n          `doc:${params.index}:${params.id}`, \n          params.document,\n          this.searchCacheTTL\n        );\n      } catch (error) {\n        this.logger.warn('Redis cache failure during document upsert', {\n          error,\n          id: params.id,\n          index: params.index,\n        });\n      }\n\n      // Invalidate any cached searches that might include this document\n      await this.invalidateSearchCache(params.index);\n\n      return result;\n    } catch (error) {\n      this.logger.error('Failed to upsert document', {\n        index: params.index,\n        id: params.id,\n        error,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * 🏗️ Creates a new index if it doesn't exist\n   *\n   * Think of this as building a new shelf in our library - we need to set it up\n   * before we can start putting books (documents) on it!\n   *\n   * @param {string} index - The name for our new index\n   * @throws Will let you know if something goes wrong during creation\n   */\n  async createIndex(index: string): Promise<void> {\n    try {\n      const exists = await this.es.indexExists(index);\n      if (!exists) {\n        await this.es.createIndex(index, {\n          body: {\n            settings: {\n              number_of_shards: 1,\n              number_of_replicas: 1,\n            },\n            mappings: {\n              dynamic: false,\n              properties: {\n                title: { type: \"text\" },\n                content: { type: \"text\" },\n                abstract: { type: \"text\" },\n                embeddings: {\n                  type: \"dense_vector\",\n                  dims: 384,\n                  index: true,\n                  similarity: \"cosine\",\n                },\n                authors: { type: \"keyword\" },\n                tags: { type: \"keyword\" },\n                source: { type: \"keyword\" },\n                metadata: {\n                  properties: {\n                    last_vectorized: { type: \"date\" },\n                    updated: { type: \"boolean\" },\n                    vector_dimensions: { type: \"long\" },\n                    vector_model: { type: \"text\" },\n                  },\n                },\n                processing_status: { type: \"keyword\" },\n                created_at: { type: \"date\" },\n                updated_at: { type: \"date\" },\n              },\n            },\n          },\n        });\n        this.logger.debug(\"Created index\", { index });\n      }\n    } catch (error) {\n      this.logger.error(\"Failed to create index\", {\n        index,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * 🔍 Smart Search with Caching\n   *\n   * This is like having a really smart assistant who remembers recent searches\n   * to give you answers faster!\n   *\n   * @template T - The type of document we're searching for\n   * @param {Object} params - Your search requirements\n   * @param {string} params.index - Where to look\n   * @param {Record<string, unknown>} params.query - What to look for\n   * @param {number} [params.size] - How many results you want (defaults to 10)\n   * @param {number} [params.from] - Where to start from (for pagination)\n   * @param {Record<string, 'asc' | 'desc'>[]} [params.sort] - How to order results\n   * @param {Object} [params.facets] - Ways to group results\n   * @param {boolean} [params.forceFresh] - Skip the cache and get fresh results\n   *\n   * @returns {Promise<SearchResult<T>>} Your search results, neatly organized\n   */\n  async search<T extends BaseDocument>(params: {\n    index: string;\n    query: Record<string, unknown>;\n    size?: number;\n    from?: number;\n    sort?: Record<string, \"asc\" | \"desc\">[];\n  }): Promise<SearchResponse<T>> {\n    const cacheKey = this.buildSearchCacheKey(params);\n\n    try {\n      // Try to get from cache first\n      const cachedResult = await this.redis.get(cacheKey);\n      if (cachedResult) {\n        this.logger.debug(\"Cache hit for search\", { index: params.index });\n        const parsed = JSON.parse(cachedResult as string);\n        if (!parsed || !parsed.hits) {\n          throw new Error('Invalid cached search response');\n        }\n        return parsed as SearchResponse<T>;\n      }\n\n      // Cache miss - search in Elasticsearch\n      const searchResult = await this.es.search<T>(\n        params.index,\n        {\n          query: params.query as BaseQuery,\n          size: params.size,\n          from: params.from,\n          sort: params.sort,\n        },\n      );\n\n      if (!searchResult || !searchResult.hits) {\n        throw new Error('Invalid search response');\n      }\n\n      // Cache the result\n      try {\n        await this.redis.set(\n          cacheKey,\n          searchResult,\n          this.searchCacheTTL\n        );\n      } catch (error) {\n        this.logger.warn('Redis cache failure during search', {\n          error,\n          index: params.index,\n        });\n      }\n\n      // Add max_score to match expected type\n      return {\n        ...searchResult,\n        took: searchResult.took || 0,  // Default to 0 if undefined\n        hits: {\n          ...searchResult.hits,\n          max_score: Math.max(...searchResult.hits.hits.map(hit => hit._score || 0)),\n          total: {\n            value: searchResult.hits.total.value,\n            relation: searchResult.hits.total.relation as \"eq\" | \"gte\"\n          }\n        }\n      };\n    } catch (error) {\n      this.logger.error(\"Search failed\", {\n        error,\n        index: params.index,\n        query: params.query,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Invalidates all cached searches for an index\n   */\n  private async invalidateSearchCache(index: string): Promise<void> {\n    const cachePattern = `search:${index}:*`;\n    try {\n      const keys = await this.redis.keys(cachePattern);\n      if (keys.length > 0) {\n        await this.redis.del(...keys);\n        this.logger.debug(\"Invalidated search cache\", {\n          index,\n          keyCount: keys.length,\n        });\n      }\n    } catch (error) {\n      this.logger.error(\"Failed to invalidate search cache\", { index, error });\n      // Don't throw - this is a non-critical operation\n    }\n  }\n\n  /**\n   * Builds a cache key for search results\n   */\n  private buildSearchCacheKey(params: {\n    index: string;\n    query: Record<string, unknown>;\n    size?: number;\n    from?: number;\n    sort?: Record<string, \"asc\" | \"desc\">[];\n  }): string {\n    return `search:${params.index}:${JSON.stringify({\n      query: params.query,\n      size: params.size,\n      from: params.from,\n      sort: params.sort,\n    })}`;\n  }\n\n  /**\n   * Deletes a document from all data stores\n   */\n  async deleteDocument(params: {\n    index: string;\n    id: string;\n    tableName?: string;\n  }): Promise<void> {\n    try {\n      // Delete from Postgres first if tableName is provided\n      if (params.tableName) {\n        try {\n          await (prisma[params.tableName as keyof typeof prisma] as any).delete({\n            where: {\n              id: params.id,\n            },\n          });\n        } catch (dbError) {\n          this.logger.error('Failed to delete from database', {\n            error: dbError,\n            id: params.id,\n            tableName: params.tableName,\n          });\n          throw dbError;\n        }\n      }\n\n      // Then delete from Elasticsearch\n      try {\n        await this.es.deleteDocument(params.index, params.id);\n      } catch (esError) {\n        this.logger.error('Failed to delete from Elasticsearch', {\n          error: esError,\n          id: params.id,\n          index: params.index,\n        });\n        throw esError;\n      }\n\n      // Finally, remove from Redis cache\n      try {\n        await this.redis.del(`doc:${params.index}:${params.id}`);\n        await this.invalidateSearchCache(params.index);\n      } catch (cacheError) {\n        this.logger.warn('Failed to clear cache during deletion', {\n          error: cacheError,\n          id: params.id,\n          index: params.index,\n        });\n        // Don't throw for cache errors\n      }\n    } catch (error) {\n      this.logger.error(\"Failed to delete document\", {\n        error,\n        id: params.id,\n        index: params.index,\n        tableName: params.tableName,\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * Vectorizes a document by generating and storing embeddings\n   */\n  async vectorizeDocument(\n    doc: BaseDocument,\n    config?: { apiKey?: string }\n  ): Promise<BaseDocument & { embeddings: number[] }> {\n    try {\n      // Pass through the API key to the vectorization service\n      return await this.embeddingService.vectorizeDocument(doc, {\n        apiKey: config?.apiKey,\n      });\n    } catch (error) {\n      this.logger.error(\"Document vectorization failed\", {\n        error,\n        docId: doc.id,\n        hasApiKey: !!config?.apiKey,\n      });\n      throw error;\n    }\n  }\n\n  public async shutdown(): Promise<void> {\n    try {\n      if (this.redis?.disconnect) {\n        await this.redis.disconnect();\n      }\n      await prisma.$disconnect();\n    } catch (error: any) {\n      this.logger.error(\"Error during shutdown\", { error });\n    }\n  }\n\n  // Add type guard\n  private isValidDateString(value: string | undefined): value is string {\n    return typeof value === \"string\" && !isNaN(Date.parse(value));\n  }\n\n  public updateRedisService(redis: RedisCacheService): void {\n    this.redis = redis;\n  }\n\n  async ensureTableExists(tableName: string): Promise<void> {\n    try {\n      await prisma.$executeRaw`\n        CREATE TABLE IF NOT EXISTS ${tableName} (\n          id TEXT PRIMARY KEY,\n          document JSONB NOT NULL,\n          created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP\n        )\n      `;\n    } catch (error) {\n      this.logger.error(\"Failed to create table\", { error, tableName });\n      throw error;\n    }\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"75d289176b440c74406120ed2613a3a6bf8b0b91"}}