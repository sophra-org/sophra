{"/workspaces/sophra/src/lib/shared/engine/index.ts":{"path":"/workspaces/sophra/src/lib/shared/engine/index.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/shared/engine/index.ts"],"sourcesContent":["export * from './base-engine';\nexport * from './learning-engine';\nexport * from './adaptation-engine';\nexport type { PatternDetectionResult } from './adaptation-engine';\nexport * from './processors';"],"mappings":"AAAA,cAAc;AACd,cAAc;AACd,cAAc;AAEd,cAAc;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"09ee4289d3af8b7da8c94194b01d4d47dece0404"},"/workspaces/sophra/src/lib/shared/engine/base-engine.ts":{"path":"/workspaces/sophra/src/lib/shared/engine/base-engine.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":25}},"1":{"start":{"line":4,"column":4},"end":{"line":4,"column":25}},"2":{"start":{"line":7,"column":4},"end":{"line":7,"column":36}},"3":{"start":{"line":10,"column":18},"end":{"line":10,"column":52}},"4":{"start":{"line":11,"column":4},"end":{"line":13,"column":5}},"5":{"start":{"line":12,"column":6},"end":{"line":12,"column":39}},"6":{"start":{"line":16,"column":4},"end":{"line":22,"column":5}},"7":{"start":{"line":17,"column":6},"end":{"line":21,"column":7}},"8":{"start":{"line":18,"column":8},"end":{"line":18,"column":34}},"9":{"start":{"line":20,"column":8},"end":{"line":20,"column":57}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":2},"end":{"line":2,"column":3}},"loc":{"start":{"line":2,"column":22},"end":{"line":5,"column":3}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":2},"end":{"line":6,"column":3}},"loc":{"start":{"line":6,"column":31},"end":{"line":8,"column":3}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":2},"end":{"line":9,"column":3}},"loc":{"start":{"line":9,"column":33},"end":{"line":14,"column":3}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":15,"column":2},"end":{"line":15,"column":3}},"loc":{"start":{"line":15,"column":14},"end":{"line":23,"column":3}},"line":15}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":4},"end":{"line":13,"column":5}},"type":"if","locations":[{"start":{"line":11,"column":4},"end":{"line":13,"column":5}},{"start":{},"end":{}}],"line":11}},"s":{"0":3,"1":3,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"f":{"0":3,"1":0,"2":0,"3":0},"b":{"0":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/shared/engine/base-engine.ts"],"sourcesContent":["import { Logger } from \"@/lib/shared/types\";\nimport { BaseProcessor } from \"./processors\";\n\nexport class BaseEngine {\n  protected processors: BaseProcessor[] = [];\n\n  constructor(protected logger: Logger) {}\n\n  registerProcessor(processor: BaseProcessor): void {\n    this.processors.push(processor);\n  }\n\n  unregisterProcessor(processor: BaseProcessor): void {\n    const index = this.processors.indexOf(processor);\n    if (index !== -1) {\n      this.processors.splice(index, 1);\n    }\n  }\n\n  async run(): Promise<void> {\n    for (const processor of this.processors) {\n      try {\n        await processor.process();\n      } catch (error) {\n        console.error(\"Error running processor:\", error);\n      }\n    }\n  }\n}\n"],"mappings":"AAGO,aAAM,WAAW;AAAA,EAGtB,YAAsB,QAAgB;AAAhB;AAFtB,SAAU,aAA8B,CAAC;AAAA,EAEF;AAAA,EAEvC,kBAAkB,WAAgC;AAChD,SAAK,WAAW,KAAK,SAAS;AAAA,EAChC;AAAA,EAEA,oBAAoB,WAAgC;AAClD,UAAM,QAAQ,KAAK,WAAW,QAAQ,SAAS;AAC/C,QAAI,UAAU,IAAI;AAChB,WAAK,WAAW,OAAO,OAAO,CAAC;AAAA,IACjC;AAAA,EACF;AAAA,EAEA,MAAM,MAAqB;AACzB,eAAW,aAAa,KAAK,YAAY;AACvC,UAAI;AACF,cAAM,UAAU,QAAQ;AAAA,MAC1B,SAAS,OAAO;AACd,gBAAQ,MAAM,4BAA4B,KAAK;AAAA,MACjD;AAAA,IACF;AAAA,EACF;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3c2f0eb7d204ff27c3cc91eadbf804a273043171"},"/workspaces/sophra/src/lib/shared/engine/learning-engine.ts":{"path":"/workspaces/sophra/src/lib/shared/engine/learning-engine.ts","statementMap":{"0":{"start":{"line":9,"column":4},"end":{"line":9,"column":18}},"1":{"start":{"line":10,"column":4},"end":{"line":10,"column":31}},"2":{"start":{"line":11,"column":4},"end":{"line":11,"column":37}},"3":{"start":{"line":12,"column":4},"end":{"line":12,"column":50}},"4":{"start":{"line":15,"column":4},"end":{"line":15,"column":63}},"5":{"start":{"line":18,"column":22},"end":{"line":26,"column":6}},"6":{"start":{"line":27,"column":4},"end":{"line":56,"column":5}},"7":{"start":{"line":28,"column":23},"end":{"line":32,"column":42}},"8":{"start":{"line":32,"column":27},"end":{"line":32,"column":41}},"9":{"start":{"line":33,"column":31},"end":{"line":40,"column":8}},"10":{"start":{"line":41,"column":6},"end":{"line":44,"column":8}},"11":{"start":{"line":46,"column":6},"end":{"line":54,"column":9}},"12":{"start":{"line":55,"column":6},"end":{"line":55,"column":18}},"13":{"start":{"line":59,"column":4},"end":{"line":71,"column":5}},"14":{"start":{"line":60,"column":6},"end":{"line":67,"column":7}},"15":{"start":{"line":62,"column":10},"end":{"line":62,"column":16}},"16":{"start":{"line":64,"column":10},"end":{"line":64,"column":16}},"17":{"start":{"line":66,"column":10},"end":{"line":66,"column":75}},"18":{"start":{"line":69,"column":6},"end":{"line":69,"column":77}},"19":{"start":{"line":70,"column":6},"end":{"line":70,"column":18}},"20":{"start":{"line":74,"column":4},"end":{"line":74,"column":65}},"21":{"start":{"line":77,"column":4},"end":{"line":77,"column":75}},"22":{"start":{"line":80,"column":4},"end":{"line":80,"column":69}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":2},"end":{"line":8,"column":3}},"loc":{"start":{"line":8,"column":59},"end":{"line":13,"column":3}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":2},"end":{"line":14,"column":3}},"loc":{"start":{"line":14,"column":34},"end":{"line":16,"column":3}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":2},"end":{"line":17,"column":3}},"loc":{"start":{"line":17,"column":31},"end":{"line":57,"column":3}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":32,"column":14},"end":{"line":32,"column":15}},"loc":{"start":{"line":32,"column":27},"end":{"line":32,"column":41}},"line":32},"4":{"name":"(anonymous_4)","decl":{"start":{"line":58,"column":2},"end":{"line":58,"column":3}},"loc":{"start":{"line":58,"column":36},"end":{"line":72,"column":3}},"line":58},"5":{"name":"(anonymous_5)","decl":{"start":{"line":73,"column":2},"end":{"line":73,"column":3}},"loc":{"start":{"line":73,"column":34},"end":{"line":75,"column":3}},"line":73},"6":{"name":"(anonymous_6)","decl":{"start":{"line":76,"column":2},"end":{"line":76,"column":3}},"loc":{"start":{"line":76,"column":52},"end":{"line":78,"column":3}},"line":76},"7":{"name":"(anonymous_7)","decl":{"start":{"line":79,"column":2},"end":{"line":79,"column":3}},"loc":{"start":{"line":79,"column":38},"end":{"line":81,"column":3}},"line":79}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":36},"end":{"line":8,"column":57}},"type":"default-arg","locations":[{"start":{"line":8,"column":51},"end":{"line":8,"column":57}}],"line":8},"1":{"loc":{"start":{"line":50,"column":17},"end":{"line":50,"column":73}},"type":"cond-expr","locations":[{"start":{"line":50,"column":42},"end":{"line":50,"column":55}},{"start":{"line":50,"column":58},"end":{"line":50,"column":73}}],"line":50},"2":{"loc":{"start":{"line":60,"column":6},"end":{"line":67,"column":7}},"type":"switch","locations":[{"start":{"line":61,"column":8},"end":{"line":62,"column":16}},{"start":{"line":63,"column":8},"end":{"line":64,"column":16}},{"start":{"line":65,"column":8},"end":{"line":66,"column":75}}],"line":60}},"s":{"0":3,"1":3,"2":3,"3":3,"4":0,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0},"f":{"0":3,"1":0,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{"0":[0],"1":[0,0],"2":[0,0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/shared/engine/learning-engine.ts"],"sourcesContent":["import { prisma } from '../database/client';\nimport { Logger } from '../types';\nimport {\n  EngineOperation,\n  EngineOperationStatus,\n  EngineOperationType,\n  EngineOptimizationStrategy,\n  LearningEvent,\n  LearningPattern,\n} from \"@prisma/client\";\nimport { BaseEngine } from \"./base-engine\";\nimport {\n  FeedbackProcessor,\n  PerformanceProcessor,\n  StrategyProcessor,\n  TimeBasedProcessor,\n} from \"./processors\";\nimport type { ITimeBasedProcessor } from \"./processors/time-based-processor\";\n\nexport interface PatternDetectionResult {\n  operation: EngineOperation;\n  patterns: LearningPattern[];\n}\n\nexport interface ProcessorMap {\n  feedback: FeedbackProcessor;\n  performance: PerformanceProcessor;\n  timeBased: ITimeBasedProcessor;\n  strategy: StrategyProcessor;\n}\n\nexport class LearningEngine extends BaseEngine {\n  private prisma: typeof prisma;\n  private processorMap: ProcessorMap;\n\n  constructor(\n    logger: Logger, \n    processorMap: ProcessorMap,\n    prismaClient: typeof prisma = prisma\n  ) {\n    super(logger);\n    this.prisma = prismaClient;\n    this.processorMap = processorMap;\n    // Register processors with base engine\n    this.processors = Object.values(processorMap);\n  }\n\n  public async executeStrategy(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    await this.processorMap.strategy.executeStrategy(strategy);\n  }\n\n  async detectPatterns(\n    events: LearningEvent[]\n  ): Promise<PatternDetectionResult> {\n    const operation = await this.prisma.engineOperation.create({\n      data: {\n        type: EngineOperationType.PATTERN_DETECTION,\n        status: EngineOperationStatus.RUNNING,\n        startTime: new Date(),\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n\n    try {\n      const patterns = await Promise.all([\n        this.processorMap.feedback.analyze(events),\n        this.processorMap.performance.analyze(events),\n        this.processorMap.timeBased.analyze(events),\n      ]).then((results) => results.flat());\n\n      const updatedOperation = await this.prisma.engineOperation.update({\n        where: { id: operation.id },\n        data: {\n          status: EngineOperationStatus.COMPLETED,\n          endTime: new Date(),\n          updatedAt: new Date(),\n        },\n      });\n\n      return {\n        operation: updatedOperation,\n        patterns,\n      };\n    } catch (error) {\n      await this.prisma.engineOperation.update({\n        where: { id: operation.id },\n        data: {\n          status: EngineOperationStatus.FAILED,\n          error: error instanceof Error ? error.message : \"Unknown error\",\n          endTime: new Date(),\n          updatedAt: new Date(),\n        },\n      });\n      throw error;\n    }\n  }\n\n  async executeOperation(operation: EngineOperation): Promise<void> {\n    try {\n      switch (operation.type) {\n        case EngineOperationType.PATTERN_DETECTION:\n          // Pattern detection is handled by detectPatterns\n          break;\n        case EngineOperationType.STRATEGY_EXECUTION:\n          // Strategy execution is handled by the strategy processor\n          break;\n        default:\n          throw new Error(`Unsupported operation type: ${operation.type}`);\n      }\n    } catch (error) {\n      this.logger.error(\"Failed to execute operation\", { error, operation });\n      throw error;\n    }\n  }\n\n  async getTimeSeriesData(params: {\n    startDate: Date;\n    endDate: Date;\n    granularity: string;\n  }) {\n    return this.processorMap.timeBased.getTimeSeriesData(params);\n  }\n\n  async analyzeTemporalCorrelations(timeSeriesData: any) {\n    return this.processorMap.timeBased.analyzeCorrelations(timeSeriesData);\n  }\n\n  async findRecurringPatterns(params: {\n    timeframe: string;\n    minConfidence: number;\n  }) {\n    return this.processorMap.timeBased.findRecurringPatterns(params);\n  }\n}\n"],"mappings":"AAAA,SAAS,cAAc;AAEvB;AAAA,EAEE;AAAA,EACA;AAAA,OAIK;AACP,SAAS,kBAAkB;AAqBpB,aAAM,uBAAuB,WAAW;AAAA,EAI7C,YACE,QACA,cACA,eAA8B,QAC9B;AACA,UAAM,MAAM;AACZ,SAAK,SAAS;AACd,SAAK,eAAe;AAEpB,SAAK,aAAa,OAAO,OAAO,YAAY;AAAA,EAC9C;AAAA,EAEA,MAAa,gBACX,UACe;AACf,UAAM,KAAK,aAAa,SAAS,gBAAgB,QAAQ;AAAA,EAC3D;AAAA,EAEA,MAAM,eACJ,QACiC;AACjC,UAAM,YAAY,MAAM,KAAK,OAAO,gBAAgB,OAAO;AAAA,MACzD,MAAM;AAAA,QACJ,MAAM,oBAAoB;AAAA,QAC1B,QAAQ,sBAAsB;AAAA,QAC9B,WAAW,oBAAI,KAAK;AAAA,QACpB,WAAW,oBAAI,KAAK;AAAA,QACpB,WAAW,oBAAI,KAAK;AAAA,MACtB;AAAA,IACF,CAAC;AAED,QAAI;AACF,YAAM,WAAW,MAAM,QAAQ,IAAI;AAAA,QACjC,KAAK,aAAa,SAAS,QAAQ,MAAM;AAAA,QACzC,KAAK,aAAa,YAAY,QAAQ,MAAM;AAAA,QAC5C,KAAK,aAAa,UAAU,QAAQ,MAAM;AAAA,MAC5C,CAAC,EAAE,KAAK,CAAC,YAAY,QAAQ,KAAK,CAAC;AAEnC,YAAM,mBAAmB,MAAM,KAAK,OAAO,gBAAgB,OAAO;AAAA,QAChE,OAAO,EAAE,IAAI,UAAU,GAAG;AAAA,QAC1B,MAAM;AAAA,UACJ,QAAQ,sBAAsB;AAAA,UAC9B,SAAS,oBAAI,KAAK;AAAA,UAClB,WAAW,oBAAI,KAAK;AAAA,QACtB;AAAA,MACF,CAAC;AAED,aAAO;AAAA,QACL,WAAW;AAAA,QACX;AAAA,MACF;AAAA,IACF,SAAS,OAAO;AACd,YAAM,KAAK,OAAO,gBAAgB,OAAO;AAAA,QACvC,OAAO,EAAE,IAAI,UAAU,GAAG;AAAA,QAC1B,MAAM;AAAA,UACJ,QAAQ,sBAAsB;AAAA,UAC9B,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,UAChD,SAAS,oBAAI,KAAK;AAAA,UAClB,WAAW,oBAAI,KAAK;AAAA,QACtB;AAAA,MACF,CAAC;AACD,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAM,iBAAiB,WAA2C;AAChE,QAAI;AACF,cAAQ,UAAU,MAAM;AAAA,QACtB,KAAK,oBAAoB;AAEvB;AAAA,QACF,KAAK,oBAAoB;AAEvB;AAAA,QACF;AACE,gBAAM,IAAI,MAAM,+BAA+B,UAAU,IAAI,EAAE;AAAA,MACnE;AAAA,IACF,SAAS,OAAO;AACd,WAAK,OAAO,MAAM,+BAA+B,EAAE,OAAO,UAAU,CAAC;AACrE,YAAM;AAAA,IACR;AAAA,EACF;AAAA,EAEA,MAAM,kBAAkB,QAIrB;AACD,WAAO,KAAK,aAAa,UAAU,kBAAkB,MAAM;AAAA,EAC7D;AAAA,EAEA,MAAM,4BAA4B,gBAAqB;AACrD,WAAO,KAAK,aAAa,UAAU,oBAAoB,cAAc;AAAA,EACvE;AAAA,EAEA,MAAM,sBAAsB,QAGzB;AACD,WAAO,KAAK,aAAa,UAAU,sBAAsB,MAAM;AAAA,EACjE;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"764b7ccde7e08889c88802b36d31dbc9ccab3b98"},"/workspaces/sophra/src/lib/nous/adapt/actions/index.ts":{"path":"/workspaces/sophra/src/lib/nous/adapt/actions/index.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":25}},"1":{"start":{"line":4,"column":4},"end":{"line":4,"column":26}},"2":{"start":{"line":7,"column":25},"end":{"line":12,"column":5}},"3":{"start":{"line":13,"column":4},"end":{"line":13,"column":63}},"4":{"start":{"line":18,"column":4},"end":{"line":18,"column":27}},"5":{"start":{"line":21,"column":4},"end":{"line":21,"column":53}},"6":{"start":{"line":26,"column":4},"end":{"line":26,"column":27}},"7":{"start":{"line":27,"column":4},"end":{"line":27,"column":26}},"8":{"start":{"line":30,"column":4},"end":{"line":36,"column":5}},"9":{"start":{"line":31,"column":6},"end":{"line":35,"column":7}},"10":{"start":{"line":32,"column":8},"end":{"line":32,"column":32}},"11":{"start":{"line":34,"column":8},"end":{"line":34,"column":55}},"12":{"start":{"line":41,"column":4},"end":{"line":41,"column":40}},"13":{"start":{"line":42,"column":4},"end":{"line":42,"column":40}},"14":{"start":{"line":43,"column":4},"end":{"line":43,"column":36}},"15":{"start":{"line":44,"column":4},"end":{"line":44,"column":36}},"16":{"start":{"line":45,"column":4},"end":{"line":45,"column":26}},"17":{"start":{"line":48,"column":20},"end":{"line":48,"column":57}},"18":{"start":{"line":49,"column":19},"end":{"line":49,"column":44}},"19":{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},"20":{"start":{"line":51,"column":6},"end":{"line":51,"column":51}},"21":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"22":{"start":{"line":54,"column":6},"end":{"line":54,"column":51}},"23":{"start":{"line":56,"column":4},"end":{"line":56,"column":48}},"24":{"start":{"line":57,"column":4},"end":{"line":60,"column":7}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":2},"end":{"line":2,"column":3}},"loc":{"start":{"line":2,"column":31},"end":{"line":5,"column":3}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":2},"end":{"line":6,"column":3}},"loc":{"start":{"line":6,"column":19},"end":{"line":14,"column":3}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":2},"end":{"line":17,"column":3}},"loc":{"start":{"line":17,"column":23},"end":{"line":19,"column":3}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":20,"column":2},"end":{"line":20,"column":3}},"loc":{"start":{"line":20,"column":19},"end":{"line":22,"column":3}},"line":20},"4":{"name":"(anonymous_4)","decl":{"start":{"line":25,"column":2},"end":{"line":25,"column":3}},"loc":{"start":{"line":25,"column":32},"end":{"line":28,"column":3}},"line":25},"5":{"name":"(anonymous_5)","decl":{"start":{"line":29,"column":2},"end":{"line":29,"column":3}},"loc":{"start":{"line":29,"column":19},"end":{"line":37,"column":3}},"line":29},"6":{"name":"(anonymous_6)","decl":{"start":{"line":40,"column":2},"end":{"line":40,"column":3}},"loc":{"start":{"line":40,"column":31},"end":{"line":46,"column":3}},"line":40},"7":{"name":"(anonymous_7)","decl":{"start":{"line":47,"column":2},"end":{"line":47,"column":3}},"loc":{"start":{"line":47,"column":19},"end":{"line":61,"column":3}},"line":47}},"branchMap":{"0":{"loc":{"start":{"line":48,"column":20},"end":{"line":48,"column":57}},"type":"binary-expr","locations":[{"start":{"line":48,"column":20},"end":{"line":48,"column":52}},{"start":{"line":48,"column":56},"end":{"line":48,"column":57}}],"line":48},"1":{"loc":{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},"type":"if","locations":[{"start":{"line":50,"column":4},"end":{"line":52,"column":5}},{"start":{},"end":{}}],"line":50},"2":{"loc":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},{"start":{},"end":{}}],"line":53}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/adapt/actions/index.ts"],"sourcesContent":["import logger from \"@/lib/shared/logger\";\nimport type { Logger } from \"@/lib/shared/types\";\nimport { Action, RuleContext } from \"../types\";\n\nexport interface NotifyActionConfig {\n  title: string;\n  message: string;\n  severity: \"info\" | \"warning\" | \"error\";\n  channels?: string[];\n}\n\nexport class NotifyAction implements Action {\n  private config: NotifyActionConfig;\n  private logger: Logger;\n\n  constructor(config: NotifyActionConfig, logger: Logger) {\n    this.config = config;\n    this.logger = logger;\n  }\n\n  execute(context: RuleContext): void {\n    const notification = {\n      ...this.config,\n      timestamp: context.timestamp,\n      eventData: context.eventData,\n      metrics: context.metrics,\n    };\n\n    // TODO: Implement actual notification dispatch\n    this.logger.info(\"Would send notification:\", notification);\n  }\n}\n\nexport class UpdateStateAction implements Action {\n  private updates: Record<string, unknown>;\n\n  constructor(updates: Record<string, unknown>) {\n    this.updates = updates;\n  }\n\n  execute(context: RuleContext): void {\n    Object.assign(context.systemState, this.updates);\n  }\n}\n\nexport class CompositeAction implements Action {\n  private actions: Action[];\n  private logger: Logger;\n\n  constructor(actions: Action[], logger: Logger) {\n    this.actions = actions;\n    this.logger = logger;\n  }\n\n  execute(context: RuleContext): void {\n    for (const action of this.actions) {\n      try {\n        action.execute(context);\n      } catch (error) {\n        this.logger.error(`Action failed:`, { error });\n      }\n    }\n  }\n}\n\nexport class ThresholdAdjustmentAction implements Action {\n  private metricName: string;\n  private adjustment: number;\n  private minValue?: number;\n  private maxValue?: number;\n  private logger: Logger;\n\n  constructor(config: {\n    metricName: string;\n    adjustment: number;\n    minValue?: number;\n    maxValue?: number;\n  }, logger: Logger) {\n    this.metricName = config.metricName;\n    this.adjustment = config.adjustment;\n    this.minValue = config.minValue;\n    this.maxValue = config.maxValue;\n    this.logger = logger;\n  }\n\n  execute(context: RuleContext): void {\n    const current = context.metrics[this.metricName] || 0;\n    let newValue = current + this.adjustment;\n\n    if (this.minValue !== undefined) {\n      newValue = Math.max(newValue, this.minValue);\n    }\n    if (this.maxValue !== undefined) {\n      newValue = Math.min(newValue, this.maxValue);\n    }\n\n    context.metrics[this.metricName] = newValue;\n    this.logger.info(`Adjusted ${this.metricName}`, {\n      from: current,\n      to: newValue,\n    });\n  }\n}\n"],"mappings":"AAWO,aAAM,aAA+B;AAAA,EAI1C,YAAY,QAA4BA,SAAgB;AACtD,SAAK,SAAS;AACd,SAAK,SAASA;AAAA,EAChB;AAAA,EAEA,QAAQ,SAA4B;AAClC,UAAM,eAAe;AAAA,MACnB,GAAG,KAAK;AAAA,MACR,WAAW,QAAQ;AAAA,MACnB,WAAW,QAAQ;AAAA,MACnB,SAAS,QAAQ;AAAA,IACnB;AAGA,SAAK,OAAO,KAAK,4BAA4B,YAAY;AAAA,EAC3D;AACF;AAEO,aAAM,kBAAoC;AAAA,EAG/C,YAAY,SAAkC;AAC5C,SAAK,UAAU;AAAA,EACjB;AAAA,EAEA,QAAQ,SAA4B;AAClC,WAAO,OAAO,QAAQ,aAAa,KAAK,OAAO;AAAA,EACjD;AACF;AAEO,aAAM,gBAAkC;AAAA,EAI7C,YAAY,SAAmBA,SAAgB;AAC7C,SAAK,UAAU;AACf,SAAK,SAASA;AAAA,EAChB;AAAA,EAEA,QAAQ,SAA4B;AAClC,eAAW,UAAU,KAAK,SAAS;AACjC,UAAI;AACF,eAAO,QAAQ,OAAO;AAAA,MACxB,SAAS,OAAO;AACd,aAAK,OAAO,MAAM,kBAAkB,EAAE,MAAM,CAAC;AAAA,MAC/C;AAAA,IACF;AAAA,EACF;AACF;AAEO,aAAM,0BAA4C;AAAA,EAOvD,YAAY,QAKTA,SAAgB;AACjB,SAAK,aAAa,OAAO;AACzB,SAAK,aAAa,OAAO;AACzB,SAAK,WAAW,OAAO;AACvB,SAAK,WAAW,OAAO;AACvB,SAAK,SAASA;AAAA,EAChB;AAAA,EAEA,QAAQ,SAA4B;AAClC,UAAM,UAAU,QAAQ,QAAQ,KAAK,UAAU,KAAK;AACpD,QAAI,WAAW,UAAU,KAAK;AAE9B,QAAI,KAAK,aAAa,QAAW;AAC/B,iBAAW,KAAK,IAAI,UAAU,KAAK,QAAQ;AAAA,IAC7C;AACA,QAAI,KAAK,aAAa,QAAW;AAC/B,iBAAW,KAAK,IAAI,UAAU,KAAK,QAAQ;AAAA,IAC7C;AAEA,YAAQ,QAAQ,KAAK,UAAU,IAAI;AACnC,SAAK,OAAO,KAAK,YAAY,KAAK,UAAU,IAAI;AAAA,MAC9C,MAAM;AAAA,MACN,IAAI;AAAA,IACN,CAAC;AAAA,EACH;AACF;","names":["logger"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a0249a56d2331c91e43104bd40642974aa7db2a5"},"/workspaces/sophra/src/lib/shared/logger/src/logger.ts":{"path":"/workspaces/sophra/src/lib/shared/logger/src/logger.ts","statementMap":{"0":{"start":{"line":5,"column":0},"end":{"line":27,"column":1}},"1":{"start":{"line":6,"column":24},"end":{"line":25,"column":3}},"2":{"start":{"line":7,"column":26},"end":{"line":7,"column":49}},"3":{"start":{"line":8,"column":4},"end":{"line":8,"column":36}},"4":{"start":{"line":9,"column":24},"end":{"line":9,"column":53}},"5":{"start":{"line":10,"column":27},"end":{"line":10,"column":59}},"6":{"start":{"line":11,"column":4},"end":{"line":11,"column":34}},"7":{"start":{"line":12,"column":4},"end":{"line":12,"column":55}},"8":{"start":{"line":13,"column":4},"end":{"line":24,"column":7}},"9":{"start":{"line":26,"column":2},"end":{"line":26,"column":18}},"10":{"start":{"line":28,"column":19},"end":{"line":39,"column":1}},"11":{"start":{"line":40,"column":19},"end":{"line":51,"column":1}},"12":{"start":{"line":52,"column":28},"end":{"line":88,"column":1}},"13":{"start":{"line":53,"column":21},"end":{"line":53,"column":28}},"14":{"start":{"line":54,"column":20},"end":{"line":71,"column":3}},"15":{"start":{"line":55,"column":19},"end":{"line":66,"column":5}},"16":{"start":{"line":67,"column":4},"end":{"line":69,"column":5}},"17":{"start":{"line":68,"column":6},"end":{"line":68,"column":18}},"18":{"start":{"line":70,"column":4},"end":{"line":70,"column":49}},"19":{"start":{"line":72,"column":24},"end":{"line":86,"column":3}},"20":{"start":{"line":73,"column":24},"end":{"line":73,"column":98}},"21":{"start":{"line":74,"column":23},"end":{"line":74,"column":94}},"22":{"start":{"line":75,"column":23},"end":{"line":75,"column":94}},"23":{"start":{"line":76,"column":24},"end":{"line":76,"column":98}},"24":{"start":{"line":77,"column":23},"end":{"line":77,"column":93}},"25":{"start":{"line":78,"column":26},"end":{"line":78,"column":102}},"26":{"start":{"line":81,"column":6},"end":{"line":81,"column":26}},"27":{"start":{"line":84,"column":6},"end":{"line":84,"column":30}},"28":{"start":{"line":87,"column":2},"end":{"line":87,"column":23}},"29":{"start":{"line":89,"column":27},"end":{"line":89,"column":31}},"30":{"start":{"line":91,"column":14},"end":{"line":91,"column":25}},"31":{"start":{"line":92,"column":2},"end":{"line":92,"column":31}},"32":{"start":{"line":93,"column":16},"end":{"line":93,"column":44}},"33":{"start":{"line":94,"column":21},"end":{"line":96,"column":4}},"34":{"start":{"line":95,"column":4},"end":{"line":95,"column":138}},"35":{"start":{"line":97,"column":2},"end":{"line":97,"column":35}},"36":{"start":{"line":97,"column":19},"end":{"line":97,"column":35}},"37":{"start":{"line":98,"column":16},"end":{"line":98,"column":93}},"38":{"start":{"line":99,"column":2},"end":{"line":99,"column":31}},"39":{"start":{"line":99,"column":14},"end":{"line":99,"column":31}},"40":{"start":{"line":100,"column":19},"end":{"line":100,"column":27}},"41":{"start":{"line":101,"column":2},"end":{"line":108,"column":3}},"42":{"start":{"line":102,"column":21},"end":{"line":104,"column":5}},"43":{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},"44":{"start":{"line":106,"column":6},"end":{"line":106,"column":67}},"45":{"start":{"line":109,"column":22},"end":{"line":109,"column":35}},"46":{"start":{"line":110,"column":23},"end":{"line":110,"column":59}},"47":{"start":{"line":111,"column":2},"end":{"line":111,"column":186}},"48":{"start":{"line":114,"column":24},"end":{"line":114,"column":52}},"49":{"start":{"line":115,"column":2},"end":{"line":117,"column":3}},"50":{"start":{"line":116,"column":4},"end":{"line":116,"column":46}},"51":{"start":{"line":118,"column":2},"end":{"line":166,"column":3}},"52":{"start":{"line":119,"column":19},"end":{"line":124,"column":5}},"53":{"start":{"line":125,"column":23},"end":{"line":145,"column":5}},"54":{"start":{"line":132,"column":32},"end":{"line":132,"column":66}},"55":{"start":{"line":133,"column":28},"end":{"line":133,"column":71}},"56":{"start":{"line":134,"column":25},"end":{"line":136,"column":36}},"57":{"start":{"line":137,"column":27},"end":{"line":137,"column":49}},"58":{"start":{"line":138,"column":75},"end":{"line":138,"column":83}},"59":{"start":{"line":139,"column":34},"end":{"line":139,"column":110}},"60":{"start":{"line":140,"column":14},"end":{"line":140,"column":83}},"61":{"start":{"line":146,"column":4},"end":{"line":149,"column":5}},"62":{"start":{"line":147,"column":22},"end":{"line":147,"column":60}},"63":{"start":{"line":148,"column":6},"end":{"line":148,"column":53}},"64":{"start":{"line":150,"column":4},"end":{"line":164,"column":7}},"65":{"start":{"line":165,"column":4},"end":{"line":165,"column":50}},"66":{"start":{"line":167,"column":2},"end":{"line":169,"column":3}},"67":{"start":{"line":168,"column":4},"end":{"line":168,"column":46}},"68":{"start":{"line":170,"column":22},"end":{"line":173,"column":4}},"69":{"start":{"line":174,"column":2},"end":{"line":174,"column":53}},"70":{"start":{"line":175,"column":2},"end":{"line":175,"column":21}},"71":{"start":{"line":177,"column":22},"end":{"line":177,"column":33}},"72":{"start":{"line":179,"column":38},"end":{"line":191,"column":18}},"73":{"start":{"line":180,"column":2},"end":{"line":180,"column":31}},"74":{"start":{"line":181,"column":2},"end":{"line":181,"column":29}},"75":{"start":{"line":182,"column":2},"end":{"line":182,"column":29}},"76":{"start":{"line":183,"column":2},"end":{"line":183,"column":31}},"77":{"start":{"line":184,"column":2},"end":{"line":184,"column":29}},"78":{"start":{"line":185,"column":2},"end":{"line":185,"column":35}},"79":{"start":{"line":186,"column":2},"end":{"line":186,"column":31}},"80":{"start":{"line":187,"column":2},"end":{"line":187,"column":29}},"81":{"start":{"line":188,"column":2},"end":{"line":188,"column":33}},"82":{"start":{"line":189,"column":2},"end":{"line":189,"column":31}},"83":{"start":{"line":190,"column":2},"end":{"line":190,"column":19}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":24},"end":{"line":6,"column":25}},"loc":{"start":{"line":6,"column":36},"end":{"line":25,"column":3}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":52,"column":28},"end":{"line":52,"column":29}},"loc":{"start":{"line":52,"column":43},"end":{"line":88,"column":1}},"line":52},"2":{"name":"(anonymous_2)","decl":{"start":{"line":54,"column":20},"end":{"line":54,"column":21}},"loc":{"start":{"line":54,"column":31},"end":{"line":71,"column":3}},"line":54},"3":{"name":"(anonymous_3)","decl":{"start":{"line":73,"column":11},"end":{"line":73,"column":12}},"loc":{"start":{"line":73,"column":24},"end":{"line":73,"column":98}},"line":73},"4":{"name":"(anonymous_4)","decl":{"start":{"line":74,"column":10},"end":{"line":74,"column":11}},"loc":{"start":{"line":74,"column":23},"end":{"line":74,"column":94}},"line":74},"5":{"name":"(anonymous_5)","decl":{"start":{"line":75,"column":10},"end":{"line":75,"column":11}},"loc":{"start":{"line":75,"column":23},"end":{"line":75,"column":94}},"line":75},"6":{"name":"(anonymous_6)","decl":{"start":{"line":76,"column":11},"end":{"line":76,"column":12}},"loc":{"start":{"line":76,"column":24},"end":{"line":76,"column":98}},"line":76},"7":{"name":"(anonymous_7)","decl":{"start":{"line":77,"column":10},"end":{"line":77,"column":11}},"loc":{"start":{"line":77,"column":23},"end":{"line":77,"column":93}},"line":77},"8":{"name":"(anonymous_8)","decl":{"start":{"line":78,"column":13},"end":{"line":78,"column":14}},"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":102}},"line":78},"9":{"name":"(anonymous_9)","decl":{"start":{"line":80,"column":4},"end":{"line":80,"column":5}},"loc":{"start":{"line":80,"column":16},"end":{"line":82,"column":5}},"line":80},"10":{"name":"(anonymous_10)","decl":{"start":{"line":83,"column":4},"end":{"line":83,"column":5}},"loc":{"start":{"line":83,"column":24},"end":{"line":85,"column":5}},"line":83},"11":{"name":"getCallerFile","decl":{"start":{"line":90,"column":9},"end":{"line":90,"column":22}},"loc":{"start":{"line":90,"column":25},"end":{"line":112,"column":1}},"line":90},"12":{"name":"(anonymous_12)","decl":{"start":{"line":94,"column":32},"end":{"line":94,"column":33}},"loc":{"start":{"line":94,"column":42},"end":{"line":96,"column":3}},"line":94},"13":{"name":"getLogger","decl":{"start":{"line":113,"column":16},"end":{"line":113,"column":25}},"loc":{"start":{"line":113,"column":37},"end":{"line":176,"column":1}},"line":113},"14":{"name":"(anonymous_14)","decl":{"start":{"line":131,"column":12},"end":{"line":131,"column":13}},"loc":{"start":{"line":131,"column":83},"end":{"line":141,"column":13}},"line":131},"15":{"name":"(anonymous_15)","decl":{"start":{"line":179,"column":39},"end":{"line":179,"column":40}},"loc":{"start":{"line":179,"column":54},"end":{"line":191,"column":1}},"line":179}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":0},"end":{"line":27,"column":1}},"type":"if","locations":[{"start":{"line":5,"column":0},"end":{"line":27,"column":1}},{"start":{},"end":{}}],"line":5},"1":{"loc":{"start":{"line":67,"column":4},"end":{"line":69,"column":5}},"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":69,"column":5}},{"start":{},"end":{}}],"line":67},"2":{"loc":{"start":{"line":67,"column":8},"end":{"line":67,"column":55}},"type":"binary-expr","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":26}},{"start":{"line":67,"column":30},"end":{"line":67,"column":55}}],"line":67},"3":{"loc":{"start":{"line":73,"column":24},"end":{"line":73,"column":98}},"type":"binary-expr","locations":[{"start":{"line":73,"column":24},"end":{"line":73,"column":54}},{"start":{"line":73,"column":58},"end":{"line":73,"column":98}}],"line":73},"4":{"loc":{"start":{"line":74,"column":23},"end":{"line":74,"column":94}},"type":"binary-expr","locations":[{"start":{"line":74,"column":23},"end":{"line":74,"column":51}},{"start":{"line":74,"column":55},"end":{"line":74,"column":94}}],"line":74},"5":{"loc":{"start":{"line":75,"column":23},"end":{"line":75,"column":94}},"type":"binary-expr","locations":[{"start":{"line":75,"column":23},"end":{"line":75,"column":51}},{"start":{"line":75,"column":55},"end":{"line":75,"column":94}}],"line":75},"6":{"loc":{"start":{"line":76,"column":24},"end":{"line":76,"column":98}},"type":"binary-expr","locations":[{"start":{"line":76,"column":24},"end":{"line":76,"column":54}},{"start":{"line":76,"column":58},"end":{"line":76,"column":98}}],"line":76},"7":{"loc":{"start":{"line":77,"column":23},"end":{"line":77,"column":93}},"type":"binary-expr","locations":[{"start":{"line":77,"column":23},"end":{"line":77,"column":51}},{"start":{"line":77,"column":55},"end":{"line":77,"column":93}}],"line":77},"8":{"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":102}},"type":"binary-expr","locations":[{"start":{"line":78,"column":26},"end":{"line":78,"column":60}},{"start":{"line":78,"column":64},"end":{"line":78,"column":102}}],"line":78},"9":{"loc":{"start":{"line":93,"column":16},"end":{"line":93,"column":44}},"type":"binary-expr","locations":[{"start":{"line":93,"column":16},"end":{"line":93,"column":38}},{"start":{"line":93,"column":42},"end":{"line":93,"column":44}}],"line":93},"10":{"loc":{"start":{"line":95,"column":11},"end":{"line":95,"column":137}},"type":"binary-expr","locations":[{"start":{"line":95,"column":11},"end":{"line":95,"column":31}},{"start":{"line":95,"column":35},"end":{"line":95,"column":66}},{"start":{"line":95,"column":70},"end":{"line":95,"column":97}},{"start":{"line":95,"column":101},"end":{"line":95,"column":137}}],"line":95},"11":{"loc":{"start":{"line":97,"column":2},"end":{"line":97,"column":35}},"type":"if","locations":[{"start":{"line":97,"column":2},"end":{"line":97,"column":35}},{"start":{},"end":{}}],"line":97},"12":{"loc":{"start":{"line":98,"column":16},"end":{"line":98,"column":93}},"type":"binary-expr","locations":[{"start":{"line":98,"column":16},"end":{"line":98,"column":53}},{"start":{"line":98,"column":57},"end":{"line":98,"column":93}}],"line":98},"13":{"loc":{"start":{"line":99,"column":2},"end":{"line":99,"column":31}},"type":"if","locations":[{"start":{"line":99,"column":2},"end":{"line":99,"column":31}},{"start":{},"end":{}}],"line":99},"14":{"loc":{"start":{"line":101,"column":2},"end":{"line":108,"column":3}},"type":"if","locations":[{"start":{"line":101,"column":2},"end":{"line":108,"column":3}},{"start":{},"end":{}}],"line":101},"15":{"loc":{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},{"start":{},"end":{}}],"line":105},"16":{"loc":{"start":{"line":114,"column":24},"end":{"line":114,"column":52}},"type":"binary-expr","locations":[{"start":{"line":114,"column":24},"end":{"line":114,"column":33}},{"start":{"line":114,"column":37},"end":{"line":114,"column":52}}],"line":114},"17":{"loc":{"start":{"line":115,"column":2},"end":{"line":117,"column":3}},"type":"if","locations":[{"start":{"line":115,"column":2},"end":{"line":117,"column":3}},{"start":{},"end":{}}],"line":115},"18":{"loc":{"start":{"line":118,"column":2},"end":{"line":166,"column":3}},"type":"if","locations":[{"start":{"line":118,"column":2},"end":{"line":166,"column":3}},{"start":{},"end":{}}],"line":118},"19":{"loc":{"start":{"line":118,"column":6},"end":{"line":118,"column":38}},"type":"binary-expr","locations":[{"start":{"line":118,"column":6},"end":{"line":118,"column":27}},{"start":{"line":118,"column":31},"end":{"line":118,"column":38}}],"line":118},"20":{"loc":{"start":{"line":121,"column":19},"end":{"line":121,"column":56}},"type":"binary-expr","locations":[{"start":{"line":121,"column":19},"end":{"line":121,"column":39}},{"start":{"line":121,"column":43},"end":{"line":121,"column":56}}],"line":121},"21":{"loc":{"start":{"line":122,"column":13},"end":{"line":122,"column":44}},"type":"binary-expr","locations":[{"start":{"line":122,"column":13},"end":{"line":122,"column":34}},{"start":{"line":122,"column":38},"end":{"line":122,"column":44}}],"line":122},"22":{"loc":{"start":{"line":123,"column":17},"end":{"line":123,"column":57}},"type":"binary-expr","locations":[{"start":{"line":123,"column":17},"end":{"line":123,"column":44}},{"start":{"line":123,"column":48},"end":{"line":123,"column":57}}],"line":123},"23":{"loc":{"start":{"line":133,"column":28},"end":{"line":133,"column":71}},"type":"binary-expr","locations":[{"start":{"line":133,"column":28},"end":{"line":133,"column":63}},{"start":{"line":133,"column":67},"end":{"line":133,"column":71}}],"line":133},"24":{"loc":{"start":{"line":137,"column":27},"end":{"line":137,"column":49}},"type":"binary-expr","locations":[{"start":{"line":137,"column":27},"end":{"line":137,"column":37}},{"start":{"line":137,"column":41},"end":{"line":137,"column":49}}],"line":137},"25":{"loc":{"start":{"line":139,"column":34},"end":{"line":139,"column":110}},"type":"cond-expr","locations":[{"start":{"line":139,"column":69},"end":{"line":139,"column":105}},{"start":{"line":139,"column":108},"end":{"line":139,"column":110}}],"line":139},"26":{"loc":{"start":{"line":146,"column":4},"end":{"line":149,"column":5}},"type":"if","locations":[{"start":{"line":146,"column":4},"end":{"line":149,"column":5}},{"start":{},"end":{}}],"line":146},"27":{"loc":{"start":{"line":146,"column":8},"end":{"line":146,"column":105}},"type":"binary-expr","locations":[{"start":{"line":146,"column":8},"end":{"line":146,"column":33}},{"start":{"line":146,"column":37},"end":{"line":146,"column":74}},{"start":{"line":146,"column":78},"end":{"line":146,"column":85}},{"start":{"line":146,"column":89},"end":{"line":146,"column":105}}],"line":146},"28":{"loc":{"start":{"line":167,"column":2},"end":{"line":169,"column":3}},"type":"if","locations":[{"start":{"line":167,"column":2},"end":{"line":169,"column":3}},{"start":{},"end":{}}],"line":167},"29":{"loc":{"start":{"line":191,"column":3},"end":{"line":191,"column":17}},"type":"binary-expr","locations":[{"start":{"line":191,"column":3},"end":{"line":191,"column":11}},{"start":{"line":191,"column":15},"end":{"line":191,"column":17}}],"line":191}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":2,"14":2,"15":0,"16":0,"17":0,"18":0,"19":2,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":2,"29":1,"30":1,"31":1,"32":1,"33":1,"34":4,"35":1,"36":0,"37":1,"38":1,"39":0,"40":1,"41":1,"42":0,"43":0,"44":0,"45":1,"46":1,"47":1,"48":2,"49":2,"50":0,"51":2,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":2,"67":2,"68":0,"69":0,"70":0,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1},"f":{"0":1,"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":4,"13":2,"14":0,"15":1},"b":{"0":[1,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[1,0],"10":[4,3,2,1],"11":[0,1],"12":[1,1],"13":[0,1],"14":[0,1],"15":[0,0],"16":[2,1],"17":[0,2],"18":[0,2],"19":[2,2],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0,0,0],"28":[2,0],"29":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/shared/logger/src/logger.ts"],"sourcesContent":["import { Logger } from \"@/lib/shared/types\";\nimport path from \"path\";\nimport type * as Winston from \"winston\";\n\n// Dynamic imports for server-side only modules\nlet winston: typeof Winston;\nlet Logtail: typeof import(\"@logtail/node\").Logtail;\nlet LogtailTransport: typeof import(\"@logtail/winston\").LogtailTransport;\n\n// Initialize server-side modules\nif (typeof window === \"undefined\") {\n  const importWinston = async () => {\n    const winstonModule = await import(\"winston\");\n    winston = winstonModule.default;\n    const logtailNode = await import(\"@logtail/node\");\n    const logtailWinston = await import(\"@logtail/winston\");\n    Logtail = logtailNode.Logtail;\n    LogtailTransport = logtailWinston.LogtailTransport;\n\n    // Move winston color configuration here\n    winston.addColors({\n      error: \"white bgRed bold\",\n      warn: \"black bgYellow\",\n      info: \"black bgGreen\",\n      debug: \"white bgBlue\",\n      http: \"white bgMagenta\",\n      verbose: \"white bgGray\",\n      build: \"black bgCyan\",\n      test: \"white bgMagenta\",\n      deploy: \"white bgGreen\",\n      cache: \"white bgBlue\",\n    });\n  };\n  // Execute the import\n  importWinston();\n}\n\n// Add turborepo-specific emoji indicators\nconst LOG_EMOJIS = {\n  error: \"🚨\",\n  warn: \"⚠️\",\n  info: \"ℹ️\",\n  debug: \"🔍\",\n  http: \"🌐\",\n  verbose: \"📝\",\n  build: \"📦\",\n  test: \"🧪\",\n  deploy: \"🚀\",\n  cache: \"💾\",\n} as const;\n\n// Enhanced log colors with background colors\nconst LOG_COLORS = {\n  error: \"white bgRed bold\",\n  warn: \"black bgYellow\",\n  info: \"black bgGreen\",\n  debug: \"white bgBlue\",\n  http: \"white bgMagenta\",\n  verbose: \"white bgGray\",\n  build: \"black bgCyan\",\n  test: \"white bgMagenta\",\n  deploy: \"white bgGreen\",\n  cache: \"white bgBlue\",\n} as const;\n\nexport interface LoggerConfig {\n  service?: string;\n  logtailToken?: string;\n  environment?: string;\n  level?: string;\n  silent?: boolean;\n  workspace?: string;\n}\n\n// Create a browser-safe logger implementation\nconst createBrowserLogger = (component: string): Logger => {\n  let currentLevel = LogLevel.DEBUG;\n\n  const shouldLog = (level: LogLevel): boolean => {\n    const levels = {\n      [LogLevel.ERROR]: 0,\n      [LogLevel.WARN]: 1,\n      [LogLevel.INFO]: 2,\n      [LogLevel.HTTP]: 3,\n      [LogLevel.DEBUG]: 4,\n      [LogLevel.VERBOSE]: 5,\n      [LogLevel.BUILD]: 6,\n      [LogLevel.TEST]: 7,\n      [LogLevel.DEPLOY]: 8,\n      [LogLevel.CACHE]: 9,\n    };\n    if (!(level in levels) || !(currentLevel in levels)) {\n      return true;\n    }\n    return levels[level] <= levels[currentLevel as LogLevel];\n  };\n\n  const browserLogger = {\n    error: (...args: any[]) => shouldLog(LogLevel.ERROR) && console.error(`[${component}]`, ...args),\n    warn: (...args: any[]) => shouldLog(LogLevel.WARN) && console.warn(`[${component}]`, ...args),\n    info: (...args: any[]) => shouldLog(LogLevel.INFO) && console.info(`[${component}]`, ...args),\n    debug: (...args: any[]) => shouldLog(LogLevel.DEBUG) && console.debug(`[${component}]`, ...args),\n    http: (...args: any[]) => shouldLog(LogLevel.HTTP) && console.log(`[${component}]`, ...args),\n    verbose: (...args: any[]) => shouldLog(LogLevel.VERBOSE) && console.log(`[${component}]`, ...args),\n    service: \"sophra\",\n    get level() {\n      return currentLevel;\n    },\n    set level(newLevel: string) {\n      currentLevel = newLevel as LogLevel;\n    },\n  } as unknown as Logger;\n  return browserLogger;\n};\n\nlet globalLoggerInstance: Winston.Logger | null = null;\n\nfunction getCallerFile(): string {\n  // Create an error to get the stack trace\n  const err = new Error();\n  Error.captureStackTrace(err);\n\n  // Parse the stack trace to find the caller\n  const stack = err.stack?.split(\"\\n\") || [];\n\n  // Find the first line that's not from this file or node internal\n  const callerLine = stack.find((line) => {\n    return (\n      line.includes(\"at \") &&\n      !line.includes(\"getCallerFile\") &&\n      !line.includes(\"getLogger\") &&\n      !line.includes(\"Object.<anonymous>\")\n    );\n  });\n\n  if (!callerLine) return \"sophra\";\n\n  // Extract the file path\n  const match =\n    callerLine.match(/\\((.+?):\\d+:\\d+\\)/) ||\n    callerLine.match(/at (.+?):\\d+:\\d+/);\n\n  if (!match) return \"unknown\";\n\n  // Get the full path\n  const fullPath = match[1];\n\n  // Handle webpack-internal paths\n  if (fullPath.includes(\"webpack-internal\")) {\n    // Look for src/app or src/lib pattern\n    const srcMatch = fullPath.match(\n      /src\\/(app|lib)\\/(.*?)(\\/route|\\/page|\\/index|\\.[jt]sx?)/\n    );\n    if (srcMatch) {\n      return srcMatch[2]\n        .replace(/^api\\//, \"\") // Remove api prefix\n        .replace(/\\//g, \".\"); // Convert slashes to dots\n    }\n  }\n\n  // For non-webpack paths, use the relative path approach\n  const projectRoot = process.cwd();\n  const relativePath = path.relative(projectRoot, fullPath);\n\n  return relativePath\n    .replace(/\\.(js|ts|tsx|jsx)$/, \"\") // Remove extension\n    .replace(/^src\\/(app|lib)\\//, \"\") // Remove src/app or src/lib\n    .replace(/\\/route$/, \"\") // Remove route suffix\n    .replace(/\\/(index|page)$/, \"\") // Remove index/page suffix\n    .replace(/\\//g, \".\") // Convert slashes to dots\n    .replace(/^api\\./, \"\"); // Remove api prefix\n}\n\n// Modify getLogger to use automatic component detection\nexport function getLogger(component?: string): Logger {\n  const autoComponent = component || getCallerFile();\n\n  // Check if we're in a browser environment\n  if (typeof window !== \"undefined\") {\n    return createBrowserLogger(autoComponent);\n  }\n\n  // Server-side logging logic\n  if (!globalLoggerInstance && winston) {\n    const config = {\n      service: \"sophra\",\n      environment: process.env.NODE_ENV || \"development\",\n      level: process.env.LOG_LEVEL || \"info\",\n      workspace: process.env.TURBO_WORKSPACE || \"unknown\",\n    };\n\n    const transports: Winston.transport[] = [\n      new winston.transports.Console({\n        format: winston.format.combine(\n          winston.format.colorize({ colors: LOG_COLORS }),\n          winston.format.simple(),\n          winston.format.printf(\n            ({ level, message, timestamp, component, ...metadata }) => {\n              // Extract the base level without any color codes\n              const baseLevel = level.replace(/\\u001b\\[\\d+m/g, \"\");\n              const emoji =\n                LOG_EMOJIS[\n                  baseLevel.toLowerCase() as keyof typeof LOG_EMOJIS\n                ] || \"📋\";\n              const ts = new Date(\n                timestamp as string | number | Date\n              ).toLocaleTimeString();\n              const comp = component || \"sophra\";\n\n              // Only include metadata if it's not empty and exclude certain fields\n              const { service, environment, workspace, ...restMetadata } =\n                metadata;\n              const metadataStr = Object.keys(restMetadata).length\n                ? ` | ${JSON.stringify(restMetadata)}`\n                : \"\";\n\n              return `${emoji} ${ts} [${comp}] ${level}: ${message}${metadataStr}`;\n            }\n          )\n        ),\n      }),\n    ];\n\n    if (\n      process.env.LOGTAIL_TOKEN &&\n      process.env.NODE_ENV === \"production\" &&\n      Logtail &&\n      LogtailTransport\n    ) {\n      const logtail = new Logtail(process.env.LOGTAIL_TOKEN);\n      transports.push(new LogtailTransport(logtail));\n    }\n\n    globalLoggerInstance = winston.createLogger({\n      level: config.level,\n      format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.errors({ stack: true }),\n        winston.format.splat()\n      ),\n      defaultMeta: {\n        service: config.service,\n        component: autoComponent,\n        environment: config.environment,\n        workspace: config.workspace,\n      },\n      transports,\n    }) as Logger;\n\n    (globalLoggerInstance as Logger).service = config.service;\n  }\n\n  // If winston isn't initialized yet, return a browser-like logger\n  if (!globalLoggerInstance) {\n    return createBrowserLogger(autoComponent);\n  }\n\n  const childLogger = globalLoggerInstance.child({\n    component: autoComponent,\n    workspace: process.env.TURBO_WORKSPACE,\n  }) as Logger;\n\n  childLogger.service = (globalLoggerInstance as Logger).service;\n\n  return childLogger;\n}\n\n// Create a default logger instance\nexport const logger = getLogger();\nexport default logger;\n\nexport enum LogLevel {\n  ERROR = \"error\",\n  WARN = \"warn\",\n  INFO = \"info\",\n  DEBUG = \"debug\",\n  HTTP = \"http\",\n  VERBOSE = \"verbose\",\n  BUILD = \"build\",\n  TEST = \"test\",\n  DEPLOY = \"deploy\",\n  CACHE = \"cache\",\n}\n"],"mappings":"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","names":["component","LogLevel"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"87973e60e2c51316d3b66c7a23120f56a7926d9c"},"/workspaces/sophra/src/lib/shared/logger/index.ts":{"path":"/workspaces/sophra/src/lib/shared/logger/index.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":2,"column":42}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/shared/logger/index.ts"],"sourcesContent":["import { getLogger } from \"./src/logger\";\n\n// Create and export the default logger instance\nexport const logger = getLogger(\"default\");\n\n// Re-export everything from the main logger\nexport * from \"./src/logger\";\nexport default logger;\n"],"mappings":"AAAA,SAAS,iBAAiB;AAGnB,aAAM,SAAS,UAAU,SAAS;AAGzC,cAAc;AACd,eAAe;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f275a05ed3b683c4cfd8794e3f9c5bf1037ebde0"},"/workspaces/sophra/src/lib/nous/adapt/rules/index.ts":{"path":"/workspaces/sophra/src/lib/nous/adapt/rules/index.ts","statementMap":{"0":{"start":{"line":4,"column":4},"end":{"line":4,"column":43}},"1":{"start":{"line":5,"column":4},"end":{"line":5,"column":25}},"2":{"start":{"line":8,"column":4},"end":{"line":8,"column":36}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":32}},"4":{"start":{"line":14,"column":4},"end":{"line":14,"column":27}},"5":{"start":{"line":17,"column":4},"end":{"line":17,"column":36}},"6":{"start":{"line":20,"column":27},"end":{"line":20,"column":52}},"7":{"start":{"line":21,"column":4},"end":{"line":28,"column":5}},"8":{"start":{"line":22,"column":6},"end":{"line":27,"column":7}},"9":{"start":{"line":23,"column":8},"end":{"line":23,"column":36}},"10":{"start":{"line":24,"column":8},"end":{"line":24,"column":56}},"11":{"start":{"line":26,"column":8},"end":{"line":26,"column":76}},"12":{"start":{"line":31,"column":22},"end":{"line":31,"column":24}},"13":{"start":{"line":32,"column":4},"end":{"line":36,"column":5}},"14":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"15":{"start":{"line":34,"column":8},"end":{"line":34,"column":29}},"16":{"start":{"line":37,"column":4},"end":{"line":37,"column":61}},"17":{"start":{"line":37,"column":36},"end":{"line":37,"column":59}},"18":{"start":{"line":42,"column":4},"end":{"line":42,"column":33}},"19":{"start":{"line":43,"column":4},"end":{"line":43,"column":31}},"20":{"start":{"line":44,"column":4},"end":{"line":44,"column":29}},"21":{"start":{"line":47,"column":18},"end":{"line":47,"column":50}},"22":{"start":{"line":48,"column":4},"end":{"line":48,"column":39}},"23":{"start":{"line":48,"column":26},"end":{"line":48,"column":39}},"24":{"start":{"line":49,"column":4},"end":{"line":62,"column":5}},"25":{"start":{"line":51,"column":8},"end":{"line":51,"column":38}},"26":{"start":{"line":53,"column":8},"end":{"line":53,"column":38}},"27":{"start":{"line":55,"column":8},"end":{"line":55,"column":39}},"28":{"start":{"line":57,"column":8},"end":{"line":57,"column":39}},"29":{"start":{"line":59,"column":8},"end":{"line":59,"column":40}},"30":{"start":{"line":61,"column":8},"end":{"line":61,"column":21}},"31":{"start":{"line":67,"column":4},"end":{"line":67,"column":31}},"32":{"start":{"line":68,"column":4},"end":{"line":68,"column":33}},"33":{"start":{"line":71,"column":4},"end":{"line":73,"column":5}},"34":{"start":{"line":72,"column":6},"end":{"line":72,"column":19}},"35":{"start":{"line":74,"column":4},"end":{"line":76,"column":6}},"36":{"start":{"line":75,"column":24},"end":{"line":75,"column":56}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":2},"end":{"line":3,"column":3}},"loc":{"start":{"line":3,"column":16},"end":{"line":6,"column":3}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":2},"end":{"line":7,"column":3}},"loc":{"start":{"line":7,"column":17},"end":{"line":9,"column":3}},"line":7},"2":{"name":"(anonymous_2)","decl":{"start":{"line":10,"column":2},"end":{"line":10,"column":3}},"loc":{"start":{"line":10,"column":23},"end":{"line":12,"column":3}},"line":10},"3":{"name":"(anonymous_3)","decl":{"start":{"line":13,"column":2},"end":{"line":13,"column":3}},"loc":{"start":{"line":13,"column":17},"end":{"line":15,"column":3}},"line":13},"4":{"name":"(anonymous_4)","decl":{"start":{"line":16,"column":2},"end":{"line":16,"column":3}},"loc":{"start":{"line":16,"column":20},"end":{"line":18,"column":3}},"line":16},"5":{"name":"(anonymous_5)","decl":{"start":{"line":19,"column":2},"end":{"line":19,"column":3}},"loc":{"start":{"line":19,"column":34},"end":{"line":29,"column":3}},"line":19},"6":{"name":"(anonymous_6)","decl":{"start":{"line":30,"column":2},"end":{"line":30,"column":3}},"loc":{"start":{"line":30,"column":23},"end":{"line":38,"column":3}},"line":30},"7":{"name":"(anonymous_7)","decl":{"start":{"line":37,"column":26},"end":{"line":37,"column":27}},"loc":{"start":{"line":37,"column":36},"end":{"line":37,"column":59}},"line":37},"8":{"name":"(anonymous_8)","decl":{"start":{"line":41,"column":2},"end":{"line":41,"column":3}},"loc":{"start":{"line":41,"column":54},"end":{"line":45,"column":3}},"line":41},"9":{"name":"(anonymous_9)","decl":{"start":{"line":46,"column":2},"end":{"line":46,"column":3}},"loc":{"start":{"line":46,"column":20},"end":{"line":63,"column":3}},"line":46},"10":{"name":"(anonymous_10)","decl":{"start":{"line":66,"column":2},"end":{"line":66,"column":3}},"loc":{"start":{"line":66,"column":42},"end":{"line":69,"column":3}},"line":66},"11":{"name":"(anonymous_11)","decl":{"start":{"line":70,"column":2},"end":{"line":70,"column":3}},"loc":{"start":{"line":70,"column":20},"end":{"line":77,"column":3}},"line":70},"12":{"name":"(anonymous_12)","decl":{"start":{"line":75,"column":6},"end":{"line":75,"column":7}},"loc":{"start":{"line":75,"column":24},"end":{"line":75,"column":56}},"line":75}},"branchMap":{"0":{"loc":{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},"type":"if","locations":[{"start":{"line":33,"column":6},"end":{"line":35,"column":7}},{"start":{},"end":{}}],"line":33},"1":{"loc":{"start":{"line":33,"column":10},"end":{"line":33,"column":48}},"type":"binary-expr","locations":[{"start":{"line":33,"column":10},"end":{"line":33,"column":22}},{"start":{"line":33,"column":26},"end":{"line":33,"column":48}}],"line":33},"2":{"loc":{"start":{"line":41,"column":37},"end":{"line":41,"column":52}},"type":"default-arg","locations":[{"start":{"line":41,"column":48},"end":{"line":41,"column":52}}],"line":41},"3":{"loc":{"start":{"line":48,"column":4},"end":{"line":48,"column":39}},"type":"if","locations":[{"start":{"line":48,"column":4},"end":{"line":48,"column":39}},{"start":{},"end":{}}],"line":48},"4":{"loc":{"start":{"line":49,"column":4},"end":{"line":62,"column":5}},"type":"switch","locations":[{"start":{"line":50,"column":6},"end":{"line":51,"column":38}},{"start":{"line":52,"column":6},"end":{"line":53,"column":38}},{"start":{"line":54,"column":6},"end":{"line":55,"column":39}},{"start":{"line":56,"column":6},"end":{"line":57,"column":39}},{"start":{"line":58,"column":6},"end":{"line":59,"column":40}},{"start":{"line":60,"column":6},"end":{"line":61,"column":21}}],"line":49},"5":{"loc":{"start":{"line":66,"column":25},"end":{"line":66,"column":40}},"type":"default-arg","locations":[{"start":{"line":66,"column":38},"end":{"line":66,"column":40}}],"line":66},"6":{"loc":{"start":{"line":71,"column":4},"end":{"line":73,"column":5}},"type":"if","locations":[{"start":{"line":71,"column":4},"end":{"line":73,"column":5}},{"start":{},"end":{}}],"line":71}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"0":[0,0],"1":[0,0],"2":[0],"3":[0,0],"4":[0,0,0,0,0,0],"5":[0],"6":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/adapt/rules/index.ts"],"sourcesContent":["import logger from \"@/lib/shared/logger\";\nimport type { Logger } from \"@/lib/shared/types\";\nimport { Condition, Rule, RuleContext } from \"../types\";\n\nexport class RuleRegistry {\n  private rules: Map<string, Rule>;\n  private logger: Logger & { service: string };\n\n  constructor() {\n    this.rules = new Map();\n    this.logger = logger as Logger & { service: string };\n  }\n\n  register(rule: Rule): void {\n    this.rules.set(rule.name, rule);\n  }\n\n  unregister(ruleName: string): void {\n    this.rules.delete(ruleName);\n  }\n\n  getRuleCount(): number {\n    return this.rules.size;\n  }\n\n  getRule(ruleName: string): Rule | undefined {\n    return this.rules.get(ruleName);\n  }\n\n  async executeTriggered(context: RuleContext): Promise<void> {\n    const triggeredRules = this.evaluateAll(context);\n\n    for (const rule of triggeredRules) {\n      try {\n        await rule.execute(context);\n        rule.lastTriggered = new Date();\n      } catch (error) {\n        this.logger.error(`Rule execution failed: ${rule.name}`, { error });\n      }\n    }\n  }\n\n  private evaluateAll(context: RuleContext): Rule[] {\n    const triggered: Rule[] = [];\n\n    for (const rule of Array.from(this.rules.values())) {\n      if (rule.enabled && rule.evaluate(context)) {\n        triggered.push(rule);\n      }\n    }\n\n    return triggered.sort((a, b) => a.priority - b.priority);\n  }\n}\n\nexport class ThresholdCondition implements Condition {\n  constructor(\n    private metricName: string,\n    private threshold: number,\n    private operator: \"gt\" | \"lt\" | \"gte\" | \"lte\" | \"eq\" = \"gt\"\n  ) {}\n\n  evaluate(context: RuleContext): boolean {\n    const value = context.metrics[this.metricName];\n    if (value === undefined) return false;\n\n    switch (this.operator) {\n      case \"gt\":\n        return value > this.threshold;\n      case \"lt\":\n        return value < this.threshold;\n      case \"gte\":\n        return value >= this.threshold;\n      case \"lte\":\n        return value <= this.threshold;\n      case \"eq\":\n        return value === this.threshold;\n      default:\n        return false;\n    }\n  }\n}\n\nexport class EventCondition implements Condition {\n  constructor(\n    private eventType: string,\n    private properties: Record<string, unknown> = {}\n  ) {}\n\n  evaluate(context: RuleContext): boolean {\n    if (context.eventData.type !== this.eventType) {\n      return false;\n    }\n\n    return Object.entries(this.properties).every(\n      ([key, value]) => context.eventData[key] === value\n    );\n  }\n}\n"],"mappings":"AAAA,OAAO,YAAY;AAIZ,aAAM,aAAa;AAAA,EAIxB,cAAc;AACZ,SAAK,QAAQ,oBAAI,IAAI;AACrB,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,SAAS,MAAkB;AACzB,SAAK,MAAM,IAAI,KAAK,MAAM,IAAI;AAAA,EAChC;AAAA,EAEA,WAAW,UAAwB;AACjC,SAAK,MAAM,OAAO,QAAQ;AAAA,EAC5B;AAAA,EAEA,eAAuB;AACrB,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA,EAEA,QAAQ,UAAoC;AAC1C,WAAO,KAAK,MAAM,IAAI,QAAQ;AAAA,EAChC;AAAA,EAEA,MAAM,iBAAiB,SAAqC;AAC1D,UAAM,iBAAiB,KAAK,YAAY,OAAO;AAE/C,eAAW,QAAQ,gBAAgB;AACjC,UAAI;AACF,cAAM,KAAK,QAAQ,OAAO;AAC1B,aAAK,gBAAgB,oBAAI,KAAK;AAAA,MAChC,SAAS,OAAO;AACd,aAAK,OAAO,MAAM,0BAA0B,KAAK,IAAI,IAAI,EAAE,MAAM,CAAC;AAAA,MACpE;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,YAAY,SAA8B;AAChD,UAAM,YAAoB,CAAC;AAE3B,eAAW,QAAQ,MAAM,KAAK,KAAK,MAAM,OAAO,CAAC,GAAG;AAClD,UAAI,KAAK,WAAW,KAAK,SAAS,OAAO,GAAG;AAC1C,kBAAU,KAAK,IAAI;AAAA,MACrB;AAAA,IACF;AAEA,WAAO,UAAU,KAAK,CAAC,GAAG,MAAM,EAAE,WAAW,EAAE,QAAQ;AAAA,EACzD;AACF;AAEO,aAAM,mBAAwC;AAAA,EACnD,YACU,YACA,WACA,WAA+C,MACvD;AAHQ;AACA;AACA;AAAA,EACP;AAAA,EAEH,SAAS,SAA+B;AACtC,UAAM,QAAQ,QAAQ,QAAQ,KAAK,UAAU;AAC7C,QAAI,UAAU,OAAW,QAAO;AAEhC,YAAQ,KAAK,UAAU;AAAA,MACrB,KAAK;AACH,eAAO,QAAQ,KAAK;AAAA,MACtB,KAAK;AACH,eAAO,QAAQ,KAAK;AAAA,MACtB,KAAK;AACH,eAAO,SAAS,KAAK;AAAA,MACvB,KAAK;AACH,eAAO,SAAS,KAAK;AAAA,MACvB,KAAK;AACH,eAAO,UAAU,KAAK;AAAA,MACxB;AACE,eAAO;AAAA,IACX;AAAA,EACF;AACF;AAEO,aAAM,eAAoC;AAAA,EAC/C,YACU,WACA,aAAsC,CAAC,GAC/C;AAFQ;AACA;AAAA,EACP;AAAA,EAEH,SAAS,SAA+B;AACtC,QAAI,QAAQ,UAAU,SAAS,KAAK,WAAW;AAC7C,aAAO;AAAA,IACT;AAEA,WAAO,OAAO,QAAQ,KAAK,UAAU,EAAE;AAAA,MACrC,CAAC,CAAC,KAAK,KAAK,MAAM,QAAQ,UAAU,GAAG,MAAM;AAAA,IAC/C;AAAA,EACF;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"82dcaf9fef81d0f93385bd7bfcd32988d6f14bf7"},"/workspaces/sophra/src/lib/nous/adapt/types/index.ts":{"path":"/workspaces/sophra/src/lib/nous/adapt/types/index.ts","statementMap":{"0":{"start":{"line":2,"column":42},"end":{"line":8,"column":22}},"1":{"start":{"line":3,"column":2},"end":{"line":3,"column":60}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":52}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":56}},"4":{"start":{"line":6,"column":2},"end":{"line":6,"column":50}},"5":{"start":{"line":7,"column":2},"end":{"line":7,"column":23}},"6":{"start":{"line":9,"column":33},"end":{"line":15,"column":2}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":43},"end":{"line":2,"column":44}},"loc":{"start":{"line":2,"column":62},"end":{"line":8,"column":1}},"line":2}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":3},"end":{"line":8,"column":21}},"type":"binary-expr","locations":[{"start":{"line":8,"column":3},"end":{"line":8,"column":15}},{"start":{"line":8,"column":19},"end":{"line":8,"column":21}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1},"f":{"0":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/adapt/types/index.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport enum RulePriority {\n  CRITICAL = 0,\n  HIGH = 1,\n  MEDIUM = 2,\n  LOW = 3,\n}\n\nexport const RuleContextSchema = z.object({\n  timestamp: z.date(),\n  eventData: z.record(z.unknown()),\n  systemState: z.record(z.unknown()),\n  metrics: z.record(z.number()),\n  metadata: z.record(z.unknown()).optional(),\n});\n\nexport type RuleContext = z.infer<typeof RuleContextSchema>;\n\nexport interface Condition {\n  evaluate(context: RuleContext): boolean;\n}\n\nexport interface Action {\n  execute(context: RuleContext): void;\n}\n\nexport interface Rule {\n  name: string;\n  description: string;\n  priority: RulePriority;\n  conditions: Condition[];\n  actions: Action[];\n  enabled: boolean;\n  lastTriggered?: Date;\n  evaluate(context: RuleContext): boolean;\n  execute(context: RuleContext): void;\n}\n"],"mappings":"AAAA,SAAS,SAAS;AAEX,WAAK,eAAL,kBAAKA,kBAAL;AACL,EAAAA,4BAAA,cAAW,KAAX;AACA,EAAAA,4BAAA,UAAO,KAAP;AACA,EAAAA,4BAAA,YAAS,KAAT;AACA,EAAAA,4BAAA,SAAM,KAAN;AAJU,SAAAA;AAAA,GAAA;AAOL,aAAM,oBAAoB,EAAE,OAAO;AAAA,EACxC,WAAW,EAAE,KAAK;AAAA,EAClB,WAAW,EAAE,OAAO,EAAE,QAAQ,CAAC;AAAA,EAC/B,aAAa,EAAE,OAAO,EAAE,QAAQ,CAAC;AAAA,EACjC,SAAS,EAAE,OAAO,EAAE,OAAO,CAAC;AAAA,EAC5B,UAAU,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,SAAS;AAC3C,CAAC;","names":["RulePriority"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"806fc9307b1d4922e2fdeb36d74f6e839eac2078"},"/workspaces/sophra/src/lib/shared/engine/adaptation-engine.ts":{"path":"/workspaces/sophra/src/lib/shared/engine/adaptation-engine.ts","statementMap":{"0":{"start":{"line":8,"column":4},"end":{"line":8,"column":18}},"1":{"start":{"line":9,"column":4},"end":{"line":9,"column":20}},"2":{"start":{"line":10,"column":4},"end":{"line":10,"column":22}},"3":{"start":{"line":11,"column":4},"end":{"line":11,"column":51}},"4":{"start":{"line":12,"column":4},"end":{"line":12,"column":27}},"5":{"start":{"line":13,"column":4},"end":{"line":13,"column":28}},"6":{"start":{"line":14,"column":4},"end":{"line":14,"column":25}},"7":{"start":{"line":15,"column":4},"end":{"line":15,"column":46}},"8":{"start":{"line":16,"column":4},"end":{"line":16,"column":51}},"9":{"start":{"line":17,"column":4},"end":{"line":19,"column":6}},"10":{"start":{"line":18,"column":29},"end":{"line":18,"column":39}},"11":{"start":{"line":22,"column":4},"end":{"line":22,"column":33}},"12":{"start":{"line":23,"column":4},"end":{"line":23,"column":49}},"13":{"start":{"line":26,"column":4},"end":{"line":26,"column":39}},"14":{"start":{"line":27,"column":4},"end":{"line":27,"column":50}},"15":{"start":{"line":30,"column":4},"end":{"line":77,"column":5}},"16":{"start":{"line":31,"column":6},"end":{"line":71,"column":7}},"17":{"start":{"line":33,"column":10},"end":{"line":53,"column":11}},"18":{"start":{"line":34,"column":29},"end":{"line":34,"column":52}},"19":{"start":{"line":35,"column":25},"end":{"line":51,"column":13}},"20":{"start":{"line":45,"column":38},"end":{"line":45,"column":42}},"21":{"start":{"line":47,"column":16},"end":{"line":49,"column":17}},"22":{"start":{"line":48,"column":18},"end":{"line":48,"column":43}},"23":{"start":{"line":52,"column":12},"end":{"line":52,"column":31}},"24":{"start":{"line":54,"column":10},"end":{"line":54,"column":16}},"25":{"start":{"line":56,"column":31},"end":{"line":64,"column":11}},"26":{"start":{"line":65,"column":10},"end":{"line":65,"column":83}},"27":{"start":{"line":66,"column":10},"end":{"line":66,"column":16}},"28":{"start":{"line":68,"column":10},"end":{"line":68,"column":56}},"29":{"start":{"line":70,"column":10},"end":{"line":70,"column":71}},"30":{"start":{"line":72,"column":22},"end":{"line":72,"column":66}},"31":{"start":{"line":73,"column":6},"end":{"line":73,"column":52}},"32":{"start":{"line":75,"column":6},"end":{"line":75,"column":76}},"33":{"start":{"line":76,"column":6},"end":{"line":76,"column":18}},"34":{"start":{"line":80,"column":4},"end":{"line":85,"column":5}},"35":{"start":{"line":81,"column":6},"end":{"line":84,"column":8}},"36":{"start":{"line":86,"column":18},"end":{"line":86,"column":27}},"37":{"start":{"line":87,"column":20},"end":{"line":100,"column":5}},"38":{"start":{"line":101,"column":4},"end":{"line":115,"column":6}},"39":{"start":{"line":118,"column":38},"end":{"line":118,"column":48}},"40":{"start":{"line":119,"column":4},"end":{"line":125,"column":7}},"41":{"start":{"line":120,"column":6},"end":{"line":120,"column":32}},"42":{"start":{"line":121,"column":6},"end":{"line":123,"column":7}},"43":{"start":{"line":122,"column":8},"end":{"line":122,"column":40}},"44":{"start":{"line":124,"column":6},"end":{"line":124,"column":60}},"45":{"start":{"line":126,"column":4},"end":{"line":126,"column":66}},"46":{"start":{"line":129,"column":4},"end":{"line":129,"column":48}},"47":{"start":{"line":130,"column":4},"end":{"line":130,"column":60}},"48":{"start":{"line":133,"column":4},"end":{"line":148,"column":5}},"49":{"start":{"line":134,"column":22},"end":{"line":134,"column":51}},"50":{"start":{"line":135,"column":6},"end":{"line":135,"column":52}},"51":{"start":{"line":137,"column":6},"end":{"line":137,"column":68}},"52":{"start":{"line":138,"column":27},"end":{"line":146,"column":7}},"53":{"start":{"line":147,"column":6},"end":{"line":147,"column":64}},"54":{"start":{"line":151,"column":4},"end":{"line":161,"column":6}},"55":{"start":{"line":164,"column":4},"end":{"line":164,"column":24}},"56":{"start":{"line":165,"column":4},"end":{"line":172,"column":5}},"57":{"start":{"line":166,"column":6},"end":{"line":170,"column":7}},"58":{"start":{"line":167,"column":8},"end":{"line":167,"column":61}},"59":{"start":{"line":169,"column":8},"end":{"line":169,"column":73}},"60":{"start":{"line":171,"column":6},"end":{"line":171,"column":78}},"61":{"start":{"line":171,"column":37},"end":{"line":171,"column":76}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":2},"end":{"line":7,"column":3}},"loc":{"start":{"line":7,"column":32},"end":{"line":20,"column":3}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":18,"column":15},"end":{"line":18,"column":16}},"loc":{"start":{"line":18,"column":29},"end":{"line":18,"column":39}},"line":18},"2":{"name":"(anonymous_2)","decl":{"start":{"line":21,"column":2},"end":{"line":21,"column":3}},"loc":{"start":{"line":21,"column":16},"end":{"line":24,"column":3}},"line":21},"3":{"name":"(anonymous_3)","decl":{"start":{"line":25,"column":2},"end":{"line":25,"column":3}},"loc":{"start":{"line":25,"column":23},"end":{"line":28,"column":3}},"line":25},"4":{"name":"(anonymous_4)","decl":{"start":{"line":29,"column":2},"end":{"line":29,"column":3}},"loc":{"start":{"line":29,"column":36},"end":{"line":78,"column":3}},"line":29},"5":{"name":"(anonymous_5)","decl":{"start":{"line":41,"column":25},"end":{"line":41,"column":26}},"loc":{"start":{"line":41,"column":45},"end":{"line":42,"column":17}},"line":41},"6":{"name":"(anonymous_6)","decl":{"start":{"line":45,"column":24},"end":{"line":45,"column":25}},"loc":{"start":{"line":45,"column":38},"end":{"line":45,"column":42}},"line":45},"7":{"name":"(anonymous_7)","decl":{"start":{"line":46,"column":23},"end":{"line":46,"column":24}},"loc":{"start":{"line":46,"column":43},"end":{"line":50,"column":15}},"line":46},"8":{"name":"(anonymous_8)","decl":{"start":{"line":79,"column":2},"end":{"line":79,"column":3}},"loc":{"start":{"line":79,"column":31},"end":{"line":116,"column":3}},"line":79},"9":{"name":"(anonymous_9)","decl":{"start":{"line":117,"column":2},"end":{"line":117,"column":3}},"loc":{"start":{"line":117,"column":28},"end":{"line":127,"column":3}},"line":117},"10":{"name":"(anonymous_10)","decl":{"start":{"line":119,"column":39},"end":{"line":119,"column":40}},"loc":{"start":{"line":119,"column":57},"end":{"line":125,"column":5}},"line":119},"11":{"name":"(anonymous_11)","decl":{"start":{"line":128,"column":2},"end":{"line":128,"column":3}},"loc":{"start":{"line":128,"column":24},"end":{"line":131,"column":3}},"line":128},"12":{"name":"(anonymous_12)","decl":{"start":{"line":132,"column":2},"end":{"line":132,"column":3}},"loc":{"start":{"line":132,"column":33},"end":{"line":149,"column":3}},"line":132},"13":{"name":"(anonymous_13)","decl":{"start":{"line":150,"column":2},"end":{"line":150,"column":3}},"loc":{"start":{"line":150,"column":27},"end":{"line":162,"column":3}},"line":150},"14":{"name":"(anonymous_14)","decl":{"start":{"line":163,"column":2},"end":{"line":163,"column":3}},"loc":{"start":{"line":163,"column":40},"end":{"line":173,"column":3}},"line":163},"15":{"name":"(anonymous_15)","decl":{"start":{"line":171,"column":24},"end":{"line":171,"column":25}},"loc":{"start":{"line":171,"column":37},"end":{"line":171,"column":76}},"line":171}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":20},"end":{"line":16,"column":50}},"type":"binary-expr","locations":[{"start":{"line":16,"column":20},"end":{"line":16,"column":28}},{"start":{"line":16,"column":32},"end":{"line":16,"column":50}}],"line":16},"1":{"loc":{"start":{"line":31,"column":6},"end":{"line":71,"column":7}},"type":"switch","locations":[{"start":{"line":32,"column":8},"end":{"line":54,"column":16}},{"start":{"line":55,"column":8},"end":{"line":66,"column":16}},{"start":{"line":67,"column":8},"end":{"line":68,"column":56}},{"start":{"line":69,"column":8},"end":{"line":70,"column":71}}],"line":31},"2":{"loc":{"start":{"line":33,"column":10},"end":{"line":53,"column":11}},"type":"if","locations":[{"start":{"line":33,"column":10},"end":{"line":53,"column":11}},{"start":{},"end":{}}],"line":33},"3":{"loc":{"start":{"line":33,"column":14},"end":{"line":33,"column":106}},"type":"binary-expr","locations":[{"start":{"line":33,"column":14},"end":{"line":33,"column":32}},{"start":{"line":33,"column":36},"end":{"line":33,"column":74}},{"start":{"line":33,"column":78},"end":{"line":33,"column":106}}],"line":33},"4":{"loc":{"start":{"line":59,"column":23},"end":{"line":59,"column":179}},"type":"cond-expr","locations":[{"start":{"line":59,"column":121},"end":{"line":59,"column":147}},{"start":{"line":59,"column":150},"end":{"line":59,"column":179}}],"line":59},"5":{"loc":{"start":{"line":59,"column":23},"end":{"line":59,"column":118}},"type":"binary-expr","locations":[{"start":{"line":59,"column":23},"end":{"line":59,"column":41}},{"start":{"line":59,"column":45},"end":{"line":59,"column":83}},{"start":{"line":59,"column":87},"end":{"line":59,"column":118}}],"line":59},"6":{"loc":{"start":{"line":80,"column":4},"end":{"line":85,"column":5}},"type":"if","locations":[{"start":{"line":80,"column":4},"end":{"line":85,"column":5}},{"start":{},"end":{}}],"line":80},"7":{"loc":{"start":{"line":121,"column":6},"end":{"line":123,"column":7}},"type":"if","locations":[{"start":{"line":121,"column":6},"end":{"line":123,"column":7}},{"start":{},"end":{}}],"line":121},"8":{"loc":{"start":{"line":163,"column":14},"end":{"line":163,"column":38}},"type":"default-arg","locations":[{"start":{"line":163,"column":35},"end":{"line":163,"column":38}}],"line":163}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"b":{"0":[0,0],"1":[0,0,0,0],"2":[0,0],"3":[0,0,0],"4":[0,0],"5":[0,0,0],"6":[0,0],"7":[0,0],"8":[0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/shared/engine/adaptation-engine.ts"],"sourcesContent":["import { NotifyAction } from \"@/lib/nous/adapt/actions\";\nimport { RuleRegistry } from \"@/lib/nous/adapt/rules\";\nimport { Action, Rule, RuleContext, RulePriority } from \"@/lib/nous/adapt/types\";\nimport { Logger } from \"@/lib/shared/types\";\nimport { EngineOperation, EngineOperationType, LearningEvent, LearningPattern } from \"@prisma/client\";\nimport { BaseEngine } from \"./base-engine\";\n\nexport interface PatternDetectionResult {\n  operation: EngineOperation;\n  patterns: LearningPattern[];\n}\n\nexport class AdaptationEngine extends BaseEngine {\n  private registry: RuleRegistry;\n  protected state: Record<string, unknown> = {};\n  protected metrics: Record<string, number> = {};\n  protected metricHistory: Map<string, Array<[Date, number]>> = new Map();\n  protected eventHistory: Array<Record<string, unknown>> = [];\n  protected signalHistory: Array<Record<string, unknown>> = [];\n  protected running: boolean = false;\n  protected lastRun: Date = new Date();\n  protected threadPool: { execute: (fn: () => Promise<void>) => Promise<void> };\n\n  constructor(logger: Logger, registry?: RuleRegistry) {\n    super(logger);\n    this.registry = registry || new RuleRegistry();\n    this.threadPool = {\n      execute: async (fn) => await fn(),\n    };\n  }\n\n  addRule(rule: Rule): void {\n    this.registry.register(rule);\n    this.logger.debug('Adding rule:', rule.name);\n  }\n\n  removeRule(ruleName: string): void {\n    this.registry.unregister(ruleName);\n    this.logger.debug('Removing rule:', ruleName);\n  }\n\n  public async executeOperation(operation: EngineOperation): Promise<void> {\n    try {\n      switch (operation.type) {\n        case EngineOperationType.RULE_EVALUATION:\n          if (operation.metadata && typeof operation.metadata === 'object' && 'rule' in operation.metadata) {\n            const ruleName = operation.metadata.rule as string;\n            const rule = { \n              name: ruleName,\n              description: 'Auto-generated rule from operation',\n              priority: RulePriority.MEDIUM,\n              conditions: [],\n              actions: [{\n                execute: async (context: RuleContext) => {}\n              }],\n              enabled: true,\n              evaluate: (context: RuleContext) => true,\n              execute: async (context: RuleContext) => {\n                for (const action of rule.actions) {\n                  action.execute(context);\n                }\n              }\n            };\n            this.addRule(rule);\n          }\n          break;\n\n        case EngineOperationType.ADAPTATION:\n          const notifyAction = new NotifyAction(\n            {\n              title: \"Adaptation Action\",\n              message: operation.metadata && typeof operation.metadata === 'object' && 'message' in operation.metadata ? operation.metadata.message as string : \"Executing adaptation action\",\n              severity: \"info\",\n              channels: [\"ops\"],\n            },\n            this.logger\n          );\n          await notifyAction.execute(this.createContext({ type: operation.type }));\n          break;\n\n        case EngineOperationType.PATTERN_DETECTION:\n          throw new Error('Unsupported operation type');\n\n        default:\n          throw new Error(`Unknown operation type: ${operation.type}`);\n      }\n\n      const context = this.createContext({ type: operation.type });\n      await this.registry.executeTriggered(context);\n    } catch (error) {\n      this.logger.error(\"Error executing operation:\", { error, operation });\n      throw error;\n    }\n  }\n\n  async detectPatterns(events: LearningEvent[]): Promise<PatternDetectionResult> {\n    if (!events.length) {\n      return {\n        operation: {} as EngineOperation,\n        patterns: []\n      };\n    }\n\n    // Create a pattern from the first event\n    const event = events[0];\n    const pattern: LearningPattern = {\n      id: `pattern-${event.id}`,\n      type: 'SYSTEM_STATE_PATTERN',\n      confidence: 0.9,\n      features: {\n        eventType: event.type,\n        status: event.status,\n        priority: event.priority\n      },\n      metadata: event.metadata,\n      eventId: event.id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    return {\n      operation: {\n        id: `op-${event.id}`,\n        type: EngineOperationType.PATTERN_DETECTION,\n        status: 'COMPLETED',\n        metadata: event.metadata,\n        error: null,\n        startTime: new Date(),\n        endTime: new Date(),\n        metrics: {},\n        createdAt: new Date(),\n        updatedAt: new Date()\n      } as EngineOperation,\n      patterns: [pattern]\n    };\n  }\n\n  public updateMetrics(newMetrics: Record<string, number>): void {\n    const timestamp = new Date();\n    Object.entries(newMetrics).forEach(([key, value]) => {\n      this.metrics[key] = value;\n      if (!this.metricHistory.has(key)) {\n        this.metricHistory.set(key, []);\n      }\n      this.metricHistory.get(key)?.push([timestamp, value]);\n    });\n    this.logger.debug(\"Updated metrics\", { metrics: newMetrics });\n  }\n\n  public updateState(newState: Record<string, unknown>): void {\n    this.state = { ...this.state, ...newState };\n    this.logger.debug(\"Updated state\", { state: newState });\n  }\n\n  public async evaluateEvent(eventData: Record<string, unknown>): Promise<void> {\n    try {\n      const context = this.createContext(eventData);\n      await this.registry.executeTriggered(context);\n    } catch (error) {\n      this.logger.error(\"Error during rule evaluation:\", { error });\n      const notifyAction = new NotifyAction(\n        {\n          title: \"Rule Evaluation Error\",\n          message: `Error during rule evaluation: ${error}`,\n          severity: \"error\",\n          channels: [\"ops\"],\n        },\n        this.logger\n      );\n      await notifyAction.execute(this.createContext(eventData));\n    }\n  }\n\n  private createContext(eventData: Record<string, unknown>): RuleContext {\n    return {\n      timestamp: new Date(),\n      eventData,\n      systemState: this.state,\n      metrics: this.metrics,\n      metadata: {\n        metric_history: Object.fromEntries(this.metricHistory),\n        event_history: this.eventHistory,\n        signal_history: this.signalHistory,\n      },\n    };\n  }\n\n  async start(evaluationInterval: number = 1000): Promise<void> {\n    this.running = true;\n\n    while (this.running) {\n      try {\n        await this.evaluateEvent({ type: \"periodic_check\" });\n      } catch (error) {\n        this.logger.error(\"Error in adaptation engine loop:\", { error });\n      }\n      await new Promise((resolve) => setTimeout(resolve, evaluationInterval));\n    }\n  }\n}\n"],"mappings":"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","names":["context"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"eb3f529219a8e2effda7b37b82aeb5e4ed60e51c"},"/workspaces/sophra/src/lib/shared/engine/processors.ts":{"path":"/workspaces/sophra/src/lib/shared/engine/processors.ts","statementMap":{"0":{"start":{"line":5,"column":4},"end":{"line":5,"column":14}},"1":{"start":{"line":12,"column":4},"end":{"line":12,"column":14}},"2":{"start":{"line":19,"column":4},"end":{"line":19,"column":14}},"3":{"start":{"line":22,"column":4},"end":{"line":22,"column":24}},"4":{"start":{"line":25,"column":4},"end":{"line":25,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":2},"end":{"line":2,"column":3}},"loc":{"start":{"line":2,"column":18},"end":{"line":3,"column":3}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":4,"column":2},"end":{"line":4,"column":3}},"loc":{"start":{"line":4,"column":24},"end":{"line":6,"column":3}},"line":4},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":2},"end":{"line":9,"column":3}},"loc":{"start":{"line":9,"column":18},"end":{"line":10,"column":3}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":11,"column":2},"end":{"line":11,"column":3}},"loc":{"start":{"line":11,"column":24},"end":{"line":13,"column":3}},"line":11},"4":{"name":"(anonymous_4)","decl":{"start":{"line":16,"column":2},"end":{"line":16,"column":3}},"loc":{"start":{"line":16,"column":18},"end":{"line":17,"column":3}},"line":16},"5":{"name":"(anonymous_5)","decl":{"start":{"line":18,"column":2},"end":{"line":18,"column":3}},"loc":{"start":{"line":18,"column":24},"end":{"line":20,"column":3}},"line":18},"6":{"name":"(anonymous_6)","decl":{"start":{"line":21,"column":2},"end":{"line":21,"column":3}},"loc":{"start":{"line":21,"column":34},"end":{"line":23,"column":3}},"line":21},"7":{"name":"(anonymous_7)","decl":{"start":{"line":24,"column":2},"end":{"line":24,"column":3}},"loc":{"start":{"line":24,"column":44},"end":{"line":26,"column":3}},"line":24},"8":{"name":"(anonymous_8)","decl":{"start":{"line":29,"column":2},"end":{"line":29,"column":3}},"loc":{"start":{"line":29,"column":18},"end":{"line":30,"column":3}},"line":29},"9":{"name":"(anonymous_9)","decl":{"start":{"line":31,"column":2},"end":{"line":31,"column":3}},"loc":{"start":{"line":31,"column":34},"end":{"line":32,"column":3}},"line":31}},"branchMap":{},"s":{"0":0,"1":0,"2":0,"3":0,"4":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"b":{},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/shared/engine/processors.ts"],"sourcesContent":["import { EngineOptimizationStrategy, LearningEvent, LearningPattern } from \"@prisma/client\";\n\nexport interface BaseProcessor {\n  process(): Promise<void>;\n}\n\nexport class FeedbackProcessor implements BaseProcessor {\n  async process(): Promise<void> {\n    // Implementation\n  }\n\n  async analyze(events: LearningEvent[]): Promise<LearningPattern[]> {\n    return [];\n  }\n}\n\nexport class PerformanceProcessor implements BaseProcessor {\n  async process(): Promise<void> {\n    // Implementation\n  }\n\n  async analyze(events: LearningEvent[]): Promise<LearningPattern[]> {\n    return [];\n  }\n}\n\nexport class TimeBasedProcessor implements BaseProcessor {\n  async process(): Promise<void> {\n    // Implementation\n  }\n\n  async analyze(events: LearningEvent[]): Promise<LearningPattern[]> {\n    return [];\n  }\n\n  async getTimeSeriesData(params: {\n    startDate: Date;\n    endDate: Date;\n    granularity: string;\n  }): Promise<{ data: Array<{ x: Date; y: number }> }> {\n    return { data: [] };\n  }\n\n  async analyzeCorrelations(timeSeriesData: {\n    data: Array<{ x: Date; y: number }>;\n  }): Promise<{ correlations: Array<{ variable1: string; variable2: string; coefficient: number }> }> {\n    return { correlations: [] };\n  }\n}\n\nexport class StrategyProcessor implements BaseProcessor {\n  async process(): Promise<void> {\n    // Implementation\n  }\n\n  async executeStrategy(strategy: EngineOptimizationStrategy): Promise<void> {\n    // Implementation\n  }\n} "],"mappings":"AAMO,aAAM,kBAA2C;AAAA,EACtD,MAAM,UAAyB;AAAA,EAE/B;AAAA,EAEA,MAAM,QAAQ,QAAqD;AACjE,WAAO,CAAC;AAAA,EACV;AACF;AAEO,aAAM,qBAA8C;AAAA,EACzD,MAAM,UAAyB;AAAA,EAE/B;AAAA,EAEA,MAAM,QAAQ,QAAqD;AACjE,WAAO,CAAC;AAAA,EACV;AACF;AAEO,aAAM,mBAA4C;AAAA,EACvD,MAAM,UAAyB;AAAA,EAE/B;AAAA,EAEA,MAAM,QAAQ,QAAqD;AACjE,WAAO,CAAC;AAAA,EACV;AAAA,EAEA,MAAM,kBAAkB,QAI6B;AACnD,WAAO,EAAE,MAAM,CAAC,EAAE;AAAA,EACpB;AAAA,EAEA,MAAM,oBAAoB,gBAE0E;AAClG,WAAO,EAAE,cAAc,CAAC,EAAE;AAAA,EAC5B;AACF;AAEO,aAAM,kBAA2C;AAAA,EACtD,MAAM,UAAyB;AAAA,EAE/B;AAAA,EAEA,MAAM,gBAAgB,UAAqD;AAAA,EAE3E;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ef55318537b81b8eb03297612974738e2ea0f74c"},"/workspaces/sophra/src/lib/shared/engine/adapters/metrics-adapter.ts":{"path":"/workspaces/sophra/src/lib/shared/engine/adapters/metrics-adapter.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":27}},"1":{"start":{"line":4,"column":4},"end":{"line":4,"column":25}},"2":{"start":{"line":5,"column":4},"end":{"line":5,"column":24}},"3":{"start":{"line":6,"column":4},"end":{"line":6,"column":25}},"4":{"start":{"line":7,"column":4},"end":{"line":7,"column":68}},"5":{"start":{"line":7,"column":35},"end":{"line":7,"column":67}},"6":{"start":{"line":8,"column":4},"end":{"line":8,"column":60}},"7":{"start":{"line":8,"column":31},"end":{"line":8,"column":59}},"8":{"start":{"line":9,"column":4},"end":{"line":9,"column":58}},"9":{"start":{"line":9,"column":30},"end":{"line":9,"column":57}},"10":{"start":{"line":10,"column":4},"end":{"line":10,"column":56}},"11":{"start":{"line":10,"column":29},"end":{"line":10,"column":55}},"12":{"start":{"line":11,"column":4},"end":{"line":11,"column":62}},"13":{"start":{"line":11,"column":32},"end":{"line":11,"column":61}},"14":{"start":{"line":12,"column":4},"end":{"line":12,"column":78}},"15":{"start":{"line":12,"column":40},"end":{"line":12,"column":77}},"16":{"start":{"line":13,"column":4},"end":{"line":13,"column":84}},"17":{"start":{"line":13,"column":43},"end":{"line":13,"column":83}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":2},"end":{"line":2,"column":3}},"loc":{"start":{"line":2,"column":31},"end":{"line":14,"column":3}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":29},"end":{"line":7,"column":30}},"loc":{"start":{"line":7,"column":35},"end":{"line":7,"column":67}},"line":7},"2":{"name":"(anonymous_2)","decl":{"start":{"line":8,"column":25},"end":{"line":8,"column":26}},"loc":{"start":{"line":8,"column":31},"end":{"line":8,"column":59}},"line":8},"3":{"name":"(anonymous_3)","decl":{"start":{"line":9,"column":24},"end":{"line":9,"column":25}},"loc":{"start":{"line":9,"column":30},"end":{"line":9,"column":57}},"line":9},"4":{"name":"(anonymous_4)","decl":{"start":{"line":10,"column":23},"end":{"line":10,"column":24}},"loc":{"start":{"line":10,"column":29},"end":{"line":10,"column":55}},"line":10},"5":{"name":"(anonymous_5)","decl":{"start":{"line":11,"column":26},"end":{"line":11,"column":27}},"loc":{"start":{"line":11,"column":32},"end":{"line":11,"column":61}},"line":11},"6":{"name":"(anonymous_6)","decl":{"start":{"line":12,"column":30},"end":{"line":12,"column":31}},"loc":{"start":{"line":12,"column":40},"end":{"line":12,"column":77}},"line":12},"7":{"name":"(anonymous_7)","decl":{"start":{"line":13,"column":33},"end":{"line":13,"column":34}},"loc":{"start":{"line":13,"column":43},"end":{"line":13,"column":83}},"line":13}},"branchMap":{},"s":{"0":3,"1":3,"2":3,"3":3,"4":3,"5":0,"6":3,"7":0,"8":3,"9":0,"10":3,"11":0,"12":3,"13":0,"14":3,"15":0,"16":3,"17":0},"f":{"0":3,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/shared/engine/adapters/metrics-adapter.ts"],"sourcesContent":["import { MetricsService } from \"@/lib/cortex/monitoring/metrics\";\nimport { Logger } from \"@/lib/shared/types\";\n\nexport class MetricsAdapter {\n  sampleRate: number = 1.0;\n  batchSize: number = 100;\n\n  constructor(\n    private metrics: MetricsService,\n    private logger: Logger\n  ) {}\n\n  getAverageLatency = () => this.metrics.getAverageLatency();\n  getThroughput = () => this.metrics.getThroughput();\n  getErrorRate = () => this.metrics.getErrorRate();\n  getCPUUsage = () => this.metrics.getCPUUsage();\n  getMemoryUsage = () => this.metrics.getMemoryUsage();\n\n  recordEngineMetric = (data: any) => this.metrics.recordEngineMetric(data);\n  recordLearningMetrics = (data: any) =>\n    this.metrics.recordLearningMetrics(data);\n}\n"],"mappings":"AAGO,aAAM,eAAe;AAAA,EAI1B,YACU,SACA,QACR;AAFQ;AACA;AALV,sBAAqB;AACrB,qBAAoB;AAOpB,6BAAoB,MAAM,KAAK,QAAQ,kBAAkB;AACzD,yBAAgB,MAAM,KAAK,QAAQ,cAAc;AACjD,wBAAe,MAAM,KAAK,QAAQ,aAAa;AAC/C,uBAAc,MAAM,KAAK,QAAQ,YAAY;AAC7C,0BAAiB,MAAM,KAAK,QAAQ,eAAe;AAEnD,8BAAqB,CAAC,SAAc,KAAK,QAAQ,mBAAmB,IAAI;AACxE,iCAAwB,CAAC,SACvB,KAAK,QAAQ,sBAAsB,IAAI;AAAA,EAVtC;AAWL;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"bd538e0e3b07af8b744a5bc63f17f6a141830dec"},"/workspaces/sophra/src/lib/nous/engine/real-time-learner.ts":{"path":"/workspaces/sophra/src/lib/nous/engine/real-time-learner.ts","statementMap":{"0":{"start":{"line":15,"column":4},"end":{"line":15,"column":25}},"1":{"start":{"line":16,"column":4},"end":{"line":16,"column":49}},"2":{"start":{"line":17,"column":4},"end":{"line":17,"column":27}},"3":{"start":{"line":18,"column":4},"end":{"line":18,"column":53}},"4":{"start":{"line":19,"column":4},"end":{"line":19,"column":25}},"5":{"start":{"line":20,"column":27},"end":{"line":20,"column":76}},"6":{"start":{"line":21,"column":31},"end":{"line":30,"column":5}},"7":{"start":{"line":24,"column":50},"end":{"line":28,"column":9}},"8":{"start":{"line":31,"column":23},"end":{"line":36,"column":5}},"9":{"start":{"line":37,"column":4},"end":{"line":37,"column":77}},"10":{"start":{"line":44,"column":4},"end":{"line":47,"column":5}},"11":{"start":{"line":45,"column":6},"end":{"line":45,"column":68}},"12":{"start":{"line":46,"column":6},"end":{"line":46,"column":13}},"13":{"start":{"line":48,"column":4},"end":{"line":48,"column":26}},"14":{"start":{"line":49,"column":4},"end":{"line":49,"column":56}},"15":{"start":{"line":50,"column":4},"end":{"line":50,"column":42}},"16":{"start":{"line":57,"column":4},"end":{"line":60,"column":5}},"17":{"start":{"line":58,"column":6},"end":{"line":58,"column":64}},"18":{"start":{"line":59,"column":6},"end":{"line":59,"column":13}},"19":{"start":{"line":61,"column":4},"end":{"line":61,"column":27}},"20":{"start":{"line":62,"column":4},"end":{"line":62,"column":67}},"21":{"start":{"line":65,"column":25},"end":{"line":65,"column":31}},"22":{"start":{"line":66,"column":4},"end":{"line":85,"column":6}},"23":{"start":{"line":88,"column":4},"end":{"line":93,"column":6}},"24":{"start":{"line":96,"column":4},"end":{"line":96,"column":41}},"25":{"start":{"line":99,"column":28},"end":{"line":99,"column":67}},"26":{"start":{"line":100,"column":30},"end":{"line":100,"column":74}},"27":{"start":{"line":101,"column":28},"end":{"line":106,"column":5}},"28":{"start":{"line":107,"column":33},"end":{"line":110,"column":5}},"29":{"start":{"line":111,"column":4},"end":{"line":116,"column":6}},"30":{"start":{"line":119,"column":21},"end":{"line":119,"column":37}},"31":{"start":{"line":120,"column":20},"end":{"line":125,"column":5}},"32":{"start":{"line":126,"column":4},"end":{"line":126,"column":60}},"33":{"start":{"line":126,"column":43},"end":{"line":126,"column":55}},"34":{"start":{"line":129,"column":24},"end":{"line":129,"column":27}},"35":{"start":{"line":130,"column":29},"end":{"line":135,"column":5}},"36":{"start":{"line":136,"column":4},"end":{"line":136,"column":56}},"37":{"start":{"line":139,"column":27},"end":{"line":139,"column":61}},"38":{"start":{"line":140,"column":22},"end":{"line":140,"column":56}},"39":{"start":{"line":141,"column":4},"end":{"line":143,"column":6}},"40":{"start":{"line":146,"column":23},"end":{"line":146,"column":104}},"41":{"start":{"line":146,"column":55},"end":{"line":146,"column":83}},"42":{"start":{"line":147,"column":4},"end":{"line":147,"column":63}},"43":{"start":{"line":150,"column":4},"end":{"line":166,"column":6}},"44":{"start":{"line":169,"column":4},"end":{"line":190,"column":5}},"45":{"start":{"line":170,"column":6},"end":{"line":189,"column":7}},"46":{"start":{"line":171,"column":37},"end":{"line":171,"column":81}},"47":{"start":{"line":172,"column":8},"end":{"line":172,"column":64}},"48":{"start":{"line":173,"column":33},"end":{"line":173,"column":80}},"49":{"start":{"line":174,"column":8},"end":{"line":180,"column":9}},"50":{"start":{"line":175,"column":10},"end":{"line":175,"column":66}},"51":{"start":{"line":176,"column":10},"end":{"line":179,"column":13}},"52":{"start":{"line":182,"column":8},"end":{"line":185,"column":11}},"53":{"start":{"line":186,"column":8},"end":{"line":188,"column":10}},"54":{"start":{"line":193,"column":29},"end":{"line":193,"column":41}},"55":{"start":{"line":194,"column":29},"end":{"line":194,"column":37}},"56":{"start":{"line":195,"column":20},"end":{"line":195,"column":22}},"57":{"start":{"line":196,"column":22},"end":{"line":196,"column":32}},"58":{"start":{"line":197,"column":4},"end":{"line":204,"column":5}},"59":{"start":{"line":198,"column":22},"end":{"line":198,"column":56}},"60":{"start":{"line":199,"column":6},"end":{"line":202,"column":9}},"61":{"start":{"line":203,"column":6},"end":{"line":203,"column":76}},"62":{"start":{"line":203,"column":37},"end":{"line":203,"column":74}},"63":{"start":{"line":205,"column":4},"end":{"line":205,"column":61}},"64":{"start":{"line":208,"column":4},"end":{"line":227,"column":5}},"65":{"start":{"line":209,"column":6},"end":{"line":226,"column":7}},"66":{"start":{"line":210,"column":23},"end":{"line":216,"column":9}},"67":{"start":{"line":217,"column":24},"end":{"line":217,"column":40}},"68":{"start":{"line":218,"column":8},"end":{"line":220,"column":9}},"69":{"start":{"line":219,"column":10},"end":{"line":219,"column":51}},"70":{"start":{"line":222,"column":8},"end":{"line":222,"column":69}},"71":{"start":{"line":223,"column":8},"end":{"line":225,"column":9}},"72":{"start":{"line":224,"column":10},"end":{"line":224,"column":67}},"73":{"start":{"line":224,"column":41},"end":{"line":224,"column":65}},"74":{"start":{"line":230,"column":19},"end":{"line":232,"column":5}},"75":{"start":{"line":231,"column":18},"end":{"line":231,"column":55}},"76":{"start":{"line":233,"column":25},"end":{"line":233,"column":65}},"77":{"start":{"line":234,"column":4},"end":{"line":234,"column":38}},"78":{"start":{"line":234,"column":31},"end":{"line":234,"column":38}},"79":{"start":{"line":235,"column":29},"end":{"line":250,"column":5}},"80":{"start":{"line":236,"column":20},"end":{"line":249,"column":7}},"81":{"start":{"line":251,"column":30},"end":{"line":275,"column":7}},"82":{"start":{"line":251,"column":65},"end":{"line":275,"column":5}},"83":{"start":{"line":276,"column":32},"end":{"line":276,"column":80}},"84":{"start":{"line":277,"column":4},"end":{"line":279,"column":5}},"85":{"start":{"line":278,"column":6},"end":{"line":278,"column":68}},"86":{"start":{"line":282,"column":4},"end":{"line":284,"column":6}},"87":{"start":{"line":283,"column":20},"end":{"line":283,"column":118}},"88":{"start":{"line":287,"column":28},"end":{"line":287,"column":63}},"89":{"start":{"line":288,"column":28},"end":{"line":291,"column":5}},"90":{"start":{"line":292,"column":30},"end":{"line":298,"column":5}},"91":{"start":{"line":299,"column":4},"end":{"line":299,"column":61}},"92":{"start":{"line":300,"column":4},"end":{"line":302,"column":6}},"93":{"start":{"line":301,"column":19},"end":{"line":301,"column":68}},"94":{"start":{"line":303,"column":29},"end":{"line":303,"column":82}},"95":{"start":{"line":304,"column":4},"end":{"line":304,"column":45}},"96":{"start":{"line":305,"column":4},"end":{"line":305,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":14,"column":2},"end":{"line":14,"column":3}},"loc":{"start":{"line":14,"column":22},"end":{"line":38,"column":3}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":31},"end":{"line":24,"column":32}},"loc":{"start":{"line":24,"column":50},"end":{"line":28,"column":9}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":43,"column":2},"end":{"line":43,"column":3}},"loc":{"start":{"line":43,"column":16},"end":{"line":51,"column":3}},"line":43},"3":{"name":"(anonymous_3)","decl":{"start":{"line":56,"column":2},"end":{"line":56,"column":3}},"loc":{"start":{"line":56,"column":15},"end":{"line":63,"column":3}},"line":56},"4":{"name":"(anonymous_4)","decl":{"start":{"line":64,"column":2},"end":{"line":64,"column":3}},"loc":{"start":{"line":64,"column":35},"end":{"line":86,"column":3}},"line":64},"5":{"name":"(anonymous_5)","decl":{"start":{"line":87,"column":2},"end":{"line":87,"column":3}},"loc":{"start":{"line":87,"column":33},"end":{"line":94,"column":3}},"line":87},"6":{"name":"(anonymous_6)","decl":{"start":{"line":95,"column":2},"end":{"line":95,"column":3}},"loc":{"start":{"line":95,"column":32},"end":{"line":97,"column":3}},"line":95},"7":{"name":"(anonymous_7)","decl":{"start":{"line":98,"column":2},"end":{"line":98,"column":3}},"loc":{"start":{"line":98,"column":47},"end":{"line":117,"column":3}},"line":98},"8":{"name":"(anonymous_8)","decl":{"start":{"line":118,"column":2},"end":{"line":118,"column":3}},"loc":{"start":{"line":118,"column":36},"end":{"line":127,"column":3}},"line":118},"9":{"name":"(anonymous_9)","decl":{"start":{"line":126,"column":26},"end":{"line":126,"column":27}},"loc":{"start":{"line":126,"column":43},"end":{"line":126,"column":55}},"line":126},"10":{"name":"(anonymous_10)","decl":{"start":{"line":128,"column":2},"end":{"line":128,"column":3}},"loc":{"start":{"line":128,"column":40},"end":{"line":137,"column":3}},"line":128},"11":{"name":"(anonymous_11)","decl":{"start":{"line":138,"column":2},"end":{"line":138,"column":3}},"loc":{"start":{"line":138,"column":41},"end":{"line":144,"column":3}},"line":138},"12":{"name":"(anonymous_12)","decl":{"start":{"line":145,"column":2},"end":{"line":145,"column":3}},"loc":{"start":{"line":145,"column":53},"end":{"line":148,"column":3}},"line":145},"13":{"name":"(anonymous_13)","decl":{"start":{"line":146,"column":38},"end":{"line":146,"column":39}},"loc":{"start":{"line":146,"column":55},"end":{"line":146,"column":83}},"line":146},"14":{"name":"(anonymous_14)","decl":{"start":{"line":149,"column":2},"end":{"line":149,"column":3}},"loc":{"start":{"line":149,"column":41},"end":{"line":167,"column":3}},"line":149},"15":{"name":"(anonymous_15)","decl":{"start":{"line":168,"column":2},"end":{"line":168,"column":3}},"loc":{"start":{"line":168,"column":50},"end":{"line":191,"column":3}},"line":168},"16":{"name":"(anonymous_16)","decl":{"start":{"line":192,"column":2},"end":{"line":192,"column":3}},"loc":{"start":{"line":192,"column":45},"end":{"line":206,"column":3}},"line":192},"17":{"name":"(anonymous_17)","decl":{"start":{"line":203,"column":24},"end":{"line":203,"column":25}},"loc":{"start":{"line":203,"column":37},"end":{"line":203,"column":74}},"line":203},"18":{"name":"(anonymous_18)","decl":{"start":{"line":207,"column":2},"end":{"line":207,"column":3}},"loc":{"start":{"line":207,"column":35},"end":{"line":228,"column":3}},"line":207},"19":{"name":"(anonymous_19)","decl":{"start":{"line":224,"column":28},"end":{"line":224,"column":29}},"loc":{"start":{"line":224,"column":41},"end":{"line":224,"column":65}},"line":224},"20":{"name":"(anonymous_20)","decl":{"start":{"line":229,"column":2},"end":{"line":229,"column":3}},"loc":{"start":{"line":229,"column":38},"end":{"line":280,"column":3}},"line":229},"21":{"name":"(anonymous_21)","decl":{"start":{"line":231,"column":6},"end":{"line":231,"column":7}},"loc":{"start":{"line":231,"column":18},"end":{"line":231,"column":55}},"line":231},"22":{"name":"(anonymous_22)","decl":{"start":{"line":236,"column":6},"end":{"line":236,"column":7}},"loc":{"start":{"line":236,"column":20},"end":{"line":249,"column":7}},"line":236},"23":{"name":"(anonymous_23)","decl":{"start":{"line":251,"column":51},"end":{"line":251,"column":52}},"loc":{"start":{"line":251,"column":65},"end":{"line":275,"column":5}},"line":251},"24":{"name":"(anonymous_24)","decl":{"start":{"line":281,"column":2},"end":{"line":281,"column":3}},"loc":{"start":{"line":281,"column":39},"end":{"line":285,"column":3}},"line":281},"25":{"name":"(anonymous_25)","decl":{"start":{"line":283,"column":6},"end":{"line":283,"column":7}},"loc":{"start":{"line":283,"column":20},"end":{"line":283,"column":118}},"line":283},"26":{"name":"(anonymous_26)","decl":{"start":{"line":286,"column":2},"end":{"line":286,"column":3}},"loc":{"start":{"line":286,"column":41},"end":{"line":306,"column":3}},"line":286},"27":{"name":"(anonymous_27)","decl":{"start":{"line":301,"column":6},"end":{"line":301,"column":7}},"loc":{"start":{"line":301,"column":19},"end":{"line":301,"column":68}},"line":301}},"branchMap":{"0":{"loc":{"start":{"line":44,"column":4},"end":{"line":47,"column":5}},"type":"if","locations":[{"start":{"line":44,"column":4},"end":{"line":47,"column":5}},{"start":{},"end":{}}],"line":44},"1":{"loc":{"start":{"line":57,"column":4},"end":{"line":60,"column":5}},"type":"if","locations":[{"start":{"line":57,"column":4},"end":{"line":60,"column":5}},{"start":{},"end":{}}],"line":57},"2":{"loc":{"start":{"line":70,"column":18},"end":{"line":70,"column":40}},"type":"binary-expr","locations":[{"start":{"line":70,"column":18},"end":{"line":70,"column":35}},{"start":{"line":70,"column":39},"end":{"line":70,"column":40}}],"line":70},"3":{"loc":{"start":{"line":73,"column":19},"end":{"line":73,"column":85}},"type":"cond-expr","locations":[{"start":{"line":73,"column":40},"end":{"line":73,"column":78}},{"start":{"line":73,"column":81},"end":{"line":73,"column":85}}],"line":73},"4":{"loc":{"start":{"line":76,"column":23},"end":{"line":76,"column":42}},"type":"binary-expr","locations":[{"start":{"line":76,"column":23},"end":{"line":76,"column":34}},{"start":{"line":76,"column":38},"end":{"line":76,"column":42}}],"line":76},"5":{"loc":{"start":{"line":77,"column":27},"end":{"line":77,"column":50}},"type":"binary-expr","locations":[{"start":{"line":77,"column":27},"end":{"line":77,"column":42}},{"start":{"line":77,"column":46},"end":{"line":77,"column":50}}],"line":77},"6":{"loc":{"start":{"line":78,"column":13},"end":{"line":78,"column":33}},"type":"binary-expr","locations":[{"start":{"line":78,"column":13},"end":{"line":78,"column":25}},{"start":{"line":78,"column":29},"end":{"line":78,"column":33}}],"line":78},"7":{"loc":{"start":{"line":79,"column":21},"end":{"line":79,"column":49}},"type":"binary-expr","locations":[{"start":{"line":79,"column":21},"end":{"line":79,"column":41}},{"start":{"line":79,"column":45},"end":{"line":79,"column":49}}],"line":79},"8":{"loc":{"start":{"line":80,"column":17},"end":{"line":80,"column":41}},"type":"binary-expr","locations":[{"start":{"line":80,"column":17},"end":{"line":80,"column":33}},{"start":{"line":80,"column":37},"end":{"line":80,"column":41}}],"line":80},"9":{"loc":{"start":{"line":81,"column":14},"end":{"line":81,"column":35}},"type":"binary-expr","locations":[{"start":{"line":81,"column":14},"end":{"line":81,"column":27}},{"start":{"line":81,"column":31},"end":{"line":81,"column":35}}],"line":81},"10":{"loc":{"start":{"line":82,"column":16},"end":{"line":82,"column":39}},"type":"binary-expr","locations":[{"start":{"line":82,"column":16},"end":{"line":82,"column":31}},{"start":{"line":82,"column":35},"end":{"line":82,"column":39}}],"line":82},"11":{"loc":{"start":{"line":83,"column":19},"end":{"line":83,"column":45}},"type":"binary-expr","locations":[{"start":{"line":83,"column":19},"end":{"line":83,"column":37}},{"start":{"line":83,"column":41},"end":{"line":83,"column":45}}],"line":83},"12":{"loc":{"start":{"line":84,"column":15},"end":{"line":84,"column":37}},"type":"binary-expr","locations":[{"start":{"line":84,"column":15},"end":{"line":84,"column":29}},{"start":{"line":84,"column":33},"end":{"line":84,"column":37}}],"line":84},"13":{"loc":{"start":{"line":102,"column":26},"end":{"line":102,"column":124}},"type":"cond-expr","locations":[{"start":{"line":102,"column":54},"end":{"line":102,"column":118}},{"start":{"line":102,"column":121},"end":{"line":102,"column":124}}],"line":102},"14":{"loc":{"start":{"line":103,"column":22},"end":{"line":103,"column":133}},"type":"cond-expr","locations":[{"start":{"line":103,"column":53},"end":{"line":103,"column":126}},{"start":{"line":103,"column":129},"end":{"line":103,"column":133}}],"line":103},"15":{"loc":{"start":{"line":104,"column":26},"end":{"line":104,"column":133}},"type":"cond-expr","locations":[{"start":{"line":104,"column":56},"end":{"line":104,"column":126}},{"start":{"line":104,"column":129},"end":{"line":104,"column":133}}],"line":104},"16":{"loc":{"start":{"line":105,"column":28},"end":{"line":105,"column":174}},"type":"cond-expr","locations":[{"start":{"line":105,"column":68},"end":{"line":105,"column":168}},{"start":{"line":105,"column":171},"end":{"line":105,"column":174}}],"line":105},"17":{"loc":{"start":{"line":121,"column":6},"end":{"line":121,"column":31}},"type":"binary-expr","locations":[{"start":{"line":121,"column":6},"end":{"line":121,"column":24}},{"start":{"line":121,"column":28},"end":{"line":121,"column":31}}],"line":121},"18":{"loc":{"start":{"line":122,"column":6},"end":{"line":122,"column":87}},"type":"cond-expr","locations":[{"start":{"line":122,"column":41},"end":{"line":122,"column":81}},{"start":{"line":122,"column":84},"end":{"line":122,"column":87}}],"line":122},"19":{"loc":{"start":{"line":123,"column":6},"end":{"line":123,"column":81}},"type":"cond-expr","locations":[{"start":{"line":123,"column":38},"end":{"line":123,"column":75}},{"start":{"line":123,"column":78},"end":{"line":123,"column":81}}],"line":123},"20":{"loc":{"start":{"line":124,"column":6},"end":{"line":124,"column":71}},"type":"cond-expr","locations":[{"start":{"line":124,"column":33},"end":{"line":124,"column":65}},{"start":{"line":124,"column":68},"end":{"line":124,"column":71}}],"line":124},"21":{"loc":{"start":{"line":136,"column":11},"end":{"line":136,"column":55}},"type":"binary-expr","locations":[{"start":{"line":136,"column":11},"end":{"line":136,"column":40}},{"start":{"line":136,"column":44},"end":{"line":136,"column":55}}],"line":136},"22":{"loc":{"start":{"line":147,"column":26},"end":{"line":147,"column":55}},"type":"binary-expr","locations":[{"start":{"line":147,"column":26},"end":{"line":147,"column":50}},{"start":{"line":147,"column":54},"end":{"line":147,"column":55}}],"line":147},"23":{"loc":{"start":{"line":174,"column":8},"end":{"line":180,"column":9}},"type":"if","locations":[{"start":{"line":174,"column":8},"end":{"line":180,"column":9}},{"start":{},"end":{}}],"line":174},"24":{"loc":{"start":{"line":218,"column":8},"end":{"line":220,"column":9}},"type":"if","locations":[{"start":{"line":218,"column":8},"end":{"line":220,"column":9}},{"start":{},"end":{}}],"line":218},"25":{"loc":{"start":{"line":223,"column":8},"end":{"line":225,"column":9}},"type":"if","locations":[{"start":{"line":223,"column":8},"end":{"line":225,"column":9}},{"start":{},"end":{}}],"line":223},"26":{"loc":{"start":{"line":234,"column":4},"end":{"line":234,"column":38}},"type":"if","locations":[{"start":{"line":234,"column":4},"end":{"line":234,"column":38}},{"start":{},"end":{}}],"line":234},"27":{"loc":{"start":{"line":277,"column":4},"end":{"line":279,"column":5}},"type":"if","locations":[{"start":{"line":277,"column":4},"end":{"line":279,"column":5}},{"start":{},"end":{}}],"line":277},"28":{"loc":{"start":{"line":283,"column":20},"end":{"line":283,"column":118}},"type":"binary-expr","locations":[{"start":{"line":283,"column":20},"end":{"line":283,"column":77}},{"start":{"line":283,"column":81},"end":{"line":283,"column":118}}],"line":283}},"s":{"0":3,"1":3,"2":3,"3":3,"4":3,"5":3,"6":3,"7":0,"8":3,"9":3,"10":4,"11":1,"12":1,"13":3,"14":3,"15":3,"16":7,"17":4,"18":4,"19":3,"20":3,"21":1,"22":1,"23":1,"24":0,"25":1,"26":1,"27":1,"28":1,"29":1,"30":2,"31":2,"32":2,"33":8,"34":1,"35":1,"36":1,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":1,"75":1,"76":1,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":1,"94":0,"95":0,"96":0},"f":{"0":3,"1":0,"2":4,"3":7,"4":1,"5":1,"6":0,"7":1,"8":2,"9":8,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":1,"21":1,"22":0,"23":0,"24":1,"25":1,"26":1,"27":1},"b":{"0":[1,3],"1":[4,3],"2":[1,1],"3":[0,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,1],"9":[1,1],"10":[1,1],"11":[1,1],"12":[1,1],"13":[1,0],"14":[1,0],"15":[1,0],"16":[1,0],"17":[2,0],"18":[2,0],"19":[2,0],"20":[2,0],"21":[1,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/engine/real-time-learner.ts"],"sourcesContent":["import { ElasticsearchService } from \"../../../lib/cortex/elasticsearch/services\";\nimport { MetricsService } from \"../../../lib/cortex/monitoring/metrics\";\nimport { prisma } from \"../../../lib/shared/database/client\";\nimport { LearningEngine, ProcessorMap } from \"../../../lib/shared/engine\";\nimport { MetricsAdapter } from \"../../../lib/shared/engine/adapters/metrics-adapter\";\nimport {\n  FeedbackProcessor,\n  PerformanceProcessor,\n  StrategyProcessor,\n  TimeBasedProcessor,\n} from \"../../../lib/shared/engine/processors\";\nimport { ITimeBasedProcessor } from \"../../../lib/shared/engine/processors/time-based-processor\";\nimport { Logger } from \"../../../lib/shared/types\";\nimport {\n  EngineOptimizationStrategy,\n  EngineOptimizationType,\n  EngineRiskLevel,\n  LearningEvent,\n  LearningEventPriority,\n  LearningEventStatus,\n  LearningEventType,\n  LearningPattern,\n} from \"@prisma/client\";\nimport { Redis } from \"ioredis\";\n\ninterface PerformanceMetrics {\n  latency: number;\n  throughput: number;\n  errorRate: number;\n  resourceUtilization: number;\n}\n\ninterface ImpactMetrics {\n  latencyImprovement: number;\n  throughputGain: number;\n  errorRateReduction: number;\n  resourceOptimization: number;\n}\n\ninterface RealTimeLearnerConfig {\n  redis: Redis;\n  elasticsearch: ElasticsearchService;\n  logger: Logger;\n  metrics: MetricsService;\n  minConfidenceThreshold: number;\n  validationWindow: number; // ms\n  batchSize: number;\n}\n\ninterface LearningMetrics {\n  latency?: number;\n  throughput?: number;\n  errorRate?: number;\n  resourceUtilization?: number;\n}\n\ninterface LearningFeatures {\n  relevantHits?: number;\n  totalHits?: number;\n  took?: number;\n}\n\ninterface ExtendedLearningPattern extends LearningPattern {\n  metrics: LearningMetrics;\n  features: {\n    relevantHits?: number;\n    totalHits?: number;\n    took?: number;\n  };\n}\n\ninterface ValidationContext {\n  strategyId: string;\n  baselineMetrics: PerformanceMetrics;\n  projectedImpact: ImpactMetrics;\n  validationStartTime: number;\n  sampledQueries: Set<string>;\n}\n\ninterface MetricSample {\n  timestamp: number;\n  metrics: PerformanceMetrics;\n}\n\nexport class RealTimeLearner {\n  private validationQueue: Map<string, ValidationContext>;\n  private learningStream: string = \"nous:learning:stream\";\n  private engine: LearningEngine;\n  private prisma: typeof prisma;\n  private isRunning: boolean = false;\n\n  constructor(private config: RealTimeLearnerConfig) {\n    this.validationQueue = new Map();\n    this.prisma = prisma;\n\n    const metricsAdapter = new MetricsAdapter(config.metrics, config.logger);\n    \n    // Initialize processors with their required dependencies\n    const timeBasedProcessor = Object.assign(\n      new TimeBasedProcessor(),\n      {\n        findRecurringPatterns: async (params: any) => ({\n          daily: [],\n          weekly: [],\n          confidence: 0\n        })\n      }\n    ) as unknown as ITimeBasedProcessor;\n\n    const processors: ProcessorMap = {\n      feedback: new FeedbackProcessor(),\n      performance: new PerformanceProcessor(),\n      timeBased: timeBasedProcessor,\n      strategy: new StrategyProcessor()\n    };\n\n    this.engine = new LearningEngine(config.logger, processors, this.prisma);\n  }\n\n  /**\n   * Start the real-time learner.\n   * This will begin consuming events from the Redis stream.\n   */\n  async start(): Promise<void> {\n    if (this.isRunning) {\n      this.config.logger.warn(\"RealTimeLearner is already running\");\n      return;\n    }\n    \n    this.isRunning = true;\n    this.config.logger.info(\"Starting RealTimeLearner\");\n    await this.initializeStreamConsumer();\n  }\n\n  /**\n   * Stop the real-time learner.\n   * This will gracefully stop consuming events.\n   */\n  async stop(): Promise<void> {\n    if (!this.isRunning) {\n      this.config.logger.warn(\"RealTimeLearner is not running\");\n      return;\n    }\n    \n    this.isRunning = false;\n    this.config.logger.info(\"RealTimeLearner stopping gracefully\");\n  }\n\n  private deserializeLearningEvent(record: any): LearningEvent {\n    const [id, fields] = record;\n    return {\n      id,\n      type: fields.type as LearningEventType,\n      timestamp: new Date(parseInt(fields.timestamp)),\n      retryCount: fields.retryCount || 0,\n      createdAt: new Date(parseInt(fields.createdAt)),\n      updatedAt: new Date(parseInt(fields.updatedAt)),\n      processedAt: fields.processedAt\n        ? new Date(parseInt(fields.processedAt))\n        : null,\n      status: fields.status as LearningEventStatus,\n      priority: fields.priority as LearningEventPriority,\n      tags: JSON.parse(fields.tags || \"[]\"),\n      metadata: JSON.parse(fields.metadata || \"{}\"),\n      error: fields.error || null,\n      correlationId: fields.correlationId || null,\n      sessionId: fields.sessionId || null,\n      userId: fields.userId || null,\n      clientId: fields.clientId || null,\n      environment: fields.environment || null,\n      version: fields.version || null,\n    };\n  }\n\n  private async collectBaselineMetrics(): Promise<PerformanceMetrics> {\n    return {\n      latency: await this.config.metrics.getAverageLatency(),\n      throughput: await this.config.metrics.getThroughput(),\n      errorRate: await this.config.metrics.getErrorRate(),\n      resourceUtilization: await this.config.metrics.getCPUUsage(),\n    };\n  }\n\n  private async collectCurrentMetrics(): Promise<PerformanceMetrics> {\n    return this.collectBaselineMetrics();\n  }\n\n  private calculateProjectedImpact(\n    strategy: ExtendedLearningPattern,\n    baseline: PerformanceMetrics\n  ): ImpactMetrics {\n    const patternStrength = this.calculatePatternStrength(strategy);\n    const historicalSuccess = this.getHistoricalSuccessRate(strategy.type);\n\n    const baseImprovement = {\n      latencyImprovement: strategy.metrics?.latency\n        ? (baseline.latency - strategy.metrics.latency) / baseline.latency\n        : 0.1,\n      throughputGain: strategy.metrics?.throughput\n        ? (strategy.metrics.throughput - baseline.throughput) /\n          baseline.throughput\n        : 0.15,\n      errorRateReduction: strategy.metrics?.errorRate\n        ? (baseline.errorRate - strategy.metrics.errorRate) / baseline.errorRate\n        : 0.05,\n      resourceOptimization: strategy.metrics?.resourceUtilization\n        ? (baseline.resourceUtilization -\n            strategy.metrics.resourceUtilization) /\n          baseline.resourceUtilization\n        : 0.2,\n    };\n\n    const confidenceMultiplier = Math.min(\n      patternStrength * historicalSuccess,\n      1.0\n    );\n\n    return {\n      latencyImprovement:\n        baseImprovement.latencyImprovement * confidenceMultiplier,\n      throughputGain: baseImprovement.throughputGain * confidenceMultiplier,\n      errorRateReduction:\n        baseImprovement.errorRateReduction * confidenceMultiplier,\n      resourceOptimization:\n        baseImprovement.resourceOptimization * confidenceMultiplier,\n    };\n  }\n\n  private calculatePatternStrength(pattern: ExtendedLearningPattern): number {\n    const features = pattern.features as {\n      relevantHits?: number;\n      totalHits?: number;\n      took?: number;\n    };\n\n    const factors = [\n      pattern.confidence || 0.5,\n      features.relevantHits !== undefined\n        ? Math.min(features.relevantHits / 1000, 1)\n        : 0.5,\n      features.totalHits !== undefined\n        ? Math.min(features.totalHits / 10000, 1)\n        : 0.5,\n      features.took !== undefined ? Math.min(1000 / features.took, 1) : 0.5,\n    ];\n\n    return factors.reduce((acc, factor) => acc * factor, 1);\n  }\n\n  private getHistoricalSuccessRate(patternType: string): number {\n    // Start with optimistic default\n    const defaultRate = 0.7;\n\n    const typeSuccessRates: Record<string, number> = {\n      high_relevance_search: 0.85,\n      performance_optimization: 0.75,\n      cache_hit_pattern: 0.9,\n      index_usage_pattern: 0.8,\n    };\n\n    return typeSuccessRates[patternType] || defaultRate;\n  }\n\n  private async computeValidationResult(\n    context: ValidationContext\n  ): Promise<{ isValid: boolean }> {\n    const currentMetrics = await this.collectCurrentMetrics();\n    const threshold = this.config.minConfidenceThreshold;\n\n    return {\n      isValid:\n        currentMetrics.latency <=\n        context.baselineMetrics.latency * (1 + threshold),\n    };\n  }\n\n  private async analyzePerformanceSamples(\n    samples: MetricSample[],\n    strategy: ExtendedLearningPattern\n  ): Promise<boolean> {\n    const avgLatency =\n      samples.reduce((sum, sample) => sum + sample.metrics.latency, 0) /\n      samples.length;\n    return avgLatency <= (strategy.metrics.latency || 0) * 1.1; // 10% threshold\n  }\n\n  private convertToOptimizationStrategy(\n    pattern: ExtendedLearningPattern\n  ): EngineOptimizationStrategy {\n    return {\n      id: pattern.id,\n      type: pattern.type as EngineOptimizationType,\n      confidence: pattern.confidence,\n      metadata: {\n        targetMetrics: [\"latency\", \"throughput\"],\n        expectedImprovement: 0.1,\n        riskLevel: \"LOW\",\n        dependencies: [],\n        searchPattern: pattern.id,\n      },\n      priority: 1,\n      impact: 0.5,\n      learningResultId: pattern.id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n  }\n\n  private async applyStrategiesWithValidation(\n    strategies: ExtendedLearningPattern[]\n  ) {\n    for (const strategy of strategies) {\n      try {\n        const optimizationStrategy =\n          this.convertToOptimizationStrategy(strategy);\n        await this.engine.executeStrategy(optimizationStrategy);\n\n        const monitoringResult =\n          await this.monitorStrategyPerformance(strategy);\n        if (!monitoringResult) {\n          await this.engine.executeStrategy(optimizationStrategy);\n          this.config.logger.warn(\"Strategy rolled back due to performance\", {\n            strategyId: strategy.id,\n            metrics: monitoringResult,\n          });\n        }\n      } catch (error) {\n        this.config.logger.error(\"Strategy application failed\", {\n          error,\n          strategyId: strategy.id,\n        });\n        await this.engine.executeStrategy(\n          this.convertToOptimizationStrategy(strategy)\n        );\n      }\n    }\n  }\n\n  private async monitorStrategyPerformance(strategy: ExtendedLearningPattern) {\n    const monitoringWindow = 5 * 60 * 1000; // 5 minutes\n    const samplingInterval = 30 * 1000; // 30 seconds\n    const samples: MetricSample[] = [];\n\n    const startTime = Date.now();\n    while (Date.now() - startTime < monitoringWindow) {\n      const metrics = await this.collectCurrentMetrics();\n      samples.push({\n        timestamp: Date.now(),\n        metrics,\n      });\n\n      await new Promise((resolve) => setTimeout(resolve, samplingInterval));\n    }\n\n    return this.analyzePerformanceSamples(samples, strategy);\n  }\n\n  private async initializeStreamConsumer() {\n    while (this.isRunning) {\n      try {\n        const result = await this.config.redis.xread(\n          \"BLOCK\",\n          0,\n          \"STREAMS\",\n          this.learningStream,\n          \"$\"\n        );\n        const records = result?.[0]?.[1];\n\n        if (records) {\n          await this.processLearningBatch(records);\n        }\n      } catch (error) {\n        this.config.logger.error(\"Stream consumer error\", { error });\n        if (this.isRunning) {\n          await new Promise((resolve) => setTimeout(resolve, 1000));\n        }\n      }\n    }\n  }\n\n  private async processLearningBatch(records: any[]) {\n    const events = records.map((record) =>\n      this.deserializeLearningEvent(record)\n    );\n    const { patterns } = await this.engine.detectPatterns(events);\n\n    if (patterns.length === 0) return;\n\n    // Convert patterns to extended patterns with metrics and features\n    const extendedPatterns: ExtendedLearningPattern[] = patterns.map(\n      (pattern) => ({\n        ...pattern,\n        metrics: {\n          latency: undefined,\n          throughput: undefined,\n          errorRate: undefined,\n          resourceUtilization: undefined,\n        },\n        features: {\n          relevantHits: undefined,\n          totalHits: undefined,\n          took: undefined,\n        },\n      })\n    );\n\n    // Apply optimization strategies\n    const optimizedPatterns = extendedPatterns.map((pattern) => ({\n      ...pattern,\n      metrics: {\n        latency: undefined,\n        throughput: undefined,\n        errorRate: undefined,\n        resourceUtilization: undefined,\n      },\n      features: {\n        relevantHits: undefined,\n        totalHits: undefined,\n        took: undefined,\n      },\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      metadata: {\n        source: \"real-time-learner\",\n        detectedAt: new Date().toISOString(),\n        targetMetrics: [\"latency\", \"throughput\"],\n        expectedImprovement: 0.1,\n        riskLevel: EngineRiskLevel.LOW,\n        dependencies: [],\n        searchPattern: pattern.id,\n      },\n    }));\n\n    const validatedStrategies =\n      await this.validateStrategies(optimizedPatterns);\n\n    if (validatedStrategies.length > 0) {\n      await this.applyStrategiesWithValidation(validatedStrategies);\n    }\n  }\n\n  private async validateStrategies(strategies: ExtendedLearningPattern[]) {\n    return strategies.filter(\n      (strategy) =>\n        strategy.confidence >= this.config.minConfidenceThreshold &&\n        this.validateStrategyImpact(strategy)\n    );\n  }\n\n  private async validateStrategyImpact(\n    strategy: ExtendedLearningPattern\n  ): Promise<boolean> {\n    const baselineMetrics = await this.collectBaselineMetrics();\n    const projectedImpact = this.calculateProjectedImpact(\n      strategy,\n      baselineMetrics\n    );\n\n    // Create validation context\n    const validationContext = {\n      strategyId: strategy.id,\n      baselineMetrics,\n      projectedImpact,\n      validationStartTime: Date.now(),\n      sampledQueries: new Set<string>(),\n    };\n\n    this.validationQueue.set(strategy.id, validationContext);\n\n    // Wait for validation window\n    await new Promise((resolve) =>\n      setTimeout(resolve, this.config.validationWindow)\n    );\n\n    const validationResult =\n      await this.computeValidationResult(validationContext);\n    this.validationQueue.delete(strategy.id);\n\n    return validationResult.isValid;\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5980c0fadce69b860cb8b5172971fb4964d69058"}}