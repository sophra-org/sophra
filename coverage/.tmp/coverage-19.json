{"/workspaces/sophra/src/app/api/nous/learn/feedback/route.ts":{"path":"/workspaces/sophra/src/app/api/nous/learn/feedback/route.ts","statementMap":{"0":{"start":{"line":6,"column":23},"end":{"line":6,"column":31}},"1":{"start":{"line":7,"column":23},"end":{"line":22,"column":2}},"2":{"start":{"line":24,"column":2},"end":{"line":68,"column":3}},"3":{"start":{"line":25,"column":21},"end":{"line":28,"column":6}},"4":{"start":{"line":29,"column":30},"end":{"line":48,"column":7}},"5":{"start":{"line":29,"column":51},"end":{"line":48,"column":5}},"6":{"start":{"line":31,"column":41},"end":{"line":41,"column":7}},"7":{"start":{"line":44,"column":56},"end":{"line":44,"column":73}},"8":{"start":{"line":46,"column":54},"end":{"line":46,"column":66}},"9":{"start":{"line":49,"column":4},"end":{"line":55,"column":7}},"10":{"start":{"line":57,"column":4},"end":{"line":57,"column":56}},"11":{"start":{"line":58,"column":4},"end":{"line":67,"column":6}},"12":{"start":{"line":71,"column":2},"end":{"line":133,"column":3}},"13":{"start":{"line":72,"column":17},"end":{"line":72,"column":33}},"14":{"start":{"line":73,"column":23},"end":{"line":73,"column":53}},"15":{"start":{"line":74,"column":4},"end":{"line":90,"column":5}},"16":{"start":{"line":75,"column":6},"end":{"line":78,"column":9}},"17":{"start":{"line":79,"column":6},"end":{"line":89,"column":8}},"18":{"start":{"line":91,"column":25},"end":{"line":91,"column":40}},"19":{"start":{"line":92,"column":38},"end":{"line":92,"column":48}},"20":{"start":{"line":93,"column":28},"end":{"line":98,"column":6}},"21":{"start":{"line":99,"column":26},"end":{"line":99,"column":90}},"22":{"start":{"line":99,"column":54},"end":{"line":99,"column":68}},"23":{"start":{"line":100,"column":26},"end":{"line":100,"column":70}},"24":{"start":{"line":100,"column":54},"end":{"line":100,"column":63}},"25":{"start":{"line":101,"column":4},"end":{"line":104,"column":7}},"26":{"start":{"line":105,"column":4},"end":{"line":120,"column":24}},"27":{"start":{"line":122,"column":4},"end":{"line":122,"column":57}},"28":{"start":{"line":123,"column":4},"end":{"line":132,"column":6}}},"fnMap":{"0":{"name":"GET","decl":{"start":{"line":23,"column":22},"end":{"line":23,"column":25}},"loc":{"start":{"line":23,"column":28},"end":{"line":69,"column":1}},"line":23},"1":{"name":"(anonymous_1)","decl":{"start":{"line":29,"column":43},"end":{"line":29,"column":44}},"loc":{"start":{"line":29,"column":51},"end":{"line":48,"column":5}},"line":29},"2":{"name":"(anonymous_2)","decl":{"start":{"line":31,"column":30},"end":{"line":31,"column":31}},"loc":{"start":{"line":31,"column":41},"end":{"line":41,"column":7}},"line":31},"3":{"name":"(anonymous_3)","decl":{"start":{"line":44,"column":41},"end":{"line":44,"column":42}},"loc":{"start":{"line":44,"column":56},"end":{"line":44,"column":73}},"line":44},"4":{"name":"(anonymous_4)","decl":{"start":{"line":46,"column":44},"end":{"line":46,"column":45}},"loc":{"start":{"line":46,"column":54},"end":{"line":46,"column":66}},"line":46},"5":{"name":"POST","decl":{"start":{"line":70,"column":22},"end":{"line":70,"column":26}},"loc":{"start":{"line":70,"column":32},"end":{"line":134,"column":1}},"line":70},"6":{"name":"(anonymous_6)","decl":{"start":{"line":99,"column":42},"end":{"line":99,"column":43}},"loc":{"start":{"line":99,"column":54},"end":{"line":99,"column":68}},"line":99},"7":{"name":"(anonymous_7)","decl":{"start":{"line":100,"column":47},"end":{"line":100,"column":48}},"loc":{"start":{"line":100,"column":54},"end":{"line":100,"column":63}},"line":100}},"branchMap":{"0":{"loc":{"start":{"line":74,"column":4},"end":{"line":90,"column":5}},"type":"if","locations":[{"start":{"line":74,"column":4},"end":{"line":90,"column":5}},{"start":{},"end":{}}],"line":74}},"s":{"0":1,"1":1,"2":3,"3":3,"4":2,"5":1,"6":1,"7":1,"8":1,"9":2,"10":1,"11":1,"12":6,"13":6,"14":5,"15":5,"16":3,"17":3,"18":2,"19":2,"20":2,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":2,"28":2},"f":{"0":3,"1":1,"2":1,"3":1,"4":1,"5":6,"6":1,"7":1},"b":{"0":[3,2]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/api/nous/learn/feedback/route.ts"],"sourcesContent":["import { prisma } from \"@lib/shared/database/client\";\nimport logger from \"@lib/shared/logger\";\nimport { EngagementType, Prisma, SignalType } from \"@prisma/client\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { z } from \"zod\";\n\n// Declare Node.js runtime\nexport const runtime = \"nodejs\";\n\nconst FeedbackSchema = z.object({\n  feedback: z.array(\n    z.object({\n      queryId: z.string(),\n      rating: z.number().min(0).max(1),\n      metadata: z.object({\n        userAction: z.nativeEnum(SignalType),\n        resultId: z.string(),\n        queryHash: z.string(),\n        customMetadata: z.record(z.unknown()).optional(),\n        timestamp: z.string().datetime(),\n        engagementType: z.nativeEnum(EngagementType).optional(),\n      })\n    })\n  ),\n});\n\nexport async function GET(): Promise<NextResponse> {\n  try {\n    const feedback = await prisma.feedbackRequest.findMany({\n      orderBy: { timestamp: \"desc\" },\n      take: 100,\n    });\n\n    const formattedFeedback = feedback.map(f => ({\n      id: f.id,\n      content: (f.feedback as any[]).map(item => ({\n        queryId: item.queryId,\n        rating: item.rating,\n        metadata: {\n          userAction: item.metadata.userAction,\n          resultId: item.metadata.resultId,\n          queryHash: item.metadata.queryHash,\n          timestamp: item.metadata.timestamp,\n          engagementType: item.metadata.engagementType,\n        }\n      })),\n      createdAt: f.timestamp,\n      metrics: {\n        averageRating: (f.feedback as any[]).reduce((acc, item) => acc + item.rating, 0) / (f.feedback as any[]).length,\n        totalFeedback: (f.feedback as any[]).length,\n        uniqueUsers: new Set((f.feedback as any[]).map(item => item.queryId)).size,\n      }\n    }));\n\n    return NextResponse.json({\n      success: true,\n      data: formattedFeedback,\n      meta: {\n        total: formattedFeedback.length\n      }\n    });\n  } catch (error) {\n    logger.error(\"Failed to fetch feedback\", { error });\n    return NextResponse.json(\n      { \n        success: false, \n        error: \"Failed to fetch feedback\",\n        meta: {\n          total: 0\n        }\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(req: NextRequest): Promise<NextResponse> {\n  try {\n    const body = await req.json();\n    const validation = FeedbackSchema.safeParse(body);\n\n    if (!validation.success) {\n      logger.error(\"Invalid feedback request\", {\n        errors: validation.error.format(),\n        received: body,\n      });\n      return NextResponse.json(\n        {\n          success: false,\n          error: \"Invalid request format\",\n          details: validation.error.format(),\n          meta: {\n            total: 0\n          }\n        },\n        { status: 400 }\n      );\n    }\n\n    const { feedback } = validation.data;\n    const timestamp = new Date();\n\n    const feedbackRequest = await prisma.feedbackRequest.create({\n      data: {\n        feedback: feedback as Prisma.InputJsonValue,\n        timestamp,\n      },\n    });\n\n    const averageRating = feedback.reduce((acc, f) => acc + f.rating, 0) / feedback.length;\n    const uniqueQueries = new Set(feedback.map((f) => f.queryId)).size;\n\n    logger.info(\"Recorded feedback\", {\n      feedbackCount: feedback.length,\n      timestamp: timestamp.toISOString(),\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        id: feedbackRequest.id,\n        feedback,\n        timestamp,\n        meta: {\n          uniqueQueries,\n          averageRating,\n          feedbackCount: feedback.length\n        }\n      },\n      meta: {\n        total: feedback.length\n      }\n    }, { status: 201 });\n  } catch (error) {\n    logger.error(\"Failed to record feedback\", { error });\n    return NextResponse.json(\n      { \n        success: false, \n        error: \"Failed to record feedback\",\n        meta: {\n          total: 0\n        }\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"dd237e9c2da3131822164e5b0bd6abf423169f96"}}