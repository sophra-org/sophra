{"/workspaces/sophra/src/app/health/route.ts":{"path":"/workspaces/sophra/src/app/health/route.ts","statementMap":{"0":{"start":{"line":5,"column":20},"end":{"line":5,"column":30}},"1":{"start":{"line":6,"column":2},"end":{"line":76,"column":3}},"2":{"start":{"line":7,"column":4},"end":{"line":7,"column":50}},"3":{"start":{"line":8,"column":21},"end":{"line":8,"column":55}},"4":{"start":{"line":9,"column":4},"end":{"line":9,"column":51}},"5":{"start":{"line":10,"column":46},"end":{"line":29,"column":6}},"6":{"start":{"line":12,"column":8},"end":{"line":14,"column":11}},"7":{"start":{"line":15,"column":8},"end":{"line":15,"column":34}},"8":{"start":{"line":18,"column":8},"end":{"line":20,"column":11}},"9":{"start":{"line":21,"column":8},"end":{"line":21,"column":22}},"10":{"start":{"line":24,"column":8},"end":{"line":26,"column":11}},"11":{"start":{"line":27,"column":8},"end":{"line":27,"column":22}},"12":{"start":{"line":30,"column":19},"end":{"line":49,"column":5}},"13":{"start":{"line":50,"column":19},"end":{"line":50,"column":58}},"14":{"start":{"line":51,"column":4},"end":{"line":54,"column":7}},"15":{"start":{"line":55,"column":4},"end":{"line":62,"column":6}},"16":{"start":{"line":64,"column":4},"end":{"line":67,"column":7}},"17":{"start":{"line":68,"column":4},"end":{"line":75,"column":6}}},"fnMap":{"0":{"name":"GET","decl":{"start":{"line":4,"column":22},"end":{"line":4,"column":25}},"loc":{"start":{"line":4,"column":32},"end":{"line":77,"column":1}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":41},"end":{"line":11,"column":42}},"loc":{"start":{"line":11,"column":53},"end":{"line":16,"column":7}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":17,"column":36},"end":{"line":17,"column":37}},"loc":{"start":{"line":17,"column":48},"end":{"line":22,"column":7}},"line":17},"3":{"name":"(anonymous_3)","decl":{"start":{"line":23,"column":33},"end":{"line":23,"column":34}},"loc":{"start":{"line":23,"column":45},"end":{"line":28,"column":7}},"line":23}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":18},"end":{"line":13,"column":67}},"type":"cond-expr","locations":[{"start":{"line":13,"column":39},"end":{"line":13,"column":50}},{"start":{"line":13,"column":53},"end":{"line":13,"column":67}}],"line":13},"1":{"loc":{"start":{"line":19,"column":18},"end":{"line":19,"column":55}},"type":"cond-expr","locations":[{"start":{"line":19,"column":27},"end":{"line":19,"column":38}},{"start":{"line":19,"column":41},"end":{"line":19,"column":55}}],"line":19},"2":{"loc":{"start":{"line":25,"column":18},"end":{"line":25,"column":55}},"type":"cond-expr","locations":[{"start":{"line":25,"column":27},"end":{"line":25,"column":38}},{"start":{"line":25,"column":41},"end":{"line":25,"column":55}}],"line":25},"3":{"loc":{"start":{"line":31,"column":14},"end":{"line":31,"column":75}},"type":"cond-expr","locations":[{"start":{"line":31,"column":52},"end":{"line":31,"column":61}},{"start":{"line":31,"column":64},"end":{"line":31,"column":75}}],"line":31},"4":{"loc":{"start":{"line":31,"column":14},"end":{"line":31,"column":49}},"type":"binary-expr","locations":[{"start":{"line":31,"column":14},"end":{"line":31,"column":22}},{"start":{"line":31,"column":26},"end":{"line":31,"column":34}},{"start":{"line":31,"column":38},"end":{"line":31,"column":49}}],"line":31},"5":{"loc":{"start":{"line":50,"column":19},"end":{"line":50,"column":58}},"type":"cond-expr","locations":[{"start":{"line":50,"column":49},"end":{"line":50,"column":52}},{"start":{"line":50,"column":55},"end":{"line":50,"column":58}}],"line":50},"6":{"loc":{"start":{"line":65,"column":13},"end":{"line":65,"column":69}},"type":"cond-expr","locations":[{"start":{"line":65,"column":38},"end":{"line":65,"column":51}},{"start":{"line":65,"column":54},"end":{"line":65,"column":69}}],"line":65},"7":{"loc":{"start":{"line":71,"column":15},"end":{"line":71,"column":77}},"type":"cond-expr","locations":[{"start":{"line":71,"column":40},"end":{"line":71,"column":53}},{"start":{"line":71,"column":56},"end":{"line":71,"column":77}}],"line":71}},"s":{"0":4,"1":4,"2":4,"3":4,"4":4,"5":4,"6":3,"7":3,"8":4,"9":4,"10":4,"11":4,"12":3,"13":3,"14":3,"15":3,"16":1,"17":1},"f":{"0":4,"1":3,"2":4,"3":4},"b":{"0":[3,0],"1":[2,2],"2":[4,0],"3":[2,1],"4":[3,3,2],"5":[2,1],"6":[1,0],"7":[1,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/health/route.ts"],"sourcesContent":["import { serviceManager } from \"@/lib/cortex/utils/service-manager\";\nimport logger from \"@/lib/shared/logger\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport async function GET(_req: NextRequest): Promise<NextResponse> {\n  const startTime = Date.now();\n\n  try {\n    logger.info(\"Starting basic health check...\");\n    const services = await serviceManager.getServices();\n\n    logger.info(\"Checking service connections...\");\n    const [esHealth, pgHealth, redisHealth] = await Promise.all([\n      services.elasticsearch.ping().then((result) => {\n        logger.info(\"Elasticsearch health check:\", {\n          status: result.operational ? \"connected\" : \"disconnected\",\n        });\n        return result.operational;\n      }),\n      services.postgres.ping().then((result) => {\n        logger.info(\"PostgreSQL health check:\", {\n          status: result ? \"connected\" : \"disconnected\",\n        });\n        return result;\n      }),\n      services.redis.ping().then((result) => {\n        logger.info(\"Redis health check:\", {\n          status: result ? \"connected\" : \"disconnected\",\n        });\n        return result;\n      }),\n    ]);\n\n    const health = {\n      status: esHealth && pgHealth && redisHealth ? \"healthy\" : \"unhealthy\",\n      timestamp: new Date().toISOString(),\n      services: {\n        elasticsearch: {\n          connected: esHealth,\n          url: process.env.ELASTICSEARCH_URL,\n        },\n        postgres: {\n          connected: pgHealth,\n          url: process.env.POSTGRESQL_URL?.split(\"@\")[1],\n        },\n        redis: {\n          connected: redisHealth,\n          url: process.env.SOPHRA_REDIS_URL?.split(\"@\")[1],\n        },\n      },\n      uptime: process.uptime(),\n      environment: process.env.NODE_ENV,\n    };\n\n    const status = health.status === \"healthy\" ? 200 : 503;\n\n    logger.info(`Health check completed: ${health.status}`, {\n      took: Date.now() - startTime,\n      status,\n    });\n\n    return NextResponse.json(\n      {\n        success: health.status === \"healthy\",\n        data: health,\n        meta: { took: Date.now() - startTime },\n      },\n      { status }\n    );\n  } catch (error) {\n    logger.error(\"Health check failed\", {\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      took: Date.now() - startTime,\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : \"Health check failed\",\n        meta: { took: Date.now() - startTime },\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"mappings":"AAAA,SAAS,sBAAsB;AAC/B,OAAO,YAAY;AACnB,SAAsB,oBAAoB;AAE1C,sBAAsB,IAAI,MAA0C;AAClE,QAAM,YAAY,KAAK,IAAI;AAE3B,MAAI;AACF,WAAO,KAAK,gCAAgC;AAC5C,UAAM,WAAW,MAAM,eAAe,YAAY;AAElD,WAAO,KAAK,iCAAiC;AAC7C,UAAM,CAAC,UAAU,UAAU,WAAW,IAAI,MAAM,QAAQ,IAAI;AAAA,MAC1D,SAAS,cAAc,KAAK,EAAE,KAAK,CAAC,WAAW;AAC7C,eAAO,KAAK,+BAA+B;AAAA,UACzC,QAAQ,OAAO,cAAc,cAAc;AAAA,QAC7C,CAAC;AACD,eAAO,OAAO;AAAA,MAChB,CAAC;AAAA,MACD,SAAS,SAAS,KAAK,EAAE,KAAK,CAAC,WAAW;AACxC,eAAO,KAAK,4BAA4B;AAAA,UACtC,QAAQ,SAAS,cAAc;AAAA,QACjC,CAAC;AACD,eAAO;AAAA,MACT,CAAC;AAAA,MACD,SAAS,MAAM,KAAK,EAAE,KAAK,CAAC,WAAW;AACrC,eAAO,KAAK,uBAAuB;AAAA,UACjC,QAAQ,SAAS,cAAc;AAAA,QACjC,CAAC;AACD,eAAO;AAAA,MACT,CAAC;AAAA,IACH,CAAC;AAED,UAAM,SAAS;AAAA,MACb,QAAQ,YAAY,YAAY,cAAc,YAAY;AAAA,MAC1D,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,UAAU;AAAA,QACR,eAAe;AAAA,UACb,WAAW;AAAA,UACX,KAAK,QAAQ,IAAI;AAAA,QACnB;AAAA,QACA,UAAU;AAAA,UACR,WAAW;AAAA,UACX,KAAK,QAAQ,IAAI,gBAAgB,MAAM,GAAG,EAAE,CAAC;AAAA,QAC/C;AAAA,QACA,OAAO;AAAA,UACL,WAAW;AAAA,UACX,KAAK,QAAQ,IAAI,kBAAkB,MAAM,GAAG,EAAE,CAAC;AAAA,QACjD;AAAA,MACF;AAAA,MACA,QAAQ,QAAQ,OAAO;AAAA,MACvB,aAAa,QAAQ,IAAI;AAAA,IAC3B;AAEA,UAAM,SAAS,OAAO,WAAW,YAAY,MAAM;AAEnD,WAAO,KAAK,2BAA2B,OAAO,MAAM,IAAI;AAAA,MACtD,MAAM,KAAK,IAAI,IAAI;AAAA,MACnB;AAAA,IACF,CAAC;AAED,WAAO,aAAa;AAAA,MAClB;AAAA,QACE,SAAS,OAAO,WAAW;AAAA,QAC3B,MAAM;AAAA,QACN,MAAM,EAAE,MAAM,KAAK,IAAI,IAAI,UAAU;AAAA,MACvC;AAAA,MACA,EAAE,OAAO;AAAA,IACX;AAAA,EACF,SAAS,OAAO;AACd,WAAO,MAAM,uBAAuB;AAAA,MAClC,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MAChD,MAAM,KAAK,IAAI,IAAI;AAAA,IACrB,CAAC;AAED,WAAO,aAAa;AAAA,MAClB;AAAA,QACE,SAAS;AAAA,QACT,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,QAChD,MAAM,EAAE,MAAM,KAAK,IAAI,IAAI,UAAU;AAAA,MACvC;AAAA,MACA,EAAE,QAAQ,IAAI;AAAA,IAChB;AAAA,EACF;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a79a5a0047c83eb522d75d86828975f8ab643403"}}