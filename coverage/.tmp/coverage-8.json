{"/workspaces/sophra/src/lib/cortex/core/services.ts":{"path":"/workspaces/sophra/src/lib/cortex/core/services.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":32}},"1":{"start":{"line":4,"column":4},"end":{"line":4,"column":42}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":2},"end":{"line":2,"column":3}},"loc":{"start":{"line":2,"column":22},"end":{"line":5,"column":3}},"line":2}},"branchMap":{},"s":{"0":12,"1":12},"f":{"0":12},"b":{},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/core/services.ts"],"sourcesContent":["import type { Logger } from \"@/lib/shared/types\";\n\nexport interface BaseServiceConfig {\n  logger: Logger;\n  environment: \"development\" | \"production\" | \"test\";\n}\n\nexport abstract class BaseService {\n  protected readonly logger: Logger;\n  protected readonly environment: string;\n\n  constructor(config: BaseServiceConfig) {\n    this.logger = config.logger;\n    this.environment = config.environment;\n  }\n\n  abstract healthCheck(): Promise<boolean>;\n  abstract disconnect?(): Promise<void>;\n}\n"],"mappings":"AAOO,aAAe,YAAY;AAAA,EAIhC,YAAY,QAA2B;AACrC,SAAK,SAAS,OAAO;AACrB,SAAK,cAAc,OAAO;AAAA,EAC5B;AAIF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e4b1343fd6aee8878b1fd5e4fd63db4e6e66a93b"},"/workspaces/sophra/src/lib/cortex/redis/services.ts":{"path":"/workspaces/sophra/src/lib/cortex/redis/services.ts","statementMap":{"0":{"start":{"line":6,"column":4},"end":{"line":6,"column":18}},"1":{"start":{"line":7,"column":4},"end":{"line":7,"column":44}},"2":{"start":{"line":8,"column":4},"end":{"line":8,"column":24}},"3":{"start":{"line":10,"column":4},"end":{"line":10,"column":22}},"4":{"start":{"line":11,"column":4},"end":{"line":11,"column":27}},"5":{"start":{"line":12,"column":4},"end":{"line":12,"column":26}},"6":{"start":{"line":13,"column":4},"end":{"line":13,"column":32}},"7":{"start":{"line":14,"column":4},"end":{"line":14,"column":48}},"8":{"start":{"line":15,"column":4},"end":{"line":18,"column":7}},"9":{"start":{"line":19,"column":4},"end":{"line":19,"column":46}},"10":{"start":{"line":22,"column":4},"end":{"line":27,"column":5}},"11":{"start":{"line":23,"column":6},"end":{"line":23,"column":38}},"12":{"start":{"line":25,"column":6},"end":{"line":25,"column":56}},"13":{"start":{"line":26,"column":6},"end":{"line":26,"column":19}},"14":{"start":{"line":42,"column":4},"end":{"line":51,"column":5}},"15":{"start":{"line":43,"column":30},"end":{"line":43,"column":51}},"16":{"start":{"line":44,"column":6},"end":{"line":44,"column":57}},"17":{"start":{"line":46,"column":6},"end":{"line":46,"column":60}},"18":{"start":{"line":47,"column":6},"end":{"line":49,"column":9}},"19":{"start":{"line":50,"column":6},"end":{"line":50,"column":18}},"20":{"start":{"line":65,"column":20},"end":{"line":65,"column":24}},"21":{"start":{"line":66,"column":4},"end":{"line":87,"column":5}},"22":{"start":{"line":66,"column":23},"end":{"line":66,"column":24}},"23":{"start":{"line":67,"column":6},"end":{"line":86,"column":7}},"24":{"start":{"line":68,"column":22},"end":{"line":68,"column":50}},"25":{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},"26":{"start":{"line":70,"column":10},"end":{"line":70,"column":30}},"27":{"start":{"line":72,"column":8},"end":{"line":72,"column":33}},"28":{"start":{"line":74,"column":8},"end":{"line":74,"column":78}},"29":{"start":{"line":75,"column":8},"end":{"line":80,"column":11}},"30":{"start":{"line":81,"column":8},"end":{"line":85,"column":9}},"31":{"start":{"line":82,"column":10},"end":{"line":84,"column":12}},"32":{"start":{"line":83,"column":25},"end":{"line":83,"column":84}},"33":{"start":{"line":88,"column":4},"end":{"line":90,"column":7}},"34":{"start":{"line":91,"column":4},"end":{"line":98,"column":6}},"35":{"start":{"line":99,"column":4},"end":{"line":99,"column":24}},"36":{"start":{"line":102,"column":4},"end":{"line":107,"column":5}},"37":{"start":{"line":103,"column":6},"end":{"line":103,"column":38}},"38":{"start":{"line":105,"column":6},"end":{"line":105,"column":64}},"39":{"start":{"line":106,"column":6},"end":{"line":106,"column":19}},"40":{"start":{"line":113,"column":4},"end":{"line":118,"column":5}},"41":{"start":{"line":114,"column":6},"end":{"line":114,"column":49}},"42":{"start":{"line":116,"column":6},"end":{"line":116,"column":66}},"43":{"start":{"line":117,"column":6},"end":{"line":117,"column":18}},"44":{"start":{"line":124,"column":4},"end":{"line":129,"column":5}},"45":{"start":{"line":125,"column":6},"end":{"line":125,"column":57}},"46":{"start":{"line":127,"column":6},"end":{"line":127,"column":67}},"47":{"start":{"line":128,"column":6},"end":{"line":128,"column":18}},"48":{"start":{"line":132,"column":4},"end":{"line":132,"column":35}},"49":{"start":{"line":135,"column":4},"end":{"line":135,"column":38}},"50":{"start":{"line":138,"column":16},"end":{"line":138,"column":54}},"51":{"start":{"line":139,"column":20},"end":{"line":139,"column":39}},"52":{"start":{"line":140,"column":4},"end":{"line":145,"column":6}},"53":{"start":{"line":148,"column":20},"end":{"line":148,"column":57}},"54":{"start":{"line":149,"column":20},"end":{"line":152,"column":5}},"55":{"start":{"line":153,"column":16},"end":{"line":156,"column":5}},"56":{"start":{"line":157,"column":21},"end":{"line":157,"column":71}},"57":{"start":{"line":158,"column":4},"end":{"line":163,"column":6}},"58":{"start":{"line":166,"column":20},"end":{"line":166,"column":57}},"59":{"start":{"line":167,"column":4},"end":{"line":167,"column":24}},"60":{"start":{"line":168,"column":4},"end":{"line":168,"column":70}},"61":{"start":{"line":169,"column":4},"end":{"line":169,"column":110}},"62":{"start":{"line":170,"column":4},"end":{"line":170,"column":110}},"63":{"start":{"line":171,"column":16},"end":{"line":171,"column":54}},"64":{"start":{"line":172,"column":4},"end":{"line":172,"column":46}},"65":{"start":{"line":175,"column":21},"end":{"line":175,"column":72}},"66":{"start":{"line":176,"column":21},"end":{"line":176,"column":40}},"67":{"start":{"line":177,"column":16},"end":{"line":177,"column":56}},"68":{"start":{"line":178,"column":25},"end":{"line":183,"column":5}},"69":{"start":{"line":184,"column":4},"end":{"line":184,"column":48}},"70":{"start":{"line":185,"column":4},"end":{"line":188,"column":7}},"71":{"start":{"line":189,"column":4},"end":{"line":195,"column":7}},"72":{"start":{"line":198,"column":16},"end":{"line":198,"column":56}},"73":{"start":{"line":199,"column":4},"end":{"line":214,"column":5}},"74":{"start":{"line":200,"column":21},"end":{"line":200,"column":40}},"75":{"start":{"line":201,"column":6},"end":{"line":209,"column":9}},"76":{"start":{"line":210,"column":6},"end":{"line":210,"column":20}},"77":{"start":{"line":212,"column":6},"end":{"line":212,"column":74}},"78":{"start":{"line":213,"column":6},"end":{"line":213,"column":18}},"79":{"start":{"line":225,"column":4},"end":{"line":246,"column":5}},"80":{"start":{"line":226,"column":23},"end":{"line":226,"column":59}},"81":{"start":{"line":227,"column":6},"end":{"line":243,"column":7}},"82":{"start":{"line":228,"column":8},"end":{"line":242,"column":9}},"83":{"start":{"line":229,"column":27},"end":{"line":229,"column":75}},"84":{"start":{"line":230,"column":25},"end":{"line":230,"column":49}},"85":{"start":{"line":231,"column":10},"end":{"line":241,"column":11}},"86":{"start":{"line":232,"column":12},"end":{"line":235,"column":15}},"87":{"start":{"line":236,"column":12},"end":{"line":240,"column":15}},"88":{"start":{"line":245,"column":6},"end":{"line":245,"column":66}},"89":{"start":{"line":257,"column":21},"end":{"line":257,"column":23}},"90":{"start":{"line":258,"column":4},"end":{"line":274,"column":5}},"91":{"start":{"line":259,"column":19},"end":{"line":259,"column":63}},"92":{"start":{"line":260,"column":6},"end":{"line":269,"column":7}},"93":{"start":{"line":261,"column":24},"end":{"line":261,"column":43}},"94":{"start":{"line":262,"column":8},"end":{"line":268,"column":9}},"95":{"start":{"line":263,"column":28},"end":{"line":263,"column":45}},"96":{"start":{"line":264,"column":10},"end":{"line":267,"column":13}},"97":{"start":{"line":270,"column":6},"end":{"line":270,"column":64}},"98":{"start":{"line":270,"column":37},"end":{"line":270,"column":62}},"99":{"start":{"line":272,"column":6},"end":{"line":272,"column":75}},"100":{"start":{"line":273,"column":6},"end":{"line":273,"column":16}},"101":{"start":{"line":285,"column":4},"end":{"line":291,"column":5}},"102":{"start":{"line":286,"column":6},"end":{"line":286,"column":31}},"103":{"start":{"line":287,"column":6},"end":{"line":287,"column":18}},"104":{"start":{"line":289,"column":6},"end":{"line":289,"column":64}},"105":{"start":{"line":290,"column":6},"end":{"line":290,"column":19}},"106":{"start":{"line":302,"column":18},"end":{"line":302,"column":28}},"107":{"start":{"line":303,"column":19},"end":{"line":303,"column":21}},"108":{"start":{"line":304,"column":4},"end":{"line":383,"column":5}},"109":{"start":{"line":305,"column":6},"end":{"line":305,"column":31}},"110":{"start":{"line":306,"column":22},"end":{"line":322,"column":7}},"111":{"start":{"line":323,"column":6},"end":{"line":350,"column":8}},"112":{"start":{"line":352,"column":18},"end":{"line":352,"column":77}},"113":{"start":{"line":353,"column":6},"end":{"line":353,"column":69}},"114":{"start":{"line":354,"column":6},"end":{"line":354,"column":31}},"115":{"start":{"line":355,"column":6},"end":{"line":382,"column":8}},"116":{"start":{"line":386,"column":4},"end":{"line":386,"column":33}},"117":{"start":{"line":386,"column":21},"end":{"line":386,"column":33}},"118":{"start":{"line":387,"column":14},"end":{"line":387,"column":18}},"119":{"start":{"line":388,"column":18},"end":{"line":388,"column":47}},"120":{"start":{"line":389,"column":14},"end":{"line":389,"column":55}},"121":{"start":{"line":390,"column":4},"end":{"line":390,"column":75}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":2},"end":{"line":5,"column":3}},"loc":{"start":{"line":5,"column":22},"end":{"line":20,"column":3}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":2},"end":{"line":21,"column":3}},"loc":{"start":{"line":21,"column":15},"end":{"line":28,"column":3}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":41,"column":2},"end":{"line":41,"column":3}},"loc":{"start":{"line":41,"column":29},"end":{"line":52,"column":3}},"line":41},"3":{"name":"(anonymous_3)","decl":{"start":{"line":64,"column":2},"end":{"line":64,"column":3}},"loc":{"start":{"line":64,"column":38},"end":{"line":100,"column":3}},"line":64},"4":{"name":"(anonymous_4)","decl":{"start":{"line":83,"column":12},"end":{"line":83,"column":13}},"loc":{"start":{"line":83,"column":25},"end":{"line":83,"column":84}},"line":83},"5":{"name":"(anonymous_5)","decl":{"start":{"line":101,"column":2},"end":{"line":101,"column":3}},"loc":{"start":{"line":101,"column":22},"end":{"line":108,"column":3}},"line":101},"6":{"name":"(anonymous_6)","decl":{"start":{"line":112,"column":2},"end":{"line":112,"column":3}},"loc":{"start":{"line":112,"column":21},"end":{"line":119,"column":3}},"line":112},"7":{"name":"(anonymous_7)","decl":{"start":{"line":123,"column":2},"end":{"line":123,"column":3}},"loc":{"start":{"line":123,"column":22},"end":{"line":130,"column":3}},"line":123},"8":{"name":"(anonymous_8)","decl":{"start":{"line":131,"column":2},"end":{"line":131,"column":3}},"loc":{"start":{"line":131,"column":21},"end":{"line":133,"column":3}},"line":131},"9":{"name":"(anonymous_9)","decl":{"start":{"line":134,"column":2},"end":{"line":134,"column":3}},"loc":{"start":{"line":134,"column":34},"end":{"line":136,"column":3}},"line":134},"10":{"name":"(anonymous_10)","decl":{"start":{"line":137,"column":2},"end":{"line":137,"column":3}},"loc":{"start":{"line":137,"column":35},"end":{"line":146,"column":3}},"line":137},"11":{"name":"(anonymous_11)","decl":{"start":{"line":147,"column":2},"end":{"line":147,"column":3}},"loc":{"start":{"line":147,"column":49},"end":{"line":164,"column":3}},"line":147},"12":{"name":"(anonymous_12)","decl":{"start":{"line":165,"column":2},"end":{"line":165,"column":3}},"loc":{"start":{"line":165,"column":47},"end":{"line":173,"column":3}},"line":165},"13":{"name":"(anonymous_13)","decl":{"start":{"line":174,"column":2},"end":{"line":174,"column":3}},"loc":{"start":{"line":174,"column":59},"end":{"line":196,"column":3}},"line":174},"14":{"name":"(anonymous_14)","decl":{"start":{"line":197,"column":2},"end":{"line":197,"column":3}},"loc":{"start":{"line":197,"column":43},"end":{"line":215,"column":3}},"line":197},"15":{"name":"(anonymous_15)","decl":{"start":{"line":224,"column":2},"end":{"line":224,"column":3}},"loc":{"start":{"line":224,"column":25},"end":{"line":247,"column":3}},"line":224},"16":{"name":"(anonymous_16)","decl":{"start":{"line":256,"column":2},"end":{"line":256,"column":3}},"loc":{"start":{"line":256,"column":34},"end":{"line":275,"column":3}},"line":256},"17":{"name":"(anonymous_17)","decl":{"start":{"line":270,"column":27},"end":{"line":270,"column":28}},"loc":{"start":{"line":270,"column":37},"end":{"line":270,"column":62}},"line":270},"18":{"name":"(anonymous_18)","decl":{"start":{"line":284,"column":2},"end":{"line":284,"column":3}},"loc":{"start":{"line":284,"column":22},"end":{"line":292,"column":3}},"line":284},"19":{"name":"(anonymous_19)","decl":{"start":{"line":301,"column":2},"end":{"line":301,"column":3}},"loc":{"start":{"line":301,"column":22},"end":{"line":384,"column":3}},"line":301},"20":{"name":"(anonymous_20)","decl":{"start":{"line":385,"column":2},"end":{"line":385,"column":3}},"loc":{"start":{"line":385,"column":21},"end":{"line":391,"column":3}},"line":385}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":22},"end":{"line":14,"column":47}},"type":"binary-expr","locations":[{"start":{"line":14,"column":22},"end":{"line":14,"column":39}},{"start":{"line":14,"column":43},"end":{"line":14,"column":47}}],"line":14},"1":{"loc":{"start":{"line":15,"column":19},"end":{"line":18,"column":6}},"type":"binary-expr","locations":[{"start":{"line":15,"column":19},"end":{"line":15,"column":33}},{"start":{"line":15,"column":37},"end":{"line":18,"column":6}}],"line":15},"2":{"loc":{"start":{"line":48,"column":20},"end":{"line":48,"column":67}},"type":"cond-expr","locations":[{"start":{"line":48,"column":45},"end":{"line":48,"column":55}},{"start":{"line":48,"column":58},"end":{"line":48,"column":67}}],"line":48},"3":{"loc":{"start":{"line":64,"column":17},"end":{"line":64,"column":36}},"type":"default-arg","locations":[{"start":{"line":64,"column":32},"end":{"line":64,"column":36}}],"line":64},"4":{"loc":{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},"type":"if","locations":[{"start":{"line":69,"column":8},"end":{"line":71,"column":9}},{"start":{},"end":{}}],"line":69},"5":{"loc":{"start":{"line":69,"column":12},"end":{"line":69,"column":46}},"type":"binary-expr","locations":[{"start":{"line":69,"column":12},"end":{"line":69,"column":26}},{"start":{"line":69,"column":30},"end":{"line":69,"column":46}}],"line":69},"6":{"loc":{"start":{"line":74,"column":20},"end":{"line":74,"column":77}},"type":"cond-expr","locations":[{"start":{"line":74,"column":45},"end":{"line":74,"column":50}},{"start":{"line":74,"column":53},"end":{"line":74,"column":77}}],"line":74},"7":{"loc":{"start":{"line":81,"column":8},"end":{"line":85,"column":9}},"type":"if","locations":[{"start":{"line":81,"column":8},"end":{"line":85,"column":9}},{"start":{},"end":{}}],"line":81},"8":{"loc":{"start":{"line":89,"column":18},"end":{"line":89,"column":46}},"type":"binary-expr","locations":[{"start":{"line":89,"column":18},"end":{"line":89,"column":33}},{"start":{"line":89,"column":37},"end":{"line":89,"column":46}}],"line":89},"9":{"loc":{"start":{"line":140,"column":11},"end":{"line":145,"column":5}},"type":"binary-expr","locations":[{"start":{"line":140,"column":11},"end":{"line":140,"column":18}},{"start":{"line":140,"column":22},"end":{"line":145,"column":5}}],"line":140},"10":{"loc":{"start":{"line":170,"column":68},"end":{"line":170,"column":87}},"type":"cond-expr","locations":[{"start":{"line":170,"column":82},"end":{"line":170,"column":83}},{"start":{"line":170,"column":86},"end":{"line":170,"column":87}}],"line":170},"11":{"loc":{"start":{"line":176,"column":21},"end":{"line":176,"column":40}},"type":"binary-expr","locations":[{"start":{"line":176,"column":21},"end":{"line":176,"column":24}},{"start":{"line":176,"column":28},"end":{"line":176,"column":40}}],"line":176},"12":{"loc":{"start":{"line":203,"column":20},"end":{"line":203,"column":43}},"type":"cond-expr","locations":[{"start":{"line":203,"column":29},"end":{"line":203,"column":34}},{"start":{"line":203,"column":37},"end":{"line":203,"column":43}}],"line":203},"13":{"loc":{"start":{"line":206,"column":15},"end":{"line":206,"column":29}},"type":"cond-expr","locations":[{"start":{"line":206,"column":24},"end":{"line":206,"column":25}},{"start":{"line":206,"column":28},"end":{"line":206,"column":29}}],"line":206},"14":{"loc":{"start":{"line":228,"column":8},"end":{"line":242,"column":9}},"type":"if","locations":[{"start":{"line":228,"column":8},"end":{"line":242,"column":9}},{"start":{},"end":{}}],"line":228},"15":{"loc":{"start":{"line":231,"column":10},"end":{"line":241,"column":11}},"type":"if","locations":[{"start":{"line":231,"column":10},"end":{"line":241,"column":11}},{"start":{},"end":{}}],"line":231},"16":{"loc":{"start":{"line":231,"column":14},"end":{"line":231,"column":43}},"type":"binary-expr","locations":[{"start":{"line":231,"column":14},"end":{"line":231,"column":21}},{"start":{"line":231,"column":25},"end":{"line":231,"column":43}}],"line":231},"17":{"loc":{"start":{"line":262,"column":8},"end":{"line":268,"column":9}},"type":"if","locations":[{"start":{"line":262,"column":8},"end":{"line":268,"column":9}},{"start":{},"end":{}}],"line":262},"18":{"loc":{"start":{"line":352,"column":18},"end":{"line":352,"column":77}},"type":"cond-expr","locations":[{"start":{"line":352,"column":43},"end":{"line":352,"column":48}},{"start":{"line":352,"column":51},"end":{"line":352,"column":77}}],"line":352},"19":{"loc":{"start":{"line":386,"column":4},"end":{"line":386,"column":33}},"type":"if","locations":[{"start":{"line":386,"column":4},"end":{"line":386,"column":33}},{"start":{},"end":{}}],"line":386}},"s":{"0":12,"1":12,"2":12,"3":12,"4":12,"5":12,"6":12,"7":12,"8":12,"9":12,"10":2,"11":2,"12":1,"13":1,"14":4,"15":4,"16":4,"17":1,"18":1,"19":1,"20":6,"21":6,"22":6,"23":6,"24":6,"25":6,"26":4,"27":2,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":2,"37":2,"38":1,"39":1,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":1,"49":3,"50":2,"51":2,"52":2,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":1,"70":1,"71":1,"72":2,"73":2,"74":2,"75":2,"76":2,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0},"f":{"0":12,"1":2,"2":4,"3":6,"4":0,"5":2,"6":0,"7":0,"8":1,"9":3,"10":2,"11":1,"12":1,"13":1,"14":2,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0},"b":{"0":[12,0],"1":[12,0],"2":[1,0],"3":[5],"4":[4,2],"5":[6,4],"6":[0,0],"7":[0,0],"8":[0,0],"9":[2,2],"10":[1,0],"11":[1,1],"12":[1,1],"13":[1,1],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/redis/services.ts"],"sourcesContent":["import { BaseService } from \"@/lib/cortex/core/services\";\nimport type { DataSyncService } from \"@/lib/cortex/core/sync-service\";\nimport type { BaseDocument } from \"@/lib/cortex/elasticsearch/types\";\nimport { MetricsService } from \"@/lib/cortex/monitoring/metrics\";\nimport type {\n  CachedSearchResult,\n  SearchResult,\n} from \"@/lib/cortex/types/search\";\nimport type { RedisClient } from \"./client\";\nimport type {\n  CacheStrategy,\n  QueryPattern,\n  RedisHealth,\n  RedisServiceConfig,\n} from \"./types\";\n\n/**\n * ⚡ Redis Cache Service: Your Super-Fast Memory Helper!\n *\n * This service helps store and retrieve data super quickly using Redis.\n * Like having a friendly squirrel 🐿️ that stores and fetches nuts at lightning speed!\n *\n * Features:\n * - 🚀 Lightning-fast caching\n * - 🧠 Smart cache strategies\n * - 🔄 Automatic retry on errors\n * - 📊 Performance tracking\n * - 🔥 Cache warming\n *\n * @class RedisCacheService\n * @extends {BaseService}\n */\nexport class RedisCacheService extends BaseService {\n  protected readonly client: RedisClient;\n  protected readonly defaultTTL: number;\n  private readonly metrics: MetricsService;\n  private readonly queryPatternKey = \"query:patterns\";\n  private readonly maxTTL = 86400; // 24 hours\n  private readonly minTTL = 300; // 5 minutes\n  private readonly searchService?: DataSyncService;\n  private readonly retryAttempts = 3;\n  private readonly retryDelay = 100; // ms\n\n  constructor(\n    config: RedisServiceConfig & { searchService?: DataSyncService }\n  ) {\n    super(config);\n    this.client = config.client;\n    this.defaultTTL = config.defaultTTL || 3600; // 1 hour default\n    this.metrics = config.metrics || new MetricsService({\n      logger: config.logger,\n      environment: config.environment\n    });\n    this.searchService = config.searchService;\n  }\n\n  async ping(): Promise<boolean> {\n    try {\n      return await this.client.ping();\n    } catch (error) {\n      this.logger.error('Redis ping failed', { error });\n      return false;\n    }\n  }\n\n  /**\n   * 🎯 Cache Your Search Results\n   *\n   * Stores search results for quick access later.\n   * Like taking a snapshot 📸 of what you found so you can see it again quickly!\n   *\n   * @template T - Type of documents we're storing\n   * @param {string} index - Where to look for data\n   * @param {string} queryHash - Special code for this search\n   * @param {SearchResult<T>} results - What we found\n   * @param {number} [ttl] - How long to keep it\n   */\n  async set(key: string, value: unknown, ttl: number): Promise<void> {\n    try {\n      const serializedValue = JSON.stringify(value);\n      await this.client.setEx(key, ttl, serializedValue);\n    } catch (error) {\n      this.logger.error('Redis set failed', { error, key });\n      this.metrics.incrementMetric('redis_set_failed', {\n        error_type: error instanceof Error ? error.name : 'unknown'\n      });\n      throw error;\n    }\n  }\n\n  /**\n   * 🔍 Get Cached Search Results\n   *\n   * Tries to find previously stored search results.\n   * Like checking your photo album 📱 before taking new pictures!\n   *\n   * @template T - Type of documents we're looking for\n   * @param {string} index - Where to look\n   * @param {string} queryHash - Special code for this search\n   * @returns {Promise<CachedSearchResult<T> | null>} The stored results or null\n   */\n  async get<T>(key: string, defaultValue: T | null = null): Promise<T | null> {\n    let lastError: Error | null = null;\n\n    for (let attempt = 0; attempt < this.retryAttempts; attempt++) {\n      try {\n        const value = await this.client.getEx(key);\n        if (value === null || value === undefined) {\n          return defaultValue;\n        }\n        return JSON.parse(value);\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n        this.logger.warn(\"Redis get attempt failed\", {\n          key,\n          attempt: attempt + 1,\n          maxAttempts: this.retryAttempts,\n          error: lastError.message,\n        });\n\n        if (attempt < this.retryAttempts - 1) {\n          await new Promise((resolve) =>\n            setTimeout(resolve, this.retryDelay * Math.pow(2, attempt))\n          );\n        }\n      }\n    }\n\n    this.metrics.incrementMetric(\"redis_get_failed\", {\n      error_type: lastError?.name || \"unknown\",\n    });\n\n    // Return default value instead of throwing\n    this.logger.error(\n      \"Redis get failed after retries, returning default value\",\n      {\n        key,\n        error: lastError,\n        defaultValue,\n      }\n    );\n    return defaultValue;\n  }\n\n  async healthCheck(): Promise<boolean> {\n    try {\n      return await this.client.ping();\n    } catch (error) {\n      this.logger.error('Redis health check failed', { error });\n      return false;\n    }\n  }\n\n  /**\n   * Delete multiple keys\n   */\n  async del(...keys: string[]): Promise<void> {\n    try {\n      await this.client.getClient().del(...keys);\n    } catch (error) {\n      this.logger.error(\"Failed to delete keys\", { keys, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Find keys matching a pattern\n   */\n  async keys(pattern: string): Promise<string[]> {\n    try {\n      return await this.client.getClient().keys(pattern);\n    } catch (error) {\n      this.logger.error(\"Failed to find keys\", { pattern, error });\n      throw error;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    await this.client.disconnect();\n  }\n\n  private generateSearchKey(index: string, query: string): string {\n    return `search:${index}:${query}`;\n  }\n\n  private async getQueryPattern(queryHash: string): Promise<QueryPattern> {\n    const key = `${this.queryPatternKey}:${queryHash}`;\n    const pattern = await this.get<QueryPattern>(key);\n\n    return (\n      pattern || {\n        frequency: 0,\n        lastAccessed: new Date().toISOString(),\n        avgLatency: 0,\n        hitRate: 0,\n      }\n    );\n  }\n\n  async determineOptimalCacheStrategy(\n    queryHash: string\n  ): Promise<CacheStrategy> {\n    const pattern = await this.getQueryPattern(queryHash);\n\n    // Higher frequency = longer TTL\n    const baseTTL = Math.min(\n      this.maxTTL,\n      this.defaultTTL * (1 + pattern.frequency / 100)\n    );\n\n    // Adjust TTL based on hit rate\n    const ttl = Math.max(\n      this.minTTL,\n      Math.round(baseTTL * (0.5 + pattern.hitRate))\n    );\n\n    // Determine priority based on frequency and latency\n    const priority = pattern.frequency * (1 + pattern.avgLatency / 1000);\n\n    return {\n      ttl,\n      priority: Math.round(priority),\n      revalidate: pattern.frequency > 10, // Revalidate frequently accessed queries\n    };\n  }\n\n  private async updateQueryPattern(\n    queryHash: string,\n    metrics: {\n      latency: number;\n      hit: boolean;\n    }\n  ): Promise<void> {\n    const pattern = await this.getQueryPattern(queryHash);\n\n    // Update pattern\n    pattern.frequency++;\n    pattern.lastAccessed = new Date().toISOString();\n    pattern.avgLatency =\n      (pattern.avgLatency * (pattern.frequency - 1) + metrics.latency) /\n      pattern.frequency;\n    pattern.hitRate =\n      (pattern.hitRate * (pattern.frequency - 1) + (metrics.hit ? 1 : 0)) /\n      pattern.frequency;\n\n    const key = `${this.queryPatternKey}:${queryHash}`;\n    await this.set(key, pattern, this.maxTTL);\n  }\n\n  async cacheSearchResults<T extends BaseDocument>(\n    index: string,\n    queryHash: string,\n    results: SearchResult<T>,\n    ttl?: number\n  ): Promise<void> {\n    const strategy = await this.determineOptimalCacheStrategy(queryHash);\n    const finalTTL = ttl || strategy.ttl;\n\n    const key = this.generateSearchKey(index, queryHash);\n    const cachedResult: CachedSearchResult<T> = {\n      ...results,\n      cachedAt: new Date().toISOString(),\n      cached: true,\n      ttl: finalTTL,\n    };\n\n    await this.set(key, cachedResult, finalTTL);\n    await this.updateQueryPattern(queryHash, {\n      latency: results.took,\n      hit: true,\n    });\n    this.metrics.updateResourceUsage({\n      memory: { used: 1, total: 100 }, // Fixed type error by removing invalid 'component' property\n      cpu: {\n        usage: 0,\n      },\n    });\n  }\n\n  async getSearchResults<T extends BaseDocument>(\n    index: string,\n    queryHash: string\n  ): Promise<CachedSearchResult<T> | null> {\n    const key = this.generateSearchKey(index, queryHash);\n\n    try {\n      const cached = await this.get<CachedSearchResult<T>>(key);\n      // Track cache hits/misses\n      this.metrics.updateABTestMetrics({\n        test_id: \"cache_hit_test\",\n        variant_id: cached ? \"hit\" : \"miss\",\n        query_hash: queryHash,\n        metrics: {\n          hit: cached ? 1 : 0,\n          index: Number(index),\n        },\n      });\n      return cached;\n    } catch (error) {\n      this.logger.error(\"Cache read failed\", { error, index, queryHash });\n      return null;\n    }\n  }\n\n  /**\n   * 🌡️ Warm Up The Cache\n   *\n   * Gets popular searches ready before they're needed.\n   * Like preheating the oven 🔥 before baking!\n   *\n   * @param {string} index - Which data to prepare\n   */\n  async warmCache(index: string): Promise<void> {\n    try {\n      // Get popular queries\n      const patterns = await this.getPopularQueryPatterns();\n\n      for (const pattern of patterns) {\n        if (pattern.frequency > 10) {\n          // Only warm frequently accessed queries\n          const cacheKey = this.generateSearchKey(index, pattern.queryHash);\n          const cached = await this.get(cacheKey);\n\n          if (!cached && this.searchService) {\n            // Revalidate through search service\n            await this.searchService.search({\n              index,\n              query: JSON.parse(pattern.queryHash),\n            });\n\n            this.logger.info(\"Warmed cache for query\", {\n              index,\n              queryHash: pattern.queryHash,\n              frequency: pattern.frequency,\n            });\n          }\n        }\n      }\n    } catch (error) {\n      this.logger.error(\"Cache warming failed\", { error, index });\n    }\n  }\n\n  /**\n   * 📊 Get Popular Search Patterns\n   *\n   * Finds out which searches are used most often.\n   * Like keeping track of your favorite recipes 📝!\n   *\n   * @returns {Promise<Array<QueryPattern & { queryHash: string }>>} List of popular searches\n   */\n  private async getPopularQueryPatterns(): Promise<\n    Array<QueryPattern & { queryHash: string }>\n  > {\n    const patterns: Array<QueryPattern & { queryHash: string }> = [];\n\n    try {\n      const keys = await this.keys(`${this.queryPatternKey}:*`);\n\n      for (const key of keys) {\n        const pattern = await this.get<QueryPattern>(key);\n        if (pattern) {\n          const queryHash = key.split(\":\")[1];\n          patterns.push({\n            ...pattern,\n            queryHash,\n          });\n        }\n      }\n\n      return patterns.sort((a, b) => b.frequency - a.frequency);\n    } catch (error) {\n      this.logger.error(\"Failed to get popular query patterns\", { error });\n      return [];\n    }\n  }\n\n  /**\n   * 🏥 Check Service Health\n   *\n   * Makes sure everything is working properly.\n   * Like giving your pet a quick checkup! 🐾\n   *\n   * @returns {Promise<boolean>} true if healthy, false if there's a problem\n   */\n  async checkHealth(): Promise<boolean> {\n    try {\n      await this.client.ping();\n      return true;\n    } catch (error) {\n      this.logger.error(\"Redis health check failed\", { error });\n      return false;\n    }\n  }\n\n  /**\n   * 🔬 Test Service Performance\n   *\n   * Runs a complete service test and measures speed.\n   * Like taking your car for a test drive! 🚗\n   *\n   * @returns {Promise<{operational: boolean, latency: number, errors: string[]}>} Test results\n   */\n  public async testService(): Promise<RedisHealth> {\n    const start = Date.now();\n    const errors: string[] = [];\n\n    try {\n      // Basic connectivity check first\n      await this.client.ping();\n\n      // Use simpler metrics that we know we can get\n      const metrics = {\n        memory: {\n          used: this.formatBytes(process.memoryUsage().heapUsed),\n          peak: this.formatBytes(process.memoryUsage().heapTotal),\n          fragmentationRatio: 1.0,\n        },\n        hits: {\n          keyspaceHits: 0,\n          keyspaceMisses: 0,\n          hitRate: 0,\n        },\n        performance: {\n          connectedClients: 1,\n          blockedClients: 0,\n          opsPerSecond: 0,\n        },\n      };\n\n      return {\n        operational: true,\n        latency: Date.now() - start,\n        errors,\n        metrics: {\n          cluster: {\n            status: \"green\",\n            name: \"redis\",\n            nodes: 1,\n            dataNodes: 1,\n            activePrimaryShards: 0,\n            activeShards: 0,\n            relocatingShards: 0,\n            initializingShards: 0,\n            unassignedShards: 0,\n            pendingTasks: 0,\n          },\n          performance: {\n            queryLatency: 0,\n            indexingLatency: 0,\n            searchRate: metrics.performance.opsPerSecond,\n            indexingRate: 0,\n            cpuUsage: 0,\n            memoryUsage: metrics.memory.used,\n            diskUsage: metrics.memory.peak,\n          },\n        },\n      };\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(\"Unknown error\");\n      this.logger.error(\"Redis test failed\", { error: err.message });\n      errors.push(err.message);\n\n      return {\n        operational: false,\n        latency: Date.now() - start,\n        errors,\n        metrics: {\n          cluster: {\n            status: \"red\",\n            name: \"redis\",\n            nodes: 0,\n            dataNodes: 0,\n            activePrimaryShards: 0,\n            activeShards: 0,\n            relocatingShards: 0,\n            initializingShards: 0,\n            unassignedShards: 0,\n            pendingTasks: 0,\n          },\n          performance: {\n            queryLatency: 0,\n            indexingLatency: 0,\n            searchRate: 0,\n            indexingRate: 0,\n            cpuUsage: 0,\n            memoryUsage: \"0B\",\n            diskUsage: \"0B\",\n          },\n        },\n      };\n    }\n  }\n\n  private formatBytes(bytes: number): string {\n    if (bytes === 0) return \"0b\";\n    const k = 1024;\n    const sizes = [\"b\", \"kb\", \"mb\", \"gb\", \"tb\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))}${sizes[i]}`;\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1436270d157291cdcfd64b8f02f05fd0803596d6"}}