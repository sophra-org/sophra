{"/workspaces/sophra/src/app/api/nous/learn/feedback/patterns/route.ts":{"path":"/workspaces/sophra/src/app/api/nous/learn/feedback/patterns/route.ts","statementMap":{"0":{"start":{"line":5,"column":23},"end":{"line":5,"column":31}},"1":{"start":{"line":6,"column":26},"end":{"line":9,"column":2}},"2":{"start":{"line":10,"column":23},"end":{"line":10,"column":38}},"3":{"start":{"line":12,"column":20},"end":{"line":12,"column":30}},"4":{"start":{"line":13,"column":2},"end":{"line":97,"column":3}},"5":{"start":{"line":14,"column":29},"end":{"line":14,"column":45}},"6":{"start":{"line":15,"column":29},"end":{"line":17,"column":5}},"7":{"start":{"line":18,"column":4},"end":{"line":31,"column":5}},"8":{"start":{"line":19,"column":6},"end":{"line":30,"column":8}},"9":{"start":{"line":32,"column":19},"end":{"line":32,"column":40}},"10":{"start":{"line":33,"column":25},"end":{"line":38,"column":5}},"11":{"start":{"line":39,"column":22},"end":{"line":39,"column":75}},"12":{"start":{"line":40,"column":29},"end":{"line":50,"column":6}},"13":{"start":{"line":51,"column":21},"end":{"line":68,"column":6}},"14":{"start":{"line":52,"column":23},"end":{"line":52,"column":39}},"15":{"start":{"line":53,"column":25},"end":{"line":53,"column":54}},"16":{"start":{"line":54,"column":28},"end":{"line":54,"column":60}},"17":{"start":{"line":55,"column":6},"end":{"line":67,"column":8}},"18":{"start":{"line":61,"column":53},"end":{"line":61,"column":62}},"19":{"start":{"line":63,"column":39},"end":{"line":63,"column":60}},"20":{"start":{"line":64,"column":47},"end":{"line":64,"column":72}},"21":{"start":{"line":69,"column":20},"end":{"line":69,"column":42}},"22":{"start":{"line":70,"column":4},"end":{"line":79,"column":7}},"23":{"start":{"line":81,"column":20},"end":{"line":81,"column":42}},"24":{"start":{"line":82,"column":4},"end":{"line":85,"column":7}},"25":{"start":{"line":86,"column":4},"end":{"line":96,"column":6}},"26":{"start":{"line":100,"column":2},"end":{"line":100,"column":51}},"27":{"start":{"line":100,"column":42},"end":{"line":100,"column":51}},"28":{"start":{"line":101,"column":21},"end":{"line":101,"column":36}},"29":{"start":{"line":102,"column":25},"end":{"line":102,"column":54}},"30":{"start":{"line":103,"column":27},"end":{"line":103,"column":62}},"31":{"start":{"line":104,"column":2},"end":{"line":104,"column":67}},"32":{"start":{"line":107,"column":2},"end":{"line":107,"column":51}},"33":{"start":{"line":107,"column":40},"end":{"line":107,"column":51}},"34":{"start":{"line":108,"column":18},"end":{"line":108,"column":47}},"35":{"start":{"line":108,"column":38},"end":{"line":108,"column":46}},"36":{"start":{"line":109,"column":15},"end":{"line":109,"column":66}},"37":{"start":{"line":109,"column":40},"end":{"line":109,"column":45}},"38":{"start":{"line":110,"column":19},"end":{"line":110,"column":90}},"39":{"start":{"line":110,"column":44},"end":{"line":110,"column":69}},"40":{"start":{"line":111,"column":28},"end":{"line":111,"column":47}},"41":{"start":{"line":112,"column":2},"end":{"line":112,"column":44}},"42":{"start":{"line":115,"column":2},"end":{"line":115,"column":51}},"43":{"start":{"line":115,"column":42},"end":{"line":115,"column":51}},"44":{"start":{"line":116,"column":2},"end":{"line":118,"column":10}},"45":{"start":{"line":117,"column":32},"end":{"line":117,"column":46}}},"fnMap":{"0":{"name":"GET","decl":{"start":{"line":11,"column":22},"end":{"line":11,"column":25}},"loc":{"start":{"line":11,"column":31},"end":{"line":98,"column":1}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":51,"column":42},"end":{"line":51,"column":43}},"loc":{"start":{"line":51,"column":55},"end":{"line":68,"column":5}},"line":51},"2":{"name":"(anonymous_2)","decl":{"start":{"line":61,"column":46},"end":{"line":61,"column":47}},"loc":{"start":{"line":61,"column":53},"end":{"line":61,"column":62}},"line":61},"3":{"name":"(anonymous_3)","decl":{"start":{"line":63,"column":32},"end":{"line":63,"column":33}},"loc":{"start":{"line":63,"column":39},"end":{"line":63,"column":60}},"line":63},"4":{"name":"(anonymous_4)","decl":{"start":{"line":64,"column":40},"end":{"line":64,"column":41}},"loc":{"start":{"line":64,"column":47},"end":{"line":64,"column":72}},"line":64},"5":{"name":"calculateConfidence","decl":{"start":{"line":99,"column":16},"end":{"line":99,"column":35}},"loc":{"start":{"line":99,"column":46},"end":{"line":105,"column":1}},"line":99},"6":{"name":"calculateConsistencyScore","decl":{"start":{"line":106,"column":16},"end":{"line":106,"column":41}},"loc":{"start":{"line":106,"column":52},"end":{"line":113,"column":1}},"line":106},"7":{"name":"(anonymous_7)","decl":{"start":{"line":108,"column":31},"end":{"line":108,"column":32}},"loc":{"start":{"line":108,"column":38},"end":{"line":108,"column":46}},"line":108},"8":{"name":"(anonymous_8)","decl":{"start":{"line":109,"column":30},"end":{"line":109,"column":31}},"loc":{"start":{"line":109,"column":40},"end":{"line":109,"column":45}},"line":109},"9":{"name":"(anonymous_9)","decl":{"start":{"line":110,"column":34},"end":{"line":110,"column":35}},"loc":{"start":{"line":110,"column":44},"end":{"line":110,"column":69}},"line":110},"10":{"name":"calculateAverageRating","decl":{"start":{"line":114,"column":16},"end":{"line":114,"column":38}},"loc":{"start":{"line":114,"column":49},"end":{"line":119,"column":1}},"line":114},"11":{"name":"(anonymous_11)","decl":{"start":{"line":117,"column":20},"end":{"line":117,"column":21}},"loc":{"start":{"line":117,"column":32},"end":{"line":117,"column":46}},"line":117}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":4},"end":{"line":31,"column":5}},"type":"if","locations":[{"start":{"line":18,"column":4},"end":{"line":31,"column":5}},{"start":{},"end":{}}],"line":18},"1":{"loc":{"start":{"line":83,"column":13},"end":{"line":83,"column":70}},"type":"cond-expr","locations":[{"start":{"line":83,"column":38},"end":{"line":83,"column":43}},{"start":{"line":83,"column":46},"end":{"line":83,"column":70}}],"line":83},"2":{"loc":{"start":{"line":100,"column":2},"end":{"line":100,"column":51}},"type":"if","locations":[{"start":{"line":100,"column":2},"end":{"line":100,"column":51}},{"start":{},"end":{}}],"line":100},"3":{"loc":{"start":{"line":100,"column":6},"end":{"line":100,"column":40}},"type":"binary-expr","locations":[{"start":{"line":100,"column":6},"end":{"line":100,"column":15}},{"start":{"line":100,"column":19},"end":{"line":100,"column":40}}],"line":100},"4":{"loc":{"start":{"line":107,"column":2},"end":{"line":107,"column":51}},"type":"if","locations":[{"start":{"line":107,"column":2},"end":{"line":107,"column":51}},{"start":{},"end":{}}],"line":107},"5":{"loc":{"start":{"line":107,"column":6},"end":{"line":107,"column":38}},"type":"binary-expr","locations":[{"start":{"line":107,"column":6},"end":{"line":107,"column":15}},{"start":{"line":107,"column":19},"end":{"line":107,"column":38}}],"line":107},"6":{"loc":{"start":{"line":115,"column":2},"end":{"line":115,"column":51}},"type":"if","locations":[{"start":{"line":115,"column":2},"end":{"line":115,"column":51}},{"start":{},"end":{}}],"line":115},"7":{"loc":{"start":{"line":115,"column":6},"end":{"line":115,"column":40}},"type":"binary-expr","locations":[{"start":{"line":115,"column":6},"end":{"line":115,"column":15}},{"start":{"line":115,"column":19},"end":{"line":115,"column":40}}],"line":115}},"s":{"0":1,"1":1,"2":1,"3":8,"4":8,"5":8,"6":1,"7":1,"8":0,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":7,"24":7,"25":7,"26":1,"27":0,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":1,"43":0,"44":1,"45":1},"f":{"0":8,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":0,"8":0,"9":0,"10":1,"11":1},"b":{"0":[0,1],"1":[7,0],"2":[0,1],"3":[1,1],"4":[1,0],"5":[1,1],"6":[0,1],"7":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/api/nous/learn/feedback/patterns/route.ts"],"sourcesContent":["import { prisma } from \"@lib/shared/database/client\";\nimport logger from \"@lib/shared/logger\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { z } from \"zod\";\n\n// Declare Node.js runtime\nexport const runtime = \"nodejs\";\n\nconst queryParamsSchema = z.object({\n  timeframe: z.enum([\"1h\", \"24h\", \"7d\", \"30d\"]).default(\"24h\"),\n  limit: z.coerce.number().min(1).max(1000).default(100),\n});\n\nexport const dynamic = \"force-dynamic\";\n\nexport async function GET(req: NextRequest): Promise<NextResponse> {\n  const startTime = Date.now();\n  try {\n    const { searchParams } = new URL(req.url);\n    const validationResult = queryParamsSchema.safeParse(\n      Object.fromEntries(searchParams)\n    );\n\n    if (!validationResult.success) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: \"Invalid parameters\",\n          details: validationResult.error.format(),\n          meta: { \n            took: Date.now() - startTime,\n            generated_at: new Date().toISOString()\n          },\n        },\n        { status: 400 }\n      );\n    }\n\n    const params = validationResult.data;\n\n    const timeframeMap = {\n      \"1h\": 60 * 60 * 1000,\n      \"24h\": 24 * 60 * 60 * 1000,\n      \"7d\": 7 * 24 * 60 * 60 * 1000,\n      \"30d\": 30 * 24 * 60 * 60 * 1000,\n    };\n\n    const startDate = new Date(Date.now() - timeframeMap[params.timeframe]);\n\n    const feedbackPatterns = await prisma.feedbackRequest.findMany({\n      where: {\n        timestamp: {\n          gte: startDate,\n        },\n      },\n      orderBy: {\n        timestamp: \"desc\",\n      },\n      take: params.limit,\n    });\n\n    const patterns = feedbackPatterns.map((pattern) => {\n      const feedback = pattern.feedback as any[];\n      const confidence = calculateConfidence(feedback);\n      const averageRating = calculateAverageRating(feedback);\n      \n      return {\n        query_id: pattern.id,\n        pattern_type: \"FEEDBACK\",\n        confidence,\n        metadata: {\n          averageRating,\n          uniqueQueries: new Set(feedback.map((f) => f.queryId)).size,\n          totalFeedback: feedback.length,\n          actions: feedback.map((f) => f.metadata.userAction),\n          engagementTypes: feedback\n            .map((f) => f.metadata.engagementType)\n            .filter(Boolean),\n        },\n        timestamp: pattern.timestamp.toISOString(),\n      };\n    });\n\n    const latency = Date.now() - startTime;\n    return NextResponse.json({\n      success: true,\n      patterns,\n      meta: {\n        generated_at: new Date().toISOString(),\n        timeframe: params.timeframe,\n        total: patterns.length,\n        took: latency,\n      },\n    });\n  } catch (error) {\n    const latency = Date.now() - startTime;\n    logger.error(\"Failed to process feedback patterns request\", {\n      error: error instanceof Error ? error : new Error(String(error)),\n      took: latency,\n    });\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to fetch feedback patterns\",\n        meta: { \n          took: latency,\n          generated_at: new Date().toISOString()\n        },\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport function calculateConfidence(feedback: any[]): number {\n  if (!feedback || feedback.length === 0) return 0;\n\n  const sampleSize = feedback.length;\n  const baseConfidence = Math.min(sampleSize / 100, 1); // Scale with sample size up to 100\n  const consistencyScore = calculateConsistencyScore(feedback);\n  return Math.round(baseConfidence * consistencyScore * 100) / 100;\n}\n\nexport function calculateConsistencyScore(feedback: any[]): number {\n  if (!feedback || feedback.length < 2) return 0.5;\n\n  const ratings = feedback.map((f) => f.rating);\n  const mean = ratings.reduce((a, b) => a + b, 0) / ratings.length;\n  const variance =\n    ratings.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / ratings.length;\n  const standardDeviation = Math.sqrt(variance);\n\n  // Lower standard deviation means more consistent ratings\n  return Math.max(0, 1 - standardDeviation);\n}\n\nexport function calculateAverageRating(feedback: any[]): number {\n  if (!feedback || feedback.length === 0) return 0;\n  return (\n    Math.round(\n      (feedback.reduce((acc, f) => acc + f.rating, 0) / feedback.length) * 100\n    ) / 100\n  );\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7460ab143b56e87284178e6cc748357379f63b34"}}