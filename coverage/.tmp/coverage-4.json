{"/workspaces/sophra/src/lib/nous/types/index.ts":{"path":"/workspaces/sophra/src/lib/nous/types/index.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/types/index.ts"],"sourcesContent":["export * from './core';\nexport * from './events';\nexport * from './models';\nexport * from './signals';\nexport * from './adaptation';\nexport * from './learning';\n\n// Re-export common types\nexport type { BaseEvent, ModelEvent, SearchEvent } from './events';\nexport type { ModelConfig, ModelVersion, TrainingMetrics } from './models';\nexport type { BaseSignal, ProcessedSignal, SignalPattern } from './signals';\n"],"mappings":"AAAA,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;AACd,cAAc;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"030449ebe6dc74a6839ae7351530d7356b26ca45"},"/workspaces/sophra/src/lib/nous/types/core.ts":{"path":"/workspaces/sophra/src/lib/nous/types/core.ts","statementMap":{"0":{"start":{"line":2,"column":39},"end":{"line":12,"column":19}},"1":{"start":{"line":3,"column":2},"end":{"line":3,"column":34}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":30}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":46}},"4":{"start":{"line":6,"column":2},"end":{"line":6,"column":34}},"5":{"start":{"line":7,"column":2},"end":{"line":7,"column":32}},"6":{"start":{"line":8,"column":2},"end":{"line":8,"column":38}},"7":{"start":{"line":9,"column":2},"end":{"line":9,"column":42}},"8":{"start":{"line":10,"column":2},"end":{"line":10,"column":38}},"9":{"start":{"line":11,"column":2},"end":{"line":11,"column":20}},"10":{"start":{"line":13,"column":38},"end":{"line":19,"column":18}},"11":{"start":{"line":14,"column":2},"end":{"line":14,"column":29}},"12":{"start":{"line":15,"column":2},"end":{"line":15,"column":35}},"13":{"start":{"line":16,"column":2},"end":{"line":16,"column":31}},"14":{"start":{"line":17,"column":2},"end":{"line":17,"column":37}},"15":{"start":{"line":18,"column":2},"end":{"line":18,"column":19}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":40},"end":{"line":2,"column":41}},"loc":{"start":{"line":2,"column":56},"end":{"line":12,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":39},"end":{"line":13,"column":40}},"loc":{"start":{"line":13,"column":54},"end":{"line":19,"column":1}},"line":13}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":3},"end":{"line":12,"column":18}},"type":"binary-expr","locations":[{"start":{"line":12,"column":3},"end":{"line":12,"column":12}},{"start":{"line":12,"column":16},"end":{"line":12,"column":18}}],"line":12},"1":{"loc":{"start":{"line":19,"column":3},"end":{"line":19,"column":17}},"type":"binary-expr","locations":[{"start":{"line":19,"column":3},"end":{"line":19,"column":11}},{"start":{"line":19,"column":15},"end":{"line":19,"column":17}}],"line":19}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"f":{"0":1,"1":1},"b":{"0":[1,1],"1":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/types/core.ts"],"sourcesContent":["import { SignalType } from \"@prisma/client\";\n\nexport { SignalType } from \"./signals\";\n\nexport enum EventType {\n  SYSTEM = \"system\",\n  USER = \"user\",\n  STATE_CHANGE = \"state_change\",\n  SEARCH = \"search\",\n  MODEL = \"model\",\n  FEEDBACK = \"feedback\",\n  ADAPTATION = \"adaptation\",\n  LEARNING = \"learning\",\n}\n\n/**\n * Severity levels for notifications and logging\n */\nexport enum Severity {\n  INFO = \"info\",\n  WARNING = \"warning\",\n  ERROR = \"error\",\n  CRITICAL = \"critical\",\n}\n\n/**\n * Core metric types\n */\nexport interface Metric {\n  name: string;\n  value: number;\n  timestamp: Date;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Core event structure\n */\nexport interface Event {\n  type: EventType;\n  timestamp: Date;\n  data: Record<string, unknown>;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * Core signal structure\n */\nexport interface Signal {\n  id: string;\n  source: string;\n  type: SignalType;\n  strength: number;\n  timestamp: Date;\n  data: Record<string, unknown>;\n  metadata?: Record<string, unknown>;\n}\n\n/**\n * System state transitions\n */\nexport interface StateTransition {\n  key: string;\n  oldValue: unknown;\n  newValue: unknown;\n  timestamp: Date;\n  metadata?: Record<string, unknown>;\n}\n"],"mappings":"AAEA,SAAS,kBAAkB;AAEpB,WAAK,YAAL,kBAAKA,eAAL;AACL,EAAAA,WAAA,YAAS;AACT,EAAAA,WAAA,UAAO;AACP,EAAAA,WAAA,kBAAe;AACf,EAAAA,WAAA,YAAS;AACT,EAAAA,WAAA,WAAQ;AACR,EAAAA,WAAA,cAAW;AACX,EAAAA,WAAA,gBAAa;AACb,EAAAA,WAAA,cAAW;AARD,SAAAA;AAAA,GAAA;AAcL,WAAK,WAAL,kBAAKC,cAAL;AACL,EAAAA,UAAA,UAAO;AACP,EAAAA,UAAA,aAAU;AACV,EAAAA,UAAA,WAAQ;AACR,EAAAA,UAAA,cAAW;AAJD,SAAAA;AAAA,GAAA;","names":["EventType","Severity"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4d600d8f94350c30d95214a1448800da9f4ce1f5"},"/workspaces/sophra/src/lib/nous/types/signals.ts":{"path":"/workspaces/sophra/src/lib/nous/types/signals.ts","statementMap":{"0":{"start":{"line":2,"column":36},"end":{"line":10,"column":2}},"1":{"start":{"line":11,"column":32},"end":{"line":17,"column":2}},"2":{"start":{"line":18,"column":28},"end":{"line":43,"column":11}},"3":{"start":{"line":44,"column":40},"end":{"line":55,"column":20}},"4":{"start":{"line":45,"column":2},"end":{"line":45,"column":35}},"5":{"start":{"line":46,"column":2},"end":{"line":46,"column":45}},"6":{"start":{"line":47,"column":2},"end":{"line":47,"column":71}},"7":{"start":{"line":48,"column":2},"end":{"line":48,"column":59}},"8":{"start":{"line":49,"column":2},"end":{"line":49,"column":61}},"9":{"start":{"line":50,"column":2},"end":{"line":50,"column":71}},"10":{"start":{"line":51,"column":2},"end":{"line":51,"column":57}},"11":{"start":{"line":52,"column":2},"end":{"line":52,"column":39}},"12":{"start":{"line":53,"column":2},"end":{"line":53,"column":49}},"13":{"start":{"line":54,"column":2},"end":{"line":54,"column":21}},"14":{"start":{"line":56,"column":42},"end":{"line":62,"column":22}},"15":{"start":{"line":57,"column":2},"end":{"line":57,"column":39}},"16":{"start":{"line":58,"column":2},"end":{"line":58,"column":45}},"17":{"start":{"line":59,"column":2},"end":{"line":59,"column":43}},"18":{"start":{"line":60,"column":2},"end":{"line":60,"column":37}},"19":{"start":{"line":61,"column":2},"end":{"line":61,"column":23}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":44,"column":41},"end":{"line":44,"column":42}},"loc":{"start":{"line":44,"column":58},"end":{"line":55,"column":1}},"line":44},"1":{"name":"(anonymous_1)","decl":{"start":{"line":56,"column":43},"end":{"line":56,"column":44}},"loc":{"start":{"line":56,"column":62},"end":{"line":62,"column":1}},"line":56}},"branchMap":{"0":{"loc":{"start":{"line":55,"column":3},"end":{"line":55,"column":19}},"type":"binary-expr","locations":[{"start":{"line":55,"column":3},"end":{"line":55,"column":13}},{"start":{"line":55,"column":17},"end":{"line":55,"column":19}}],"line":55},"1":{"loc":{"start":{"line":62,"column":3},"end":{"line":62,"column":21}},"type":"binary-expr","locations":[{"start":{"line":62,"column":3},"end":{"line":62,"column":15}},{"start":{"line":62,"column":19},"end":{"line":62,"column":21}}],"line":62}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1},"f":{"0":1,"1":1},"b":{"0":[1,1],"1":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/types/signals.ts"],"sourcesContent":["import { z } from \"zod\";\n\nexport const SignalMetadataSchema = z.object({\n  documentType: z.string(),\n  timeToClick: z.number(),\n  deviceType: z.string(),\n  viewport: z.object({\n    width: z.number(),\n    height: z.number(),\n  }),\n});\n\nexport const SignalDataSchema = z.object({\n  sessionId: z.string(),\n  queryId: z.string(),\n  resultId: z.string(),\n  position: z.number(),\n  metadata: SignalMetadataSchema,\n});\n\nexport const SignalSchema = z.object({\n  id: z.string().cuid().optional(),\n  type: z.enum([\n    \"SEARCH\",\n    \"PERFORMANCE\",\n    \"USER_BEHAVIOR_IMPRESSION\",\n    \"USER_BEHAVIOR_VIEW\",\n    \"USER_BEHAVIOR_CLICK\",\n    \"USER_BEHAVIOR_CONVERSION\",\n    \"MODEL_PERFORMANCE\",\n    \"FEEDBACK\",\n    \"SYSTEM_HEALTH\",\n  ]),\n  source: z.string(),\n  value: SignalDataSchema,\n  timestamp: z.coerce.date(),\n  processed: z.boolean().default(false),\n  processedAt: z.coerce.date().nullable().optional(),\n  error: z.string().nullable().optional(),\n  metadata: z.object({\n    status: z.enum([\"PENDING\", \"PROCESSING\", \"COMPLETED\", \"FAILED\"]),\n    attempts: z.number(),\n  }),\n  createdAt: z.coerce.date().optional(),\n  updatedAt: z.coerce.date().optional()\n}).strict();\n\nexport interface BaseSignal {\n  id: string;\n  type: SignalType;\n  timestamp: Date;\n  strength: number; // 0.0 to 1.0\n  data: Record<string, unknown>;\n  source: string;\n  priority?: number;\n  processed?: boolean;\n  metadata?: Record<string, unknown>;\n  correlationId?: string;\n}\n\nexport interface ProcessedSignal extends BaseSignal {\n  originalSignalId: string;\n  processingTime: number;\n  transformations: string[];\n  confidence: number;\n  processed: true;\n  processingMetadata?: Record<string, unknown>;\n}\n\nexport interface SignalBatch {\n  batchId: string;\n  signals: BaseSignal[];\n  startTime: Date;\n  endTime: Date;\n  metadata: Record<string, unknown>;\n  priority?: number;\n  sourceSystem?: string;\n}\n\nexport interface SignalPattern {\n  patternId: string;\n  signals: BaseSignal[];\n  confidence: number;\n  patternType: string;\n  frequency?: number;\n  impactScore?: number;\n  metadata?: Record<string, unknown>;\n  relatedPatterns: string[];\n}\n\nexport interface SignalProcessor {\n  process(signal: BaseSignal): Promise<ProcessedSignal>;\n  batchProcess(signals: BaseSignal[]): Promise<ProcessedSignal[]>;\n  validate(signal: BaseSignal): boolean;\n}\n\nexport enum SignalType {\n  SEARCH = \"SEARCH\",\n  PERFORMANCE = \"PERFORMANCE\",\n  USER_BEHAVIOR_IMPRESSION = \"USER_BEHAVIOR_IMPRESSION\",\n  USER_BEHAVIOR_VIEW = \"USER_BEHAVIOR_VIEW\",\n  USER_BEHAVIOR_CLICK = \"USER_BEHAVIOR_CLICK\",\n  USER_BEHAVIOR_CONVERSION = \"USER_BEHAVIOR_CONVERSION\",\n  MODEL_PERFORMANCE = \"MODEL_PERFORMANCE\",\n  FEEDBACK = \"FEEDBACK\",\n  SYSTEM_HEALTH = \"SYSTEM_HEALTH\"\n}\n\nexport enum SignalStatus {\n  PENDING = \"PENDING\",\n  PROCESSING = \"PROCESSING\",\n  COMPLETED = \"COMPLETED\",\n  FAILED = \"FAILED\",\n}\n"],"mappings":"AAAA,SAAS,SAAS;AAEX,aAAM,uBAAuB,EAAE,OAAO;AAAA,EAC3C,cAAc,EAAE,OAAO;AAAA,EACvB,aAAa,EAAE,OAAO;AAAA,EACtB,YAAY,EAAE,OAAO;AAAA,EACrB,UAAU,EAAE,OAAO;AAAA,IACjB,OAAO,EAAE,OAAO;AAAA,IAChB,QAAQ,EAAE,OAAO;AAAA,EACnB,CAAC;AACH,CAAC;AAEM,aAAM,mBAAmB,EAAE,OAAO;AAAA,EACvC,WAAW,EAAE,OAAO;AAAA,EACpB,SAAS,EAAE,OAAO;AAAA,EAClB,UAAU,EAAE,OAAO;AAAA,EACnB,UAAU,EAAE,OAAO;AAAA,EACnB,UAAU;AACZ,CAAC;AAEM,aAAM,eAAe,EAAE,OAAO;AAAA,EACnC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS;AAAA,EAC/B,MAAM,EAAE,KAAK;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAAA,EACD,QAAQ,EAAE,OAAO;AAAA,EACjB,OAAO;AAAA,EACP,WAAW,EAAE,OAAO,KAAK;AAAA,EACzB,WAAW,EAAE,QAAQ,EAAE,QAAQ,KAAK;AAAA,EACpC,aAAa,EAAE,OAAO,KAAK,EAAE,SAAS,EAAE,SAAS;AAAA,EACjD,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS;AAAA,EACtC,UAAU,EAAE,OAAO;AAAA,IACjB,QAAQ,EAAE,KAAK,CAAC,WAAW,cAAc,aAAa,QAAQ,CAAC;AAAA,IAC/D,UAAU,EAAE,OAAO;AAAA,EACrB,CAAC;AAAA,EACD,WAAW,EAAE,OAAO,KAAK,EAAE,SAAS;AAAA,EACpC,WAAW,EAAE,OAAO,KAAK,EAAE,SAAS;AACtC,CAAC,EAAE,OAAO;AAmDH,WAAK,aAAL,kBAAKA,gBAAL;AACL,EAAAA,YAAA,YAAS;AACT,EAAAA,YAAA,iBAAc;AACd,EAAAA,YAAA,8BAA2B;AAC3B,EAAAA,YAAA,wBAAqB;AACrB,EAAAA,YAAA,yBAAsB;AACtB,EAAAA,YAAA,8BAA2B;AAC3B,EAAAA,YAAA,uBAAoB;AACpB,EAAAA,YAAA,cAAW;AACX,EAAAA,YAAA,mBAAgB;AATN,SAAAA;AAAA,GAAA;AAYL,WAAK,eAAL,kBAAKC,kBAAL;AACL,EAAAA,cAAA,aAAU;AACV,EAAAA,cAAA,gBAAa;AACb,EAAAA,cAAA,eAAY;AACZ,EAAAA,cAAA,YAAS;AAJC,SAAAA;AAAA,GAAA;","names":["SignalType","SignalStatus"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"811eb4ec6a795f9463671d92c727d82c9822ae66"},"/workspaces/sophra/src/lib/nous/types/events.ts":{"path":"/workspaces/sophra/src/lib/nous/types/events.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5651034c484cb61449273602123f2b814e1d6e44"},"/workspaces/sophra/src/lib/nous/types/models.ts":{"path":"/workspaces/sophra/src/lib/nous/types/models.ts","statementMap":{"0":{"start":{"line":1,"column":39},"end":{"line":8,"column":19}},"1":{"start":{"line":2,"column":2},"end":{"line":2,"column":48}},"2":{"start":{"line":3,"column":2},"end":{"line":3,"column":54}},"3":{"start":{"line":4,"column":2},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":2},"end":{"line":5,"column":56}},"5":{"start":{"line":6,"column":2},"end":{"line":6,"column":56}},"6":{"start":{"line":7,"column":2},"end":{"line":7,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":1,"column":40},"end":{"line":1,"column":41}},"loc":{"start":{"line":1,"column":56},"end":{"line":8,"column":1}},"line":1}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":3},"end":{"line":8,"column":18}},"type":"binary-expr","locations":[{"start":{"line":8,"column":3},"end":{"line":8,"column":12}},{"start":{"line":8,"column":16},"end":{"line":8,"column":18}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1},"f":{"0":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/types/models.ts"],"sourcesContent":["export enum ModelType {\n  SEARCH_RANKER = 'search_ranker',\n  PATTERN_DETECTOR = 'pattern_detector',\n  QUERY_OPTIMIZER = 'query_optimizer',\n  FEEDBACK_ANALYZER = 'feedback_analyzer',\n  OPENAI_FINE_TUNED = 'openai_fine_tuned'\n}\n\nexport interface ModelConfig {\n  type: ModelType;\n  hyperparameters: Record<string, unknown>;\n  features: string[];\n  trainingParams: Record<string, unknown>;\n}\n\nexport interface ModelVersion {\n  id: string;\n  createdAt: Date;\n  config: ModelConfig;\n  metrics: Record<string, number>;\n  artifactPath: string;\n  parentVersion?: string;\n}\n\nexport interface TrainingMetrics {\n  loss: number;\n  accuracy: number;\n  validationMetrics: Record<string, number>;\n  trainingDuration: number;\n  iterationCount: number;\n}\n\nexport interface ModelEvaluation {\n  versionId: string;\n  timestamp: Date;\n  metrics: Record<string, number>;\n  testCases: Array<Record<string, unknown>>;\n  performanceComparison?: Record<string, number>;\n}\n"],"mappings":"AAAO,WAAK,YAAL,kBAAKA,eAAL;AACL,EAAAA,WAAA,mBAAgB;AAChB,EAAAA,WAAA,sBAAmB;AACnB,EAAAA,WAAA,qBAAkB;AAClB,EAAAA,WAAA,uBAAoB;AACpB,EAAAA,WAAA,uBAAoB;AALV,SAAAA;AAAA,GAAA;","names":["ModelType"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a03476bf8b2c92a278b45897c92b4e06d2ccfe89"},"/workspaces/sophra/src/lib/nous/types/adaptation.ts":{"path":"/workspaces/sophra/src/lib/nous/types/adaptation.ts","statementMap":{},"fnMap":{},"branchMap":{},"s":{},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":[],"sourcesContent":[],"mappings":"","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f80c2b69c880f236de1e024e011760ce76078cac"},"/workspaces/sophra/src/lib/nous/types/learning.ts":{"path":"/workspaces/sophra/src/lib/nous/types/learning.ts","statementMap":{"0":{"start":{"line":2,"column":47},"end":{"line":12,"column":27}},"1":{"start":{"line":3,"column":2},"end":{"line":3,"column":58}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":54}},"4":{"start":{"line":6,"column":2},"end":{"line":6,"column":60}},"5":{"start":{"line":7,"column":2},"end":{"line":7,"column":60}},"6":{"start":{"line":8,"column":2},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":2},"end":{"line":9,"column":54}},"8":{"start":{"line":10,"column":2},"end":{"line":10,"column":64}},"9":{"start":{"line":11,"column":2},"end":{"line":11,"column":28}},"10":{"start":{"line":13,"column":49},"end":{"line":20,"column":29}},"11":{"start":{"line":14,"column":2},"end":{"line":14,"column":46}},"12":{"start":{"line":15,"column":2},"end":{"line":15,"column":52}},"13":{"start":{"line":16,"column":2},"end":{"line":16,"column":50}},"14":{"start":{"line":17,"column":2},"end":{"line":17,"column":44}},"15":{"start":{"line":18,"column":2},"end":{"line":18,"column":46}},"16":{"start":{"line":19,"column":2},"end":{"line":19,"column":30}},"17":{"start":{"line":21,"column":51},"end":{"line":27,"column":31}},"18":{"start":{"line":22,"column":2},"end":{"line":22,"column":50}},"19":{"start":{"line":23,"column":2},"end":{"line":23,"column":42}},"20":{"start":{"line":24,"column":2},"end":{"line":24,"column":46}},"21":{"start":{"line":25,"column":2},"end":{"line":25,"column":40}},"22":{"start":{"line":26,"column":2},"end":{"line":26,"column":32}},"23":{"start":{"line":28,"column":43},"end":{"line":46,"column":2}},"24":{"start":{"line":47,"column":37},"end":{"line":55,"column":2}},"25":{"start":{"line":56,"column":35},"end":{"line":76,"column":2}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":48},"end":{"line":2,"column":49}},"loc":{"start":{"line":2,"column":72},"end":{"line":12,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":50},"end":{"line":13,"column":51}},"loc":{"start":{"line":13,"column":76},"end":{"line":20,"column":1}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":21,"column":52},"end":{"line":21,"column":53}},"loc":{"start":{"line":21,"column":80},"end":{"line":27,"column":1}},"line":21}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":3},"end":{"line":12,"column":26}},"type":"binary-expr","locations":[{"start":{"line":12,"column":3},"end":{"line":12,"column":20}},{"start":{"line":12,"column":24},"end":{"line":12,"column":26}}],"line":12},"1":{"loc":{"start":{"line":20,"column":3},"end":{"line":20,"column":28}},"type":"binary-expr","locations":[{"start":{"line":20,"column":3},"end":{"line":20,"column":22}},{"start":{"line":20,"column":26},"end":{"line":20,"column":28}}],"line":20},"2":{"loc":{"start":{"line":27,"column":3},"end":{"line":27,"column":30}},"type":"binary-expr","locations":[{"start":{"line":27,"column":3},"end":{"line":27,"column":24}},{"start":{"line":27,"column":28},"end":{"line":27,"column":30}}],"line":27}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1},"f":{"0":1,"1":1,"2":1},"b":{"0":[1,1],"1":[1,1],"2":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/types/learning.ts"],"sourcesContent":["import { EngineOptimizationType } from \"@/lib/nous/engine/types\";\nimport { z } from \"zod\";\n\nexport enum LearningEventType {\n  SEARCH_PATTERN = \"SEARCH_PATTERN\",\n  USER_FEEDBACK = \"USER_FEEDBACK\",\n  MODEL_UPDATE = \"MODEL_UPDATE\",\n  ADAPTATION_RULE = \"ADAPTATION_RULE\",\n  SIGNAL_DETECTED = \"SIGNAL_DETECTED\",\n  METRIC_THRESHOLD = \"METRIC_THRESHOLD\",\n  SYSTEM_STATE = \"SYSTEM_STATE\",\n  EXPERIMENT_RESULT = \"EXPERIMENT_RESULT\",\n}\n\nexport enum LearningEventStatus {\n  PENDING = \"PENDING\",\n  PROCESSING = \"PROCESSING\",\n  COMPLETED = \"COMPLETED\",\n  FAILED = \"FAILED\",\n  IGNORED = \"IGNORED\",\n}\n\nexport enum LearningEventPriority {\n  CRITICAL = \"CRITICAL\",\n  HIGH = \"HIGH\",\n  MEDIUM = \"MEDIUM\",\n  LOW = \"LOW\",\n}\n\nexport interface SearchPatternMetadata {\n  // Search metrics\n  relevantHits?: number;\n  totalHits?: number;\n  took?: number;\n  adaptationRulesApplied?: number;\n  searchType?: string;\n  facetsUsed?: boolean;\n\n  // Health check fields\n  source?: string;\n\n  // Additional metadata\n  [key: string]: any; // Allow any additional string-keyed fields\n}\n\n// Align with existing SearchPatternMetadata\nexport interface LearningEventMetadata extends SearchPatternMetadata {\n  source?: string;\n  correlationId?: string;\n  sessionId?: string;\n  userId?: string;\n  clientId?: string;\n  environment?: string;\n  version?: string;\n  tags?: string[];\n  metrics?: Record<string, number>;\n  context?: Record<string, unknown>;\n}\n\nexport interface LearningPattern {\n  id: string;\n  type: string;\n  confidence: number;\n  metrics: Record<string, number>;\n  features: {\n    relevantHits?: number;\n    totalHits?: number;\n    searchType?: string;\n    facetsUsed?: string[];\n    took?: number;\n  };\n  correlations?: Array<{\n    patternId: string;\n    strength: number;\n  }>;\n  metadata: {\n    source: string;\n    detectedAt: string;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface EngineOptimizationStrategy {\n  id: string;\n  type: EngineOptimizationType;\n  priority: number;\n  confidence: number;\n  impact: number;\n  metadata: {\n    targetMetrics: string[];\n    expectedImprovement: number;\n    riskLevel: string;\n    dependencies: string[];\n    searchPattern?: string;\n  };\n  learningResultId: string;\n  resultId: string;\n}\n\nexport interface LearningEvent {\n  id: string;\n  type: LearningEventType;\n  status: LearningEventStatus;\n  priority: LearningEventPriority;\n  timestamp: Date;\n  processedAt?: Date;\n  metadata: LearningEventMetadata;\n  patterns: LearningPattern[];\n  correlationId?: string;\n  metrics: Record<string, number>;\n  sessionId?: string;\n  userId?: string;\n  clientId?: string;\n  environment?: string;\n  version?: string;\n  tags: string[];\n  error?: string;\n  retryCount: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Zod schemas for validation\nexport const LearningEventMetadataSchema = z.object({\n  source: z.string().optional(),\n  correlationId: z.string().optional(),\n  sessionId: z.string().optional(),\n  userId: z.string().optional(),\n  clientId: z.string().optional(),\n  environment: z.string().optional(),\n  version: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  metrics: z.record(z.number()).optional(),\n  context: z.record(z.unknown()).optional(),\n  // SearchPatternMetadata fields\n  relevantHits: z.number().optional(),\n  totalHits: z.number().optional(),\n  took: z.number().optional(),\n  adaptationRulesApplied: z.number().optional(),\n  searchType: z.string().optional(),\n  facetsUsed: z.boolean().optional(),\n});\n\nexport const LearningPatternSchema = z.object({\n  id: z.string(),\n  type: z.string(),\n  confidence: z.number(),\n  features: z.record(z.unknown()),\n  metadata: z.record(z.unknown()).optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const LearningEventSchema = z.object({\n  id: z.string(),\n  type: z.nativeEnum(LearningEventType),\n  status: z.nativeEnum(LearningEventStatus),\n  priority: z.nativeEnum(LearningEventPriority),\n  timestamp: z.date(),\n  processedAt: z.date().optional(),\n  metadata: LearningEventMetadataSchema,\n  patterns: z.array(LearningPatternSchema),\n  correlationId: z.string().optional(),\n  sessionId: z.string().optional(),\n  userId: z.string().optional(),\n  clientId: z.string().optional(),\n  environment: z.string().optional(),\n  version: z.string().optional(),\n  tags: z.array(z.string()),\n  error: z.string().optional(),\n  retryCount: z.number(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\n// Request/Response types\nexport interface GetLearningEventsRequest {\n  limit?: number;\n  type?: LearningEventType;\n  status?: LearningEventStatus;\n  priority?: LearningEventPriority;\n  startDate?: string;\n  endDate?: string;\n  correlationId?: string;\n  sessionId?: string;\n  userId?: string;\n  clientId?: string;\n  environment?: string;\n  tags?: string[];\n}\n\nexport interface GetLearningEventsResponse {\n  success: boolean;\n  data?: LearningEvent[];\n  error?: string;\n  meta?: {\n    total: number;\n    timestamp: string;\n    limit: number;\n  };\n}\n\n// Service method types\nexport interface LearningEventService {\n  getEvents(\n    request: GetLearningEventsRequest\n  ): Promise<GetLearningEventsResponse>;\n  createEvent(\n    event: Omit<LearningEvent, \"id\" | \"createdAt\" | \"updatedAt\">\n  ): Promise<LearningEvent>;\n  updateEvent(\n    id: string,\n    updates: Partial<LearningEvent>\n  ): Promise<LearningEvent>;\n  deleteEvent(id: string): Promise<void>;\n}\n"],"mappings":"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","names":["LearningEventType","LearningEventStatus","LearningEventPriority"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"94aecbbcd6bc8c774b24ee2d39e532d7cfaabab3"},"/workspaces/sophra/src/lib/nous/learn/pipeline.ts":{"path":"/workspaces/sophra/src/lib/nous/learn/pipeline.ts","statementMap":{"0":{"start":{"line":6,"column":4},"end":{"line":6,"column":29}},"1":{"start":{"line":7,"column":4},"end":{"line":7,"column":25}},"2":{"start":{"line":8,"column":4},"end":{"line":13,"column":6}},"3":{"start":{"line":16,"column":22},"end":{"line":16,"column":43}},"4":{"start":{"line":17,"column":4},"end":{"line":17,"column":82}},"5":{"start":{"line":20,"column":25},"end":{"line":20,"column":57}},"6":{"start":{"line":21,"column":4},"end":{"line":28,"column":5}},"7":{"start":{"line":22,"column":6},"end":{"line":27,"column":8}},"8":{"start":{"line":29,"column":18},"end":{"line":35,"column":6}},"9":{"start":{"line":36,"column":20},"end":{"line":36,"column":28}},"10":{"start":{"line":37,"column":4},"end":{"line":37,"column":49}},"11":{"start":{"line":38,"column":25},"end":{"line":38,"column":62}},"12":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"13":{"start":{"line":40,"column":6},"end":{"line":40,"column":58}},"14":{"start":{"line":42,"column":4},"end":{"line":49,"column":6}},"15":{"start":{"line":52,"column":4},"end":{"line":55,"column":6}},"16":{"start":{"line":53,"column":32},"end":{"line":53,"column":49}},"17":{"start":{"line":54,"column":33},"end":{"line":54,"column":55}},"18":{"start":{"line":58,"column":4},"end":{"line":111,"column":5}},"19":{"start":{"line":59,"column":20},"end":{"line":59,"column":57}},"20":{"start":{"line":60,"column":6},"end":{"line":62,"column":7}},"21":{"start":{"line":61,"column":8},"end":{"line":61,"column":54}},"22":{"start":{"line":63,"column":19},"end":{"line":67,"column":7}},"23":{"start":{"line":68,"column":6},"end":{"line":71,"column":9}},"24":{"start":{"line":72,"column":24},"end":{"line":77,"column":8}},"25":{"start":{"line":78,"column":6},"end":{"line":80,"column":7}},"26":{"start":{"line":79,"column":8},"end":{"line":79,"column":73}},"27":{"start":{"line":81,"column":21},"end":{"line":81,"column":51}},"28":{"start":{"line":82,"column":6},"end":{"line":86,"column":7}},"29":{"start":{"line":83,"column":8},"end":{"line":83,"column":67}},"30":{"start":{"line":85,"column":8},"end":{"line":85,"column":67}},"31":{"start":{"line":87,"column":6},"end":{"line":92,"column":8}},"32":{"start":{"line":93,"column":6},"end":{"line":99,"column":9}},"33":{"start":{"line":101,"column":27},"end":{"line":101,"column":83}},"34":{"start":{"line":102,"column":6},"end":{"line":102,"column":64}},"35":{"start":{"line":103,"column":6},"end":{"line":109,"column":9}},"36":{"start":{"line":110,"column":6},"end":{"line":110,"column":18}},"37":{"start":{"line":114,"column":21},"end":{"line":124,"column":6}},"38":{"start":{"line":118,"column":49},"end":{"line":121,"column":11}},"39":{"start":{"line":125,"column":4},"end":{"line":135,"column":7}},"40":{"start":{"line":136,"column":4},"end":{"line":154,"column":5}},"41":{"start":{"line":137,"column":29},"end":{"line":137,"column":80}},"42":{"start":{"line":138,"column":23},"end":{"line":141,"column":7}},"43":{"start":{"line":142,"column":6},"end":{"line":142,"column":33}},"44":{"start":{"line":143,"column":6},"end":{"line":146,"column":9}},"45":{"start":{"line":147,"column":6},"end":{"line":149,"column":7}},"46":{"start":{"line":148,"column":8},"end":{"line":148,"column":70}},"47":{"start":{"line":150,"column":6},"end":{"line":152,"column":7}},"48":{"start":{"line":151,"column":8},"end":{"line":151,"column":14}},"49":{"start":{"line":153,"column":6},"end":{"line":153,"column":63}},"50":{"start":{"line":153,"column":37},"end":{"line":153,"column":61}},"51":{"start":{"line":157,"column":21},"end":{"line":157,"column":74}},"52":{"start":{"line":157,"column":56},"end":{"line":157,"column":73}},"53":{"start":{"line":158,"column":18},"end":{"line":158,"column":55}},"54":{"start":{"line":159,"column":4},"end":{"line":161,"column":5}},"55":{"start":{"line":160,"column":6},"end":{"line":160,"column":52}},"56":{"start":{"line":162,"column":22},"end":{"line":162,"column":103}},"57":{"start":{"line":163,"column":19},"end":{"line":163,"column":94}},"58":{"start":{"line":164,"column":4},"end":{"line":175,"column":5}},"59":{"start":{"line":164,"column":21},"end":{"line":164,"column":22}},"60":{"start":{"line":165,"column":6},"end":{"line":165,"column":45}},"61":{"start":{"line":166,"column":6},"end":{"line":172,"column":9}},"62":{"start":{"line":173,"column":6},"end":{"line":174,"column":7}},"63":{"start":{"line":173,"column":19},"end":{"line":173,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":5,"column":2},"end":{"line":5,"column":3}},"loc":{"start":{"line":5,"column":32},"end":{"line":14,"column":3}},"line":5},"1":{"name":"(anonymous_1)","decl":{"start":{"line":15,"column":2},"end":{"line":15,"column":3}},"loc":{"start":{"line":15,"column":54},"end":{"line":18,"column":3}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":2},"end":{"line":19,"column":3}},"loc":{"start":{"line":19,"column":39},"end":{"line":50,"column":3}},"line":19},"3":{"name":"(anonymous_3)","decl":{"start":{"line":51,"column":2},"end":{"line":51,"column":3}},"loc":{"start":{"line":51,"column":30},"end":{"line":56,"column":3}},"line":51},"4":{"name":"(anonymous_4)","decl":{"start":{"line":53,"column":25},"end":{"line":53,"column":26}},"loc":{"start":{"line":53,"column":32},"end":{"line":53,"column":49}},"line":53},"5":{"name":"(anonymous_5)","decl":{"start":{"line":54,"column":26},"end":{"line":54,"column":27}},"loc":{"start":{"line":54,"column":33},"end":{"line":54,"column":55}},"line":54},"6":{"name":"(anonymous_6)","decl":{"start":{"line":57,"column":2},"end":{"line":57,"column":3}},"loc":{"start":{"line":57,"column":42},"end":{"line":112,"column":3}},"line":57},"7":{"name":"(anonymous_7)","decl":{"start":{"line":113,"column":2},"end":{"line":113,"column":3}},"loc":{"start":{"line":113,"column":56},"end":{"line":155,"column":3}},"line":113},"8":{"name":"(anonymous_8)","decl":{"start":{"line":118,"column":34},"end":{"line":118,"column":35}},"loc":{"start":{"line":118,"column":49},"end":{"line":121,"column":11}},"line":118},"9":{"name":"(anonymous_9)","decl":{"start":{"line":153,"column":24},"end":{"line":153,"column":25}},"loc":{"start":{"line":153,"column":37},"end":{"line":153,"column":61}},"line":153},"10":{"name":"(anonymous_10)","decl":{"start":{"line":156,"column":2},"end":{"line":156,"column":3}},"loc":{"start":{"line":156,"column":56},"end":{"line":176,"column":3}},"line":156},"11":{"name":"(anonymous_11)","decl":{"start":{"line":157,"column":45},"end":{"line":157,"column":46}},"loc":{"start":{"line":157,"column":56},"end":{"line":157,"column":73}},"line":157}},"branchMap":{"0":{"loc":{"start":{"line":15,"column":27},"end":{"line":15,"column":52}},"type":"default-arg","locations":[{"start":{"line":15,"column":37},"end":{"line":15,"column":52}}],"line":15},"1":{"loc":{"start":{"line":17,"column":24},"end":{"line":17,"column":80}},"type":"binary-expr","locations":[{"start":{"line":17,"column":24},"end":{"line":17,"column":47}},{"start":{"line":17,"column":51},"end":{"line":17,"column":80}}],"line":17},"2":{"loc":{"start":{"line":21,"column":4},"end":{"line":28,"column":5}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":28,"column":5}},{"start":{},"end":{}}],"line":21},"3":{"loc":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},{"start":{},"end":{}}],"line":39},"4":{"loc":{"start":{"line":47,"column":21},"end":{"line":47,"column":57}},"type":"binary-expr","locations":[{"start":{"line":47,"column":21},"end":{"line":47,"column":47}},{"start":{"line":47,"column":51},"end":{"line":47,"column":57}}],"line":47},"5":{"loc":{"start":{"line":60,"column":6},"end":{"line":62,"column":7}},"type":"if","locations":[{"start":{"line":60,"column":6},"end":{"line":62,"column":7}},{"start":{},"end":{}}],"line":60},"6":{"loc":{"start":{"line":78,"column":6},"end":{"line":80,"column":7}},"type":"if","locations":[{"start":{"line":78,"column":6},"end":{"line":80,"column":7}},{"start":{},"end":{}}],"line":78},"7":{"loc":{"start":{"line":82,"column":6},"end":{"line":86,"column":7}},"type":"if","locations":[{"start":{"line":82,"column":6},"end":{"line":86,"column":7}},{"start":{"line":84,"column":13},"end":{"line":86,"column":7}}],"line":82},"8":{"loc":{"start":{"line":101,"column":27},"end":{"line":101,"column":83}},"type":"cond-expr","locations":[{"start":{"line":101,"column":52},"end":{"line":101,"column":65}},{"start":{"line":101,"column":68},"end":{"line":101,"column":83}}],"line":101},"9":{"loc":{"start":{"line":139,"column":9},"end":{"line":139,"column":56}},"type":"cond-expr","locations":[{"start":{"line":139,"column":49},"end":{"line":139,"column":52}},{"start":{"line":139,"column":55},"end":{"line":139,"column":56}}],"line":139},"10":{"loc":{"start":{"line":147,"column":6},"end":{"line":149,"column":7}},"type":"if","locations":[{"start":{"line":147,"column":6},"end":{"line":149,"column":7}},{"start":{},"end":{}}],"line":147},"11":{"loc":{"start":{"line":148,"column":24},"end":{"line":148,"column":68}},"type":"binary-expr","locations":[{"start":{"line":148,"column":24},"end":{"line":148,"column":44}},{"start":{"line":148,"column":48},"end":{"line":148,"column":68}}],"line":148},"12":{"loc":{"start":{"line":150,"column":6},"end":{"line":152,"column":7}},"type":"if","locations":[{"start":{"line":150,"column":6},"end":{"line":152,"column":7}},{"start":{},"end":{}}],"line":150},"13":{"loc":{"start":{"line":159,"column":4},"end":{"line":161,"column":5}},"type":"if","locations":[{"start":{"line":159,"column":4},"end":{"line":161,"column":5}},{"start":{},"end":{}}],"line":159},"14":{"loc":{"start":{"line":162,"column":22},"end":{"line":162,"column":103}},"type":"cond-expr","locations":[{"start":{"line":162,"column":39},"end":{"line":162,"column":98}},{"start":{"line":162,"column":101},"end":{"line":162,"column":103}}],"line":162},"15":{"loc":{"start":{"line":162,"column":39},"end":{"line":162,"column":98}},"type":"binary-expr","locations":[{"start":{"line":162,"column":39},"end":{"line":162,"column":92}},{"start":{"line":162,"column":96},"end":{"line":162,"column":98}}],"line":162},"16":{"loc":{"start":{"line":163,"column":19},"end":{"line":163,"column":94}},"type":"cond-expr","locations":[{"start":{"line":163,"column":36},"end":{"line":163,"column":90}},{"start":{"line":163,"column":93},"end":{"line":163,"column":94}}],"line":163},"17":{"loc":{"start":{"line":163,"column":36},"end":{"line":163,"column":90}},"type":"binary-expr","locations":[{"start":{"line":163,"column":36},"end":{"line":163,"column":85}},{"start":{"line":163,"column":89},"end":{"line":163,"column":90}}],"line":163}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},"b":{"0":[0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/learn/pipeline.ts"],"sourcesContent":["import { Registry } from \"@/lib/nous/registry\";\nimport { Event, ModelConfig, ModelType, ModelVersion } from \"@/lib/nous/types\";\nimport logger from \"@/lib/shared/logger\";\nimport { JsonValue } from \"@prisma/client/runtime/library\";\nimport { OpenAIClient } from \"../clients/openai\";\nimport { prisma } from \"@/lib/shared/database/client\";\n\ninterface TrainingStatus {\n  status: \"training\" | \"completed\" | \"failed\";\n  startTime: string;\n  progress: number;\n  endTime?: string;\n  error?: string;\n}\n\nexport class LearningPipeline {\n  private pricing = {\n    \"gpt-3.5-turbo\": 0.002 / 1000, // $0.002 per 1K tokens\n    \"gpt-4\": 0.03 / 1000, // $0.03 per 1K tokens\n  };\n\n  constructor(\n    private registry: Registry,\n    private openai: OpenAIClient\n  ) {}\n\n  calculateCost(numTokens: number, modelId = \"gpt-3.5-turbo\"): number {\n    const baseModel = modelId.split(\":\")[0] as keyof typeof this.pricing;\n    return (\n      numTokens * (this.pricing[baseModel] ?? this.pricing[\"gpt-3.5-turbo\"])\n    );\n  }\n\n  async trainAndDeploy(\n    events: Event[],\n    config?: ModelConfig\n  ): Promise<ModelVersion> {\n    const trainingData = this.prepareTrainingData(events);\n\n    if (!config) {\n      config = {\n        type: ModelType.OPENAI_FINE_TUNED,\n        hyperparameters: { learningRate: 0.001, batchSize: 32 },\n        features: [\"text\", \"embeddings\"],\n        trainingParams: { epochs: 3 },\n      };\n    }\n    const model = await this.registry.registerModel({\n      type: \"OPENAI_FINE_TUNED\",\n      id: crypto.randomUUID(),\n      hyperparameters: config.hyperparameters as JsonValue,\n      features: config.features as string[],\n      trainingParams: config.trainingParams as JsonValue,\n    });\n    const modelId = model.id;\n\n    await this.trainModel(modelId, trainingData);\n\n    const updatedModel = await this.registry.getModel(modelId);\n    if (!updatedModel) {\n      throw new Error(\"Failed to retrieve trained model\");\n    }\n\n    return {\n      id: updatedModel.id,\n      createdAt: updatedModel.createdAt,\n      metrics: updatedModel.metrics as Record<string, number>,\n      artifactPath: updatedModel.artifactPath,\n      parentVersion: updatedModel.parentVersion || undefined,\n      config: updatedModel.configId as unknown as ModelConfig,\n    };\n  }\n\n  private prepareTrainingData(events: Event[]): Record<string, string[]> {\n    return {\n      inputs: events.map((e) => JSON.stringify(e)),\n      outputs: events.map((e) => JSON.stringify(e.data)),\n    };\n  }\n\n  private async trainModel(\n    modelId: string,\n    trainingData: Record<string, string[]>\n  ): Promise<void> {\n    try {\n      const model = await this.registry.getModel(modelId);\n      if (!model) {\n        throw new Error(`Model ${modelId} not found`);\n      }\n\n      let status: TrainingStatus = {\n        status: \"training\",\n        startTime: new Date().toISOString(),\n        progress: 0,\n      };\n\n      await prisma.modelState.update({\n        where: { versionId: modelId },\n        data: { trainingProgress: 0 },\n      });\n\n      const modelType = await prisma.modelVersion.findUnique({\n        where: { id: modelId },\n        select: {\n          configId: true,\n        },\n      });\n\n      if (!modelType) {\n        throw new Error(`Could not determine type for model ${modelId}`);\n      }\n\n      const config = JSON.parse(modelType.configId);\n      if (config.type === \"OPENAI_FINE_TUNED\") {\n        await this.trainOpenAIModel(modelId, trainingData, status);\n      } else {\n        await this.trainCustomModel(modelId, trainingData, status);\n      }\n\n      status = {\n        ...status,\n        status: \"completed\",\n        endTime: new Date().toISOString(),\n        progress: 100,\n      };\n\n      await prisma.modelState.update({\n        where: { versionId: modelId },\n        data: {\n          trainingProgress: 100,\n          isTrained: true,\n        },\n      });\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : \"Unknown error\";\n      logger.error(\"Training failed:\", { error: errorMessage });\n      await prisma.modelState.update({\n        where: { versionId: modelId },\n        data: {\n          lastTrainingError: errorMessage,\n          trainingProgress: 0,\n        },\n      });\n      throw error;\n    }\n  }\n\n  private async trainOpenAIModel(\n    modelId: string,\n    trainingData: Record<string, string[]>,\n    status: TrainingStatus\n  ): Promise<void> {\n    // Implementation for OpenAI fine-tuning\n    const response = await this.openai.createFineTune({\n      model: \"gpt-3.5-turbo\",\n      trainingData: Buffer.from(\n        JSON.stringify(\n          trainingData.inputs.map((input, i) => ({\n            prompt: input,\n            completion: trainingData.outputs[i],\n          }))\n        )\n      )\n    });\n    // Update model with fine-tune job ID\n    await this.registry.updateModel(modelId, {\n      id: modelId,\n      configId: JSON.stringify({\n        type: \"OPENAI_FINE_TUNED\",\n        hyperparameters: {},\n        features: [],\n        trainingParams: {\n          jobId: response.jobId\n        }\n      })\n    });\n\n    // Monitor fine-tuning progress\n    while (status.status === \"training\") {\n      const fineTuneStatus = await this.openai.getFineTuneStatus(response.jobId);\n      // Calculate progress based on status\n      const progress = Math.min(\n        ((fineTuneStatus.status === \"succeeded\" ? 100 : 0) / 100) * 100,\n        100\n      );\n      status.progress = progress;\n      await prisma.modelState.update({\n        where: { versionId: modelId },\n        data: { trainingProgress: progress },\n      });\n\n      if (fineTuneStatus.status === \"failed\") {\n        throw new Error(fineTuneStatus.error || \"Fine-tuning failed\");\n      }\n\n      if (fineTuneStatus.status === \"succeeded\") {\n        break;\n      }\n\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n    }\n  }\n\n  private async trainCustomModel(\n    modelId: string,\n    trainingData: Record<string, string[]>,\n    status: TrainingStatus\n  ): Promise<void> {\n    // Implementation for custom model training\n    const features = trainingData.inputs.map((input) => JSON.parse(input));\n\n    const model = await this.registry.getModel(modelId);\n    if (!model) {\n      throw new Error(`Model ${modelId} not found`);\n    }\n\n    const batchSize = model.configId\n      ? JSON.parse(model.configId).hyperparameters?.batchSize || 32\n      : 32;\n    const epochs = model.configId\n      ? JSON.parse(model.configId).trainingParams?.epochs || 3\n      : 3;\n\n    for (let epoch = 0; epoch < epochs; epoch++) {\n      status.progress = (epoch / epochs) * 100;\n      await prisma.modelState.update({\n        where: { versionId: modelId },\n        data: {\n          currentEpoch: epoch,\n          trainingProgress: status.progress,\n        },\n      });\n\n      // Process in batches\n      for (let i = 0; i < features.length; i += batchSize) {\n        // Train on batch\n        // Implementation depends on model type\n      }\n    }\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"812cffa0a1892613b6bf832d5a4300e80085104d"}}