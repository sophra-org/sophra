{"/workspaces/sophra/src/lib/cortex/core/services.ts":{"path":"/workspaces/sophra/src/lib/cortex/core/services.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":32}},"1":{"start":{"line":4,"column":4},"end":{"line":4,"column":42}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":2},"end":{"line":2,"column":3}},"loc":{"start":{"line":2,"column":22},"end":{"line":5,"column":3}},"line":2}},"branchMap":{},"s":{"0":12,"1":12},"f":{"0":12},"b":{},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/core/services.ts"],"sourcesContent":["import type { Logger } from \"@/lib/shared/types\";\n\nexport interface BaseServiceConfig {\n  logger: Logger;\n  environment: \"development\" | \"production\" | \"test\";\n}\n\nexport abstract class BaseService {\n  protected readonly logger: Logger;\n  protected readonly environment: string;\n\n  constructor(config: BaseServiceConfig) {\n    this.logger = config.logger;\n    this.environment = config.environment;\n  }\n\n  abstract healthCheck(): Promise<boolean>;\n  abstract disconnect?(): Promise<void>;\n}\n"],"mappings":"AAOO,aAAe,YAAY;AAAA,EAIhC,YAAY,QAA2B;AACrC,SAAK,SAAS,OAAO;AACrB,SAAK,cAAc,OAAO;AAAA,EAC5B;AAIF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e4b1343fd6aee8878b1fd5e4fd63db4e6e66a93b"},"/workspaces/sophra/src/lib/cortex/utils/errors.ts":{"path":"/workspaces/sophra/src/lib/cortex/utils/errors.ts","statementMap":{"0":{"start":{"line":12,"column":4},"end":{"line":12,"column":42}},"1":{"start":{"line":13,"column":4},"end":{"line":13,"column":21}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":39}},"3":{"start":{"line":15,"column":4},"end":{"line":15,"column":30}},"4":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"5":{"start":{"line":17,"column":6},"end":{"line":17,"column":49}},"6":{"start":{"line":29,"column":4},"end":{"line":39,"column":6}},"7":{"start":{"line":43,"column":2},"end":{"line":45,"column":3}},"8":{"start":{"line":44,"column":4},"end":{"line":44,"column":42}},"9":{"start":{"line":46,"column":2},"end":{"line":50,"column":5}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":2},"end":{"line":11,"column":3}},"loc":{"start":{"line":11,"column":35},"end":{"line":19,"column":3}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":28,"column":2},"end":{"line":28,"column":3}},"loc":{"start":{"line":28,"column":11},"end":{"line":40,"column":3}},"line":28},"2":{"name":"formatError","decl":{"start":{"line":42,"column":16},"end":{"line":42,"column":27}},"loc":{"start":{"line":42,"column":35},"end":{"line":51,"column":1}},"line":42}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":10},"end":{"line":12,"column":40}},"type":"binary-expr","locations":[{"start":{"line":12,"column":10},"end":{"line":12,"column":32}},{"start":{"line":12,"column":36},"end":{"line":12,"column":40}}],"line":12},"1":{"loc":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},{"start":{},"end":{}}],"line":16},"2":{"loc":{"start":{"line":34,"column":21},"end":{"line":38,"column":16}},"type":"cond-expr","locations":[{"start":{"line":34,"column":42},"end":{"line":38,"column":7}},{"start":{"line":38,"column":10},"end":{"line":38,"column":16}}],"line":34},"3":{"loc":{"start":{"line":43,"column":2},"end":{"line":45,"column":3}},"type":"if","locations":[{"start":{"line":43,"column":2},"end":{"line":45,"column":3}},{"start":{},"end":{}}],"line":43}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0},"f":{"0":0,"1":0,"2":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/utils/errors.ts"],"sourcesContent":["/**\n * üéØ Error Utilities: Your Error Handling Helper!\n *\n * Makes errors easier to understand and handle.\n * Like having a friendly detective that investigates problems! üîç\n */\n\n/**\n * üé® Custom Error: Your Special Error Type\n *\n * A better way to handle errors in your app.\n * Like having a detailed incident report form! üìù\n *\n * Features:\n * - üè∑Ô∏è Error codes\n * - üìö Stack traces\n * - üîç Original error tracking\n * - üìä JSON formatting\n *\n * @class CustomError\n * @extends {Error}\n */\nexport class CustomError extends Error {\n  readonly code: string;\n  readonly originalError?: Error;\n\n  /**\n   * üé¨ Create New Error\n   *\n   * Makes a new custom error with all the details.\n   * Like filling out an incident report! üìã\n   *\n   * @param {string} code - What kind of error it is\n   * @param {Error} [originalError] - What caused it\n   */\n  constructor(code: string, originalError?: Error) {\n    super(originalError?.message || code);\n    this.code = code;\n    this.originalError = originalError;\n    this.name = \"CustomError\";\n\n    // Maintains proper stack trace for where error was thrown\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CustomError);\n    }\n  }\n\n  /**\n   * üìù Convert to JSON\n   *\n   * Makes the error easy to save or send.\n   * Like making a clean copy of the incident report! üìÑ\n   *\n   * @returns {Record<string, unknown>} The error details\n   */\n  toJSON(): Record<string, unknown> {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n      stack: this.stack,\n      originalError: this.originalError\n        ? {\n            name: this.originalError.name,\n            message: this.originalError.message,\n            stack: this.originalError.stack,\n          }\n        : undefined,\n    };\n  }\n}\n\n/**\n * üé® Format Error Message\n *\n * Makes errors look nice and readable.\n * Like making a neat summary of what went wrong! üìã\n *\n * @param {Error} error - The error to format\n * @returns {string} A pretty error message\n */\nexport function formatError(error: Error): string {\n  if (error instanceof CustomError) {\n    return JSON.stringify(error.toJSON());\n  }\n  return JSON.stringify({\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n  });\n}\n"],"mappings":"AAsBO,aAAM,oBAAoB,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAarC,YAAY,MAAc,eAAuB;AAC/C,UAAM,eAAe,WAAW,IAAI;AACpC,SAAK,OAAO;AACZ,SAAK,gBAAgB;AACrB,SAAK,OAAO;AAGZ,QAAI,MAAM,mBAAmB;AAC3B,YAAM,kBAAkB,MAAM,WAAW;AAAA,IAC3C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,SAAkC;AAChC,WAAO;AAAA,MACL,MAAM,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,MACX,SAAS,KAAK;AAAA,MACd,OAAO,KAAK;AAAA,MACZ,eAAe,KAAK,gBAChB;AAAA,QACE,MAAM,KAAK,cAAc;AAAA,QACzB,SAAS,KAAK,cAAc;AAAA,QAC5B,OAAO,KAAK,cAAc;AAAA,MAC5B,IACA;AAAA,IACN;AAAA,EACF;AACF;AAWO,gBAAS,YAAY,OAAsB;AAChD,MAAI,iBAAiB,aAAa;AAChC,WAAO,KAAK,UAAU,MAAM,OAAO,CAAC;AAAA,EACtC;AACA,SAAO,KAAK,UAAU;AAAA,IACpB,MAAM,MAAM;AAAA,IACZ,SAAS,MAAM;AAAA,IACf,OAAO,MAAM;AAAA,EACf,CAAC;AACH;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e4db1efd34fa0c30525eab86c6a0af9f3cdf89e7"},"/workspaces/sophra/src/lib/cortex/elasticsearch/mappings.ts":{"path":"/workspaces/sophra/src/lib/cortex/elasticsearch/mappings.ts","statementMap":{"0":{"start":{"line":1,"column":27},"end":{"line":117,"column":1}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/elasticsearch/mappings.ts"],"sourcesContent":["import type { estypes } from '@elastic/elasticsearch';\n\n/**\n * üìã Base Document Structure: Our Document Blueprint!\n *\n * This is like a template that tells Elasticsearch how to understand and store our documents.\n * Think of it as a form where each field has a specific type of information it can hold! üìù\n *\n * Field Types:\n * - üîë keyword: Exact match fields (like IDs)\n * - üìù text: Searchable text fields\n * - üìÖ date: Time and date information\n * - üßÆ dense_vector: Mathematical representation for AI\n * - üìä object: Structured data fields\n * - üî¢ long: Number fields\n *\n * Special Features:\n * - üîç Smart text search with keywords\n * - ü§ñ AI-ready vector fields\n * - ‚≠ê Score tracking for quality\n * - üìà View and citation counting\n *\n * @type {Record<string, estypes.MappingProperty>}\n */\nexport const BaseMapping: Record<string, estypes.MappingProperty> = {\n  id: {\n    type: 'keyword',\n  },\n  title: {\n    type: 'text',\n    fields: {\n      keyword: {\n        type: 'keyword',\n        ignore_above: 256,\n      },\n    },\n  },\n  content: {\n    type: 'text',\n    fields: {\n      keyword: {\n        type: 'keyword',\n        ignore_above: 256,\n      },\n    },\n  },\n  abstract: {\n    type: 'text',\n    fields: {\n      keyword: {\n        type: 'keyword',\n        ignore_above: 256,\n      },\n    },\n  },\n  authors: {\n    type: 'text',\n    fields: {\n      keyword: {\n        type: 'keyword',\n        ignore_above: 256,\n      },\n    },\n  },\n  source: {\n    type: 'text',\n    fields: {\n      keyword: {\n        type: 'keyword',\n        ignore_above: 256,\n      },\n    },\n  },\n  tags: {\n    type: 'text',\n    fields: {\n      keyword: {\n        type: 'keyword',\n        ignore_above: 256,\n      },\n    },\n  },\n  metadata: {\n    type: 'object',\n    properties: {\n      title: {\n        type: 'text',\n        fields: {\n          keyword: {\n            type: 'keyword',\n            ignore_above: 256,\n          },\n        },\n      },\n    },\n  },\n  processing_status: {\n    type: 'keyword',\n  },\n  created_at: {\n    type: 'date',\n  },\n  updated_at: {\n    type: 'date',\n  },\n  embeddings: {\n    type: 'dense_vector',\n    dims: 3072,\n    index: true,\n    similarity: 'cosine',\n    index_options: {\n      type: 'int8_hnsw',\n      m: 16,\n      ef_construction: 100,\n    },\n  },\n  evaluationScore: {\n    type: 'object',\n    properties: {\n      actionability: { type: 'float' },\n      aggregate: { type: 'float' },\n      clarity: { type: 'float' },\n      credibility: { type: 'float' },\n      relevance: { type: 'float' },\n    },\n  },\n  evaluation_score: {\n    type: 'object',\n    properties: {\n      actionability: { type: 'float' },\n      aggregate: { type: 'float' },\n      clarity: { type: 'float' },\n      credibility: { type: 'float' },\n      relevance: { type: 'float' },\n    },\n  },\n  yearPublished: { type: 'long' },\n  year_published: { type: 'long' },\n  citationCount: { type: 'long' },\n  viewCount: { type: 'long' },\n};\n"],"mappings":"AAwBO,aAAM,cAAuD;AAAA,EAClE,IAAI;AAAA,IACF,MAAM;AAAA,EACR;AAAA,EACA,OAAO;AAAA,IACL,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,SAAS;AAAA,QACP,MAAM;AAAA,QACN,cAAc;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,SAAS;AAAA,QACP,MAAM;AAAA,QACN,cAAc;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,SAAS;AAAA,QACP,MAAM;AAAA,QACN,cAAc;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AAAA,EACA,SAAS;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,SAAS;AAAA,QACP,MAAM;AAAA,QACN,cAAc;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AAAA,EACA,QAAQ;AAAA,IACN,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,SAAS;AAAA,QACP,MAAM;AAAA,QACN,cAAc;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AAAA,EACA,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,QAAQ;AAAA,MACN,SAAS;AAAA,QACP,MAAM;AAAA,QACN,cAAc;AAAA,MAChB;AAAA,IACF;AAAA,EACF;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,YAAY;AAAA,MACV,OAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,SAAS;AAAA,YACP,MAAM;AAAA,YACN,cAAc;AAAA,UAChB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,mBAAmB;AAAA,IACjB,MAAM;AAAA,EACR;AAAA,EACA,YAAY;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,YAAY;AAAA,IACV,MAAM;AAAA,EACR;AAAA,EACA,YAAY;AAAA,IACV,MAAM;AAAA,IACN,MAAM;AAAA,IACN,OAAO;AAAA,IACP,YAAY;AAAA,IACZ,eAAe;AAAA,MACb,MAAM;AAAA,MACN,GAAG;AAAA,MACH,iBAAiB;AAAA,IACnB;AAAA,EACF;AAAA,EACA,iBAAiB;AAAA,IACf,MAAM;AAAA,IACN,YAAY;AAAA,MACV,eAAe,EAAE,MAAM,QAAQ;AAAA,MAC/B,WAAW,EAAE,MAAM,QAAQ;AAAA,MAC3B,SAAS,EAAE,MAAM,QAAQ;AAAA,MACzB,aAAa,EAAE,MAAM,QAAQ;AAAA,MAC7B,WAAW,EAAE,MAAM,QAAQ;AAAA,IAC7B;AAAA,EACF;AAAA,EACA,kBAAkB;AAAA,IAChB,MAAM;AAAA,IACN,YAAY;AAAA,MACV,eAAe,EAAE,MAAM,QAAQ;AAAA,MAC/B,WAAW,EAAE,MAAM,QAAQ;AAAA,MAC3B,SAAS,EAAE,MAAM,QAAQ;AAAA,MACzB,aAAa,EAAE,MAAM,QAAQ;AAAA,MAC7B,WAAW,EAAE,MAAM,QAAQ;AAAA,IAC7B;AAAA,EACF;AAAA,EACA,eAAe,EAAE,MAAM,OAAO;AAAA,EAC9B,gBAAgB,EAAE,MAAM,OAAO;AAAA,EAC/B,eAAe,EAAE,MAAM,OAAO;AAAA,EAC9B,WAAW,EAAE,MAAM,OAAO;AAC5B;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7e38dd5e60db2abbcb24e2a8980de81d59929b11"},"/workspaces/sophra/src/lib/cortex/elasticsearch/types.ts":{"path":"/workspaces/sophra/src/lib/cortex/elasticsearch/types.ts","statementMap":{"0":{"start":{"line":4,"column":2},"end":{"line":13,"column":3}},"1":{"start":{"line":5,"column":4},"end":{"line":12,"column":6}},"2":{"start":{"line":14,"column":2},"end":{"line":22,"column":3}},"3":{"start":{"line":15,"column":4},"end":{"line":21,"column":6}},"4":{"start":{"line":23,"column":2},"end":{"line":23,"column":15}},"5":{"start":{"line":26,"column":15},"end":{"line":26,"column":51}},"6":{"start":{"line":27,"column":15},"end":{"line":27,"column":56}},"7":{"start":{"line":28,"column":23},"end":{"line":28,"column":75}},"8":{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},"9":{"start":{"line":30,"column":4},"end":{"line":30,"column":77}},"10":{"start":{"line":32,"column":2},"end":{"line":44,"column":4}},"11":{"start":{"line":34,"column":36},"end":{"line":38,"column":7}}},"fnMap":{"0":{"name":"toElasticsearchQuery","decl":{"start":{"line":3,"column":16},"end":{"line":3,"column":36}},"loc":{"start":{"line":3,"column":44},"end":{"line":24,"column":1}},"line":3},"1":{"name":"transformSearchResponse","decl":{"start":{"line":25,"column":16},"end":{"line":25,"column":39}},"loc":{"start":{"line":25,"column":50},"end":{"line":45,"column":1}},"line":25},"2":{"name":"(anonymous_2)","decl":{"start":{"line":34,"column":26},"end":{"line":34,"column":27}},"loc":{"start":{"line":34,"column":36},"end":{"line":38,"column":7}},"line":34}},"branchMap":{"0":{"loc":{"start":{"line":4,"column":2},"end":{"line":13,"column":3}},"type":"if","locations":[{"start":{"line":4,"column":2},"end":{"line":13,"column":3}},{"start":{},"end":{}}],"line":4},"1":{"loc":{"start":{"line":14,"column":2},"end":{"line":22,"column":3}},"type":"if","locations":[{"start":{"line":14,"column":2},"end":{"line":22,"column":3}},{"start":{},"end":{}}],"line":14},"2":{"loc":{"start":{"line":26,"column":15},"end":{"line":26,"column":51}},"type":"binary-expr","locations":[{"start":{"line":26,"column":15},"end":{"line":26,"column":34}},{"start":{"line":26,"column":38},"end":{"line":26,"column":51}}],"line":26},"3":{"loc":{"start":{"line":27,"column":15},"end":{"line":27,"column":56}},"type":"binary-expr","locations":[{"start":{"line":27,"column":15},"end":{"line":27,"column":34}},{"start":{"line":27,"column":38},"end":{"line":27,"column":51}},{"start":{"line":27,"column":55},"end":{"line":27,"column":56}}],"line":27},"4":{"loc":{"start":{"line":28,"column":23},"end":{"line":28,"column":75}},"type":"binary-expr","locations":[{"start":{"line":28,"column":23},"end":{"line":28,"column":50}},{"start":{"line":28,"column":54},"end":{"line":28,"column":75}}],"line":28},"5":{"loc":{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},"type":"if","locations":[{"start":{"line":29,"column":2},"end":{"line":31,"column":3}},{"start":{},"end":{}}],"line":29},"6":{"loc":{"start":{"line":36,"column":16},"end":{"line":36,"column":31}},"type":"binary-expr","locations":[{"start":{"line":36,"column":16},"end":{"line":36,"column":26}},{"start":{"line":36,"column":30},"end":{"line":36,"column":31}}],"line":36},"7":{"loc":{"start":{"line":40,"column":17},"end":{"line":40,"column":36}},"type":"binary-expr","locations":[{"start":{"line":40,"column":17},"end":{"line":40,"column":31}},{"start":{"line":40,"column":35},"end":{"line":40,"column":36}}],"line":40}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":2,"6":2,"7":2,"8":2,"9":0,"10":2,"11":2},"f":{"0":0,"1":2,"2":2},"b":{"0":[0,0],"1":[0,0],"2":[2,2],"3":[2,2,0],"4":[2,2],"5":[0,2],"6":[2,0],"7":[2,2]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/elasticsearch/types.ts"],"sourcesContent":["import { estypes } from \"@elastic/elasticsearch\";\nimport { BaseMapping } from \"./mappings\";\nexport { BaseMapping };\n\n/**\n * üìö Document Types and Interfaces\n *\n * This file contains all the building blocks we use to work with documents.\n * Think of it as our dictionary that helps everyone speak the same language! üìñ\n */\n\n/**\n * üìÑ Base Document: The Foundation of Every Document\n *\n * This is like a form that every document must fill out.\n * Each field has a specific purpose and type of information it can hold!\n *\n * Fields include:\n * - üîë Basic info (id, title, content)\n * - üë• Attribution (authors, source)\n * - üè∑Ô∏è Organization (tags, metadata)\n * - üìä AI features (embeddings)\n * - ‚≠ê Quality scores\n * - üìà Analytics data\n *\n * @interface BaseDocument\n */\nexport interface BaseDocument {\n  id: string;\n  title: string;\n  content: string;\n  abstract: string;\n  authors: string[];\n  source: string;\n  tags: string[];\n  metadata: {\n    title?: string;\n    [key: string]: unknown;\n  };\n  processing_status: string;\n  created_at: string;\n  updated_at: string;\n  embeddings: number[];\n  evaluationScore: {\n    actionability: number;\n    aggregate: number;\n    clarity: number;\n    credibility: number;\n    relevance: number;\n  };\n  evaluation_score: {\n    actionability: number;\n    aggregate: number;\n    clarity: number;\n    credibility: number;\n    relevance: number;\n  };\n  yearPublished?: number;\n  year_published?: number;\n  citationCount?: number;\n  viewCount?: number;\n  type: string;\n}\n\n/**\n * üìã Document Metadata: Extra Information from Elasticsearch\n *\n * This is like the library card that keeps track of document details.\n *\n * @interface DocumentMetadata\n * @property {string} id - Unique identifier\n * @property {number} version - How many times it's been updated\n * @property {string} [created_at] - When it was first added\n * @property {string} [updated_at] - When it was last changed\n */\nexport interface DocumentMetadata {\n  id: string;\n  version: number;\n  created_at?: string;\n  updated_at?: string;\n}\n\n/**\n * ‚è∞ Processed Document: Document with Proper Dates\n *\n * Like the base document, but with dates that are easier to work with!\n *\n * @interface ProcessedDocument\n */\nexport interface ProcessedDocument\n  extends Omit<BaseDocument, \"created_at\" | \"updated_at\"> {\n  created_at: Date;\n  updated_at: Date;\n}\n\n/**\n * üìù Processed Document Metadata: Document Info with Proper Dates\n *\n * Like DocumentMetadata, but with dates in a more useful format!\n *\n * @interface ProcessedDocumentMetadata\n */\nexport interface ProcessedDocumentMetadata\n  extends Omit<DocumentMetadata, \"created_at\" | \"updated_at\"> {\n  created_at: Date;\n  updated_at: Date;\n}\n\n/**\n * üîç Elasticsearch Query: How We Ask for Documents\n *\n * The special format Elasticsearch understands for searching.\n * Like speaking Elasticsearch's native language! üó£Ô∏è\n *\n * @type ElasticsearchClientQuery\n */\nexport type ElasticsearchClientQuery = BaseQuery;\n\nexport type ElasticsearchClientParams = {\n  query: ElasticsearchClientQuery;\n  size: number;\n  from: number;\n  aggregations?: Record<string, estypes.AggregationsAggregationContainer>;\n  sort?: Array<Record<string, \"asc\" | \"desc\">>;\n};\n\n// Our internal types\ntype TermQuery = {\n  term: {\n    _id: string;\n    \"id.keyword\": string;\n  };\n};\n\ntype MultiMatchQuery = {\n  multi_match: {\n    query: string;\n    fields: string[];\n    operator?: \"AND\" | \"OR\";\n    fuzziness?: \"AUTO\" | \"0\" | \"1\" | \"2\";\n  };\n};\n\nexport type BaseQuery =\n  | TermQuery\n  | MultiMatchQuery\n  | BoolQuery\n  | ScriptScoreQuery\n  | MatchAllQuery\n  | ExistsQuery;\n\ntype MatchAllQuery = {\n  match_all: object | Record<string, never>;\n};\n\ntype ExistsQuery = {\n  exists: {\n    field: string;\n  };\n};\n\ntype BoolQuery = {\n  bool: {\n    should?: Array<BaseQuery>;\n    must?: Array<BaseQuery>;\n    must_not?: Array<BaseQuery>;\n    filter?: Array<BaseQuery>;\n  };\n};\n\ntype ScriptScoreQuery = {\n  script_score: {\n    query: BaseQuery;\n    script: {\n      source: string;\n      params: { query_vector: number[] };\n    };\n    min_score?: number;\n  };\n};\n\ntype _SearchQuery = BaseQuery | ScriptScoreQuery;\n\n/**\n * Search parameters for Elasticsearch queries\n */\nexport interface SearchParams {\n  query: BaseQuery;\n  size?: number;\n  from?: number;\n  sort?: Array<Record<string, \"asc\" | \"desc\">>;\n  aggregations?: Record<\n    string,\n    {\n      terms: {\n        field: string;\n        size?: number;\n      };\n    }\n  >;\n}\n\n/**\n * Search options for Elasticsearch queries\n */\nexport interface SearchOptions {\n  index: string;\n  query: ElasticsearchClientQuery;\n  size: number;\n  from: number;\n  facets?: {\n    fields: string[];\n    size?: number;\n  };\n  aggregations?: Record<string, estypes.AggregationsAggregationContainer>;\n  sort?: Array<Record<string, \"asc\" | \"desc\">>;\n}\n\n/**\n * Convert our query to Elasticsearch client format\n */\nexport function toElasticsearchQuery(\n  query: SearchParams[\"query\"]\n): ElasticsearchClientQuery {\n  if (\"bool\" in query) {\n    return {\n      bool: {\n        should: query.bool.should?.map(toElasticsearchQuery),\n        must: query.bool.must?.map(toElasticsearchQuery),\n        must_not: query.bool.must_not?.map(toElasticsearchQuery),\n        filter: query.bool.filter?.map(toElasticsearchQuery),\n      },\n    };\n  }\n\n  if (\"script_score\" in query) {\n    return {\n      script_score: {\n        query: toElasticsearchQuery(query.script_score.query),\n        script: query.script_score.script,\n        min_score: query.script_score.min_score,\n      },\n    };\n  }\n\n  // For other query types (TermQuery, MultiMatchQuery, MatchAllQuery, ExistsQuery)\n  // they are already in the correct format\n  return query;\n}\n\nexport interface SearchRequestBody {\n  query: estypes.QueryDslQueryContainer;\n  size?: number;\n  from?: number;\n  sort?: Array<Record<string, \"asc\" | \"desc\">>;\n  _source?: string[] | boolean;\n  highlight?: {\n    fields: Record<\n      string,\n      {\n        type?: string;\n        number_of_fragments?: number;\n        fragment_size?: number;\n      }\n    >;\n    pre_tags?: string[];\n    post_tags?: string[];\n  };\n}\n\nexport interface BulkOperationResponse {\n  took: number;\n  errors: boolean;\n  items: Array<{\n    [key: string]: {\n      _index: string;\n      _type: string;\n      _id: string;\n      _version?: number;\n      status: number;\n      error?: {\n        type: string;\n        reason: string;\n      };\n    };\n  }>;\n}\n\n// Raw Elasticsearch response type\nexport interface ElasticsearchResponse<T> {\n  body?: {\n    hits: {\n      hits: Array<{\n        _index: string;\n        _id: string;\n        _score: number | null;\n        _source: T;\n      }>;\n      total: {\n        value: number;\n        relation: 'eq' | 'gte';\n      };\n      max_score: number | null;\n    };\n    took: number;\n    aggregations?: Record<string, any>;\n  };\n  hits?: {\n    hits: Array<{\n      _index: string;\n      _id: string;\n      _score: number | null;\n      _source: T;\n    }>;\n    total: {\n      value: number;\n      relation: 'eq' | 'gte';\n    };\n    max_score: number | null;\n  };\n  took?: number;\n  aggregations?: Record<string, any>;\n}\n\n// Our standardized response type\nexport interface SearchResponse<T> {\n  hits: {\n    hits: Array<{\n      _source: T;\n      _score: number;\n      _id: string;\n    }>;\n    total: {\n      value: number;\n      relation: 'eq' | 'gte';\n    };\n    max_score: number;\n  };\n  took: number;\n  aggregations?: Record<string, any>;\n}\n\nexport function transformSearchResponse<T>(\n  response: ElasticsearchResponse<T>\n): SearchResponse<T> {\n  // Handle both old and new response formats\n  const hits = response.body?.hits || response.hits;\n  const took = response.body?.took || response.took || 0;\n  const aggregations = response.body?.aggregations || response.aggregations;\n\n  if (!hits) {\n    throw new Error('Invalid Elasticsearch response: missing hits property');\n  }\n\n  return {\n    hits: {\n      hits: hits.hits.map((hit) => ({\n        _source: hit._source,\n        _score: hit._score || 0,\n        _id: hit._id,\n      })),\n      total: hits.total,\n      max_score: hits.max_score || 0,\n    },\n    took,\n    aggregations,\n  };\n}\n"],"mappings":"AACA,SAAS,mBAAmB;AAC5B,SAAS;AA2NF,gBAAS,qBACd,OAC0B;AAC1B,MAAI,UAAU,OAAO;AACnB,WAAO;AAAA,MACL,MAAM;AAAA,QACJ,QAAQ,MAAM,KAAK,QAAQ,IAAI,oBAAoB;AAAA,QACnD,MAAM,MAAM,KAAK,MAAM,IAAI,oBAAoB;AAAA,QAC/C,UAAU,MAAM,KAAK,UAAU,IAAI,oBAAoB;AAAA,QACvD,QAAQ,MAAM,KAAK,QAAQ,IAAI,oBAAoB;AAAA,MACrD;AAAA,IACF;AAAA,EACF;AAEA,MAAI,kBAAkB,OAAO;AAC3B,WAAO;AAAA,MACL,cAAc;AAAA,QACZ,OAAO,qBAAqB,MAAM,aAAa,KAAK;AAAA,QACpD,QAAQ,MAAM,aAAa;AAAA,QAC3B,WAAW,MAAM,aAAa;AAAA,MAChC;AAAA,IACF;AAAA,EACF;AAIA,SAAO;AACT;AA8FO,gBAAS,wBACd,UACmB;AAEnB,QAAM,OAAO,SAAS,MAAM,QAAQ,SAAS;AAC7C,QAAM,OAAO,SAAS,MAAM,QAAQ,SAAS,QAAQ;AACrD,QAAM,eAAe,SAAS,MAAM,gBAAgB,SAAS;AAE7D,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,MAAM,uDAAuD;AAAA,EACzE;AAEA,SAAO;AAAA,IACL,MAAM;AAAA,MACJ,MAAM,KAAK,KAAK,IAAI,CAAC,SAAS;AAAA,QAC5B,SAAS,IAAI;AAAA,QACb,QAAQ,IAAI,UAAU;AAAA,QACtB,KAAK,IAAI;AAAA,MACX,EAAE;AAAA,MACF,OAAO,KAAK;AAAA,MACZ,WAAW,KAAK,aAAa;AAAA,IAC/B;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f7a96435f011ce94fcd223eef538366801159bde"},"/workspaces/sophra/src/lib/cortex/elasticsearch/services.ts":{"path":"/workspaces/sophra/src/lib/cortex/elasticsearch/services.ts","statementMap":{"0":{"start":{"line":7,"column":19},"end":{"line":7,"column":23}},"1":{"start":{"line":20,"column":4},"end":{"line":20,"column":48}},"2":{"start":{"line":21,"column":4},"end":{"line":30,"column":6}},"3":{"start":{"line":23,"column":8},"end":{"line":28,"column":9}},"4":{"start":{"line":24,"column":10},"end":{"line":24,"column":28}},"5":{"start":{"line":26,"column":10},"end":{"line":26,"column":62}},"6":{"start":{"line":27,"column":10},"end":{"line":27,"column":22}},"7":{"start":{"line":31,"column":4},"end":{"line":31,"column":32}},"8":{"start":{"line":32,"column":4},"end":{"line":32,"column":34}},"9":{"start":{"line":33,"column":26},"end":{"line":44,"column":5}},"10":{"start":{"line":45,"column":4},"end":{"line":45,"column":44}},"11":{"start":{"line":59,"column":4},"end":{"line":94,"column":5}},"12":{"start":{"line":60,"column":23},"end":{"line":67,"column":8}},"13":{"start":{"line":68,"column":6},"end":{"line":73,"column":9}},"14":{"start":{"line":74,"column":6},"end":{"line":79,"column":8}},"15":{"start":{"line":81,"column":6},"end":{"line":86,"column":7}},"16":{"start":{"line":82,"column":8},"end":{"line":85,"column":11}},"17":{"start":{"line":87,"column":6},"end":{"line":92,"column":9}},"18":{"start":{"line":93,"column":6},"end":{"line":93,"column":18}},"19":{"start":{"line":97,"column":4},"end":{"line":171,"column":5}},"20":{"start":{"line":98,"column":6},"end":{"line":103,"column":9}},"21":{"start":{"line":104,"column":23},"end":{"line":107,"column":8}},"22":{"start":{"line":108,"column":6},"end":{"line":115,"column":9}},"23":{"start":{"line":116,"column":6},"end":{"line":126,"column":7}},"24":{"start":{"line":117,"column":8},"end":{"line":124,"column":11}},"25":{"start":{"line":125,"column":8},"end":{"line":125,"column":20}},"26":{"start":{"line":127,"column":21},"end":{"line":127,"column":37}},"27":{"start":{"line":128,"column":23},"end":{"line":141,"column":7}},"28":{"start":{"line":142,"column":6},"end":{"line":151,"column":9}},"29":{"start":{"line":152,"column":6},"end":{"line":152,"column":22}},"30":{"start":{"line":154,"column":25},"end":{"line":154,"column":41}},"31":{"start":{"line":155,"column":6},"end":{"line":162,"column":7}},"32":{"start":{"line":156,"column":8},"end":{"line":160,"column":11}},"33":{"start":{"line":161,"column":8},"end":{"line":161,"column":20}},"34":{"start":{"line":163,"column":6},"end":{"line":169,"column":9}},"35":{"start":{"line":170,"column":6},"end":{"line":170,"column":18}},"36":{"start":{"line":174,"column":4},"end":{"line":198,"column":5}},"37":{"start":{"line":175,"column":6},"end":{"line":182,"column":9}},"38":{"start":{"line":183,"column":6},"end":{"line":187,"column":9}},"39":{"start":{"line":189,"column":6},"end":{"line":196,"column":9}},"40":{"start":{"line":197,"column":6},"end":{"line":197,"column":18}},"41":{"start":{"line":201,"column":4},"end":{"line":214,"column":5}},"42":{"start":{"line":202,"column":6},"end":{"line":205,"column":9}},"43":{"start":{"line":207,"column":6},"end":{"line":212,"column":7}},"44":{"start":{"line":208,"column":8},"end":{"line":211,"column":11}},"45":{"start":{"line":213,"column":6},"end":{"line":213,"column":18}},"46":{"start":{"line":217,"column":4},"end":{"line":236,"column":7}},"47":{"start":{"line":218,"column":6},"end":{"line":235,"column":7}},"48":{"start":{"line":219,"column":25},"end":{"line":228,"column":10}},"49":{"start":{"line":229,"column":8},"end":{"line":231,"column":10}},"50":{"start":{"line":233,"column":8},"end":{"line":233,"column":54}},"51":{"start":{"line":234,"column":8},"end":{"line":234,"column":20}},"52":{"start":{"line":239,"column":4},"end":{"line":241,"column":5}},"53":{"start":{"line":240,"column":6},"end":{"line":240,"column":13}},"54":{"start":{"line":242,"column":23},"end":{"line":245,"column":6}},"55":{"start":{"line":242,"column":50},"end":{"line":245,"column":5}},"56":{"start":{"line":246,"column":4},"end":{"line":261,"column":5}},"57":{"start":{"line":247,"column":23},"end":{"line":249,"column":8}},"58":{"start":{"line":250,"column":6},"end":{"line":252,"column":7}},"59":{"start":{"line":251,"column":8},"end":{"line":251,"column":49}},"60":{"start":{"line":254,"column":6},"end":{"line":259,"column":7}},"61":{"start":{"line":255,"column":8},"end":{"line":258,"column":11}},"62":{"start":{"line":260,"column":6},"end":{"line":260,"column":18}},"63":{"start":{"line":264,"column":4},"end":{"line":269,"column":5}},"64":{"start":{"line":265,"column":23},"end":{"line":265,"column":57}},"65":{"start":{"line":266,"column":6},"end":{"line":266,"column":39}},"66":{"start":{"line":268,"column":6},"end":{"line":268,"column":19}},"67":{"start":{"line":272,"column":4},"end":{"line":346,"column":5}},"68":{"start":{"line":273,"column":24},"end":{"line":273,"column":34}},"69":{"start":{"line":274,"column":6},"end":{"line":274,"column":31}},"70":{"start":{"line":275,"column":6},"end":{"line":309,"column":8}},"71":{"start":{"line":311,"column":6},"end":{"line":345,"column":8}},"72":{"start":{"line":349,"column":4},"end":{"line":365,"column":5}},"73":{"start":{"line":350,"column":6},"end":{"line":350,"column":56}},"74":{"start":{"line":351,"column":23},"end":{"line":351,"column":66}},"75":{"start":{"line":352,"column":6},"end":{"line":359,"column":7}},"76":{"start":{"line":353,"column":23},"end":{"line":353,"column":50}},"77":{"start":{"line":354,"column":8},"end":{"line":357,"column":10}},"78":{"start":{"line":358,"column":8},"end":{"line":358,"column":22}},"79":{"start":{"line":360,"column":6},"end":{"line":360,"column":76}},"80":{"start":{"line":361,"column":6},"end":{"line":361,"column":31}},"81":{"start":{"line":363,"column":6},"end":{"line":363,"column":71}},"82":{"start":{"line":364,"column":6},"end":{"line":364,"column":19}},"83":{"start":{"line":368,"column":4},"end":{"line":385,"column":5}},"84":{"start":{"line":369,"column":6},"end":{"line":369,"column":58}},"85":{"start":{"line":370,"column":21},"end":{"line":370,"column":50}},"86":{"start":{"line":371,"column":6},"end":{"line":374,"column":7}},"87":{"start":{"line":372,"column":8},"end":{"line":372,"column":69}},"88":{"start":{"line":373,"column":8},"end":{"line":373,"column":57}},"89":{"start":{"line":375,"column":28},"end":{"line":378,"column":7}},"90":{"start":{"line":379,"column":6},"end":{"line":379,"column":74}},"91":{"start":{"line":380,"column":6},"end":{"line":380,"column":54}},"92":{"start":{"line":381,"column":6},"end":{"line":381,"column":58}},"93":{"start":{"line":383,"column":6},"end":{"line":383,"column":63}},"94":{"start":{"line":384,"column":6},"end":{"line":384,"column":18}},"95":{"start":{"line":388,"column":4},"end":{"line":397,"column":5}},"96":{"start":{"line":389,"column":21},"end":{"line":389,"column":64}},"97":{"start":{"line":390,"column":6},"end":{"line":392,"column":7}},"98":{"start":{"line":391,"column":8},"end":{"line":391,"column":57}},"99":{"start":{"line":393,"column":6},"end":{"line":393,"column":50}},"100":{"start":{"line":395,"column":6},"end":{"line":395,"column":68}},"101":{"start":{"line":396,"column":6},"end":{"line":396,"column":18}},"102":{"start":{"line":400,"column":4},"end":{"line":407,"column":5}},"103":{"start":{"line":401,"column":6},"end":{"line":404,"column":9}},"104":{"start":{"line":406,"column":6},"end":{"line":406,"column":19}},"105":{"start":{"line":410,"column":4},"end":{"line":438,"column":5}},"106":{"start":{"line":411,"column":30},"end":{"line":416,"column":8}},"107":{"start":{"line":417,"column":22},"end":{"line":417,"column":61}},"108":{"start":{"line":418,"column":24},"end":{"line":418,"column":59}},"109":{"start":{"line":419,"column":24},"end":{"line":419,"column":68}},"110":{"start":{"line":420,"column":28},"end":{"line":420,"column":41}},"111":{"start":{"line":421,"column":6},"end":{"line":423,"column":7}},"112":{"start":{"line":422,"column":8},"end":{"line":422,"column":57}},"113":{"start":{"line":424,"column":6},"end":{"line":429,"column":8}},"114":{"start":{"line":431,"column":6},"end":{"line":431,"column":72}},"115":{"start":{"line":432,"column":6},"end":{"line":437,"column":8}},"116":{"start":{"line":441,"column":18},"end":{"line":441,"column":28}},"117":{"start":{"line":442,"column":19},"end":{"line":442,"column":21}},"118":{"start":{"line":443,"column":4},"end":{"line":530,"column":5}},"119":{"start":{"line":444,"column":26},"end":{"line":444,"column":44}},"120":{"start":{"line":445,"column":29},"end":{"line":447,"column":8}},"121":{"start":{"line":446,"column":8},"end":{"line":446,"column":65}},"122":{"start":{"line":446,"column":25},"end":{"line":446,"column":58}},"123":{"start":{"line":448,"column":6},"end":{"line":448,"column":56}},"124":{"start":{"line":449,"column":56},"end":{"line":458,"column":8}},"125":{"start":{"line":459,"column":22},"end":{"line":483,"column":7}},"126":{"start":{"line":484,"column":6},"end":{"line":489,"column":8}},"127":{"start":{"line":491,"column":18},"end":{"line":491,"column":77}},"128":{"start":{"line":492,"column":6},"end":{"line":496,"column":9}},"129":{"start":{"line":497,"column":6},"end":{"line":497,"column":31}},"130":{"start":{"line":498,"column":6},"end":{"line":529,"column":8}},"131":{"start":{"line":533,"column":18},"end":{"line":533,"column":40}},"132":{"start":{"line":534,"column":23},"end":{"line":534,"column":43}},"133":{"start":{"line":535,"column":4},"end":{"line":545,"column":5}},"134":{"start":{"line":536,"column":6},"end":{"line":544,"column":8}},"135":{"start":{"line":546,"column":28},"end":{"line":570,"column":5}},"136":{"start":{"line":548,"column":27},"end":{"line":548,"column":49}},"137":{"start":{"line":549,"column":19},"end":{"line":549,"column":32}},"138":{"start":{"line":550,"column":20},"end":{"line":550,"column":34}},"139":{"start":{"line":551,"column":8},"end":{"line":559,"column":10}},"140":{"start":{"line":571,"column":4},"end":{"line":575,"column":6}},"141":{"start":{"line":578,"column":4},"end":{"line":578,"column":33}},"142":{"start":{"line":578,"column":21},"end":{"line":578,"column":33}},"143":{"start":{"line":579,"column":14},"end":{"line":579,"column":18}},"144":{"start":{"line":580,"column":18},"end":{"line":580,"column":47}},"145":{"start":{"line":581,"column":14},"end":{"line":581,"column":55}},"146":{"start":{"line":582,"column":4},"end":{"line":582,"column":75}},"147":{"start":{"line":585,"column":4},"end":{"line":587,"column":13}},"148":{"start":{"line":586,"column":17},"end":{"line":586,"column":76}},"149":{"start":{"line":590,"column":4},"end":{"line":592,"column":13}},"150":{"start":{"line":591,"column":17},"end":{"line":591,"column":39}},"151":{"start":{"line":595,"column":4},"end":{"line":620,"column":5}},"152":{"start":{"line":596,"column":6},"end":{"line":600,"column":9}},"153":{"start":{"line":601,"column":6},"end":{"line":601,"column":45}},"154":{"start":{"line":602,"column":6},"end":{"line":602,"column":31}},"155":{"start":{"line":603,"column":6},"end":{"line":603,"column":70}},"156":{"start":{"line":604,"column":21},"end":{"line":604,"column":55}},"157":{"start":{"line":605,"column":6},"end":{"line":609,"column":9}},"158":{"start":{"line":610,"column":6},"end":{"line":610,"column":18}},"159":{"start":{"line":612,"column":18},"end":{"line":612,"column":77}},"160":{"start":{"line":613,"column":6},"end":{"line":618,"column":9}},"161":{"start":{"line":619,"column":6},"end":{"line":619,"column":19}},"162":{"start":{"line":623,"column":4},"end":{"line":649,"column":5}},"163":{"start":{"line":624,"column":23},"end":{"line":626,"column":8}},"164":{"start":{"line":627,"column":6},"end":{"line":630,"column":7}},"165":{"start":{"line":628,"column":8},"end":{"line":628,"column":77}},"166":{"start":{"line":629,"column":8},"end":{"line":629,"column":18}},"167":{"start":{"line":631,"column":22},"end":{"line":631,"column":35}},"168":{"start":{"line":632,"column":6},"end":{"line":635,"column":7}},"169":{"start":{"line":633,"column":8},"end":{"line":633,"column":74}},"170":{"start":{"line":634,"column":8},"end":{"line":634,"column":18}},"171":{"start":{"line":636,"column":6},"end":{"line":645,"column":10}},"172":{"start":{"line":636,"column":37},"end":{"line":645,"column":7}},"173":{"start":{"line":647,"column":6},"end":{"line":647,"column":61}},"174":{"start":{"line":648,"column":6},"end":{"line":648,"column":16}},"175":{"start":{"line":652,"column":4},"end":{"line":652,"column":173}},"176":{"start":{"line":655,"column":27},"end":{"line":659,"column":5}},"177":{"start":{"line":660,"column":4},"end":{"line":672,"column":5}},"178":{"start":{"line":661,"column":23},"end":{"line":664,"column":8}},"179":{"start":{"line":665,"column":6},"end":{"line":667,"column":7}},"180":{"start":{"line":666,"column":8},"end":{"line":666,"column":30}},"181":{"start":{"line":668,"column":6},"end":{"line":668,"column":38}},"182":{"start":{"line":670,"column":6},"end":{"line":670,"column":77}},"183":{"start":{"line":671,"column":6},"end":{"line":671,"column":28}},"184":{"start":{"line":675,"column":4},"end":{"line":692,"column":5}},"185":{"start":{"line":676,"column":6},"end":{"line":683,"column":9}},"186":{"start":{"line":684,"column":6},"end":{"line":684,"column":72}},"187":{"start":{"line":686,"column":6},"end":{"line":690,"column":9}},"188":{"start":{"line":691,"column":6},"end":{"line":691,"column":18}},"189":{"start":{"line":702,"column":8},"end":{"line":702,"column":15}},"190":{"start":{"line":703,"column":4},"end":{"line":757,"column":5}},"191":{"start":{"line":704,"column":25},"end":{"line":740,"column":7}},"192":{"start":{"line":741,"column":23},"end":{"line":744,"column":8}},"193":{"start":{"line":745,"column":6},"end":{"line":753,"column":8}},"194":{"start":{"line":746,"column":47},"end":{"line":750,"column":9}},"195":{"start":{"line":755,"column":6},"end":{"line":755,"column":59}},"196":{"start":{"line":756,"column":6},"end":{"line":756,"column":18}},"197":{"start":{"line":760,"column":4},"end":{"line":769,"column":5}},"198":{"start":{"line":761,"column":6},"end":{"line":761,"column":32}},"199":{"start":{"line":762,"column":6},"end":{"line":762,"column":58}},"200":{"start":{"line":764,"column":18},"end":{"line":764,"column":77}},"201":{"start":{"line":765,"column":6},"end":{"line":768,"column":9}},"202":{"start":{"line":772,"column":4},"end":{"line":789,"column":5}},"203":{"start":{"line":773,"column":25},"end":{"line":773,"column":51}},"204":{"start":{"line":774,"column":6},"end":{"line":776,"column":7}},"205":{"start":{"line":775,"column":8},"end":{"line":775,"column":68}},"206":{"start":{"line":777,"column":6},"end":{"line":780,"column":9}},"207":{"start":{"line":782,"column":18},"end":{"line":782,"column":77}},"208":{"start":{"line":783,"column":6},"end":{"line":787,"column":9}},"209":{"start":{"line":788,"column":6},"end":{"line":788,"column":51}},"210":{"start":{"line":792,"column":4},"end":{"line":792,"column":49}},"211":{"start":{"line":795,"column":4},"end":{"line":798,"column":7}},"212":{"start":{"line":801,"column":21},"end":{"line":801,"column":68}},"213":{"start":{"line":802,"column":4},"end":{"line":802,"column":20}},"214":{"start":{"line":805,"column":4},"end":{"line":808,"column":7}},"215":{"start":{"line":811,"column":21},"end":{"line":811,"column":69}},"216":{"start":{"line":812,"column":4},"end":{"line":812,"column":37}},"217":{"start":{"line":815,"column":21},"end":{"line":815,"column":55}},"218":{"start":{"line":816,"column":4},"end":{"line":816,"column":26}},"219":{"start":{"line":819,"column":21},"end":{"line":819,"column":70}},"220":{"start":{"line":820,"column":4},"end":{"line":825,"column":7}},"221":{"start":{"line":821,"column":6},"end":{"line":823,"column":7}},"222":{"start":{"line":822,"column":8},"end":{"line":822,"column":54}},"223":{"start":{"line":824,"column":6},"end":{"line":824,"column":25}},"224":{"start":{"line":828,"column":4},"end":{"line":828,"column":59}},"225":{"start":{"line":831,"column":4},"end":{"line":831,"column":49}},"226":{"start":{"line":834,"column":4},"end":{"line":839,"column":7}},"227":{"start":{"line":842,"column":21},"end":{"line":842,"column":70}},"228":{"start":{"line":843,"column":21},"end":{"line":843,"column":23}},"229":{"start":{"line":844,"column":4},"end":{"line":851,"column":5}},"230":{"start":{"line":845,"column":6},"end":{"line":850,"column":7}},"231":{"start":{"line":846,"column":8},"end":{"line":848,"column":9}},"232":{"start":{"line":847,"column":10},"end":{"line":847,"column":37}},"233":{"start":{"line":849,"column":8},"end":{"line":849,"column":48}},"234":{"start":{"line":852,"column":4},"end":{"line":852,"column":20}},"235":{"start":{"line":855,"column":21},"end":{"line":858,"column":6}},"236":{"start":{"line":859,"column":4},"end":{"line":859,"column":20}},"237":{"start":{"line":862,"column":4},"end":{"line":890,"column":5}},"238":{"start":{"line":863,"column":23},"end":{"line":875,"column":7}},"239":{"start":{"line":876,"column":21},"end":{"line":876,"column":42}},"240":{"start":{"line":877,"column":6},"end":{"line":882,"column":9}},"241":{"start":{"line":884,"column":6},"end":{"line":888,"column":9}},"242":{"start":{"line":889,"column":6},"end":{"line":889,"column":18}},"243":{"start":{"line":893,"column":23},"end":{"line":893,"column":70}},"244":{"start":{"line":894,"column":25},"end":{"line":894,"column":56}},"245":{"start":{"line":895,"column":4},"end":{"line":899,"column":5}},"246":{"start":{"line":896,"column":6},"end":{"line":898,"column":7}},"247":{"start":{"line":897,"column":8},"end":{"line":897,"column":28}},"248":{"start":{"line":900,"column":4},"end":{"line":900,"column":22}},"249":{"start":{"line":903,"column":18},"end":{"line":903,"column":48}},"250":{"start":{"line":904,"column":27},"end":{"line":909,"column":5}},"251":{"start":{"line":910,"column":25},"end":{"line":910,"column":40}},"252":{"start":{"line":911,"column":4},"end":{"line":916,"column":5}},"253":{"start":{"line":912,"column":6},"end":{"line":915,"column":7}},"254":{"start":{"line":912,"column":37},"end":{"line":912,"column":60}},"255":{"start":{"line":913,"column":8},"end":{"line":913,"column":32}},"256":{"start":{"line":914,"column":8},"end":{"line":914,"column":14}},"257":{"start":{"line":917,"column":21},"end":{"line":917,"column":60}},"258":{"start":{"line":917,"column":44},"end":{"line":917,"column":59}},"259":{"start":{"line":918,"column":20},"end":{"line":918,"column":72}},"260":{"start":{"line":919,"column":4},"end":{"line":923,"column":6}},"261":{"start":{"line":926,"column":21},"end":{"line":931,"column":5}},"262":{"start":{"line":932,"column":34},"end":{"line":932,"column":43}},"263":{"start":{"line":933,"column":23},"end":{"line":933,"column":53}},"264":{"start":{"line":934,"column":4},"end":{"line":941,"column":5}},"265":{"start":{"line":935,"column":6},"end":{"line":935,"column":22}},"266":{"start":{"line":936,"column":6},"end":{"line":940,"column":7}},"267":{"start":{"line":937,"column":8},"end":{"line":939,"column":10}},"268":{"start":{"line":938,"column":23},"end":{"line":938,"column":41}},"269":{"start":{"line":942,"column":4},"end":{"line":944,"column":6}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":19,"column":2},"end":{"line":19,"column":3}},"loc":{"start":{"line":19,"column":22},"end":{"line":46,"column":3}},"line":19},"1":{"name":"(anonymous_1)","decl":{"start":{"line":22,"column":11},"end":{"line":22,"column":12}},"loc":{"start":{"line":22,"column":25},"end":{"line":29,"column":7}},"line":22},"2":{"name":"(anonymous_2)","decl":{"start":{"line":58,"column":2},"end":{"line":58,"column":3}},"loc":{"start":{"line":58,"column":44},"end":{"line":95,"column":3}},"line":58},"3":{"name":"(anonymous_3)","decl":{"start":{"line":96,"column":2},"end":{"line":96,"column":3}},"loc":{"start":{"line":96,"column":31},"end":{"line":172,"column":3}},"line":96},"4":{"name":"(anonymous_4)","decl":{"start":{"line":173,"column":2},"end":{"line":173,"column":3}},"loc":{"start":{"line":173,"column":44},"end":{"line":199,"column":3}},"line":173},"5":{"name":"(anonymous_5)","decl":{"start":{"line":200,"column":2},"end":{"line":200,"column":3}},"loc":{"start":{"line":200,"column":34},"end":{"line":215,"column":3}},"line":200},"6":{"name":"(anonymous_6)","decl":{"start":{"line":216,"column":2},"end":{"line":216,"column":3}},"loc":{"start":{"line":216,"column":39},"end":{"line":237,"column":3}},"line":216},"7":{"name":"(anonymous_7)","decl":{"start":{"line":217,"column":33},"end":{"line":217,"column":34}},"loc":{"start":{"line":217,"column":45},"end":{"line":236,"column":5}},"line":217},"8":{"name":"(anonymous_8)","decl":{"start":{"line":238,"column":2},"end":{"line":238,"column":3}},"loc":{"start":{"line":238,"column":36},"end":{"line":262,"column":3}},"line":238},"9":{"name":"(anonymous_9)","decl":{"start":{"line":242,"column":41},"end":{"line":242,"column":42}},"loc":{"start":{"line":242,"column":50},"end":{"line":245,"column":5}},"line":242},"10":{"name":"(anonymous_10)","decl":{"start":{"line":263,"column":2},"end":{"line":263,"column":3}},"loc":{"start":{"line":263,"column":17},"end":{"line":270,"column":3}},"line":263},"11":{"name":"(anonymous_11)","decl":{"start":{"line":271,"column":2},"end":{"line":271,"column":3}},"loc":{"start":{"line":271,"column":15},"end":{"line":347,"column":3}},"line":271},"12":{"name":"(anonymous_12)","decl":{"start":{"line":348,"column":2},"end":{"line":348,"column":3}},"loc":{"start":{"line":348,"column":27},"end":{"line":366,"column":3}},"line":348},"13":{"name":"(anonymous_13)","decl":{"start":{"line":367,"column":2},"end":{"line":367,"column":3}},"loc":{"start":{"line":367,"column":36},"end":{"line":386,"column":3}},"line":367},"14":{"name":"(anonymous_14)","decl":{"start":{"line":387,"column":2},"end":{"line":387,"column":3}},"loc":{"start":{"line":387,"column":27},"end":{"line":398,"column":3}},"line":387},"15":{"name":"(anonymous_15)","decl":{"start":{"line":399,"column":2},"end":{"line":399,"column":3}},"loc":{"start":{"line":399,"column":34},"end":{"line":408,"column":3}},"line":399},"16":{"name":"(anonymous_16)","decl":{"start":{"line":409,"column":2},"end":{"line":409,"column":3}},"loc":{"start":{"line":409,"column":19},"end":{"line":439,"column":3}},"line":409},"17":{"name":"(anonymous_17)","decl":{"start":{"line":440,"column":2},"end":{"line":440,"column":3}},"loc":{"start":{"line":440,"column":22},"end":{"line":531,"column":3}},"line":440},"18":{"name":"(anonymous_18)","decl":{"start":{"line":445,"column":41},"end":{"line":445,"column":42}},"loc":{"start":{"line":445,"column":56},"end":{"line":447,"column":7}},"line":445},"19":{"name":"(anonymous_19)","decl":{"start":{"line":446,"column":19},"end":{"line":446,"column":20}},"loc":{"start":{"line":446,"column":25},"end":{"line":446,"column":58}},"line":446},"20":{"name":"(anonymous_20)","decl":{"start":{"line":532,"column":2},"end":{"line":532,"column":3}},"loc":{"start":{"line":532,"column":42},"end":{"line":576,"column":3}},"line":532},"21":{"name":"(anonymous_21)","decl":{"start":{"line":547,"column":6},"end":{"line":547,"column":7}},"loc":{"start":{"line":547,"column":21},"end":{"line":560,"column":7}},"line":547},"22":{"name":"(anonymous_22)","decl":{"start":{"line":577,"column":2},"end":{"line":577,"column":3}},"loc":{"start":{"line":577,"column":21},"end":{"line":583,"column":3}},"line":577},"23":{"name":"(anonymous_23)","decl":{"start":{"line":584,"column":2},"end":{"line":584,"column":3}},"loc":{"start":{"line":584,"column":32},"end":{"line":588,"column":3}},"line":584},"24":{"name":"(anonymous_24)","decl":{"start":{"line":586,"column":6},"end":{"line":586,"column":7}},"loc":{"start":{"line":586,"column":17},"end":{"line":586,"column":76}},"line":586},"25":{"name":"(anonymous_25)","decl":{"start":{"line":589,"column":2},"end":{"line":589,"column":3}},"loc":{"start":{"line":589,"column":34},"end":{"line":593,"column":3}},"line":589},"26":{"name":"(anonymous_26)","decl":{"start":{"line":591,"column":6},"end":{"line":591,"column":7}},"loc":{"start":{"line":591,"column":17},"end":{"line":591,"column":39}},"line":591},"27":{"name":"(anonymous_27)","decl":{"start":{"line":594,"column":2},"end":{"line":594,"column":3}},"loc":{"start":{"line":594,"column":22},"end":{"line":621,"column":3}},"line":594},"28":{"name":"(anonymous_28)","decl":{"start":{"line":622,"column":2},"end":{"line":622,"column":3}},"loc":{"start":{"line":622,"column":22},"end":{"line":650,"column":3}},"line":622},"29":{"name":"(anonymous_29)","decl":{"start":{"line":636,"column":25},"end":{"line":636,"column":26}},"loc":{"start":{"line":636,"column":37},"end":{"line":645,"column":7}},"line":636},"30":{"name":"(anonymous_30)","decl":{"start":{"line":651,"column":2},"end":{"line":651,"column":3}},"loc":{"start":{"line":651,"column":25},"end":{"line":653,"column":3}},"line":651},"31":{"name":"(anonymous_31)","decl":{"start":{"line":654,"column":2},"end":{"line":654,"column":3}},"loc":{"start":{"line":654,"column":35},"end":{"line":673,"column":3}},"line":654},"32":{"name":"(anonymous_32)","decl":{"start":{"line":674,"column":2},"end":{"line":674,"column":3}},"loc":{"start":{"line":674,"column":41},"end":{"line":693,"column":3}},"line":674},"33":{"name":"(anonymous_33)","decl":{"start":{"line":694,"column":2},"end":{"line":694,"column":3}},"loc":{"start":{"line":694,"column":55},"end":{"line":758,"column":3}},"line":694},"34":{"name":"(anonymous_34)","decl":{"start":{"line":746,"column":37},"end":{"line":746,"column":38}},"loc":{"start":{"line":746,"column":47},"end":{"line":750,"column":9}},"line":746},"35":{"name":"(anonymous_35)","decl":{"start":{"line":759,"column":2},"end":{"line":759,"column":3}},"loc":{"start":{"line":759,"column":21},"end":{"line":770,"column":3}},"line":759},"36":{"name":"(anonymous_36)","decl":{"start":{"line":771,"column":2},"end":{"line":771,"column":3}},"loc":{"start":{"line":771,"column":21},"end":{"line":790,"column":3}},"line":771},"37":{"name":"(anonymous_37)","decl":{"start":{"line":791,"column":2},"end":{"line":791,"column":3}},"loc":{"start":{"line":791,"column":28},"end":{"line":793,"column":3}},"line":791},"38":{"name":"(anonymous_38)","decl":{"start":{"line":794,"column":2},"end":{"line":794,"column":3}},"loc":{"start":{"line":794,"column":35},"end":{"line":799,"column":3}},"line":794},"39":{"name":"(anonymous_39)","decl":{"start":{"line":800,"column":2},"end":{"line":800,"column":3}},"loc":{"start":{"line":800,"column":26},"end":{"line":803,"column":3}},"line":800},"40":{"name":"(anonymous_40)","decl":{"start":{"line":804,"column":2},"end":{"line":804,"column":3}},"loc":{"start":{"line":804,"column":37},"end":{"line":809,"column":3}},"line":804},"41":{"name":"(anonymous_41)","decl":{"start":{"line":810,"column":2},"end":{"line":810,"column":3}},"loc":{"start":{"line":810,"column":27},"end":{"line":813,"column":3}},"line":810},"42":{"name":"(anonymous_42)","decl":{"start":{"line":814,"column":2},"end":{"line":814,"column":3}},"loc":{"start":{"line":814,"column":21},"end":{"line":817,"column":3}},"line":814},"43":{"name":"(anonymous_43)","decl":{"start":{"line":818,"column":2},"end":{"line":818,"column":3}},"loc":{"start":{"line":818,"column":25},"end":{"line":826,"column":3}},"line":818},"44":{"name":"(anonymous_44)","decl":{"start":{"line":820,"column":34},"end":{"line":820,"column":35}},"loc":{"start":{"line":820,"column":43},"end":{"line":825,"column":5}},"line":820},"45":{"name":"(anonymous_45)","decl":{"start":{"line":827,"column":2},"end":{"line":827,"column":3}},"loc":{"start":{"line":827,"column":30},"end":{"line":829,"column":3}},"line":827},"46":{"name":"(anonymous_46)","decl":{"start":{"line":830,"column":2},"end":{"line":830,"column":3}},"loc":{"start":{"line":830,"column":25},"end":{"line":832,"column":3}},"line":830},"47":{"name":"(anonymous_47)","decl":{"start":{"line":833,"column":2},"end":{"line":833,"column":3}},"loc":{"start":{"line":833,"column":30},"end":{"line":840,"column":3}},"line":833},"48":{"name":"(anonymous_48)","decl":{"start":{"line":841,"column":2},"end":{"line":841,"column":3}},"loc":{"start":{"line":841,"column":20},"end":{"line":853,"column":3}},"line":841},"49":{"name":"(anonymous_49)","decl":{"start":{"line":854,"column":2},"end":{"line":854,"column":3}},"loc":{"start":{"line":854,"column":29},"end":{"line":860,"column":3}},"line":854},"50":{"name":"(anonymous_50)","decl":{"start":{"line":861,"column":2},"end":{"line":861,"column":3}},"loc":{"start":{"line":861,"column":49},"end":{"line":891,"column":3}},"line":861},"51":{"name":"(anonymous_51)","decl":{"start":{"line":892,"column":2},"end":{"line":892,"column":3}},"loc":{"start":{"line":892,"column":31},"end":{"line":901,"column":3}},"line":892},"52":{"name":"(anonymous_52)","decl":{"start":{"line":902,"column":2},"end":{"line":902,"column":3}},"loc":{"start":{"line":902,"column":28},"end":{"line":924,"column":3}},"line":902},"53":{"name":"(anonymous_53)","decl":{"start":{"line":912,"column":24},"end":{"line":912,"column":25}},"loc":{"start":{"line":912,"column":37},"end":{"line":912,"column":60}},"line":912},"54":{"name":"(anonymous_54)","decl":{"start":{"line":917,"column":34},"end":{"line":917,"column":35}},"loc":{"start":{"line":917,"column":44},"end":{"line":917,"column":59}},"line":917},"55":{"name":"(anonymous_55)","decl":{"start":{"line":925,"column":2},"end":{"line":925,"column":3}},"loc":{"start":{"line":925,"column":27},"end":{"line":945,"column":3}},"line":925},"56":{"name":"(anonymous_56)","decl":{"start":{"line":938,"column":10},"end":{"line":938,"column":11}},"loc":{"start":{"line":938,"column":23},"end":{"line":938,"column":41}},"line":938}},"branchMap":{"0":{"loc":{"start":{"line":35,"column":12},"end":{"line":37,"column":16}},"type":"cond-expr","locations":[{"start":{"line":35,"column":44},"end":{"line":37,"column":7}},{"start":{"line":37,"column":10},"end":{"line":37,"column":16}}],"line":35},"1":{"loc":{"start":{"line":81,"column":6},"end":{"line":86,"column":7}},"type":"if","locations":[{"start":{"line":81,"column":6},"end":{"line":86,"column":7}},{"start":{},"end":{}}],"line":81},"2":{"loc":{"start":{"line":83,"column":22},"end":{"line":83,"column":69}},"type":"cond-expr","locations":[{"start":{"line":83,"column":47},"end":{"line":83,"column":57}},{"start":{"line":83,"column":60},"end":{"line":83,"column":69}}],"line":83},"3":{"loc":{"start":{"line":91,"column":22},"end":{"line":91,"column":76}},"type":"cond-expr","locations":[{"start":{"line":91,"column":47},"end":{"line":91,"column":60}},{"start":{"line":91,"column":63},"end":{"line":91,"column":76}}],"line":91},"4":{"loc":{"start":{"line":114,"column":24},"end":{"line":114,"column":77}},"type":"cond-expr","locations":[{"start":{"line":114,"column":43},"end":{"line":114,"column":72}},{"start":{"line":114,"column":75},"end":{"line":114,"column":77}}],"line":114},"5":{"loc":{"start":{"line":116,"column":6},"end":{"line":126,"column":7}},"type":"if","locations":[{"start":{"line":116,"column":6},"end":{"line":126,"column":7}},{"start":{},"end":{}}],"line":116},"6":{"loc":{"start":{"line":116,"column":10},"end":{"line":116,"column":46}},"type":"binary-expr","locations":[{"start":{"line":116,"column":10},"end":{"line":116,"column":25}},{"start":{"line":116,"column":29},"end":{"line":116,"column":46}}],"line":116},"7":{"loc":{"start":{"line":131,"column":15},"end":{"line":131,"column":33}},"type":"binary-expr","locations":[{"start":{"line":131,"column":15},"end":{"line":131,"column":27}},{"start":{"line":131,"column":31},"end":{"line":131,"column":33}}],"line":131},"8":{"loc":{"start":{"line":132,"column":17},"end":{"line":132,"column":37}},"type":"binary-expr","locations":[{"start":{"line":132,"column":17},"end":{"line":132,"column":31}},{"start":{"line":132,"column":35},"end":{"line":132,"column":37}}],"line":132},"9":{"loc":{"start":{"line":133,"column":18},"end":{"line":133,"column":39}},"type":"binary-expr","locations":[{"start":{"line":133,"column":18},"end":{"line":133,"column":33}},{"start":{"line":133,"column":37},"end":{"line":133,"column":39}}],"line":133},"10":{"loc":{"start":{"line":134,"column":17},"end":{"line":134,"column":68}},"type":"cond-expr","locations":[{"start":{"line":134,"column":49},"end":{"line":134,"column":63}},{"start":{"line":134,"column":66},"end":{"line":134,"column":68}}],"line":134},"11":{"loc":{"start":{"line":135,"column":14},"end":{"line":135,"column":59}},"type":"cond-expr","locations":[{"start":{"line":135,"column":43},"end":{"line":135,"column":54}},{"start":{"line":135,"column":57},"end":{"line":135,"column":59}}],"line":135},"12":{"loc":{"start":{"line":136,"column":16},"end":{"line":136,"column":35}},"type":"binary-expr","locations":[{"start":{"line":136,"column":16},"end":{"line":136,"column":29}},{"start":{"line":136,"column":33},"end":{"line":136,"column":35}}],"line":136},"13":{"loc":{"start":{"line":137,"column":18},"end":{"line":137,"column":39}},"type":"binary-expr","locations":[{"start":{"line":137,"column":18},"end":{"line":137,"column":33}},{"start":{"line":137,"column":37},"end":{"line":137,"column":39}}],"line":137},"14":{"loc":{"start":{"line":138,"column":20},"end":{"line":138,"column":83}},"type":"binary-expr","locations":[{"start":{"line":138,"column":20},"end":{"line":138,"column":37}},{"start":{"line":138,"column":41},"end":{"line":138,"column":83}}],"line":138},"15":{"loc":{"start":{"line":139,"column":20},"end":{"line":139,"column":83}},"type":"binary-expr","locations":[{"start":{"line":139,"column":20},"end":{"line":139,"column":37}},{"start":{"line":139,"column":41},"end":{"line":139,"column":83}}],"line":139},"16":{"loc":{"start":{"line":140,"column":27},"end":{"line":140,"column":64}},"type":"binary-expr","locations":[{"start":{"line":140,"column":27},"end":{"line":140,"column":51}},{"start":{"line":140,"column":55},"end":{"line":140,"column":64}}],"line":140},"17":{"loc":{"start":{"line":155,"column":6},"end":{"line":162,"column":7}},"type":"if","locations":[{"start":{"line":155,"column":6},"end":{"line":162,"column":7}},{"start":{},"end":{}}],"line":155},"18":{"loc":{"start":{"line":159,"column":17},"end":{"line":159,"column":71}},"type":"cond-expr","locations":[{"start":{"line":159,"column":42},"end":{"line":159,"column":55}},{"start":{"line":159,"column":58},"end":{"line":159,"column":71}}],"line":159},"19":{"loc":{"start":{"line":166,"column":19},"end":{"line":166,"column":69}},"type":"cond-expr","locations":[{"start":{"line":166,"column":44},"end":{"line":166,"column":54}},{"start":{"line":166,"column":57},"end":{"line":166,"column":69}}],"line":166},"20":{"loc":{"start":{"line":167,"column":22},"end":{"line":167,"column":76}},"type":"cond-expr","locations":[{"start":{"line":167,"column":47},"end":{"line":167,"column":60}},{"start":{"line":167,"column":63},"end":{"line":167,"column":76}}],"line":167},"21":{"loc":{"start":{"line":193,"column":19},"end":{"line":193,"column":69}},"type":"cond-expr","locations":[{"start":{"line":193,"column":44},"end":{"line":193,"column":54}},{"start":{"line":193,"column":57},"end":{"line":193,"column":69}}],"line":193},"22":{"loc":{"start":{"line":194,"column":22},"end":{"line":194,"column":76}},"type":"cond-expr","locations":[{"start":{"line":194,"column":47},"end":{"line":194,"column":60}},{"start":{"line":194,"column":63},"end":{"line":194,"column":76}}],"line":194},"23":{"loc":{"start":{"line":207,"column":6},"end":{"line":212,"column":7}},"type":"if","locations":[{"start":{"line":207,"column":6},"end":{"line":212,"column":7}},{"start":{},"end":{}}],"line":207},"24":{"loc":{"start":{"line":209,"column":22},"end":{"line":209,"column":69}},"type":"cond-expr","locations":[{"start":{"line":209,"column":47},"end":{"line":209,"column":57}},{"start":{"line":209,"column":60},"end":{"line":209,"column":69}}],"line":209},"25":{"loc":{"start":{"line":222,"column":19},"end":{"line":222,"column":49}},"type":"binary-expr","locations":[{"start":{"line":222,"column":19},"end":{"line":222,"column":33}},{"start":{"line":222,"column":37},"end":{"line":222,"column":49}}],"line":222},"26":{"loc":{"start":{"line":223,"column":18},"end":{"line":223,"column":46}},"type":"binary-expr","locations":[{"start":{"line":223,"column":18},"end":{"line":223,"column":31}},{"start":{"line":223,"column":35},"end":{"line":223,"column":46}}],"line":223},"27":{"loc":{"start":{"line":224,"column":18},"end":{"line":224,"column":46}},"type":"binary-expr","locations":[{"start":{"line":224,"column":18},"end":{"line":224,"column":31}},{"start":{"line":224,"column":35},"end":{"line":224,"column":46}}],"line":224},"28":{"loc":{"start":{"line":225,"column":18},"end":{"line":225,"column":46}},"type":"binary-expr","locations":[{"start":{"line":225,"column":18},"end":{"line":225,"column":31}},{"start":{"line":225,"column":35},"end":{"line":225,"column":46}}],"line":225},"29":{"loc":{"start":{"line":226,"column":26},"end":{"line":226,"column":70}},"type":"binary-expr","locations":[{"start":{"line":226,"column":26},"end":{"line":226,"column":47}},{"start":{"line":226,"column":51},"end":{"line":226,"column":70}}],"line":226},"30":{"loc":{"start":{"line":239,"column":4},"end":{"line":241,"column":5}},"type":"if","locations":[{"start":{"line":239,"column":4},"end":{"line":241,"column":5}},{"start":{},"end":{}}],"line":239},"31":{"loc":{"start":{"line":250,"column":6},"end":{"line":252,"column":7}},"type":"if","locations":[{"start":{"line":250,"column":6},"end":{"line":252,"column":7}},{"start":{},"end":{}}],"line":250},"32":{"loc":{"start":{"line":254,"column":6},"end":{"line":259,"column":7}},"type":"if","locations":[{"start":{"line":254,"column":6},"end":{"line":259,"column":7}},{"start":{},"end":{}}],"line":254},"33":{"loc":{"start":{"line":256,"column":22},"end":{"line":256,"column":69}},"type":"cond-expr","locations":[{"start":{"line":256,"column":47},"end":{"line":256,"column":57}},{"start":{"line":256,"column":60},"end":{"line":256,"column":69}}],"line":256},"34":{"loc":{"start":{"line":314,"column":17},"end":{"line":314,"column":73}},"type":"cond-expr","locations":[{"start":{"line":314,"column":42},"end":{"line":314,"column":55}},{"start":{"line":314,"column":58},"end":{"line":314,"column":73}}],"line":314},"35":{"loc":{"start":{"line":352,"column":6},"end":{"line":359,"column":7}},"type":"if","locations":[{"start":{"line":352,"column":6},"end":{"line":359,"column":7}},{"start":{},"end":{}}],"line":352},"36":{"loc":{"start":{"line":352,"column":10},"end":{"line":352,"column":78}},"type":"binary-expr","locations":[{"start":{"line":352,"column":10},"end":{"line":352,"column":18}},{"start":{"line":352,"column":22},"end":{"line":352,"column":50}},{"start":{"line":352,"column":54},"end":{"line":352,"column":78}}],"line":352},"37":{"loc":{"start":{"line":371,"column":6},"end":{"line":374,"column":7}},"type":"if","locations":[{"start":{"line":371,"column":6},"end":{"line":374,"column":7}},{"start":{},"end":{}}],"line":371},"38":{"loc":{"start":{"line":377,"column":14},"end":{"line":377,"column":37}},"type":"binary-expr","locations":[{"start":{"line":377,"column":14},"end":{"line":377,"column":26}},{"start":{"line":377,"column":30},"end":{"line":377,"column":37}}],"line":377},"39":{"loc":{"start":{"line":390,"column":6},"end":{"line":392,"column":7}},"type":"if","locations":[{"start":{"line":390,"column":6},"end":{"line":392,"column":7}},{"start":{},"end":{}}],"line":390},"40":{"loc":{"start":{"line":417,"column":34},"end":{"line":417,"column":53}},"type":"binary-expr","locations":[{"start":{"line":417,"column":34},"end":{"line":417,"column":47}},{"start":{"line":417,"column":51},"end":{"line":417,"column":53}}],"line":417},"41":{"loc":{"start":{"line":418,"column":24},"end":{"line":418,"column":59}},"type":"binary-expr","locations":[{"start":{"line":418,"column":24},"end":{"line":418,"column":54}},{"start":{"line":418,"column":58},"end":{"line":418,"column":59}}],"line":418},"42":{"loc":{"start":{"line":419,"column":24},"end":{"line":419,"column":68}},"type":"binary-expr","locations":[{"start":{"line":419,"column":24},"end":{"line":419,"column":63}},{"start":{"line":419,"column":67},"end":{"line":419,"column":68}}],"line":419},"43":{"loc":{"start":{"line":421,"column":6},"end":{"line":423,"column":7}},"type":"if","locations":[{"start":{"line":421,"column":6},"end":{"line":423,"column":7}},{"start":{},"end":{}}],"line":421},"44":{"loc":{"start":{"line":421,"column":10},"end":{"line":421,"column":79}},"type":"binary-expr","locations":[{"start":{"line":421,"column":10},"end":{"line":421,"column":24}},{"start":{"line":421,"column":28},"end":{"line":421,"column":79}}],"line":421},"45":{"loc":{"start":{"line":461,"column":18},"end":{"line":461,"column":44}},"type":"binary-expr","locations":[{"start":{"line":461,"column":18},"end":{"line":461,"column":31}},{"start":{"line":461,"column":35},"end":{"line":461,"column":44}}],"line":461},"46":{"loc":{"start":{"line":462,"column":16},"end":{"line":462,"column":48}},"type":"binary-expr","locations":[{"start":{"line":462,"column":16},"end":{"line":462,"column":35}},{"start":{"line":462,"column":39},"end":{"line":462,"column":48}}],"line":462},"47":{"loc":{"start":{"line":463,"column":17},"end":{"line":463,"column":44}},"type":"binary-expr","locations":[{"start":{"line":463,"column":17},"end":{"line":463,"column":39}},{"start":{"line":463,"column":43},"end":{"line":463,"column":44}}],"line":463},"48":{"loc":{"start":{"line":464,"column":21},"end":{"line":464,"column":53}},"type":"binary-expr","locations":[{"start":{"line":464,"column":21},"end":{"line":464,"column":48}},{"start":{"line":464,"column":52},"end":{"line":464,"column":53}}],"line":464},"49":{"loc":{"start":{"line":465,"column":31},"end":{"line":465,"column":64}},"type":"binary-expr","locations":[{"start":{"line":465,"column":31},"end":{"line":465,"column":59}},{"start":{"line":465,"column":63},"end":{"line":465,"column":64}}],"line":465},"50":{"loc":{"start":{"line":466,"column":24},"end":{"line":466,"column":49}},"type":"binary-expr","locations":[{"start":{"line":466,"column":24},"end":{"line":466,"column":44}},{"start":{"line":466,"column":48},"end":{"line":466,"column":49}}],"line":466},"51":{"loc":{"start":{"line":467,"column":28},"end":{"line":467,"column":57}},"type":"binary-expr","locations":[{"start":{"line":467,"column":28},"end":{"line":467,"column":52}},{"start":{"line":467,"column":56},"end":{"line":467,"column":57}}],"line":467},"52":{"loc":{"start":{"line":468,"column":30},"end":{"line":468,"column":61}},"type":"binary-expr","locations":[{"start":{"line":468,"column":30},"end":{"line":468,"column":56}},{"start":{"line":468,"column":60},"end":{"line":468,"column":61}}],"line":468},"53":{"loc":{"start":{"line":469,"column":28},"end":{"line":469,"column":57}},"type":"binary-expr","locations":[{"start":{"line":469,"column":28},"end":{"line":469,"column":52}},{"start":{"line":469,"column":56},"end":{"line":469,"column":57}}],"line":469},"54":{"loc":{"start":{"line":470,"column":24},"end":{"line":470,"column":59}},"type":"binary-expr","locations":[{"start":{"line":470,"column":24},"end":{"line":470,"column":54}},{"start":{"line":470,"column":58},"end":{"line":470,"column":59}}],"line":470},"55":{"loc":{"start":{"line":471,"column":30},"end":{"line":471,"column":74}},"type":"binary-expr","locations":[{"start":{"line":471,"column":30},"end":{"line":471,"column":69}},{"start":{"line":471,"column":73},"end":{"line":471,"column":74}}],"line":471},"56":{"loc":{"start":{"line":474,"column":29},"end":{"line":474,"column":55}},"type":"binary-expr","locations":[{"start":{"line":474,"column":29},"end":{"line":474,"column":49}},{"start":{"line":474,"column":53},"end":{"line":474,"column":55}}],"line":474},"57":{"loc":{"start":{"line":478,"column":12},"end":{"line":478,"column":63}},"type":"binary-expr","locations":[{"start":{"line":478,"column":12},"end":{"line":478,"column":58}},{"start":{"line":478,"column":62},"end":{"line":478,"column":63}}],"line":478},"58":{"loc":{"start":{"line":480,"column":25},"end":{"line":480,"column":67}},"type":"binary-expr","locations":[{"start":{"line":480,"column":25},"end":{"line":480,"column":62}},{"start":{"line":480,"column":66},"end":{"line":480,"column":67}}],"line":480},"59":{"loc":{"start":{"line":491,"column":18},"end":{"line":491,"column":77}},"type":"cond-expr","locations":[{"start":{"line":491,"column":43},"end":{"line":491,"column":48}},{"start":{"line":491,"column":51},"end":{"line":491,"column":77}}],"line":491},"60":{"loc":{"start":{"line":533,"column":18},"end":{"line":533,"column":40}},"type":"binary-expr","locations":[{"start":{"line":533,"column":18},"end":{"line":533,"column":34}},{"start":{"line":533,"column":38},"end":{"line":533,"column":40}}],"line":533},"61":{"loc":{"start":{"line":535,"column":4},"end":{"line":545,"column":5}},"type":"if","locations":[{"start":{"line":535,"column":4},"end":{"line":545,"column":5}},{"start":{},"end":{}}],"line":535},"62":{"loc":{"start":{"line":548,"column":27},"end":{"line":548,"column":49}},"type":"binary-expr","locations":[{"start":{"line":548,"column":27},"end":{"line":548,"column":43}},{"start":{"line":548,"column":47},"end":{"line":548,"column":49}}],"line":548},"63":{"loc":{"start":{"line":549,"column":19},"end":{"line":549,"column":32}},"type":"binary-expr","locations":[{"start":{"line":549,"column":19},"end":{"line":549,"column":26}},{"start":{"line":549,"column":30},"end":{"line":549,"column":32}}],"line":549},"64":{"loc":{"start":{"line":550,"column":20},"end":{"line":550,"column":34}},"type":"binary-expr","locations":[{"start":{"line":550,"column":20},"end":{"line":550,"column":28}},{"start":{"line":550,"column":32},"end":{"line":550,"column":34}}],"line":550},"65":{"loc":{"start":{"line":552,"column":44},"end":{"line":552,"column":74}},"type":"binary-expr","locations":[{"start":{"line":552,"column":44},"end":{"line":552,"column":69}},{"start":{"line":552,"column":73},"end":{"line":552,"column":74}}],"line":552},"66":{"loc":{"start":{"line":553,"column":50},"end":{"line":553,"column":79}},"type":"binary-expr","locations":[{"start":{"line":553,"column":50},"end":{"line":553,"column":74}},{"start":{"line":553,"column":78},"end":{"line":553,"column":79}}],"line":553},"67":{"loc":{"start":{"line":554,"column":40},"end":{"line":554,"column":73}},"type":"binary-expr","locations":[{"start":{"line":554,"column":40},"end":{"line":554,"column":68}},{"start":{"line":554,"column":72},"end":{"line":554,"column":73}}],"line":554},"68":{"loc":{"start":{"line":555,"column":44},"end":{"line":555,"column":76}},"type":"binary-expr","locations":[{"start":{"line":555,"column":44},"end":{"line":555,"column":71}},{"start":{"line":555,"column":75},"end":{"line":555,"column":76}}],"line":555},"69":{"loc":{"start":{"line":556,"column":36},"end":{"line":556,"column":56}},"type":"binary-expr","locations":[{"start":{"line":556,"column":36},"end":{"line":556,"column":51}},{"start":{"line":556,"column":55},"end":{"line":556,"column":56}}],"line":556},"70":{"loc":{"start":{"line":557,"column":42},"end":{"line":557,"column":74}},"type":"binary-expr","locations":[{"start":{"line":557,"column":42},"end":{"line":557,"column":69}},{"start":{"line":557,"column":73},"end":{"line":557,"column":74}}],"line":557},"71":{"loc":{"start":{"line":558,"column":38},"end":{"line":558,"column":74}},"type":"binary-expr","locations":[{"start":{"line":558,"column":38},"end":{"line":558,"column":69}},{"start":{"line":558,"column":73},"end":{"line":558,"column":74}}],"line":558},"72":{"loc":{"start":{"line":578,"column":4},"end":{"line":578,"column":33}},"type":"if","locations":[{"start":{"line":578,"column":4},"end":{"line":578,"column":33}},{"start":{},"end":{}}],"line":578},"73":{"loc":{"start":{"line":586,"column":17},"end":{"line":586,"column":76}},"type":"binary-expr","locations":[{"start":{"line":586,"column":17},"end":{"line":586,"column":30}},{"start":{"line":586,"column":34},"end":{"line":586,"column":76}}],"line":586},"74":{"loc":{"start":{"line":612,"column":18},"end":{"line":612,"column":77}},"type":"cond-expr","locations":[{"start":{"line":612,"column":43},"end":{"line":612,"column":48}},{"start":{"line":612,"column":51},"end":{"line":612,"column":77}}],"line":612},"75":{"loc":{"start":{"line":627,"column":6},"end":{"line":630,"column":7}},"type":"if","locations":[{"start":{"line":627,"column":6},"end":{"line":630,"column":7}},{"start":{},"end":{}}],"line":627},"76":{"loc":{"start":{"line":632,"column":6},"end":{"line":635,"column":7}},"type":"if","locations":[{"start":{"line":632,"column":6},"end":{"line":635,"column":7}},{"start":{},"end":{}}],"line":632},"77":{"loc":{"start":{"line":638,"column":16},"end":{"line":638,"column":41}},"type":"binary-expr","locations":[{"start":{"line":638,"column":16},"end":{"line":638,"column":28}},{"start":{"line":638,"column":32},"end":{"line":638,"column":41}}],"line":638},"78":{"loc":{"start":{"line":639,"column":16},"end":{"line":639,"column":41}},"type":"binary-expr","locations":[{"start":{"line":639,"column":16},"end":{"line":639,"column":28}},{"start":{"line":639,"column":32},"end":{"line":639,"column":41}}],"line":639},"79":{"loc":{"start":{"line":640,"column":19},"end":{"line":640,"column":57}},"type":"binary-expr","locations":[{"start":{"line":640,"column":19},"end":{"line":640,"column":52}},{"start":{"line":640,"column":56},"end":{"line":640,"column":57}}],"line":640},"80":{"loc":{"start":{"line":641,"column":21},"end":{"line":641,"column":61}},"type":"binary-expr","locations":[{"start":{"line":641,"column":21},"end":{"line":641,"column":56}},{"start":{"line":641,"column":60},"end":{"line":641,"column":61}}],"line":641},"81":{"loc":{"start":{"line":642,"column":36},"end":{"line":642,"column":74}},"type":"binary-expr","locations":[{"start":{"line":642,"column":36},"end":{"line":642,"column":69}},{"start":{"line":642,"column":73},"end":{"line":642,"column":74}}],"line":642},"82":{"loc":{"start":{"line":643,"column":23},"end":{"line":643,"column":51}},"type":"binary-expr","locations":[{"start":{"line":643,"column":23},"end":{"line":643,"column":46}},{"start":{"line":643,"column":50},"end":{"line":643,"column":51}}],"line":643},"83":{"loc":{"start":{"line":644,"column":23},"end":{"line":644,"column":51}},"type":"binary-expr","locations":[{"start":{"line":644,"column":23},"end":{"line":644,"column":46}},{"start":{"line":644,"column":50},"end":{"line":644,"column":51}}],"line":644},"84":{"loc":{"start":{"line":652,"column":11},"end":{"line":652,"column":172}},"type":"binary-expr","locations":[{"start":{"line":652,"column":11},"end":{"line":652,"column":33}},{"start":{"line":652,"column":37},"end":{"line":652,"column":52}},{"start":{"line":652,"column":56},"end":{"line":652,"column":86}},{"start":{"line":652,"column":90},"end":{"line":652,"column":109}},{"start":{"line":652,"column":113},"end":{"line":652,"column":139}},{"start":{"line":652,"column":143},"end":{"line":652,"column":172}}],"line":652},"85":{"loc":{"start":{"line":665,"column":6},"end":{"line":667,"column":7}},"type":"if","locations":[{"start":{"line":665,"column":6},"end":{"line":667,"column":7}},{"start":{},"end":{}}],"line":665},"86":{"loc":{"start":{"line":665,"column":10},"end":{"line":665,"column":55}},"type":"binary-expr","locations":[{"start":{"line":665,"column":10},"end":{"line":665,"column":25}},{"start":{"line":665,"column":29},"end":{"line":665,"column":55}}],"line":665},"87":{"loc":{"start":{"line":694,"column":41},"end":{"line":694,"column":53}},"type":"default-arg","locations":[{"start":{"line":694,"column":51},"end":{"line":694,"column":53}}],"line":694},"88":{"loc":{"start":{"line":696,"column":6},"end":{"line":696,"column":15}},"type":"default-arg","locations":[{"start":{"line":696,"column":13},"end":{"line":696,"column":15}}],"line":696},"89":{"loc":{"start":{"line":697,"column":6},"end":{"line":697,"column":20}},"type":"default-arg","locations":[{"start":{"line":697,"column":17},"end":{"line":697,"column":20}}],"line":697},"90":{"loc":{"start":{"line":699,"column":6},"end":{"line":699,"column":35}},"type":"default-arg","locations":[{"start":{"line":699,"column":15},"end":{"line":699,"column":35}}],"line":699},"91":{"loc":{"start":{"line":700,"column":6},"end":{"line":700,"column":21}},"type":"default-arg","locations":[{"start":{"line":700,"column":17},"end":{"line":700,"column":21}}],"line":700},"92":{"loc":{"start":{"line":701,"column":6},"end":{"line":701,"column":24}},"type":"default-arg","locations":[{"start":{"line":701,"column":18},"end":{"line":701,"column":24}}],"line":701},"93":{"loc":{"start":{"line":709,"column":17},"end":{"line":718,"column":20}},"type":"cond-expr","locations":[{"start":{"line":709,"column":29},"end":{"line":718,"column":15}},{"start":{"line":718,"column":18},"end":{"line":718,"column":20}}],"line":709},"94":{"loc":{"start":{"line":747,"column":15},"end":{"line":747,"column":28}},"type":"binary-expr","locations":[{"start":{"line":747,"column":15},"end":{"line":747,"column":22}},{"start":{"line":747,"column":26},"end":{"line":747,"column":28}}],"line":747},"95":{"loc":{"start":{"line":748,"column":18},"end":{"line":748,"column":33}},"type":"binary-expr","locations":[{"start":{"line":748,"column":18},"end":{"line":748,"column":28}},{"start":{"line":748,"column":32},"end":{"line":748,"column":33}}],"line":748},"96":{"loc":{"start":{"line":751,"column":15},"end":{"line":751,"column":110}},"type":"cond-expr","locations":[{"start":{"line":751,"column":57},"end":{"line":751,"column":76}},{"start":{"line":751,"column":79},"end":{"line":751,"column":110}}],"line":751},"97":{"loc":{"start":{"line":751,"column":79},"end":{"line":751,"column":110}},"type":"binary-expr","locations":[{"start":{"line":751,"column":79},"end":{"line":751,"column":105}},{"start":{"line":751,"column":109},"end":{"line":751,"column":110}}],"line":751},"98":{"loc":{"start":{"line":752,"column":14},"end":{"line":752,"column":32}},"type":"binary-expr","locations":[{"start":{"line":752,"column":14},"end":{"line":752,"column":27}},{"start":{"line":752,"column":31},"end":{"line":752,"column":32}}],"line":752},"99":{"loc":{"start":{"line":764,"column":18},"end":{"line":764,"column":77}},"type":"cond-expr","locations":[{"start":{"line":764,"column":43},"end":{"line":764,"column":48}},{"start":{"line":764,"column":51},"end":{"line":764,"column":77}}],"line":764},"100":{"loc":{"start":{"line":774,"column":6},"end":{"line":776,"column":7}},"type":"if","locations":[{"start":{"line":774,"column":6},"end":{"line":776,"column":7}},{"start":{},"end":{}}],"line":774},"101":{"loc":{"start":{"line":782,"column":18},"end":{"line":782,"column":77}},"type":"cond-expr","locations":[{"start":{"line":782,"column":43},"end":{"line":782,"column":48}},{"start":{"line":782,"column":51},"end":{"line":782,"column":77}}],"line":782},"102":{"loc":{"start":{"line":821,"column":6},"end":{"line":823,"column":7}},"type":"if","locations":[{"start":{"line":821,"column":6},"end":{"line":823,"column":7}},{"start":{},"end":{}}],"line":821},"103":{"loc":{"start":{"line":845,"column":6},"end":{"line":850,"column":7}},"type":"if","locations":[{"start":{"line":845,"column":6},"end":{"line":850,"column":7}},{"start":{},"end":{}}],"line":845},"104":{"loc":{"start":{"line":846,"column":8},"end":{"line":848,"column":9}},"type":"if","locations":[{"start":{"line":846,"column":8},"end":{"line":848,"column":9}},{"start":{},"end":{}}],"line":846},"105":{"loc":{"start":{"line":872,"column":12},"end":{"line":872,"column":75}},"type":"cond-expr","locations":[{"start":{"line":872,"column":28},"end":{"line":872,"column":53}},{"start":{"line":872,"column":56},"end":{"line":872,"column":75}}],"line":872},"106":{"loc":{"start":{"line":880,"column":20},"end":{"line":880,"column":52}},"type":"cond-expr","locations":[{"start":{"line":880,"column":36},"end":{"line":880,"column":44}},{"start":{"line":880,"column":47},"end":{"line":880,"column":52}}],"line":880},"107":{"loc":{"start":{"line":896,"column":6},"end":{"line":898,"column":7}},"type":"if","locations":[{"start":{"line":896,"column":6},"end":{"line":898,"column":7}},{"start":{},"end":{}}],"line":896},"108":{"loc":{"start":{"line":912,"column":6},"end":{"line":915,"column":7}},"type":"if","locations":[{"start":{"line":912,"column":6},"end":{"line":915,"column":7}},{"start":{},"end":{}}],"line":912},"109":{"loc":{"start":{"line":918,"column":20},"end":{"line":918,"column":72}},"type":"cond-expr","locations":[{"start":{"line":918,"column":51},"end":{"line":918,"column":63}},{"start":{"line":918,"column":66},"end":{"line":918,"column":72}}],"line":918},"110":{"loc":{"start":{"line":936,"column":6},"end":{"line":940,"column":7}},"type":"if","locations":[{"start":{"line":936,"column":6},"end":{"line":940,"column":7}},{"start":{},"end":{}}],"line":936}},"s":{"0":1,"1":12,"2":12,"3":2,"4":2,"5":0,"6":0,"7":12,"8":12,"9":12,"10":12,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":2,"47":2,"48":2,"49":2,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":3,"73":3,"74":3,"75":3,"76":3,"77":3,"78":3,"79":0,"80":0,"81":0,"82":0,"83":2,"84":2,"85":2,"86":2,"87":0,"88":0,"89":2,"90":2,"91":2,"92":1,"93":1,"94":1,"95":1,"96":1,"97":1,"98":0,"99":1,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":3,"117":3,"118":3,"119":3,"120":3,"121":3,"122":0,"123":3,"124":2,"125":2,"126":2,"127":1,"128":1,"129":1,"130":1,"131":2,"132":2,"133":2,"134":0,"135":2,"136":2,"137":2,"138":2,"139":2,"140":2,"141":6,"142":0,"143":6,"144":6,"145":6,"146":6,"147":2,"148":0,"149":2,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":0,"224":0,"225":3,"226":0,"227":0,"228":0,"229":0,"230":0,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":0,"238":0,"239":0,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0},"f":{"0":12,"1":2,"2":0,"3":0,"4":0,"5":0,"6":2,"7":2,"8":0,"9":0,"10":0,"11":0,"12":3,"13":2,"14":1,"15":0,"16":0,"17":3,"18":3,"19":0,"20":2,"21":2,"22":6,"23":2,"24":0,"25":2,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":3,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0},"b":{"0":[0,12],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[2,2],"26":[2,2],"27":[2,2],"28":[2,2],"29":[2,2],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[3,0],"36":[3,3,3],"37":[0,2],"38":[2,0],"39":[0,1],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[2,0],"46":[2,0],"47":[2,0],"48":[2,0],"49":[2,0],"50":[2,0],"51":[2,0],"52":[2,0],"53":[2,0],"54":[2,0],"55":[2,0],"56":[2,0],"57":[2,0],"58":[2,0],"59":[1,0],"60":[2,0],"61":[0,2],"62":[2,0],"63":[2,0],"64":[2,0],"65":[2,0],"66":[2,0],"67":[2,0],"68":[2,0],"69":[2,0],"70":[2,0],"71":[2,0],"72":[0,6],"73":[0,0],"74":[0,0],"75":[0,0],"76":[0,0],"77":[0,0],"78":[0,0],"79":[0,0],"80":[0,0],"81":[0,0],"82":[0,0],"83":[0,0],"84":[0,0,0,0,0,0],"85":[0,0],"86":[0,0],"87":[0],"88":[0],"89":[0],"90":[0],"91":[0],"92":[0],"93":[0,0],"94":[0,0],"95":[0,0],"96":[0,0],"97":[0,0],"98":[0,0],"99":[0,0],"100":[0,0],"101":[0,0],"102":[0,0],"103":[0,0],"104":[0,0],"105":[0,0],"106":[0,0],"107":[0,0],"108":[0,0],"109":[0,0],"110":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/elasticsearch/services.ts"],"sourcesContent":["import { BaseService, BaseServiceConfig } from \"@/lib/cortex/core/services\";\nimport { CustomError } from \"@/lib/cortex/utils/errors\";\nimport type { Logger } from \"@/lib/shared/types\";\nimport { Client, estypes } from \"@elastic/elasticsearch\";\nimport {\n  ElasticsearchResponse,\n  transformSearchResponse,\n  type BaseDocument,\n  type ProcessedDocumentMetadata,\n  type SearchParams,\n  type SearchRequestBody,\n} from \"./types\";\n\ninterface WeightDocument {\n  weights: {\n    title: number;\n    content: number;\n    description: number;\n  };\n  updatedAt?: string;\n}\n\nconst ES_TIMEOUT = 15000; // 15 seconds timeout\n\n/**\n * üìä Metrics Service Interface: Our Performance Tracker!\n *\n * Helps us keep track of what's happening and when things go wrong.\n * Like having a fitness tracker for our search system! üí™\n *\n * @interface MetricsService\n */\nexport interface MetricsService {\n  incrementIndexError?: (params: { error_type: string; index: string }) => void;\n  incrementUpdateError?: (params: {\n    error_type: string;\n    index: string;\n  }) => void;\n  incrementDeleteError?: (params: {\n    error_type: string;\n    index: string;\n  }) => void;\n  incrementSearchError?: (params: {\n    error_type: string;\n    index: string;\n    search_type: string;\n  }) => void;\n  incrementBulkError?: (params: { error_type: string; index: string }) => void;\n}\n\n/**\n * ‚öôÔ∏è Elasticsearch Configuration\n *\n * The essential settings needed to connect to Elasticsearch.\n * Like having the right key and address to enter a building! üîë\n *\n * @interface ElasticsearchConfig\n * @property {string} node - Where to find Elasticsearch\n * @property {Object} auth - Security credentials\n */\nexport interface ElasticsearchConfig {\n  node: string;\n  auth?: {\n    apiKey: string;\n  };\n}\n\n/**\n * üîç Search Options: Your Search Control Panel\n *\n * All the ways you can customize your search.\n * Like having knobs and buttons to fine-tune your results! üéõÔ∏è\n *\n * @interface SearchOptions\n * @property {string} index - Where to search\n * @property {Object} query - What to look for\n * @property {number} [size] - How many results to return\n * @property {number} [from] - Where to start from (for pagination)\n */\nexport interface SearchOptions {\n  index: string;\n  query: Record<string, unknown>;\n  size?: number;\n  from?: number;\n  sort?: Array<Record<string, \"asc\" | \"desc\">>;\n  facets?: {\n    fields: string[];\n    size?: number;\n  };\n  aggregations?: Record<string, estypes.AggregationsAggregationContainer>;\n}\n\n/**\n * üîç Search Response: What We Get Back\n *\n * The format of results from our searches.\n * Like getting an organized report of findings! üìã\n *\n * @interface SearchResponse\n * @template T - The type of document we're working with\n */\nexport interface SearchResponse<T> {\n  hits: {\n    total: {\n      value: number;\n      relation: string;\n    };\n    hits: Array<{\n      _source: T;\n      _score: number;\n      _id: string;\n    }>;\n  };\n  took?: number;\n  aggregations?: Record<string, unknown>;\n}\n\nexport interface ElasticsearchStats {\n  indices: number;\n  documents: number;\n  size: string;\n  health: \"green\" | \"yellow\" | \"red\";\n}\n\nexport interface ElasticsearchHealth {\n  operational: boolean;\n  latency: number;\n  errors: string[];\n  metrics: {\n    cluster: {\n      status: string;\n      name: string;\n      nodes: number;\n      dataNodes: number;\n      activePrimaryShards: number;\n      activeShards: number;\n      relocatingShards: number;\n      initializingShards: number;\n      unassignedShards: number;\n      pendingTasks: number;\n      maxTaskWaitTime?: string;\n    };\n    indices: {\n      total: number;\n      healthy: number;\n      unhealthy: number;\n      size: string;\n      documentCount: number;\n    };\n    performance: {\n      queryLatency: number;\n      indexingLatency: number;\n      searchRate: number;\n      indexingRate: number;\n      cpuUsage?: number;\n      memoryUsage?: string;\n      diskUsage?: string;\n    };\n  };\n}\n\nexport interface BulkResponse {\n  errors: boolean;\n  items: Array<{\n    index?: {\n      _index: string;\n      _id: string;\n      status: number;\n      error?: {\n        type: string;\n        reason: string;\n      };\n    };\n  }>;\n}\n\ninterface IndicesStatsResponse {\n  body: {\n    _all: {\n      total: {\n        docs: {\n          count: number;\n        };\n        store: {\n          size_in_bytes: number;\n        };\n      };\n    };\n    indices: Record<string, unknown>;\n  };\n}\n\ninterface CatIndicesResponse {\n  index: string;\n  health: string;\n  status: string;\n  \"docs.count\": string;\n  \"docs.deleted\": string;\n  \"store.size\": string;\n  primaryShards: string;\n  replicaShards: string;\n  [key: string]: string;\n}\n\ninterface CatIndicesApiResponse {\n  body: CatIndicesResponse[];\n}\n\ninterface CreateIndexOptions {\n  body: {\n    settings?: {\n      number_of_shards?: number;\n      number_of_replicas?: number;\n      analysis?: {\n        analyzer?: {\n          [key: string]: {\n            type: string;\n            stopwords?: string;\n          };\n        };\n      };\n    };\n    mappings?: {\n      dynamic?: boolean | \"strict\" | \"runtime\";\n      properties?: Record<string, unknown>;\n    };\n  };\n}\n\nexport interface VectorSearchOptions {\n  size?: number;\n  minScore?: number;\n  textQuery?: string;\n  fields?: string[];\n  operator?: \"AND\" | \"OR\";\n  fuzziness?: \"AUTO\" | \"0\" | \"1\" | \"2\";\n}\n\nexport interface ElasticsearchServiceConfig extends BaseServiceConfig {\n  metrics?: MetricsService;\n  logger: Logger;\n  config: {\n    node: string;\n    auth?: {\n      apiKey: string;\n    };\n    ssl?: {\n      rejectUnauthorized: boolean;\n    };\n    maxRetries?: number;\n    requestTimeout?: number;\n    sniffOnStart?: boolean;\n  };\n}\n\n/**\n * üîç Elasticsearch Service: Your Search Power Tool!\n *\n * This service is like a super-smart librarian that can:\n * - üìö Store and organize documents\n * - üîç Find exactly what you need\n * - üìä Keep track of everything\n * - üöÄ Handle lots of requests efficiently\n *\n * Features:\n * - ‚ö° Smart request queuing\n * - üìù Detailed logging\n * - üìä Performance tracking\n * - üîí Secure connections\n *\n * @class ElasticsearchService\n */\nexport class ElasticsearchService extends BaseService {\n  protected readonly client: Client;\n  protected readonly logger: Logger;\n  protected readonly metrics?: MetricsService;\n  public readonly requestQueue = {\n    add: async <T>(fn: () => Promise<T>): Promise<T> => {\n      try {\n        return await fn();\n      } catch (error) {\n        this.logger.error(\"Request queue error\", { error });\n        throw error;\n      }\n    },\n  };\n\n  /**\n   * üéí Sets Up Your Search Service\n   *\n   * Gets everything ready to handle your search needs.\n   * Like preparing a librarian with all their tools! üìö\n   *\n   * @param {ElasticsearchConfig} config - Connection settings\n   * @param {Logger} logger - Our note-taker\n   * @param {MetricsService} [metrics] - Our performance tracker\n   */\n  constructor(\n    config: ElasticsearchServiceConfig & {\n      environment: \"development\" | \"production\" | \"test\";\n    }\n  ) {\n    super({ ...config, logger: config.logger });\n\n    this.logger = config.logger;\n    this.metrics = config.metrics;\n\n    const elasticConfig = {\n      node: process.env.ELASTICSEARCH_URL,\n      auth: process.env.SOPHRA_ES_API_KEY\n        ? {\n            apiKey: process.env.SOPHRA_ES_API_KEY as string,\n          }\n        : undefined,\n      ssl: {\n        rejectUnauthorized: false,\n      },\n      maxRetries: 3,\n      requestTimeout: 30000,\n      sniffOnStart: false,\n    } as const;\n\n    this.client = new Client(elasticConfig);\n  }\n\n  /**\n   *üìù Creates or Updates a Document\n   *\n   * Stores a document in Elasticsearch, creating it if it's new\n   * or updating it if it already exists.\n   *\n   * @param {string} index - Where to store it\n   * @param {string} id - Document's unique ID\n   * @param {BaseDocument} document - The document to store\n   * @returns {Promise<ProcessedDocumentMetadata>} Info about the saved document\n   */\n  async upsertDocument(\n    index: string,\n    id: string,\n    document: BaseDocument\n  ): Promise<ProcessedDocumentMetadata> {\n    try {\n      const response = await this.client.index({\n        index,\n        id: id,\n        body: {\n          ...document,\n          id: id,\n        },\n      });\n\n      this.logger.debug(\"Document upserted\", {\n        index,\n        id,\n        response_id: response._id,\n        version: response._version,\n      });\n      return {\n        id: response._id,\n        version: response._version,\n        created_at: new Date(),\n        updated_at: new Date(),\n      };\n    } catch (error) {\n      if (this.metrics?.incrementIndexError) {\n        this.metrics.incrementIndexError({\n          error_type: error instanceof Error ? error.name : \"unknown\",\n          index,\n        });\n      }\n      this.logger.error(\"Failed to upsert document\", {\n        error,\n        index,\n        id,\n        errorDetails: error instanceof Error ? error.message : String(error),\n      });\n      throw error;\n    }\n  }\n\n  async getDocument<T extends BaseDocument>(\n    index: string,\n    id: string\n  ): Promise<T | null> {\n    try {\n      this.logger.debug(\"Attempting ES document retrieval\", {\n        index,\n        id,\n        method: \"GET\",\n        url: `${process.env.ELASTICSEARCH_URL}/${index}/_doc/${id}`,\n      });\n\n      const response = await this.client.get({\n        index,\n        id,\n      });\n\n      this.logger.debug(\"Raw ES response\", {\n        index,\n        id,\n        found: response.found,\n        responseId: response._id,\n        responseSource: response._source,\n        responseFields: response._source ? Object.keys(response._source) : [],\n      });\n\n      if (!response.found || !response._source) {\n        this.logger.warn(\"Document not found in response\", {\n          index,\n          id,\n          response: {\n            found: response.found,\n            hasSource: !!response._source,\n          },\n        });\n        return null;\n      }\n\n      const source = response._source as Record<string, any>;\n      const document = {\n        ...source,\n        id: response._id,\n        title: source.title || \"\",\n        content: source.content || \"\",\n        abstract: source.abstract || \"\",\n        authors: Array.isArray(source.authors) ? source.authors : [],\n        tags: Array.isArray(source.tags) ? source.tags : [],\n        source: source.source || \"\",\n        metadata: source.metadata || {},\n        created_at: source.created_at || new Date().toISOString(),\n        updated_at: source.updated_at || new Date().toISOString(),\n        processing_status: source.processing_status || \"pending\",\n      } as T;\n\n      this.logger.debug(\"Transformed document\", {\n        index,\n        id,\n        documentFields: Object.keys(document as Record<string, unknown>),\n        hasRequiredFields: {\n          title: !!source.title,\n          content: !!source.content,\n          abstract: !!source.abstract,\n        },\n      });\n\n      return document;\n    } catch (error) {\n      const statusCode = (error as { statusCode?: number }).statusCode;\n\n      if (statusCode === 404) {\n        this.logger.debug(\"Document not found in ES (404)\", {\n          index,\n          id,\n          error: error instanceof Error ? error.message : String(error),\n        });\n        return null;\n      }\n\n      this.logger.error(\"Error retrieving document\", {\n        index,\n        id,\n        errorType: error instanceof Error ? error.name : typeof error,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        statusCode,\n      });\n\n      throw error;\n    }\n  }\n\n  async updateDocument(\n    index: string,\n    id: string,\n    document: Partial<BaseDocument>\n  ): Promise<void> {\n    try {\n      await this.client.index({\n        index,\n        id,\n        body: {\n          ...document,\n          updated_at: new Date().toISOString(),\n        },\n      });\n\n      this.logger.debug(\"Document updated\", {\n        index,\n        id,\n        updatedFields: Object.keys(document),\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to update document\", {\n        error,\n        index,\n        id,\n        errorType: error instanceof Error ? error.name : typeof error,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        document: JSON.stringify(document),\n      });\n      throw error;\n    }\n  }\n\n  async deleteDocument(index: string, id: string): Promise<void> {\n    try {\n      await this.client.delete({\n        index,\n        id,\n      });\n    } catch (error) {\n      if (this.metrics?.incrementDeleteError) {\n        this.metrics.incrementDeleteError({\n          error_type: error instanceof Error ? error.name : \"unknown\",\n          index,\n        });\n      }\n      throw error;\n    }\n  }\n\n  async search<T extends BaseDocument>(\n    index: string,\n    params: SearchParams,\n    options?: SearchOptions\n  ): Promise<SearchResponse<T>> {\n    return this.requestQueue.add(async () => {\n      try {\n        const response = await this.client.search<T>({\n          index,\n          body: {\n            query: options?.query || params.query,\n            size: options?.size || params.size,\n            from: options?.from || params.from,\n            sort: options?.sort || params.sort,\n            aggregations: options?.aggregations || params.aggregations,\n          },\n        });\n\n        return transformSearchResponse(\n          response as unknown as ElasticsearchResponse<T>\n        );\n      } catch (error) {\n        this.logger.error(\"Search failed\", { error });\n        throw error;\n      }\n    });\n  }\n\n  async bulkIndex<T extends BaseDocument>(\n    index: string,\n    documents: T[]\n  ): Promise<void> {\n    if (documents.length === 0) {\n      return;\n    }\n\n    const operations = documents.flatMap((doc) => [\n      { index: { _index: index } },\n      doc,\n    ]);\n    try {\n      const response = await this.client.bulk({\n        body: operations,\n      });\n\n      if (response.errors) {\n        throw new Error(\"Bulk operation failed\");\n      }\n    } catch (error) {\n      if (this.metrics?.incrementBulkError) {\n        this.metrics.incrementBulkError({\n          error_type: error instanceof Error ? error.name : \"unknown\",\n          index,\n        });\n      }\n      throw error;\n    }\n  }\n\n  async health(): Promise<boolean> {\n    try {\n      const response = await this.client.cluster.health();\n      return response.status !== \"red\";\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async ping(): Promise<ElasticsearchHealth> {\n    try {\n      const startTime = Date.now();\n      await this.client.ping();\n      return {\n        operational: true,\n        latency: Date.now() - startTime,\n        errors: [],\n        metrics: {\n          cluster: {\n            status: \"\",\n            name: \"\",\n            nodes: 0,\n            dataNodes: 0,\n            activePrimaryShards: 0,\n            activeShards: 0,\n            relocatingShards: 0,\n            initializingShards: 0,\n            unassignedShards: 0,\n            pendingTasks: 0,\n          },\n          indices: {\n            total: 0,\n            healthy: 0,\n            unhealthy: 0,\n            size: \"0B\",\n            documentCount: 0,\n          },\n          performance: {\n            queryLatency: 0,\n            indexingLatency: 0,\n            searchRate: 0,\n            indexingRate: 0,\n            cpuUsage: 0,\n            memoryUsage: \"0B\",\n            diskUsage: \"0B\",\n          },\n        },\n      };\n    } catch (error) {\n      return {\n        operational: false,\n        latency: 0,\n        errors: [error instanceof Error ? error.message : \"Unknown error\"],\n        metrics: {\n          cluster: {\n            status: \"\",\n            name: \"\",\n            nodes: 0,\n            dataNodes: 0,\n            activePrimaryShards: 0,\n            activeShards: 0,\n            relocatingShards: 0,\n            initializingShards: 0,\n            unassignedShards: 0,\n            pendingTasks: 0,\n          },\n          indices: {\n            total: 0,\n            healthy: 0,\n            unhealthy: 0,\n            size: \"0B\",\n            documentCount: 0,\n          },\n          performance: {\n            queryLatency: 0,\n            indexingLatency: 0,\n            searchRate: 0,\n            indexingRate: 0,\n            cpuUsage: 0,\n            memoryUsage: \"0B\",\n            diskUsage: \"0B\",\n          },\n        },\n      };\n    }\n  }\n\n  async indexExists(index: string): Promise<boolean> {\n    try {\n      console.log(`Checking if index exists: ${index}`);\n      const response = await this.client.indices.exists({ index });\n\n      // Type guard for response object\n      if (\n        response &&\n        typeof response === \"object\" &&\n        \"statusCode\" in response\n      ) {\n        const exists = (response as { statusCode: number }).statusCode === 200;\n        console.log(\n          `Index ${index} exists check result (from statusCode):`,\n          exists\n        );\n        return exists;\n      }\n\n      // Handle boolean response\n      console.log(`Index ${index} exists check result (direct):`, response);\n      return Boolean(response);\n    } catch (error) {\n      console.error(`Error checking if index exists: ${index}`, error);\n      return false;\n    }\n  }\n\n  async createIndex(index: string, options: CreateIndexOptions): Promise<void> {\n    try {\n      console.log(`Attempting to create index: ${index}`);\n      const exists = await this.indexExists(index);\n\n      if (exists) {\n        console.log(`Index ${index} already exists, throwing error`);\n        throw new Error(`Index ${index} already exists`);\n      }\n\n      // Ensure options.body exists\n      const createOptions = {\n        index,\n        body: options.body || options,\n      };\n\n      console.log(`Creating index ${index} with options:`, createOptions);\n      await this.client.indices.create(createOptions);\n\n      console.log(`Successfully created index: ${index}`);\n    } catch (error) {\n      console.error(`Failed to create index ${index}:`, error);\n      throw error;\n    }\n  }\n\n  async deleteIndex(index: string): Promise<void> {\n    try {\n      const exists = await this.client.indices.exists({ index });\n      if (!exists) {\n        throw new Error(`Index ${index} does not exist`);\n      }\n\n      await this.client.indices.delete({ index });\n    } catch (error) {\n      this.logger.error(\"Failed to delete index\", { error, index });\n      throw error;\n    }\n  }\n\n  async documentExists(index: string, id: string): Promise<boolean> {\n    try {\n      return await this.client.exists({\n        index,\n        id,\n      });\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async getStats(): Promise<{\n    indices: number;\n    documents: number;\n    size: string;\n    health: \"green\" | \"yellow\" | \"red\";\n  }> {\n    try {\n      const [stats, health] = await Promise.all([\n        this.client.indices.stats({\n          index: \"_all\",\n        }),\n        this.client.cluster.health(),\n      ]);\n\n      const indices = Object.keys(stats.indices || {}).length;\n      const totalDocs = stats._all?.total?.docs?.count || 0;\n      const totalSize = stats._all?.total?.store?.size_in_bytes || 0;\n      const clusterHealth = health.status;\n\n      if (\n        !clusterHealth ||\n        ![\"green\", \"yellow\", \"red\"].includes(clusterHealth)\n      ) {\n        throw new Error(\"Invalid cluster health status\");\n      }\n\n      return {\n        indices,\n        documents: totalDocs,\n        size: this.formatBytes(totalSize),\n        health: clusterHealth as \"green\" | \"yellow\" | \"red\",\n      };\n    } catch (error) {\n      this.logger.error(\"Failed to get Elasticsearch stats\", { error });\n      return {\n        indices: 0,\n        documents: 0,\n        size: \"0 B\",\n        health: \"red\",\n      };\n    }\n  }\n\n  async testService(): Promise<ElasticsearchHealth> {\n    const start = Date.now();\n    const errors: string[] = [];\n\n    try {\n      const pingPromise = this.client.ping();\n      const timeoutPromise = new Promise((_, reject) => {\n        setTimeout(() => reject(new Error(\"Ping timeout\")), 5000);\n      });\n\n      await Promise.race([pingPromise, timeoutPromise]);\n\n      const [health, stats, nodesStats, indicesStats] = await Promise.all([\n        this.client.cluster.health(),\n        this.client.cluster.health(),\n        this.client.nodes.stats({\n          metric: [\"indices\", \"os\", \"process\", \"jvm\", \"thread_pool\"],\n        }),\n        this.client.indices.stats({\n          index: \"_all\",\n        }),\n      ]);\n\n      const metrics = {\n        cluster: {\n          status: health.status ?? \"unknown\",\n          name: health.cluster_name ?? \"unknown\",\n          nodes: health.number_of_nodes ?? 0,\n          dataNodes: health.number_of_data_nodes ?? 0,\n          activePrimaryShards: health.active_primary_shards ?? 0,\n          activeShards: health.active_shards ?? 0,\n          relocatingShards: health.relocating_shards ?? 0,\n          initializingShards: health.initializing_shards ?? 0,\n          unassignedShards: health.unassigned_shards ?? 0,\n          pendingTasks: health.number_of_pending_tasks ?? 0,\n          maxTaskWaitTime: `${health.task_max_waiting_in_queue_millis ?? 0}ms`,\n        },\n        indices: {\n          total: Object.keys(indicesStats.indices ?? {}).length,\n          healthy: this.getHealthyIndicesCount(indicesStats),\n          unhealthy: this.getUnhealthyIndicesCount(indicesStats),\n          size: this.formatBytes(\n            indicesStats._all?.total?.store?.size_in_bytes ?? 0\n          ),\n          documentCount: indicesStats._all?.total?.docs?.count ?? 0,\n        },\n        performance: this.calculatePerformanceMetrics(nodesStats),\n      };\n\n      return {\n        operational: true,\n        latency: Date.now() - start,\n        errors,\n        metrics: metrics as {\n          cluster: {\n            status: string;\n            name: string;\n            nodes: number;\n            dataNodes: number;\n            activePrimaryShards: number;\n            activeShards: number;\n            relocatingShards: number;\n            initializingShards: number;\n            unassignedShards: number;\n            pendingTasks: number;\n            maxTaskWaitTime?: string;\n          };\n          indices: {\n            total: number;\n            healthy: number;\n            unhealthy: number;\n            size: string;\n            documentCount: number;\n          };\n          performance: {\n            queryLatency: number;\n            indexingLatency: number;\n            searchRate: number;\n            indexingRate: number;\n          };\n        },\n      };\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(\"Unknown error\");\n      this.logger.error(\"ES test failed\", {\n        error: err.message,\n        stack: err.stack,\n        name: err.name,\n      });\n\n      errors.push(err.message);\n      return {\n        operational: false,\n        latency: Date.now() - start,\n        errors,\n        metrics: {\n          cluster: {\n            status: \"red\",\n            name: \"unknown\",\n            nodes: 0,\n            dataNodes: 0,\n            activePrimaryShards: 0,\n            activeShards: 0,\n            relocatingShards: 0,\n            initializingShards: 0,\n            unassignedShards: 0,\n            pendingTasks: 0,\n          },\n          indices: {\n            total: 0,\n            healthy: 0,\n            unhealthy: 0,\n            size: \"0b\",\n            documentCount: 0,\n          },\n          performance: {\n            queryLatency: 0,\n            indexingLatency: 0,\n            searchRate: 0,\n            indexingRate: 0,\n          },\n        },\n      };\n    }\n  }\n\n  private calculatePerformanceMetrics(\n    nodesStats: estypes.NodesStatsResponse\n  ): PerformanceMetrics {\n    const nodes = nodesStats.nodes || {};\n    const nodeValues = Object.values(nodes);\n\n    if (!nodeValues.length) {\n      return {\n        queryLatency: 0,\n        indexingLatency: 0,\n        searchRate: 0,\n        indexingRate: 0,\n        cpuUsage: 0,\n        memoryUsage: \"0B\",\n        diskUsage: \"0B\",\n      };\n    }\n\n    const aggregatedStats = nodeValues.reduce<PerformanceMetrics>(\n      (acc, node) => {\n        const threadPool = node.thread_pool || {};\n        const os = node.os || {};\n        const jvm = node.jvm || {};\n\n        return {\n          queryLatency: acc.queryLatency + (threadPool.search?.active || 0),\n          indexingLatency:\n            acc.indexingLatency + (threadPool.write?.active || 0),\n          searchRate: acc.searchRate + (threadPool.search?.completed || 0),\n          indexingRate: acc.indexingRate + (threadPool.write?.completed || 0),\n          cpuUsage: acc.cpuUsage + (os.cpu?.percent || 0),\n          memoryUsage:\n            (acc.memoryUsage as number) + (jvm.mem?.heap_used_in_bytes || 0),\n          diskUsage:\n            (acc.diskUsage as number) + (os.cgroup?.cpuacct?.usage_nanos || 0),\n        };\n      },\n      {\n        queryLatency: 0,\n        indexingLatency: 0,\n        searchRate: 0,\n        indexingRate: 0,\n        cpuUsage: 0,\n        memoryUsage: 0,\n        diskUsage: 0,\n      }\n    );\n\n    return {\n      ...aggregatedStats,\n      memoryUsage: this.formatBytes(aggregatedStats.memoryUsage as number),\n      diskUsage: this.formatBytes(aggregatedStats.diskUsage as number),\n    };\n  }\n\n  private formatBytes(bytes: number): string {\n    if (bytes === 0) return \"0b\";\n    const k = 1024;\n    const sizes = [\"b\", \"kb\", \"mb\", \"gb\", \"tb\"];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(2))}${sizes[i]}`;\n  }\n\n  private getHealthyIndicesCount(stats: any): number {\n    return Object.values(stats.indices).filter(\n      (index: any) =>\n        !index.health || [\"green\", \"yellow\"].includes(index.health)\n    ).length;\n  }\n\n  private getUnhealthyIndicesCount(stats: any): number {\n    return Object.values(stats.indices).filter(\n      (index: any) => index.health === \"red\"\n    ).length;\n  }\n\n  async healthCheck(): Promise<boolean> {\n    try {\n      this.logger.info(\"Testing ES connection\", {\n        url: process.env.ELASTICSEARCH_URL,\n        hasApiKey: !!process.env.SOPHRA_ES_API_KEY,\n        keyLength: process.env.SOPHRA_ES_API_KEY?.length,\n      });\n\n      this.logger.info(\"Attempting ping...\");\n      await this.client.ping();\n      this.logger.info(\"Ping successful, checking cluster health...\");\n\n      const health = await this.client.cluster.health();\n      this.logger.info(\"ES connection successful\", {\n        status: health.status,\n        clusterName: health.cluster_name,\n        numberOfNodes: health.number_of_nodes,\n      });\n\n      return true;\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(\"Unknown error\");\n      this.logger.error(\"ES test failed\", {\n        error: err.message,\n        stack: err.stack,\n        name: err.name,\n        type: err.constructor.name,\n      });\n\n      return false;\n    }\n  }\n\n  async listIndices(): Promise<\n    Array<{\n      name: string;\n      health: string;\n      status: string;\n      docsCount: number;\n      docsDeleted: number;\n      storeSize: string;\n      primaryShards: number;\n      replicaShards: number;\n    }>\n  > {\n    try {\n      const response = (await this.client.cat.indices({\n        format: \"json\",\n      })) as unknown as CatIndicesApiResponse;\n\n      if (!response?.body) {\n        this.logger.error(\"Invalid response from cat indices\", { response });\n        return [];\n      }\n\n      const indices = response.body;\n      if (!Array.isArray(indices)) {\n        this.logger.error(\"Invalid indices response format\", { indices });\n        return [];\n      }\n\n      return indices.map((index: CatIndicesResponse) => ({\n        name: index.index,\n        health: index.health || \"unknown\",\n        status: index.status || \"unknown\",\n        docsCount: parseInt(index[\"docs.count\"], 10) || 0,\n        docsDeleted: parseInt(index[\"docs.deleted\"], 10) || 0,\n        storeSize: this.formatBytes(parseInt(index[\"store.size\"], 10) || 0),\n        primaryShards: parseInt(index.pri, 10) || 1,\n        replicaShards: parseInt(index.rep, 10) || 1,\n      }));\n    } catch (error) {\n      this.logger.error(\"Failed to list indices\", { error });\n      return [];\n    }\n  }\n\n  private isNotFoundError(error: unknown): boolean {\n    return (\n      error instanceof Error &&\n      \"meta\" in error &&\n      typeof error.meta === \"object\" &&\n      error.meta !== null &&\n      \"statusCode\" in error.meta &&\n      error.meta.statusCode === 404\n    );\n  }\n\n  async getSearchWeights(searchId: string): Promise<Record<string, number>> {\n    const defaultWeights = {\n      title: 1.0,\n      content: 1.0,\n      description: 1.0,\n    };\n\n    try {\n      const response = await this.client.get<WeightDocument>({\n        index: \"search_weights\",\n        id: searchId,\n      });\n\n      if (!response.found || !response._source?.weights) {\n        return defaultWeights;\n      }\n\n      return response._source.weights;\n    } catch (error) {\n      this.logger.error(\"Failed to get search weights\", { error, searchId });\n      return defaultWeights;\n    }\n  }\n\n  async updateWeights(\n    searchId: string,\n    weights: Record<string, number>\n  ): Promise<void> {\n    try {\n      await this.client.index({\n        index: \"search_weights\",\n        id: searchId,\n        body: {\n          weights,\n          updatedAt: new Date().toISOString(),\n        },\n      });\n\n      this.logger.info(\"Search weights updated\", { searchId, weights });\n    } catch (error) {\n      this.logger.error(\"Failed to update search weights\", {\n        error,\n        searchId,\n        weights,\n      });\n      throw error;\n    }\n  }\n\n  async vectorSearch<T extends BaseDocument>(\n    index: string,\n    queryVector: number[],\n    options: VectorSearchOptions = {}\n  ): Promise<SearchResult<T>> {\n    const {\n      size = 10,\n      minScore = 0.7,\n      textQuery,\n      fields = [\"title\", \"content\"],\n      operator = \"OR\",\n      fuzziness = \"AUTO\",\n    } = options;\n\n    try {\n      const searchBody: SearchRequestBody = {\n        query: {\n          bool: {\n            should: [\n              // Text search if provided\n              ...(textQuery\n                ? [\n                    {\n                      multi_match: {\n                        query: textQuery,\n                        fields,\n                        operator,\n                        fuzziness,\n                      },\n                    },\n                  ]\n                : []),\n              // Vector search\n              {\n                script_score: {\n                  query: {\n                    exists: {\n                      field: \"embeddings\", // Check if field exists\n                    },\n                  },\n                  script: {\n                    source:\n                      \"cosineSimilarity(params.query_vector, 'embeddings')\",\n                    params: {\n                      query_vector: queryVector,\n                    },\n                  },\n                },\n              },\n            ],\n          },\n        },\n        size,\n      };\n\n      const response = await this.client.search({\n        index,\n        body: searchBody,\n      });\n\n      return {\n        hits: response.hits.hits.map((hit) => ({\n          _id: hit._id ?? \"\",\n          _score: hit._score || 0,\n          _source: hit._source as T,\n        })),\n        total:\n          typeof response.hits.total === \"number\"\n            ? response.hits.total\n            : (response.hits.total?.value ?? 0),\n        took: response.took ?? 0,\n      };\n    } catch (error) {\n      this.logger.error(\"Vector search failed\", { error });\n      throw error;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    try {\n      await (this.client as any).close(); // Cast to any since close() exists but type is incorrect\n      this.logger.info(\"Elasticsearch connection closed\");\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(\"Unknown error\");\n      this.logger.error(\"Error disconnecting from Elasticsearch\", {\n        error: err.message,\n        stack: err.stack,\n      });\n    }\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      // Verify credentials and connection\n      const pingResult = await this.client.ping({});\n\n      if (!pingResult) {\n        throw new Error(\"Invalid ping response from Elasticsearch\");\n      }\n\n      this.logger.info(\"Elasticsearch connection successful\", {\n        node: process.env.ELASTICSEARCH_URL,\n        hasApiKey: !!process.env.SOPHRA_ES_API_KEY,\n      });\n    } catch (error) {\n      const err = error instanceof Error ? error : new Error(\"Unknown error\");\n      this.logger.error(\"Elasticsearch initialization failed\", {\n        error: err.message,\n        type: err.name,\n        stack: err.stack,\n      });\n      throw new CustomError(\"ES_INIT_FAILED\", err);\n    }\n  }\n\n  async refreshIndex(index: string): Promise<void> {\n    await this.client.indices.refresh({ index });\n  }\n\n  async putMapping(\n    index: string,\n    mapping: Record<string, unknown>\n  ): Promise<void> {\n    await this.client.indices.putMapping({\n      index,\n      body: mapping,\n    });\n  }\n\n  async getMapping(index: string): Promise<Record<string, unknown>> {\n    const response = await this.client.indices.getMapping({ index });\n    return response as Record<string, unknown>;\n  }\n\n  async putSettings(\n    index: string,\n    settings: Record<string, unknown>\n  ): Promise<void> {\n    await this.client.indices.putSettings({\n      index,\n      body: settings,\n    });\n  }\n\n  async getSettings(index: string): Promise<Record<string, unknown>> {\n    const response = await this.client.indices.getSettings({ index });\n    return response[index]?.settings as Record<string, unknown>;\n  }\n\n  async count(index: string): Promise<number> {\n    const response = await this.client.count({ index });\n    return response.count;\n  }\n  async scroll<T>(scrollId: string): Promise<T[]> {\n    const response = await this.client.scroll({ scroll_id: scrollId });\n    return response.hits.hits.map((hit) => {\n      if (!hit._source) {\n        throw new Error(\"Search hit missing _source\");\n      }\n      return hit._source as T;\n    });\n  }\n\n  async clearScroll(scrollId: string): Promise<void> {\n    await this.client.clearScroll({ scroll_id: scrollId });\n  }\n\n  async bulk(operations: any[]): Promise<void> {\n    await this.client.bulk({ body: operations });\n  }\n\n  async reindex(source: string, dest: string): Promise<void> {\n    await this.client.reindex({\n      body: {\n        source: { index: source },\n        dest: { index: dest },\n      },\n    });\n  }\n\n  async aliases(p0: {\n    body: { actions: { add: { index: string; alias: string } }[] };\n  }): Promise<Record<string, string[]>> {\n    const response = await this.client.cat.aliases({ format: \"json\" });\n    // Transform the response into Record<string, string[]> format\n    const aliasMap: Record<string, string[]> = {};\n    for (const alias of response) {\n      if (alias.alias) {\n        if (!aliasMap[alias.alias]) {\n          aliasMap[alias.alias] = [];\n        }\n        aliasMap[alias.alias].push(alias.index!);\n      }\n    }\n    return aliasMap;\n  }\n\n  async analyze(index: string, text: string): Promise<any> {\n    const response = await this.client.indices.analyze({\n      index,\n      body: { text },\n    });\n    return response;\n  }\n\n  async partialUpdateDocument(\n    index: string,\n    id: string,\n    update: {\n      script?: {\n        source: string;\n        params: Record<string, any>;\n      };\n      doc?: Record<string, any>;\n    }\n  ): Promise<void> {\n    try {\n      const response = await fetch(\n        `${process.env.ELASTICSEARCH_URL}/${index}/_update/${id}`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `ApiKey ${process.env.SOPHRA_ES_API_KEY}`,\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(\n            update.script ? { script: update.script } : { doc: update.doc }\n          ),\n        }\n      );\n\n      const result = await response.json();\n\n      this.logger.debug(\"Document partially updated\", {\n        index,\n        id,\n        updateType: update.script ? \"script\" : \"doc\",\n        result: result.result,\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to partially update document\", {\n        error,\n        index,\n        id,\n      });\n      throw error;\n    }\n  }\n\n  async preprocessQuery(query: string): Promise<string> {\n    // Normalize whitespace and convert to lowercase\n    const normalized = query.trim().toLowerCase().replace(/\\s+/g, \" \");\n\n    // Preserve special characters and symbols\n    const specialChars = [\"c++\", \"c#\", \".net\", \"@\", \"/\"];\n    for (const char of specialChars) {\n      if (query.toLowerCase().includes(char.toLowerCase())) {\n        return query.trim();\n      }\n    }\n\n    return normalized;\n  }\n\n  async analyzeQuery(query: string): Promise<QueryAnalysis> {\n    const terms = query.toLowerCase().split(\" \");\n\n    // Intent detection\n    const intentPatterns = {\n      instructional: [\"how\", \"guide\", \"tutorial\"],\n      error: [\"error\", \"bug\", \"fix\", \"issue\"],\n      best_practices: [\"best\", \"practice\", \"recommended\"],\n      comparison: [\"vs\", \"versus\", \"compare\"],\n    };\n\n    let detectedIntent: QueryAnalysis[\"intent\"] = \"instructional\";\n    for (const [intent, patterns] of Object.entries(intentPatterns)) {\n      if (patterns.some((pattern) => terms.includes(pattern))) {\n        detectedIntent = intent as QueryAnalysis[\"intent\"];\n        break;\n      }\n    }\n\n    // Extract key terms and context\n    const keyTerms = terms.filter((term) => term.length > 2);\n    const context = terms.includes(\"production\") ? \"production\" : undefined;\n\n    return {\n      intent: detectedIntent,\n      terms: keyTerms,\n      context,\n    };\n  }\n\n  async expandQuery(query: string): Promise<ExpandedQuery> {\n    const synonyms = {\n      js: [\"javascript\", \"js\"],\n      aws: [\"amazon web services\", \"aws\"],\n      k8s: [\"kubernetes\", \"k8s\"],\n      ml: [\"machine learning\", \"ml\"],\n    };\n\n    const terms = new Set<string>();\n    const queryTerms = query.toLowerCase().split(\" \");\n\n    for (const term of queryTerms) {\n      terms.add(term);\n      if (Object.prototype.hasOwnProperty.call(synonyms, term)) {\n        synonyms[term as keyof typeof synonyms].forEach((synonym) =>\n          terms.add(synonym)\n        );\n      }\n    }\n\n    return {\n      terms: Array.from(terms),\n    };\n  }\n}\n\ninterface SearchHit<T> {\n  _index: string;\n  _id: string;\n  _score: number;\n  _source: T;\n}\n\ninterface IndicesStatsResponseBody {\n  _all: {\n    total: {\n      docs: {\n        count: number;\n      };\n      store: {\n        size_in_bytes: number;\n      };\n    };\n  };\n  indices: Record<string, unknown>;\n}\n\ntype SearchResult<T> = {\n  hits: Array<{\n    _id: string;\n    _score: number;\n    _source: T;\n  }>;\n  total: number;\n  took: number;\n};\n\ninterface PerformanceMetrics {\n  queryLatency: number;\n  indexingLatency: number;\n  searchRate: number;\n  indexingRate: number;\n  cpuUsage: number;\n  memoryUsage: string | number;\n  diskUsage: string | number;\n}\n\ninterface QueryAnalysis {\n  intent: \"instructional\" | \"error\" | \"best_practices\" | \"comparison\";\n  terms: string[];\n  context?: string;\n}\n\ninterface ExpandedQuery {\n  terms: string[];\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"30a56ca9734de3e4bc604a78965617c622f570c4"}}