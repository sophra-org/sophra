{"/workspaces/sophra/src/app/api/nous/ab-testing/results/route.ts":{"path":"/workspaces/sophra/src/app/api/nous/ab-testing/results/route.ts","statementMap":{"0":{"start":{"line":6,"column":23},"end":{"line":6,"column":31}},"1":{"start":{"line":7,"column":22},"end":{"line":13,"column":2}},"2":{"start":{"line":15,"column":20},"end":{"line":15,"column":30}},"3":{"start":{"line":16,"column":2},"end":{"line":105,"column":3}},"4":{"start":{"line":17,"column":17},"end":{"line":17,"column":33}},"5":{"start":{"line":18,"column":23},"end":{"line":18,"column":52}},"6":{"start":{"line":19,"column":4},"end":{"line":32,"column":5}},"7":{"start":{"line":20,"column":6},"end":{"line":23,"column":9}},"8":{"start":{"line":24,"column":6},"end":{"line":31,"column":8}},"9":{"start":{"line":33,"column":64},"end":{"line":33,"column":79}},"10":{"start":{"line":34,"column":23},"end":{"line":39,"column":6}},"11":{"start":{"line":40,"column":4},"end":{"line":49,"column":5}},"12":{"start":{"line":41,"column":6},"end":{"line":48,"column":8}},"13":{"start":{"line":50,"column":24},"end":{"line":58,"column":7}},"14":{"start":{"line":50,"column":71},"end":{"line":58,"column":5}},"15":{"start":{"line":59,"column":20},"end":{"line":69,"column":6}},"16":{"start":{"line":60,"column":41},"end":{"line":68,"column":7}},"17":{"start":{"line":70,"column":20},"end":{"line":70,"column":42}},"18":{"start":{"line":71,"column":4},"end":{"line":76,"column":7}},"19":{"start":{"line":77,"column":4},"end":{"line":88,"column":7}},"20":{"start":{"line":90,"column":20},"end":{"line":90,"column":42}},"21":{"start":{"line":91,"column":4},"end":{"line":95,"column":7}},"22":{"start":{"line":96,"column":4},"end":{"line":104,"column":6}},"23":{"start":{"line":108,"column":20},"end":{"line":108,"column":30}},"24":{"start":{"line":109,"column":2},"end":{"line":162,"column":3}},"25":{"start":{"line":110,"column":16},"end":{"line":110,"column":32}},"26":{"start":{"line":111,"column":19},"end":{"line":111,"column":49}},"27":{"start":{"line":112,"column":4},"end":{"line":120,"column":5}},"28":{"start":{"line":113,"column":6},"end":{"line":119,"column":8}},"29":{"start":{"line":121,"column":20},"end":{"line":124,"column":6}},"30":{"start":{"line":125,"column":30},"end":{"line":137,"column":5}},"31":{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},"32":{"start":{"line":128,"column":10},"end":{"line":128,"column":37}},"33":{"start":{"line":130,"column":8},"end":{"line":132,"column":9}},"34":{"start":{"line":131,"column":10},"end":{"line":131,"column":55}},"35":{"start":{"line":133,"column":8},"end":{"line":133,"column":67}},"36":{"start":{"line":134,"column":8},"end":{"line":134,"column":19}},"37":{"start":{"line":138,"column":20},"end":{"line":138,"column":42}},"38":{"start":{"line":139,"column":4},"end":{"line":149,"column":7}},"39":{"start":{"line":151,"column":20},"end":{"line":151,"column":42}},"40":{"start":{"line":152,"column":4},"end":{"line":152,"column":55}},"41":{"start":{"line":153,"column":4},"end":{"line":161,"column":6}}},"fnMap":{"0":{"name":"POST","decl":{"start":{"line":14,"column":22},"end":{"line":14,"column":26}},"loc":{"start":{"line":14,"column":32},"end":{"line":106,"column":1}},"line":14},"1":{"name":"(anonymous_1)","decl":{"start":{"line":50,"column":52},"end":{"line":50,"column":53}},"loc":{"start":{"line":50,"column":71},"end":{"line":58,"column":5}},"line":50},"2":{"name":"(anonymous_2)","decl":{"start":{"line":60,"column":28},"end":{"line":60,"column":29}},"loc":{"start":{"line":60,"column":41},"end":{"line":68,"column":7}},"line":60},"3":{"name":"GET","decl":{"start":{"line":107,"column":22},"end":{"line":107,"column":25}},"loc":{"start":{"line":107,"column":31},"end":{"line":163,"column":1}},"line":107},"4":{"name":"(anonymous_4)","decl":{"start":{"line":126,"column":6},"end":{"line":126,"column":7}},"loc":{"start":{"line":126,"column":23},"end":{"line":135,"column":7}},"line":126}},"branchMap":{"0":{"loc":{"start":{"line":19,"column":4},"end":{"line":32,"column":5}},"type":"if","locations":[{"start":{"line":19,"column":4},"end":{"line":32,"column":5}},{"start":{},"end":{}}],"line":19},"1":{"loc":{"start":{"line":40,"column":4},"end":{"line":49,"column":5}},"type":"if","locations":[{"start":{"line":40,"column":4},"end":{"line":49,"column":5}},{"start":{},"end":{}}],"line":40},"2":{"loc":{"start":{"line":56,"column":16},"end":{"line":56,"column":42}},"type":"cond-expr","locations":[{"start":{"line":56,"column":27},"end":{"line":56,"column":35}},{"start":{"line":56,"column":38},"end":{"line":56,"column":42}}],"line":56},"3":{"loc":{"start":{"line":67,"column":18},"end":{"line":67,"column":78}},"type":"cond-expr","locations":[{"start":{"line":67,"column":45},"end":{"line":67,"column":60}},{"start":{"line":67,"column":63},"end":{"line":67,"column":78}}],"line":67},"4":{"loc":{"start":{"line":93,"column":17},"end":{"line":93,"column":67}},"type":"cond-expr","locations":[{"start":{"line":93,"column":42},"end":{"line":93,"column":52}},{"start":{"line":93,"column":55},"end":{"line":93,"column":67}}],"line":93},"5":{"loc":{"start":{"line":94,"column":15},"end":{"line":94,"column":69}},"type":"cond-expr","locations":[{"start":{"line":94,"column":40},"end":{"line":94,"column":53}},{"start":{"line":94,"column":56},"end":{"line":94,"column":69}}],"line":94},"6":{"loc":{"start":{"line":100,"column":17},"end":{"line":100,"column":73}},"type":"cond-expr","locations":[{"start":{"line":100,"column":42},"end":{"line":100,"column":55}},{"start":{"line":100,"column":58},"end":{"line":100,"column":73}}],"line":100},"7":{"loc":{"start":{"line":112,"column":4},"end":{"line":120,"column":5}},"type":"if","locations":[{"start":{"line":112,"column":4},"end":{"line":120,"column":5}},{"start":{},"end":{}}],"line":112},"8":{"loc":{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},"type":"if","locations":[{"start":{"line":127,"column":8},"end":{"line":129,"column":9}},{"start":{},"end":{}}],"line":127},"9":{"loc":{"start":{"line":130,"column":8},"end":{"line":132,"column":9}},"type":"if","locations":[{"start":{"line":130,"column":8},"end":{"line":132,"column":9}},{"start":{},"end":{}}],"line":130},"10":{"loc":{"start":{"line":157,"column":17},"end":{"line":157,"column":73}},"type":"cond-expr","locations":[{"start":{"line":157,"column":42},"end":{"line":157,"column":55}},{"start":{"line":157,"column":58},"end":{"line":157,"column":73}}],"line":157}},"s":{"0":1,"1":1,"2":3,"3":3,"4":3,"5":3,"6":3,"7":1,"8":1,"9":2,"10":2,"11":2,"12":0,"13":2,"14":6,"15":2,"16":6,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":3,"24":3,"25":3,"26":3,"27":3,"28":1,"29":2,"30":1,"31":2,"32":1,"33":2,"34":2,"35":2,"36":2,"37":1,"38":1,"39":1,"40":1,"41":1},"f":{"0":3,"1":6,"2":6,"3":3,"4":2},"b":{"0":[1,2],"1":[0,2],"2":[0,6],"3":[6,0],"4":[1,0],"5":[1,0],"6":[1,0],"7":[1,2],"8":[1,1],"9":[2,0],"10":[1,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/api/nous/ab-testing/results/route.ts"],"sourcesContent":["import { prisma } from \"@/lib/shared/database/client\";\nimport logger from \"@/lib/shared/logger\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { Prisma } from \"@prisma/client\";\nimport { z } from \"zod\";\n// Declare Node.js runtime\nexport const runtime = \"nodejs\";\n\n\nconst ResultsSchema = z.object({\n  testId: z.string(),\n  variantId: z.string(),\n  metrics: z.record(z.number()),\n  sessionId: z.string(),\n  metadata: z.record(z.unknown()).optional(),\n});\n\nexport async function POST(req: NextRequest): Promise<NextResponse> {\n  const startTime = Date.now();\n\n  try {\n    const body = await req.json();\n    const validation = ResultsSchema.safeParse(body);\n\n    if (!validation.success) {\n      logger.error(\"Invalid results submission\", {\n        errors: validation.error.format(),\n        received: body,\n      });\n      return NextResponse.json(\n        {\n          success: false,\n          error: \"Invalid request format\",\n          details: validation.error.format(),\n        },\n        { status: 400 }\n      );\n    }\n\n    const { testId, variantId, metrics, sessionId, metadata } = validation.data;\n\n    // Verify experiment exists and is active\n    const experiment = await prisma.aBTest.findFirst({\n      where: {\n        id: testId,\n        status: \"ACTIVE\",\n      },\n    });\n\n    if (!experiment) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: \"Experiment not found or not active\",\n          details: `No active experiment found with ID: ${testId}`,\n        },\n        { status: 404 }\n      );\n    }\n\n    // Record metrics\n    const metricsData = Object.entries(metrics).map(([key, value]) => ({\n      testId,\n      variantId,\n      sessionId,\n      eventType: key,\n      value,\n      metadata: metadata ? metadata : null,\n      timestamp: new Date(),\n    }));\n    const results = await prisma.aBTestMetric.createMany({\n      data: metricsData.map((metric) => ({\n        testId: metric.testId,\n        variantId: metric.variantId,\n        sessionId: metric.sessionId,\n        eventType: metric.eventType,\n        value: metric.value,\n        timestamp: metric.timestamp,\n        metadata:\n          metric.metadata === null\n            ? Prisma.JsonNull\n            : (metric.metadata as Prisma.InputJsonValue),\n      })),\n    });\n\n    const latency = Date.now() - startTime;\n    logger.info(\"Recorded experiment metrics\", {\n      testId,\n      variantId,\n      metricCount: results.count,\n      latency,\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        testId,\n        variantId,\n        metricsRecorded: results.count,\n      },\n      meta: {\n        took: latency,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    const latency = Date.now() - startTime;\n    logger.error(\"Failed to record metrics\", {\n      error,\n      errorType: error instanceof Error ? error.name : typeof error,\n      message: error instanceof Error ? error.message : String(error),\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to record metrics\",\n        details: error instanceof Error ? error.message : \"Unknown error\",\n        meta: { took: latency },\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(req: NextRequest): Promise<NextResponse> {\n  const startTime = Date.now();\n\n  try {\n    const url = new URL(req.url);\n    const testId = url.searchParams.get(\"testId\");\n\n    if (!testId) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: \"Missing testId parameter\",\n        },\n        { status: 400 }\n      );\n    }\n\n    const metrics = await prisma.aBTestMetric.findMany({\n      where: { testId },\n      orderBy: { timestamp: \"desc\" },\n    });\n\n    const aggregatedMetrics = metrics.reduce(\n      (acc, metric) => {\n        if (!acc[metric.variantId]) {\n          acc[metric.variantId] = {};\n        }\n        if (!acc[metric.variantId][metric.eventType]) {\n          acc[metric.variantId][metric.eventType] = [];\n        }\n        acc[metric.variantId][metric.eventType].push(metric.value);\n        return acc;\n      },\n      {} as Record<string, Record<string, number[]>>\n    );\n\n    const latency = Date.now() - startTime;\n    return NextResponse.json({\n      success: true,\n      data: {\n        testId,\n        metrics: aggregatedMetrics,\n      },\n      meta: {\n        took: latency,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    const latency = Date.now() - startTime;\n    logger.error(\"Failed to fetch metrics\", { error });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to fetch metrics\",\n        details: error instanceof Error ? error.message : \"Unknown error\",\n        meta: { took: latency },\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"428adc1f1f6513255b75ffa2ceb31150de981f86"}}