{"/workspaces/sophra/src/app/api/nous/signals/observe/route.ts":{"path":"/workspaces/sophra/src/app/api/nous/signals/observe/route.ts","statementMap":{"0":{"start":{"line":6,"column":23},"end":{"line":6,"column":31}},"1":{"start":{"line":7,"column":27},"end":{"line":15,"column":2}},"2":{"start":{"line":17,"column":2},"end":{"line":63,"column":3}},"3":{"start":{"line":18,"column":16},"end":{"line":18,"column":32}},"4":{"start":{"line":19,"column":19},"end":{"line":19,"column":49}},"5":{"start":{"line":20,"column":17},"end":{"line":20,"column":45}},"6":{"start":{"line":21,"column":19},"end":{"line":21,"column":49}},"7":{"start":{"line":22,"column":18},"end":{"line":46,"column":6}},"8":{"start":{"line":47,"column":4},"end":{"line":56,"column":7}},"9":{"start":{"line":49,"column":33},"end":{"line":55,"column":7}},"10":{"start":{"line":58,"column":4},"end":{"line":58,"column":60}},"11":{"start":{"line":59,"column":4},"end":{"line":62,"column":6}},"12":{"start":{"line":66,"column":2},"end":{"line":145,"column":3}},"13":{"start":{"line":67,"column":17},"end":{"line":67,"column":33}},"14":{"start":{"line":68,"column":23},"end":{"line":68,"column":57}},"15":{"start":{"line":69,"column":4},"end":{"line":78,"column":5}},"16":{"start":{"line":70,"column":6},"end":{"line":77,"column":8}},"17":{"start":{"line":79,"column":48},"end":{"line":79,"column":63}},"18":{"start":{"line":80,"column":18},"end":{"line":95,"column":5}},"19":{"start":{"line":96,"column":30},"end":{"line":113,"column":6}},"20":{"start":{"line":114,"column":4},"end":{"line":133,"column":7}},"21":{"start":{"line":117,"column":38},"end":{"line":123,"column":9}},"22":{"start":{"line":124,"column":43},"end":{"line":127,"column":9}},"23":{"start":{"line":135,"column":4},"end":{"line":140,"column":7}},"24":{"start":{"line":141,"column":4},"end":{"line":144,"column":6}}},"fnMap":{"0":{"name":"GET","decl":{"start":{"line":16,"column":22},"end":{"line":16,"column":25}},"loc":{"start":{"line":16,"column":31},"end":{"line":64,"column":1}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":49,"column":22},"end":{"line":49,"column":23}},"loc":{"start":{"line":49,"column":33},"end":{"line":55,"column":7}},"line":49},"2":{"name":"POST","decl":{"start":{"line":65,"column":22},"end":{"line":65,"column":26}},"loc":{"start":{"line":65,"column":32},"end":{"line":146,"column":1}},"line":65},"3":{"name":"(anonymous_3)","decl":{"start":{"line":117,"column":27},"end":{"line":117,"column":28}},"loc":{"start":{"line":117,"column":38},"end":{"line":123,"column":9}},"line":117},"4":{"name":"(anonymous_4)","decl":{"start":{"line":124,"column":31},"end":{"line":124,"column":32}},"loc":{"start":{"line":124,"column":43},"end":{"line":127,"column":9}},"line":124}},"branchMap":{"0":{"loc":{"start":{"line":28,"column":11},"end":{"line":28,"column":31}},"type":"binary-expr","locations":[{"start":{"line":28,"column":11},"end":{"line":28,"column":17}},{"start":{"line":28,"column":21},"end":{"line":28,"column":31}}],"line":28},"1":{"loc":{"start":{"line":29,"column":11},"end":{"line":29,"column":27}},"type":"binary-expr","locations":[{"start":{"line":29,"column":11},"end":{"line":29,"column":15}},{"start":{"line":29,"column":19},"end":{"line":29,"column":27}}],"line":29},"2":{"loc":{"start":{"line":30,"column":11},"end":{"line":35,"column":9}},"type":"binary-expr","locations":[{"start":{"line":30,"column":11},"end":{"line":30,"column":17}},{"start":{"line":30,"column":21},"end":{"line":35,"column":9}}],"line":30},"3":{"loc":{"start":{"line":52,"column":15},"end":{"line":52,"column":74}},"type":"cond-expr","locations":[{"start":{"line":52,"column":49},"end":{"line":52,"column":70}},{"start":{"line":52,"column":73},"end":{"line":52,"column":74}}],"line":52},"4":{"loc":{"start":{"line":52,"column":49},"end":{"line":52,"column":70}},"type":"binary-expr","locations":[{"start":{"line":52,"column":49},"end":{"line":52,"column":65}},{"start":{"line":52,"column":69},"end":{"line":52,"column":70}}],"line":52},"5":{"loc":{"start":{"line":53,"column":19},"end":{"line":53,"column":47}},"type":"binary-expr","locations":[{"start":{"line":53,"column":19},"end":{"line":53,"column":39}},{"start":{"line":53,"column":43},"end":{"line":53,"column":47}}],"line":53},"6":{"loc":{"start":{"line":54,"column":18},"end":{"line":54,"column":46}},"type":"binary-expr","locations":[{"start":{"line":54,"column":18},"end":{"line":54,"column":38}},{"start":{"line":54,"column":42},"end":{"line":54,"column":46}}],"line":54},"7":{"loc":{"start":{"line":69,"column":4},"end":{"line":78,"column":5}},"type":"if","locations":[{"start":{"line":69,"column":4},"end":{"line":78,"column":5}},{"start":{},"end":{}}],"line":69},"8":{"loc":{"start":{"line":81,"column":9},"end":{"line":81,"column":29}},"type":"binary-expr","locations":[{"start":{"line":81,"column":9},"end":{"line":81,"column":15}},{"start":{"line":81,"column":19},"end":{"line":81,"column":29}}],"line":81},"9":{"loc":{"start":{"line":82,"column":9},"end":{"line":82,"column":25}},"type":"binary-expr","locations":[{"start":{"line":82,"column":9},"end":{"line":82,"column":13}},{"start":{"line":82,"column":17},"end":{"line":82,"column":25}}],"line":82},"10":{"loc":{"start":{"line":83,"column":9},"end":{"line":88,"column":7}},"type":"binary-expr","locations":[{"start":{"line":83,"column":9},"end":{"line":83,"column":15}},{"start":{"line":83,"column":19},"end":{"line":88,"column":7}}],"line":83},"11":{"loc":{"start":{"line":89,"column":9},"end":{"line":94,"column":7}},"type":"binary-expr","locations":[{"start":{"line":89,"column":9},"end":{"line":89,"column":18}},{"start":{"line":89,"column":22},"end":{"line":94,"column":7}}],"line":89},"12":{"loc":{"start":{"line":136,"column":13},"end":{"line":139,"column":15}},"type":"cond-expr","locations":[{"start":{"line":136,"column":38},"end":{"line":139,"column":7}},{"start":{"line":139,"column":10},"end":{"line":139,"column":15}}],"line":136}},"s":{"0":1,"1":1,"2":3,"3":3,"4":3,"5":3,"6":3,"7":3,"8":2,"9":2,"10":1,"11":1,"12":3,"13":3,"14":3,"15":3,"16":1,"17":2,"18":2,"19":2,"20":1,"21":1,"22":1,"23":1,"24":1},"f":{"0":3,"1":2,"2":3,"3":1,"4":1},"b":{"0":[3,1],"1":[3,1],"2":[3,0],"3":[2,0],"4":[2,0],"5":[2,0],"6":[2,0],"7":[1,2],"8":[2,2],"9":[2,2],"10":[2,0],"11":[2,1],"12":[1,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/api/nous/signals/observe/route.ts"],"sourcesContent":["import logger from \"../../../../../lib/shared/logger\";\nimport { Prisma, SignalType } from \"@prisma/client\";\nimport { prisma } from \"../../../../../lib/shared/database/client\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { z } from \"zod\";\n// Declare Node.js runtime\nexport const runtime = \"nodejs\";\n\n\nconst ObserveQuerySchema = z.object({\n  source: z.string().optional(),\n  type: z.enum(Object.values(SignalType) as [string, ...string[]]).optional(),\n  status: z.enum([\"PENDING\", \"PROCESSING\", \"COMPLETED\", \"FAILED\"]).optional(),\n  timeRange: z\n    .object({\n      start: z.string().datetime(),\n      end: z.string().datetime(),\n    })\n    .optional(),\n});\n\nexport async function GET(req: NextRequest): Promise<NextResponse> {\n  try {\n    const url = new URL(req.url);\n    const source = url.searchParams.get(\"source\");\n    const type = url.searchParams.get(\"type\");\n    const status = url.searchParams.get(\"status\") as\n      | \"PENDING\"\n      | \"PROCESSING\"\n      | \"COMPLETED\"\n      | \"FAILED\"\n      | null;\n    const stats = await prisma.signal.groupBy({\n      by: [\n        Prisma.SignalScalarFieldEnum.source,\n        Prisma.SignalScalarFieldEnum.type,\n      ],\n      where: {\n        ...(source && { source }),\n        ...(type && { type: type as SignalType }),\n        ...(status && {\n          metadata: {\n            path: [\"status\"],\n            equals: status,\n          },\n        }),\n      },\n      _count: {\n        _all: true,\n      },\n      _min: {\n        timestamp: true,\n      },\n      _max: {\n        timestamp: true,\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: stats.map((stat) => ({\n        source: stat.source,\n        type: stat.type,\n        count: typeof stat._count === \"object\" ? (stat._count._all ?? 0) : 0,\n        firstSeen: stat._min?.timestamp ?? null,\n        lastSeen: stat._max?.timestamp ?? null,\n      })),\n    });\n  } catch (error) {\n    logger.error(\"Failed to fetch signal stats\", { error });\n    return NextResponse.json(\n      { success: false, error: \"Failed to fetch signal stats\" },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(req: NextRequest): Promise<NextResponse> {\n  try {\n    const body = await req.json();\n    const validation = ObserveQuerySchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: \"Invalid request format\",\n          details: validation.error.format(),\n        },\n        { status: 400 }\n      );\n    }\n\n    const { source, type, status, timeRange } = validation.data;\n\n    const where: Prisma.SignalWhereInput = {\n      ...(source && { source }),\n      ...(type && { type: type as SignalType }),\n      ...(status && {\n        metadata: {\n          path: [\"status\"],\n          equals: status,\n        },\n      }),\n      ...(timeRange && {\n        timestamp: {\n          gte: new Date(timeRange.start),\n          lte: new Date(timeRange.end),\n        },\n      }),\n    };\n\n    const [stats, timeline] = await Promise.all([\n      prisma.signal.groupBy({\n        by: [\"source\", \"type\"],\n        where,\n        _count: true,\n        _min: {\n          timestamp: true,\n        },\n        _max: {\n          timestamp: true,\n        },\n      }),\n      prisma.signal.groupBy({\n        by: [\"timestamp\"],\n        where,\n        _count: true,\n      }),\n    ]);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        summary: stats.map((stat) => ({\n          source: stat.source,\n          type: stat.type,\n          count: stat._count,\n          firstSeen: stat._min?.timestamp,\n          lastSeen: stat._max?.timestamp,\n        })),\n        timeline: timeline.map((point) => ({\n          timestamp: point.timestamp,\n          count: point._count,\n        })),\n      },\n      metadata: {\n        timeRange,\n        generatedAt: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    logger.error(\"Failed to observe signals\", {\n      error:\n        error instanceof Error\n          ? {\n              message: error.message,\n              name: error.name,\n            }\n          : error,\n    });\n    return NextResponse.json(\n      { success: false, error: \"Failed to observe signals\" },\n      { status: 500 }\n    );\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"93fa737d9cee3811ab6a12c6efc84856e29f281c"}}