{"/workspaces/sophra/src/lib/nous/registry/metadata.ts":{"path":"/workspaces/sophra/src/lib/nous/registry/metadata.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":45}},"1":{"start":{"line":4,"column":4},"end":{"line":4,"column":51}},"2":{"start":{"line":7,"column":4},"end":{"line":7,"column":41}},"3":{"start":{"line":10,"column":19},"end":{"line":10,"column":47}},"4":{"start":{"line":11,"column":4},"end":{"line":13,"column":5}},"5":{"start":{"line":12,"column":6},"end":{"line":12,"column":56}},"6":{"start":{"line":14,"column":4},"end":{"line":18,"column":5}},"7":{"start":{"line":15,"column":6},"end":{"line":17,"column":7}},"8":{"start":{"line":16,"column":8},"end":{"line":16,"column":21}},"9":{"start":{"line":19,"column":4},"end":{"line":28,"column":5}},"10":{"start":{"line":20,"column":24},"end":{"line":20,"column":48}},"11":{"start":{"line":21,"column":6},"end":{"line":27,"column":7}},"12":{"start":{"line":22,"column":8},"end":{"line":26,"column":9}},"13":{"start":{"line":23,"column":10},"end":{"line":23,"column":33}},"14":{"start":{"line":25,"column":10},"end":{"line":25,"column":23}},"15":{"start":{"line":29,"column":4},"end":{"line":35,"column":5}},"16":{"start":{"line":30,"column":6},"end":{"line":34,"column":7}},"17":{"start":{"line":31,"column":8},"end":{"line":33,"column":9}},"18":{"start":{"line":31,"column":45},"end":{"line":31,"column":71}},"19":{"start":{"line":32,"column":10},"end":{"line":32,"column":23}},"20":{"start":{"line":36,"column":4},"end":{"line":36,"column":16}},"21":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"22":{"start":{"line":40,"column":6},"end":{"line":40,"column":52}},"23":{"start":{"line":42,"column":4},"end":{"line":45,"column":7}},"24":{"start":{"line":48,"column":4},"end":{"line":48,"column":43}},"25":{"start":{"line":51,"column":20},"end":{"line":51,"column":51}},"26":{"start":{"line":52,"column":4},"end":{"line":52,"column":31}},"27":{"start":{"line":52,"column":18},"end":{"line":52,"column":31}},"28":{"start":{"line":53,"column":20},"end":{"line":57,"column":5}},"29":{"start":{"line":58,"column":4},"end":{"line":60,"column":5}},"30":{"start":{"line":59,"column":6},"end":{"line":59,"column":19}},"31":{"start":{"line":61,"column":4},"end":{"line":61,"column":45}},"32":{"start":{"line":62,"column":4},"end":{"line":62,"column":16}},"33":{"start":{"line":65,"column":4},"end":{"line":65,"column":46}},"34":{"start":{"line":68,"column":20},"end":{"line":68,"column":60}},"35":{"start":{"line":69,"column":4},"end":{"line":73,"column":5}},"36":{"start":{"line":70,"column":6},"end":{"line":72,"column":8}},"37":{"start":{"line":71,"column":42},"end":{"line":71,"column":60}},"38":{"start":{"line":74,"column":4},"end":{"line":74,"column":39}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":2},"end":{"line":2,"column":3}},"loc":{"start":{"line":2,"column":16},"end":{"line":5,"column":3}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":2},"end":{"line":6,"column":3}},"loc":{"start":{"line":6,"column":37},"end":{"line":8,"column":3}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":2},"end":{"line":9,"column":3}},"loc":{"start":{"line":9,"column":41},"end":{"line":37,"column":3}},"line":9},"3":{"name":"(anonymous_3)","decl":{"start":{"line":31,"column":30},"end":{"line":31,"column":31}},"loc":{"start":{"line":31,"column":45},"end":{"line":31,"column":71}},"line":31},"4":{"name":"(anonymous_4)","decl":{"start":{"line":38,"column":2},"end":{"line":38,"column":3}},"loc":{"start":{"line":38,"column":47},"end":{"line":46,"column":3}},"line":38},"5":{"name":"(anonymous_5)","decl":{"start":{"line":47,"column":2},"end":{"line":47,"column":3}},"loc":{"start":{"line":47,"column":23},"end":{"line":49,"column":3}},"line":47},"6":{"name":"(anonymous_6)","decl":{"start":{"line":50,"column":2},"end":{"line":50,"column":3}},"loc":{"start":{"line":50,"column":47},"end":{"line":63,"column":3}},"line":50},"7":{"name":"(anonymous_7)","decl":{"start":{"line":64,"column":2},"end":{"line":64,"column":3}},"loc":{"start":{"line":64,"column":26},"end":{"line":66,"column":3}},"line":64},"8":{"name":"(anonymous_8)","decl":{"start":{"line":67,"column":2},"end":{"line":67,"column":3}},"loc":{"start":{"line":67,"column":25},"end":{"line":75,"column":3}},"line":67},"9":{"name":"(anonymous_9)","decl":{"start":{"line":71,"column":23},"end":{"line":71,"column":24}},"loc":{"start":{"line":71,"column":42},"end":{"line":71,"column":60}},"line":71}},"branchMap":{"0":{"loc":{"start":{"line":11,"column":4},"end":{"line":13,"column":5}},"type":"if","locations":[{"start":{"line":11,"column":4},"end":{"line":13,"column":5}},{"start":{},"end":{}}],"line":11},"1":{"loc":{"start":{"line":15,"column":6},"end":{"line":17,"column":7}},"type":"if","locations":[{"start":{"line":15,"column":6},"end":{"line":17,"column":7}},{"start":{},"end":{}}],"line":15},"2":{"loc":{"start":{"line":21,"column":6},"end":{"line":27,"column":7}},"type":"if","locations":[{"start":{"line":21,"column":6},"end":{"line":27,"column":7}},{"start":{},"end":{}}],"line":21},"3":{"loc":{"start":{"line":30,"column":6},"end":{"line":34,"column":7}},"type":"if","locations":[{"start":{"line":30,"column":6},"end":{"line":34,"column":7}},{"start":{},"end":{}}],"line":30},"4":{"loc":{"start":{"line":31,"column":8},"end":{"line":33,"column":9}},"type":"if","locations":[{"start":{"line":31,"column":8},"end":{"line":33,"column":9}},{"start":{},"end":{}}],"line":31},"5":{"loc":{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":41,"column":5}},{"start":{},"end":{}}],"line":39},"6":{"loc":{"start":{"line":39,"column":8},"end":{"line":39,"column":66}},"type":"binary-expr","locations":[{"start":{"line":39,"column":8},"end":{"line":39,"column":18}},{"start":{"line":39,"column":22},"end":{"line":39,"column":66}}],"line":39},"7":{"loc":{"start":{"line":52,"column":4},"end":{"line":52,"column":31}},"type":"if","locations":[{"start":{"line":52,"column":4},"end":{"line":52,"column":31}},{"start":{},"end":{}}],"line":52},"8":{"loc":{"start":{"line":58,"column":4},"end":{"line":60,"column":5}},"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":60,"column":5}},{"start":{},"end":{}}],"line":58},"9":{"loc":{"start":{"line":58,"column":8},"end":{"line":58,"column":65}},"type":"binary-expr","locations":[{"start":{"line":58,"column":8},"end":{"line":58,"column":18}},{"start":{"line":58,"column":22},"end":{"line":58,"column":65}}],"line":58},"10":{"loc":{"start":{"line":69,"column":4},"end":{"line":73,"column":5}},"type":"if","locations":[{"start":{"line":69,"column":4},"end":{"line":73,"column":5}},{"start":{},"end":{}}],"line":69}},"s":{"0":19,"1":19,"2":20,"3":16,"4":16,"5":1,"6":15,"7":29,"8":2,"9":13,"10":39,"11":39,"12":35,"13":35,"14":2,"15":11,"16":10,"17":10,"18":10,"19":2,"20":9,"21":12,"22":1,"23":11,"24":3,"25":2,"26":2,"27":0,"28":2,"29":2,"30":1,"31":1,"32":1,"33":2,"34":3,"35":3,"36":2,"37":4,"38":1},"f":{"0":19,"1":20,"2":16,"3":10,"4":12,"5":3,"6":2,"7":2,"8":3,"9":4},"b":{"0":[1,15],"1":[2,27],"2":[35,4],"3":[10,0],"4":[2,8],"5":[1,11],"6":[12,5],"7":[0,2],"8":[1,1],"9":[2,2],"10":[2,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/registry/metadata.ts"],"sourcesContent":["import { z } from 'zod';\n\nexport interface MetadataSchema {\n  requiredFields: string[];\n  optionalFields: string[];\n  fieldTypes: Record<string, z.ZodType>;\n  validators: Record<string, ((value: unknown) => boolean)[]>;\n}\n\nexport class MetadataManager {\n  private schemas: Map<string, MetadataSchema> = new Map();\n  private metadataStore: Map<string, Record<string, unknown>> = new Map();\n\n  registerSchema(schemaName: string, schema: MetadataSchema): void {\n    this.schemas.set(schemaName, schema);\n  }\n\n  validateMetadata(schemaName: string, metadata: Record<string, unknown>): boolean {\n    const schema = this.schemas.get(schemaName);\n    if (!schema) {\n      throw new Error(`Schema ${schemaName} not found`);\n    }\n\n    // Check required fields\n    for (const field of schema.requiredFields) {\n      if (!(field in metadata)) {\n        return false;\n      }\n    }\n\n    // Validate field types\n    for (const [field, value] of Object.entries(metadata)) {\n      const fieldType = schema.fieldTypes[field];\n      if (fieldType) {\n        try {\n          fieldType.parse(value);\n        } catch {\n          return false;\n        }\n      }\n    }\n\n    // Run custom validators\n    for (const [field, validators] of Object.entries(schema.validators)) {\n      if (field in metadata) {\n        if (!validators.every(validator => validator(metadata[field]))) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  storeMetadata(\n    entryId: string,\n    metadata: Record<string, unknown>,\n    schemaName?: string\n  ): void {\n    if (schemaName && !this.validateMetadata(schemaName, metadata)) {\n      throw new Error('Metadata validation failed');\n    }\n\n    this.metadataStore.set(entryId, {\n      ...metadata,\n      lastUpdated: new Date().toISOString()\n    });\n  }\n\n  getMetadata(entryId: string): Record<string, unknown> | undefined {\n    return this.metadataStore.get(entryId);\n  }\n\n  updateMetadata(\n    entryId: string,\n    updates: Record<string, unknown>,\n    schemaName?: string\n  ): boolean {\n    const current = this.metadataStore.get(entryId);\n    if (!current) return false;\n\n    const updated = {\n      ...current,\n      ...updates,\n      lastUpdated: new Date().toISOString()\n    };\n\n    if (schemaName && !this.validateMetadata(schemaName, updated)) {\n      return false;\n    }\n\n    this.metadataStore.set(entryId, updated);\n    return true;\n  }\n\n  deleteMetadata(entryId: string): boolean {\n    return this.metadataStore.delete(entryId);\n  }\n\n  listMetadata(filterFn?: (metadata: Record<string, unknown>) => boolean): Record<string, Record<string, unknown>> {\n    const entries = Array.from(this.metadataStore.entries());\n    if (filterFn) {\n      return Object.fromEntries(\n        entries.filter(([_, metadata]) => filterFn(metadata))\n      );\n    }\n    return Object.fromEntries(entries);\n  }\n}"],"mappings":"AASO,aAAM,gBAAgB;AAAA,EAAtB;AACL,SAAQ,UAAuC,oBAAI,IAAI;AACvD,SAAQ,gBAAsD,oBAAI,IAAI;AAAA;AAAA,EAEtE,eAAe,YAAoB,QAA8B;AAC/D,SAAK,QAAQ,IAAI,YAAY,MAAM;AAAA,EACrC;AAAA,EAEA,iBAAiB,YAAoB,UAA4C;AAC/E,UAAM,SAAS,KAAK,QAAQ,IAAI,UAAU;AAC1C,QAAI,CAAC,QAAQ;AACX,YAAM,IAAI,MAAM,UAAU,UAAU,YAAY;AAAA,IAClD;AAGA,eAAW,SAAS,OAAO,gBAAgB;AACzC,UAAI,EAAE,SAAS,WAAW;AACxB,eAAO;AAAA,MACT;AAAA,IACF;AAGA,eAAW,CAAC,OAAO,KAAK,KAAK,OAAO,QAAQ,QAAQ,GAAG;AACrD,YAAM,YAAY,OAAO,WAAW,KAAK;AACzC,UAAI,WAAW;AACb,YAAI;AACF,oBAAU,MAAM,KAAK;AAAA,QACvB,QAAQ;AACN,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAGA,eAAW,CAAC,OAAO,UAAU,KAAK,OAAO,QAAQ,OAAO,UAAU,GAAG;AACnE,UAAI,SAAS,UAAU;AACrB,YAAI,CAAC,WAAW,MAAM,eAAa,UAAU,SAAS,KAAK,CAAC,CAAC,GAAG;AAC9D,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,cACE,SACA,UACA,YACM;AACN,QAAI,cAAc,CAAC,KAAK,iBAAiB,YAAY,QAAQ,GAAG;AAC9D,YAAM,IAAI,MAAM,4BAA4B;AAAA,IAC9C;AAEA,SAAK,cAAc,IAAI,SAAS;AAAA,MAC9B,GAAG;AAAA,MACH,cAAa,oBAAI,KAAK,GAAE,YAAY;AAAA,IACtC,CAAC;AAAA,EACH;AAAA,EAEA,YAAY,SAAsD;AAChE,WAAO,KAAK,cAAc,IAAI,OAAO;AAAA,EACvC;AAAA,EAEA,eACE,SACA,SACA,YACS;AACT,UAAM,UAAU,KAAK,cAAc,IAAI,OAAO;AAC9C,QAAI,CAAC,QAAS,QAAO;AAErB,UAAM,UAAU;AAAA,MACd,GAAG;AAAA,MACH,GAAG;AAAA,MACH,cAAa,oBAAI,KAAK,GAAE,YAAY;AAAA,IACtC;AAEA,QAAI,cAAc,CAAC,KAAK,iBAAiB,YAAY,OAAO,GAAG;AAC7D,aAAO;AAAA,IACT;AAEA,SAAK,cAAc,IAAI,SAAS,OAAO;AACvC,WAAO;AAAA,EACT;AAAA,EAEA,eAAe,SAA0B;AACvC,WAAO,KAAK,cAAc,OAAO,OAAO;AAAA,EAC1C;AAAA,EAEA,aAAa,UAAoG;AAC/G,UAAM,UAAU,MAAM,KAAK,KAAK,cAAc,QAAQ,CAAC;AACvD,QAAI,UAAU;AACZ,aAAO,OAAO;AAAA,QACZ,QAAQ,OAAO,CAAC,CAAC,GAAG,QAAQ,MAAM,SAAS,QAAQ,CAAC;AAAA,MACtD;AAAA,IACF;AACA,WAAO,OAAO,YAAY,OAAO;AAAA,EACnC;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"725e0b49a15b755d524d6879d8f200648ac83ef8"}}