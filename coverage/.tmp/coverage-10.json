{"/workspaces/sophra/src/app/api/cortex/engine/health/route.ts":{"path":"/workspaces/sophra/src/app/api/cortex/engine/health/route.ts","statementMap":{"0":{"start":{"line":4,"column":23},"end":{"line":4,"column":31}},"1":{"start":{"line":5,"column":24},"end":{"line":5,"column":27}},"2":{"start":{"line":7,"column":16},"end":{"line":7,"column":26}},"3":{"start":{"line":8,"column":17},"end":{"line":8,"column":19}},"4":{"start":{"line":9,"column":2},"end":{"line":34,"column":3}},"5":{"start":{"line":10,"column":27},"end":{"line":15,"column":6}},"6":{"start":{"line":11,"column":6},"end":{"line":14,"column":8}},"7":{"start":{"line":12,"column":14},"end":{"line":12,"column":61}},"8":{"start":{"line":16,"column":24},"end":{"line":19,"column":6}},"9":{"start":{"line":20,"column":4},"end":{"line":25,"column":6}},"10":{"start":{"line":27,"column":4},"end":{"line":27,"column":74}},"11":{"start":{"line":28,"column":4},"end":{"line":33,"column":6}},"12":{"start":{"line":37,"column":22},"end":{"line":37,"column":28}},"13":{"start":{"line":38,"column":2},"end":{"line":38,"column":47}},"14":{"start":{"line":39,"column":20},"end":{"line":39,"column":30}},"15":{"start":{"line":40,"column":2},"end":{"line":122,"column":3}},"16":{"start":{"line":41,"column":4},"end":{"line":41,"column":40}},"17":{"start":{"line":42,"column":21},"end":{"line":42,"column":55}},"18":{"start":{"line":43,"column":4},"end":{"line":43,"column":79}},"19":{"start":{"line":44,"column":4},"end":{"line":44,"column":52}},"20":{"start":{"line":45,"column":25},"end":{"line":92,"column":6}},"21":{"start":{"line":93,"column":19},"end":{"line":97,"column":5}},"22":{"start":{"line":98,"column":4},"end":{"line":102,"column":7}},"23":{"start":{"line":103,"column":4},"end":{"line":107,"column":7}},"24":{"start":{"line":109,"column":4},"end":{"line":113,"column":7}},"25":{"start":{"line":114,"column":4},"end":{"line":121,"column":6}}},"fnMap":{"0":{"name":"checkService","decl":{"start":{"line":6,"column":15},"end":{"line":6,"column":27}},"loc":{"start":{"line":6,"column":70},"end":{"line":35,"column":1}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":39},"end":{"line":10,"column":40}},"loc":{"start":{"line":10,"column":54},"end":{"line":15,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":12,"column":8},"end":{"line":12,"column":9}},"loc":{"start":{"line":12,"column":14},"end":{"line":12,"column":61}},"line":12},"3":{"name":"GET","decl":{"start":{"line":36,"column":22},"end":{"line":36,"column":25}},"loc":{"start":{"line":36,"column":32},"end":{"line":123,"column":1}},"line":36}},"branchMap":{"0":{"loc":{"start":{"line":21,"column":19},"end":{"line":21,"column":52}},"type":"binary-expr","locations":[{"start":{"line":21,"column":19},"end":{"line":21,"column":43}},{"start":{"line":21,"column":47},"end":{"line":21,"column":52}}],"line":21},"1":{"loc":{"start":{"line":23,"column":14},"end":{"line":23,"column":39}},"type":"binary-expr","locations":[{"start":{"line":23,"column":14},"end":{"line":23,"column":33}},{"start":{"line":23,"column":37},"end":{"line":23,"column":39}}],"line":23},"2":{"loc":{"start":{"line":24,"column":15},"end":{"line":24,"column":53}},"type":"binary-expr","locations":[{"start":{"line":24,"column":15},"end":{"line":24,"column":35}},{"start":{"line":24,"column":39},"end":{"line":24,"column":53}}],"line":24},"3":{"loc":{"start":{"line":27,"column":16},"end":{"line":27,"column":72}},"type":"cond-expr","locations":[{"start":{"line":27,"column":41},"end":{"line":27,"column":54}},{"start":{"line":27,"column":57},"end":{"line":27,"column":72}}],"line":27},"4":{"loc":{"start":{"line":110,"column":13},"end":{"line":110,"column":69}},"type":"cond-expr","locations":[{"start":{"line":110,"column":38},"end":{"line":110,"column":51}},{"start":{"line":110,"column":54},"end":{"line":110,"column":69}}],"line":110},"5":{"loc":{"start":{"line":111,"column":13},"end":{"line":111,"column":58}},"type":"cond-expr","locations":[{"start":{"line":111,"column":38},"end":{"line":111,"column":49}},{"start":{"line":111,"column":52},"end":{"line":111,"column":58}}],"line":111},"6":{"loc":{"start":{"line":117,"column":15},"end":{"line":117,"column":71}},"type":"cond-expr","locations":[{"start":{"line":117,"column":40},"end":{"line":117,"column":53}},{"start":{"line":117,"column":56},"end":{"line":117,"column":71}}],"line":117}},"s":{"0":1,"1":1,"2":4,"3":4,"4":4,"5":4,"6":4,"7":1,"8":4,"9":3,"10":1,"11":1,"12":5,"13":5,"14":5,"15":5,"16":5,"17":5,"18":4,"19":4,"20":4,"21":4,"22":4,"23":4,"24":1,"25":1},"f":{"0":4,"1":4,"2":1,"3":5},"b":{"0":[3,1],"1":[3,1],"2":[3,1],"3":[1,0],"4":[1,0],"5":[1,0],"6":[1,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/api/cortex/engine/health/route.ts"],"sourcesContent":["import { serviceManager } from \"@/lib/cortex/utils/service-manager\";\nimport logger from \"@/lib/shared/logger\";\nimport type { Logger } from \"@/lib/shared/types\";\nimport { NextRequest, NextResponse } from \"next/server\";\n// Declare Node.js runtime\nexport const runtime = \"nodejs\";\n\n\nconst SERVICE_TIMEOUT = 5000;\n\nasync function checkService<T>(\n  service: string,\n  serviceInstance: any,\n  defaultMetrics: T\n): Promise<{\n  operational: boolean;\n  latency: number;\n  errors: string[];\n  metrics: T;\n}> {\n  const start = Date.now();\n  const errors: string[] = [];\n\n  try {\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(\n        () => reject(new Error(`${service} check timed out`)),\n        SERVICE_TIMEOUT\n      );\n    });\n\n    const healthCheck = await Promise.race([\n      serviceInstance?.testService?.(),\n      timeoutPromise,\n    ]);\n\n    return {\n      operational: healthCheck?.operational ?? false,\n      latency: Date.now() - start,\n      errors: healthCheck?.errors ?? [],\n      metrics: healthCheck?.metrics ?? defaultMetrics,\n    };\n  } catch (error) {\n    errors.push(error instanceof Error ? error.message : \"Unknown error\");\n    return {\n      operational: false,\n      latency: Date.now() - start,\n      errors,\n      metrics: defaultMetrics,\n    };\n  }\n}\n\nexport async function GET(_req: NextRequest): Promise<NextResponse> {\n  const typedLogger = logger as unknown as Logger;\n  typedLogger.service = \"cortex-engine-health\";\n  const startTime = Date.now();\n\n  try {\n    logger.debug(\"Getting services...\");\n    const services = await serviceManager.getServices();\n    logger.debug(\"Got services\", { availableServices: Object.keys(services) });\n\n    logger.debug(\"Starting engine health check...\");\n    const engineHealth = await checkService(\"engine\", services.engine, {\n      status: \"unknown\",\n      uptime: 0,\n      operations: {\n        total: 0,\n        successful: 0,\n        failed: 0,\n        pending: 0,\n        lastOperation: null,\n      },\n      performance: {\n        latency: {\n          p50: 0,\n          p95: 0,\n          p99: 0,\n          average: 0,\n        },\n        throughput: {\n          current: 0,\n          average: 0,\n          peak: 0,\n        },\n        errorRate: 0,\n        successRate: 0,\n      },\n      resources: {\n        cpu: {\n          usage: 0,\n          limit: 0,\n        },\n        memory: {\n          used: 0,\n          allocated: 0,\n          peak: 0,\n        },\n        connections: {\n          active: 0,\n          idle: 0,\n          max: 0,\n        },\n      },\n      learning: {\n        activeStrategies: 0,\n        successfulOptimizations: 0,\n        failedOptimizations: 0,\n        lastOptimization: null,\n      },\n    });\n\n    const health = {\n      timestamp: new Date().toISOString(),\n      engine: engineHealth,\n      overall: engineHealth.operational,\n    };\n\n    logger.debug(\"Engine health check complete\", {\n      took: Date.now() - startTime,\n      operational: health.overall,\n      metrics: health.engine.metrics,\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: health,\n      meta: { took: Date.now() - startTime },\n    });\n  } catch (error) {\n    logger.error(\"Engine health check failed\", {\n      error: error instanceof Error ? error.message : \"Unknown error\",\n      stack: error instanceof Error ? error.stack : undefined,\n      took: Date.now() - startTime,\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n        meta: { took: Date.now() - startTime },\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"mappings":"AAAA,SAAS,sBAAsB;AAC/B,OAAO,YAAY;AAEnB,SAAsB,oBAAoB;AAEnC,aAAM,UAAU;AAGvB,MAAM,kBAAkB;AAExB,eAAe,aACb,SACA,iBACA,gBAMC;AACD,QAAM,QAAQ,KAAK,IAAI;AACvB,QAAM,SAAmB,CAAC;AAE1B,MAAI;AACF,UAAM,iBAAiB,IAAI,QAAQ,CAAC,GAAG,WAAW;AAChD;AAAA,QACE,MAAM,OAAO,IAAI,MAAM,GAAG,OAAO,kBAAkB,CAAC;AAAA,QACpD;AAAA,MACF;AAAA,IACF,CAAC;AAED,UAAM,cAAc,MAAM,QAAQ,KAAK;AAAA,MACrC,iBAAiB,cAAc;AAAA,MAC/B;AAAA,IACF,CAAC;AAED,WAAO;AAAA,MACL,aAAa,aAAa,eAAe;AAAA,MACzC,SAAS,KAAK,IAAI,IAAI;AAAA,MACtB,QAAQ,aAAa,UAAU,CAAC;AAAA,MAChC,SAAS,aAAa,WAAW;AAAA,IACnC;AAAA,EACF,SAAS,OAAO;AACd,WAAO,KAAK,iBAAiB,QAAQ,MAAM,UAAU,eAAe;AACpE,WAAO;AAAA,MACL,aAAa;AAAA,MACb,SAAS,KAAK,IAAI,IAAI;AAAA,MACtB;AAAA,MACA,SAAS;AAAA,IACX;AAAA,EACF;AACF;AAEA,sBAAsB,IAAI,MAA0C;AAClE,QAAM,cAAc;AACpB,cAAY,UAAU;AACtB,QAAM,YAAY,KAAK,IAAI;AAE3B,MAAI;AACF,WAAO,MAAM,qBAAqB;AAClC,UAAM,WAAW,MAAM,eAAe,YAAY;AAClD,WAAO,MAAM,gBAAgB,EAAE,mBAAmB,OAAO,KAAK,QAAQ,EAAE,CAAC;AAEzE,WAAO,MAAM,iCAAiC;AAC9C,UAAM,eAAe,MAAM,aAAa,UAAU,SAAS,QAAQ;AAAA,MACjE,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,YAAY;AAAA,QACV,OAAO;AAAA,QACP,YAAY;AAAA,QACZ,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,eAAe;AAAA,MACjB;AAAA,MACA,aAAa;AAAA,QACX,SAAS;AAAA,UACP,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,SAAS;AAAA,QACX;AAAA,QACA,YAAY;AAAA,UACV,SAAS;AAAA,UACT,SAAS;AAAA,UACT,MAAM;AAAA,QACR;AAAA,QACA,WAAW;AAAA,QACX,aAAa;AAAA,MACf;AAAA,MACA,WAAW;AAAA,QACT,KAAK;AAAA,UACH,OAAO;AAAA,UACP,OAAO;AAAA,QACT;AAAA,QACA,QAAQ;AAAA,UACN,MAAM;AAAA,UACN,WAAW;AAAA,UACX,MAAM;AAAA,QACR;AAAA,QACA,aAAa;AAAA,UACX,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,KAAK;AAAA,QACP;AAAA,MACF;AAAA,MACA,UAAU;AAAA,QACR,kBAAkB;AAAA,QAClB,yBAAyB;AAAA,QACzB,qBAAqB;AAAA,QACrB,kBAAkB;AAAA,MACpB;AAAA,IACF,CAAC;AAED,UAAM,SAAS;AAAA,MACb,YAAW,oBAAI,KAAK,GAAE,YAAY;AAAA,MAClC,QAAQ;AAAA,MACR,SAAS,aAAa;AAAA,IACxB;AAEA,WAAO,MAAM,gCAAgC;AAAA,MAC3C,MAAM,KAAK,IAAI,IAAI;AAAA,MACnB,aAAa,OAAO;AAAA,MACpB,SAAS,OAAO,OAAO;AAAA,IACzB,CAAC;AAED,WAAO,aAAa,KAAK;AAAA,MACvB,SAAS;AAAA,MACT,MAAM;AAAA,MACN,MAAM,EAAE,MAAM,KAAK,IAAI,IAAI,UAAU;AAAA,IACvC,CAAC;AAAA,EACH,SAAS,OAAO;AACd,WAAO,MAAM,8BAA8B;AAAA,MACzC,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MAChD,OAAO,iBAAiB,QAAQ,MAAM,QAAQ;AAAA,MAC9C,MAAM,KAAK,IAAI,IAAI;AAAA,IACrB,CAAC;AAED,WAAO,aAAa;AAAA,MAClB;AAAA,QACE,SAAS;AAAA,QACT,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,QAChD,MAAM,EAAE,MAAM,KAAK,IAAI,IAAI,UAAU;AAAA,MACvC;AAAA,MACA,EAAE,QAAQ,IAAI;AAAA,IAChB;AAAA,EACF;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ccae25dfbd6c125b6cab9c133750176e9a24b19f"}}