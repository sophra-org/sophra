{"/workspaces/sophra/src/app/api/nous/ab-testing/experiments/apply/route.ts":{"path":"/workspaces/sophra/src/app/api/nous/ab-testing/experiments/apply/route.ts","statementMap":{"0":{"start":{"line":7,"column":20},"end":{"line":13,"column":2}},"1":{"start":{"line":15,"column":15},"end":{"line":15,"column":85}},"2":{"start":{"line":16,"column":18},"end":{"line":16,"column":61}},"3":{"start":{"line":17,"column":23},"end":{"line":17,"column":24}},"4":{"start":{"line":18,"column":2},"end":{"line":23,"column":3}},"5":{"start":{"line":18,"column":15},"end":{"line":18,"column":16}},"6":{"start":{"line":19,"column":4},"end":{"line":19,"column":38}},"7":{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},"8":{"start":{"line":21,"column":6},"end":{"line":21,"column":25}},"9":{"start":{"line":24,"column":2},"end":{"line":24,"column":39}},"10":{"start":{"line":27,"column":2},"end":{"line":90,"column":3}},"11":{"start":{"line":28,"column":17},"end":{"line":28,"column":37}},"12":{"start":{"line":29,"column":23},"end":{"line":29,"column":50}},"13":{"start":{"line":30,"column":4},"end":{"line":38,"column":5}},"14":{"start":{"line":31,"column":6},"end":{"line":37,"column":8}},"15":{"start":{"line":39,"column":38},"end":{"line":39,"column":53}},"16":{"start":{"line":40,"column":23},"end":{"line":42,"column":6}},"17":{"start":{"line":43,"column":4},"end":{"line":52,"column":5}},"18":{"start":{"line":44,"column":6},"end":{"line":44,"column":60}},"19":{"start":{"line":45,"column":6},"end":{"line":51,"column":8}},"20":{"start":{"line":53,"column":4},"end":{"line":65,"column":5}},"21":{"start":{"line":54,"column":6},"end":{"line":57,"column":9}},"22":{"start":{"line":58,"column":6},"end":{"line":64,"column":8}},"23":{"start":{"line":66,"column":39},"end":{"line":66,"column":63}},"24":{"start":{"line":67,"column":20},"end":{"line":67,"column":90}},"25":{"start":{"line":68,"column":4},"end":{"line":72,"column":7}},"26":{"start":{"line":73,"column":4},"end":{"line":80,"column":7}},"27":{"start":{"line":82,"column":4},"end":{"line":82,"column":58}},"28":{"start":{"line":83,"column":4},"end":{"line":89,"column":6}}},"fnMap":{"0":{"name":"determineVariant","decl":{"start":{"line":14,"column":9},"end":{"line":14,"column":25}},"loc":{"start":{"line":14,"column":72},"end":{"line":25,"column":1}},"line":14},"1":{"name":"POST","decl":{"start":{"line":26,"column":22},"end":{"line":26,"column":26}},"loc":{"start":{"line":26,"column":36},"end":{"line":91,"column":1}},"line":26}},"branchMap":{"0":{"loc":{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},"type":"if","locations":[{"start":{"line":20,"column":4},"end":{"line":22,"column":5}},{"start":{},"end":{}}],"line":20},"1":{"loc":{"start":{"line":30,"column":4},"end":{"line":38,"column":5}},"type":"if","locations":[{"start":{"line":30,"column":4},"end":{"line":38,"column":5}},{"start":{},"end":{}}],"line":30},"2":{"loc":{"start":{"line":43,"column":4},"end":{"line":52,"column":5}},"type":"if","locations":[{"start":{"line":43,"column":4},"end":{"line":52,"column":5}},{"start":{},"end":{}}],"line":43},"3":{"loc":{"start":{"line":53,"column":4},"end":{"line":65,"column":5}},"type":"if","locations":[{"start":{"line":53,"column":4},"end":{"line":65,"column":5}},{"start":{},"end":{}}],"line":53}},"s":{"0":1,"1":2,"2":2,"3":2,"4":2,"5":2,"6":2,"7":2,"8":2,"9":0,"10":6,"11":6,"12":6,"13":6,"14":1,"15":5,"16":5,"17":4,"18":1,"19":1,"20":3,"21":1,"22":1,"23":2,"24":2,"25":2,"26":2,"27":1,"28":1},"f":{"0":2,"1":6},"b":{"0":[2,0],"1":[1,5],"2":[1,3],"3":[1,2]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/api/nous/ab-testing/experiments/apply/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport logger from \"@/lib/shared/logger\";\nimport { ExperimentStatus } from \"@prisma/client\";\nimport { z } from \"zod\";\nimport { createHash } from \"crypto\";\nimport { prisma } from \"@/lib/shared/database/client\";\n\nconst ApplySchema = z.object({\n  experimentId: z.string(),\n  context: z.object({\n    userId: z.string(),\n    sessionId: z.string()\n  })\n});\n\nfunction determineVariant(experimentId: string, userId: string, variants: string[], distribution: number[]): string {\n  // Create a deterministic hash based on experimentId and userId\n  const hash = createHash('sha256')\n    .update(`${experimentId}:${userId}`)\n    .digest('hex');\n\n  // Convert first 8 characters of hash to number between 0 and 1\n  const hashNum = parseInt(hash.slice(0, 8), 16) / 0xffffffff;\n\n  // Use the hash to select a variant based on distribution\n  let cumulativeProb = 0;\n  for (let i = 0; i < distribution.length; i++) {\n    cumulativeProb += distribution[i];\n    if (hashNum < cumulativeProb) {\n      return variants[i];\n    }\n  }\n\n  // Fallback to last variant if we somehow exceed cumulative probability\n  return variants[variants.length - 1];\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const validation = ApplySchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Invalid request format'\n        },\n        { status: 400 }\n      );\n    }\n\n    const { experimentId, context } = validation.data;\n\n    const experiment = await prisma.aBTest.findUnique({\n      where: { id: experimentId }\n    });\n\n    if (!experiment) {\n      logger.info('Experiment not found', { experimentId });\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Experiment not found'\n        },\n        { status: 404 }\n      );\n    }\n\n    if (experiment.status !== ExperimentStatus.ACTIVE) {\n      logger.info('Experiment is not active', {\n        experimentId,\n        status: experiment.status\n      });\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Experiment is not active'\n        },\n        { status: 400 }\n      );\n    }\n\n    const { variants, distribution } = experiment.configuration as {\n      variants: string[];\n      distribution: number[];\n    };\n\n    const variant = determineVariant(experimentId, context.userId, variants, distribution);\n\n    logger.info('Applied experiment variant', {\n      experimentId,\n      variant,\n      context\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        experimentId,\n        variant,\n        context\n      }\n    });\n  } catch (error) {\n    logger.error('Failed to apply experiment', { error });\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to apply experiment'\n      },\n      { status: 500 }\n    );\n  }\n} "],"mappings":"AAAA,SAAsB,oBAAoB;AAC1C,OAAO,YAAY;AACnB,SAAS,wBAAwB;AACjC,SAAS,SAAS;AAClB,SAAS,kBAAkB;AAC3B,SAAS,cAAc;AAEvB,MAAM,cAAc,EAAE,OAAO;AAAA,EAC3B,cAAc,EAAE,OAAO;AAAA,EACvB,SAAS,EAAE,OAAO;AAAA,IAChB,QAAQ,EAAE,OAAO;AAAA,IACjB,WAAW,EAAE,OAAO;AAAA,EACtB,CAAC;AACH,CAAC;AAED,SAAS,iBAAiB,cAAsB,QAAgB,UAAoB,cAAgC;AAElH,QAAM,OAAO,WAAW,QAAQ,EAC7B,OAAO,GAAG,YAAY,IAAI,MAAM,EAAE,EAClC,OAAO,KAAK;AAGf,QAAM,UAAU,SAAS,KAAK,MAAM,GAAG,CAAC,GAAG,EAAE,IAAI;AAGjD,MAAI,iBAAiB;AACrB,WAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,sBAAkB,aAAa,CAAC;AAChC,QAAI,UAAU,gBAAgB;AAC5B,aAAO,SAAS,CAAC;AAAA,IACnB;AAAA,EACF;AAGA,SAAO,SAAS,SAAS,SAAS,CAAC;AACrC;AAEA,sBAAsB,KAAK,SAAsB;AAC/C,MAAI;AACF,UAAM,OAAO,MAAM,QAAQ,KAAK;AAChC,UAAM,aAAa,YAAY,UAAU,IAAI;AAE7C,QAAI,CAAC,WAAW,SAAS;AACvB,aAAO,aAAa;AAAA,QAClB;AAAA,UACE,SAAS;AAAA,UACT,OAAO;AAAA,QACT;AAAA,QACA,EAAE,QAAQ,IAAI;AAAA,MAChB;AAAA,IACF;AAEA,UAAM,EAAE,cAAc,QAAQ,IAAI,WAAW;AAE7C,UAAM,aAAa,MAAM,OAAO,OAAO,WAAW;AAAA,MAChD,OAAO,EAAE,IAAI,aAAa;AAAA,IAC5B,CAAC;AAED,QAAI,CAAC,YAAY;AACf,aAAO,KAAK,wBAAwB,EAAE,aAAa,CAAC;AACpD,aAAO,aAAa;AAAA,QAClB;AAAA,UACE,SAAS;AAAA,UACT,OAAO;AAAA,QACT;AAAA,QACA,EAAE,QAAQ,IAAI;AAAA,MAChB;AAAA,IACF;AAEA,QAAI,WAAW,WAAW,iBAAiB,QAAQ;AACjD,aAAO,KAAK,4BAA4B;AAAA,QACtC;AAAA,QACA,QAAQ,WAAW;AAAA,MACrB,CAAC;AACD,aAAO,aAAa;AAAA,QAClB;AAAA,UACE,SAAS;AAAA,UACT,OAAO;AAAA,QACT;AAAA,QACA,EAAE,QAAQ,IAAI;AAAA,MAChB;AAAA,IACF;AAEA,UAAM,EAAE,UAAU,aAAa,IAAI,WAAW;AAK9C,UAAM,UAAU,iBAAiB,cAAc,QAAQ,QAAQ,UAAU,YAAY;AAErF,WAAO,KAAK,8BAA8B;AAAA,MACxC;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAED,WAAO,aAAa,KAAK;AAAA,MACvB,SAAS;AAAA,MACT,MAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,SAAS,OAAO;AACd,WAAO,MAAM,8BAA8B,EAAE,MAAM,CAAC;AACpD,WAAO,aAAa;AAAA,MAClB;AAAA,QACE,SAAS;AAAA,QACT,OAAO;AAAA,MACT;AAAA,MACA,EAAE,QAAQ,IAAI;AAAA,IAChB;AAAA,EACF;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d8d3aa7a29e564c9fe21a5ac0b1136dac79eecce"}}