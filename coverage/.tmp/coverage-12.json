{"/workspaces/sophra/src/lib/cortex/utils/errors.ts":{"path":"/workspaces/sophra/src/lib/cortex/utils/errors.ts","statementMap":{"0":{"start":{"line":12,"column":4},"end":{"line":12,"column":42}},"1":{"start":{"line":13,"column":4},"end":{"line":13,"column":21}},"2":{"start":{"line":14,"column":4},"end":{"line":14,"column":39}},"3":{"start":{"line":15,"column":4},"end":{"line":15,"column":30}},"4":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"5":{"start":{"line":17,"column":6},"end":{"line":17,"column":49}},"6":{"start":{"line":29,"column":4},"end":{"line":39,"column":6}},"7":{"start":{"line":43,"column":2},"end":{"line":45,"column":3}},"8":{"start":{"line":44,"column":4},"end":{"line":44,"column":42}},"9":{"start":{"line":46,"column":2},"end":{"line":50,"column":5}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":11,"column":2},"end":{"line":11,"column":3}},"loc":{"start":{"line":11,"column":35},"end":{"line":19,"column":3}},"line":11},"1":{"name":"(anonymous_1)","decl":{"start":{"line":28,"column":2},"end":{"line":28,"column":3}},"loc":{"start":{"line":28,"column":11},"end":{"line":40,"column":3}},"line":28},"2":{"name":"formatError","decl":{"start":{"line":42,"column":16},"end":{"line":42,"column":27}},"loc":{"start":{"line":42,"column":35},"end":{"line":51,"column":1}},"line":42}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":10},"end":{"line":12,"column":40}},"type":"binary-expr","locations":[{"start":{"line":12,"column":10},"end":{"line":12,"column":32}},{"start":{"line":12,"column":36},"end":{"line":12,"column":40}}],"line":12},"1":{"loc":{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":18,"column":5}},{"start":{},"end":{}}],"line":16},"2":{"loc":{"start":{"line":34,"column":21},"end":{"line":38,"column":16}},"type":"cond-expr","locations":[{"start":{"line":34,"column":42},"end":{"line":38,"column":7}},{"start":{"line":38,"column":10},"end":{"line":38,"column":16}}],"line":34},"3":{"loc":{"start":{"line":43,"column":2},"end":{"line":45,"column":3}},"type":"if","locations":[{"start":{"line":43,"column":2},"end":{"line":45,"column":3}},{"start":{},"end":{}}],"line":43}},"s":{"0":2,"1":2,"2":2,"3":2,"4":2,"5":2,"6":0,"7":0,"8":0,"9":0},"f":{"0":2,"1":0,"2":0},"b":{"0":[2,0],"1":[2,0],"2":[0,0],"3":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/utils/errors.ts"],"sourcesContent":["/**\n * 🎯 Error Utilities: Your Error Handling Helper!\n *\n * Makes errors easier to understand and handle.\n * Like having a friendly detective that investigates problems! 🔍\n */\n\n/**\n * 🎨 Custom Error: Your Special Error Type\n *\n * A better way to handle errors in your app.\n * Like having a detailed incident report form! 📝\n *\n * Features:\n * - 🏷️ Error codes\n * - 📚 Stack traces\n * - 🔍 Original error tracking\n * - 📊 JSON formatting\n *\n * @class CustomError\n * @extends {Error}\n */\nexport class CustomError extends Error {\n  readonly code: string;\n  readonly originalError?: Error;\n\n  /**\n   * 🎬 Create New Error\n   *\n   * Makes a new custom error with all the details.\n   * Like filling out an incident report! 📋\n   *\n   * @param {string} code - What kind of error it is\n   * @param {Error} [originalError] - What caused it\n   */\n  constructor(code: string, originalError?: Error) {\n    super(originalError?.message || code);\n    this.code = code;\n    this.originalError = originalError;\n    this.name = \"CustomError\";\n\n    // Maintains proper stack trace for where error was thrown\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CustomError);\n    }\n  }\n\n  /**\n   * 📝 Convert to JSON\n   *\n   * Makes the error easy to save or send.\n   * Like making a clean copy of the incident report! 📄\n   *\n   * @returns {Record<string, unknown>} The error details\n   */\n  toJSON(): Record<string, unknown> {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n      stack: this.stack,\n      originalError: this.originalError\n        ? {\n            name: this.originalError.name,\n            message: this.originalError.message,\n            stack: this.originalError.stack,\n          }\n        : undefined,\n    };\n  }\n}\n\n/**\n * 🎨 Format Error Message\n *\n * Makes errors look nice and readable.\n * Like making a neat summary of what went wrong! 📋\n *\n * @param {Error} error - The error to format\n * @returns {string} A pretty error message\n */\nexport function formatError(error: Error): string {\n  if (error instanceof CustomError) {\n    return JSON.stringify(error.toJSON());\n  }\n  return JSON.stringify({\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n  });\n}\n"],"mappings":"AAsBO,aAAM,oBAAoB,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAarC,YAAY,MAAc,eAAuB;AAC/C,UAAM,eAAe,WAAW,IAAI;AACpC,SAAK,OAAO;AACZ,SAAK,gBAAgB;AACrB,SAAK,OAAO;AAGZ,QAAI,MAAM,mBAAmB;AAC3B,YAAM,kBAAkB,MAAM,WAAW;AAAA,IAC3C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,SAAkC;AAChC,WAAO;AAAA,MACL,MAAM,KAAK;AAAA,MACX,MAAM,KAAK;AAAA,MACX,SAAS,KAAK;AAAA,MACd,OAAO,KAAK;AAAA,MACZ,eAAe,KAAK,gBAChB;AAAA,QACE,MAAM,KAAK,cAAc;AAAA,QACzB,SAAS,KAAK,cAAc;AAAA,QAC5B,OAAO,KAAK,cAAc;AAAA,MAC5B,IACA;AAAA,IACN;AAAA,EACF;AACF;AAWO,gBAAS,YAAY,OAAsB;AAChD,MAAI,iBAAiB,aAAa;AAChC,WAAO,KAAK,UAAU,MAAM,OAAO,CAAC;AAAA,EACtC;AACA,SAAO,KAAK,UAAU;AAAA,IACpB,MAAM,MAAM;AAAA,IACZ,SAAS,MAAM;AAAA,IACf,OAAO,MAAM;AAAA,EACf,CAAC;AACH;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"e4db1efd34fa0c30525eab86c6a0af9f3cdf89e7"},"/workspaces/sophra/src/lib/cortex/elasticsearch/client.ts":{"path":"/workspaces/sophra/src/lib/cortex/elasticsearch/client.ts","statementMap":{"0":{"start":{"line":13,"column":4},"end":{"line":13,"column":25}},"1":{"start":{"line":14,"column":4},"end":{"line":27,"column":5}},"2":{"start":{"line":15,"column":21},"end":{"line":17,"column":7}},"3":{"start":{"line":18,"column":6},"end":{"line":22,"column":7}},"4":{"start":{"line":19,"column":8},"end":{"line":21,"column":10}},"5":{"start":{"line":23,"column":6},"end":{"line":23,"column":39}},"6":{"start":{"line":25,"column":6},"end":{"line":25,"column":80}},"7":{"start":{"line":26,"column":6},"end":{"line":26,"column":18}},"8":{"start":{"line":38,"column":4},"end":{"line":54,"column":5}},"9":{"start":{"line":39,"column":6},"end":{"line":39,"column":31}},"10":{"start":{"line":40,"column":6},"end":{"line":40,"column":57}},"11":{"start":{"line":41,"column":6},"end":{"line":41,"column":18}},"12":{"start":{"line":43,"column":18},"end":{"line":43,"column":23}},"13":{"start":{"line":44,"column":6},"end":{"line":52,"column":9}},"14":{"start":{"line":53,"column":6},"end":{"line":53,"column":19}},"15":{"start":{"line":67,"column":4},"end":{"line":95,"column":5}},"16":{"start":{"line":68,"column":6},"end":{"line":68,"column":62}},"17":{"start":{"line":69,"column":21},"end":{"line":69,"column":64}},"18":{"start":{"line":70,"column":6},"end":{"line":70,"column":60}},"19":{"start":{"line":71,"column":6},"end":{"line":82,"column":7}},"20":{"start":{"line":72,"column":8},"end":{"line":72,"column":68}},"21":{"start":{"line":73,"column":8},"end":{"line":78,"column":11}},"22":{"start":{"line":79,"column":8},"end":{"line":79,"column":52}},"23":{"start":{"line":81,"column":8},"end":{"line":81,"column":59}},"24":{"start":{"line":84,"column":18},"end":{"line":84,"column":23}},"25":{"start":{"line":85,"column":6},"end":{"line":93,"column":9}},"26":{"start":{"line":94,"column":6},"end":{"line":94,"column":66}},"27":{"start":{"line":107,"column":4},"end":{"line":129,"column":5}},"28":{"start":{"line":108,"column":6},"end":{"line":108,"column":62}},"29":{"start":{"line":109,"column":21},"end":{"line":109,"column":64}},"30":{"start":{"line":110,"column":6},"end":{"line":110,"column":60}},"31":{"start":{"line":111,"column":6},"end":{"line":116,"column":7}},"32":{"start":{"line":112,"column":8},"end":{"line":112,"column":52}},"33":{"start":{"line":113,"column":8},"end":{"line":113,"column":52}},"34":{"start":{"line":115,"column":8},"end":{"line":115,"column":59}},"35":{"start":{"line":118,"column":18},"end":{"line":118,"column":23}},"36":{"start":{"line":119,"column":6},"end":{"line":127,"column":9}},"37":{"start":{"line":128,"column":6},"end":{"line":128,"column":66}},"38":{"start":{"line":140,"column":4},"end":{"line":140,"column":23}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":12,"column":2},"end":{"line":12,"column":3}},"loc":{"start":{"line":12,"column":22},"end":{"line":28,"column":3}},"line":12},"1":{"name":"(anonymous_1)","decl":{"start":{"line":37,"column":2},"end":{"line":37,"column":3}},"loc":{"start":{"line":37,"column":15},"end":{"line":55,"column":3}},"line":37},"2":{"name":"(anonymous_2)","decl":{"start":{"line":66,"column":2},"end":{"line":66,"column":3}},"loc":{"start":{"line":66,"column":37},"end":{"line":96,"column":3}},"line":66},"3":{"name":"(anonymous_3)","decl":{"start":{"line":106,"column":2},"end":{"line":106,"column":3}},"loc":{"start":{"line":106,"column":27},"end":{"line":130,"column":3}},"line":106},"4":{"name":"(anonymous_4)","decl":{"start":{"line":139,"column":2},"end":{"line":139,"column":3}},"loc":{"start":{"line":139,"column":14},"end":{"line":141,"column":3}},"line":139}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":14},"end":{"line":16,"column":70}},"type":"binary-expr","locations":[{"start":{"line":16,"column":14},"end":{"line":16,"column":43}},{"start":{"line":16,"column":47},"end":{"line":16,"column":70}}],"line":16},"1":{"loc":{"start":{"line":18,"column":6},"end":{"line":22,"column":7}},"type":"if","locations":[{"start":{"line":18,"column":6},"end":{"line":22,"column":7}},{"start":{},"end":{}}],"line":18},"2":{"loc":{"start":{"line":71,"column":6},"end":{"line":82,"column":7}},"type":"if","locations":[{"start":{"line":71,"column":6},"end":{"line":82,"column":7}},{"start":{"line":80,"column":13},"end":{"line":82,"column":7}}],"line":71},"3":{"loc":{"start":{"line":111,"column":6},"end":{"line":116,"column":7}},"type":"if","locations":[{"start":{"line":111,"column":6},"end":{"line":116,"column":7}},{"start":{"line":114,"column":13},"end":{"line":116,"column":7}}],"line":111}},"s":{"0":16,"1":16,"2":16,"3":16,"4":15,"5":16,"6":1,"7":1,"8":2,"9":2,"10":1,"11":1,"12":1,"13":1,"14":1,"15":3,"16":3,"17":3,"18":3,"19":3,"20":2,"21":2,"22":1,"23":1,"24":1,"25":1,"26":1,"27":3,"28":3,"29":3,"30":3,"31":3,"32":2,"33":1,"34":1,"35":1,"36":1,"37":1,"38":9},"f":{"0":16,"1":2,"2":3,"3":3,"4":9},"b":{"0":[16,1],"1":[15,1],"2":[2,1],"3":[2,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/elasticsearch/client.ts"],"sourcesContent":["/**\n * 📚 Elasticsearch Client: Your Data Librarian!\n *\n * Manages your connection to Elasticsearch.\n * Like having a friendly librarian who helps organize and find your books! 📖\n *\n * Features:\n * - 🔌 Connection management\n * - 📝 Index creation and deletion\n * - 🏥 Health checks\n * - 🔒 Secure authentication\n */\n\nimport { CustomError } from \"@/lib/cortex/utils/errors\";\nimport type { Logger } from \"@/lib/shared/types\";\nimport { Client } from \"@elastic/elasticsearch\";\n\n/**\n * 📚 Elastic Client: Your Library Manager\n *\n * Handles all communication with Elasticsearch.\n * Like having a master librarian who knows every book's location! 🗺️\n *\n * @class ElasticClient\n */\nexport class ElasticClient {\n  private readonly client: Client;\n  private readonly logger: Logger;\n\n  /**\n   * 🎬 Create New Client\n   *\n   * Sets up your connection to Elasticsearch.\n   * Like opening up the library for the day! 🌅\n   *\n   * @throws {CustomError} If connection setup fails\n   */\n  constructor(logger: Logger) {\n    this.logger = logger;\n    try {\n      const config: Record<string, any> = {\n        node: process.env.ELASTICSEARCH_URL || \"http://localhost:9200\",\n      };\n\n      // Only add auth if API key exists\n      if (process.env.ELASTICSEARCH_API_KEY) {\n        config.auth = {\n          apiKey: process.env.ELASTICSEARCH_API_KEY,\n        };\n      }\n\n      this.client = new Client(config);\n    } catch (error) {\n      this.logger.error(\"Failed to initialize Elasticsearch client\", { error });\n      throw error;\n    }\n  }\n\n  /**\n   * 🏥 Check Connection Health\n   *\n   * Makes sure we can talk to Elasticsearch.\n   * Like checking if the library is open! 🚪\n   *\n   * @returns {Promise<boolean>} true if healthy, false if there's a problem\n   */\n  async ping(): Promise<boolean> {\n    try {\n      await this.client.ping();\n      this.logger.debug(\"Elasticsearch ping successful\");\n      return true;\n    } catch (error) {\n      const err = error as Error & {\n        meta?: { statusCode?: number; headers?: unknown; body?: unknown };\n      };\n      this.logger.error(\"Elasticsearch ping failed\", {\n        error: {\n          message: err.message,\n          name: err.name,\n          statusCode: err.meta?.statusCode,\n          headers: err.meta?.headers,\n          body: err.meta?.body,\n        },\n      });\n      return false;\n    }\n  }\n\n  /**\n   * 📚 Create New Index\n   *\n   * Creates a new place to store documents.\n   * Like adding a new section to the library! 📚\n   *\n   * @param {string} index - What to call the new section\n   * @param {Record<string, unknown>} mappings - How to organize it\n   * @throws {CustomError} If creation fails\n   */\n  async createIndex(\n    index: string,\n    mappings: Record<string, unknown>\n  ): Promise<void> {\n    try {\n      this.logger.debug(`Checking if index exists: ${index}`);\n      const exists = await this.client.indices.exists({ index });\n      this.logger.debug(`Index ${index} exists: ${exists}`);\n\n      if (!exists) {\n        this.logger.debug(`Creating index: ${index}`, { mappings });\n        await this.client.indices.create({\n          index,\n          body: {\n            mappings,\n          },\n        });\n        this.logger.info(`Created index: ${index}`);\n      } else {\n        this.logger.debug(`Index ${index} already exists`);\n      }\n    } catch (error) {\n      const err = error as Error & {\n        meta?: { statusCode?: number; headers?: unknown; body?: unknown };\n      };\n      this.logger.error(`Failed to create index: ${index}`, {\n        error: {\n          message: err.message,\n          name: err.name,\n          statusCode: err.meta?.statusCode,\n          headers: err.meta?.headers,\n          body: err.meta?.body,\n        },\n      });\n      throw new CustomError(\"ELASTIC_CREATE_INDEX_FAILED\", error as Error);\n    }\n  }\n\n  /**\n   * 🗑️ Delete Index\n   *\n   * Removes an index and all its documents.\n   * Like carefully removing a section from the library! 📚\n   *\n   * @param {string} index - Which section to remove\n   * @throws {CustomError} If deletion fails\n   */\n  async deleteIndex(index: string): Promise<void> {\n    try {\n      this.logger.debug(`Checking if index exists: ${index}`);\n      const exists = await this.client.indices.exists({ index });\n      this.logger.debug(`Index ${index} exists: ${exists}`);\n\n      if (exists) {\n        await this.client.indices.delete({ index });\n        this.logger.info(`Deleted index: ${index}`);\n      } else {\n        this.logger.debug(`Index ${index} does not exist`);\n      }\n    } catch (error) {\n      const err = error as Error & {\n        meta?: { statusCode?: number; headers?: unknown; body?: unknown };\n      };\n      this.logger.error(`Failed to delete index: ${index}`, {\n        error: {\n          message: err.message,\n          name: err.name,\n          statusCode: err.meta?.statusCode,\n          headers: err.meta?.headers,\n          body: err.meta?.body,\n        },\n      });\n      throw new CustomError(\"ELASTIC_DELETE_INDEX_FAILED\", error as Error);\n    }\n  }\n\n  /**\n   * 🔑 Get Client Instance\n   *\n   * Gets the raw Elasticsearch client.\n   * Like getting the master key to the library! 🗝️\n   *\n   * @returns {Client} The Elasticsearch client\n   */\n  getClient(): Client {\n    return this.client;\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5ebe8f6ee2ac8442e8ef42cd7bbc266b6fc71692"}}