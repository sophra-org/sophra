{"/workspaces/sophra/src/lib/nous/monitoring/metrics.ts":{"path":"/workspaces/sophra/src/lib/nous/monitoring/metrics.ts","statementMap":{"0":{"start":{"line":4,"column":4},"end":{"line":4,"column":27}},"1":{"start":{"line":5,"column":4},"end":{"line":5,"column":32}},"2":{"start":{"line":6,"column":4},"end":{"line":6,"column":45}},"3":{"start":{"line":7,"column":4},"end":{"line":7,"column":45}},"4":{"start":{"line":10,"column":25},"end":{"line":10,"column":73}},"5":{"start":{"line":11,"column":4},"end":{"line":45,"column":5}},"6":{"start":{"line":12,"column":6},"end":{"line":18,"column":7}},"7":{"start":{"line":13,"column":8},"end":{"line":16,"column":11}},"8":{"start":{"line":17,"column":8},"end":{"line":17,"column":15}},"9":{"start":{"line":19,"column":6},"end":{"line":30,"column":9}},"10":{"start":{"line":20,"column":8},"end":{"line":29,"column":11}},"11":{"start":{"line":31,"column":6},"end":{"line":36,"column":9}},"12":{"start":{"line":38,"column":27},"end":{"line":38,"column":83}},"13":{"start":{"line":39,"column":6},"end":{"line":43,"column":9}},"14":{"start":{"line":44,"column":6},"end":{"line":44,"column":90}},"15":{"start":{"line":48,"column":27},"end":{"line":48,"column":77}},"16":{"start":{"line":49,"column":4},"end":{"line":81,"column":5}},"17":{"start":{"line":50,"column":6},"end":{"line":64,"column":9}},"18":{"start":{"line":51,"column":8},"end":{"line":63,"column":11}},"19":{"start":{"line":65,"column":6},"end":{"line":72,"column":9}},"20":{"start":{"line":74,"column":27},"end":{"line":74,"column":83}},"21":{"start":{"line":75,"column":6},"end":{"line":79,"column":9}},"22":{"start":{"line":80,"column":6},"end":{"line":80,"column":92}},"23":{"start":{"line":84,"column":4},"end":{"line":104,"column":5}},"24":{"start":{"line":85,"column":22},"end":{"line":99,"column":8}},"25":{"start":{"line":100,"column":6},"end":{"line":100,"column":48}},"26":{"start":{"line":102,"column":6},"end":{"line":102,"column":81}},"27":{"start":{"line":103,"column":6},"end":{"line":103,"column":71}},"28":{"start":{"line":107,"column":4},"end":{"line":113,"column":6}},"29":{"start":{"line":108,"column":59},"end":{"line":108,"column":79}},"30":{"start":{"line":109,"column":61},"end":{"line":109,"column":84}},"31":{"start":{"line":110,"column":62},"end":{"line":110,"column":85}},"32":{"start":{"line":111,"column":60},"end":{"line":111,"column":82}},"33":{"start":{"line":112,"column":63},"end":{"line":112,"column":88}},"34":{"start":{"line":116,"column":4},"end":{"line":116,"column":39}},"35":{"start":{"line":116,"column":30},"end":{"line":116,"column":39}},"36":{"start":{"line":117,"column":4},"end":{"line":117,"column":73}},"37":{"start":{"line":117,"column":38},"end":{"line":117,"column":51}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":3,"column":2},"end":{"line":3,"column":3}},"loc":{"start":{"line":3,"column":22},"end":{"line":8,"column":3}},"line":3},"1":{"name":"(anonymous_1)","decl":{"start":{"line":9,"column":2},"end":{"line":9,"column":3}},"loc":{"start":{"line":9,"column":33},"end":{"line":46,"column":3}},"line":9},"2":{"name":"(anonymous_2)","decl":{"start":{"line":19,"column":32},"end":{"line":19,"column":33}},"loc":{"start":{"line":19,"column":46},"end":{"line":30,"column":7}},"line":19},"3":{"name":"(anonymous_3)","decl":{"start":{"line":47,"column":2},"end":{"line":47,"column":3}},"loc":{"start":{"line":47,"column":36},"end":{"line":82,"column":3}},"line":47},"4":{"name":"(anonymous_4)","decl":{"start":{"line":50,"column":32},"end":{"line":50,"column":33}},"loc":{"start":{"line":50,"column":46},"end":{"line":64,"column":7}},"line":50},"5":{"name":"(anonymous_5)","decl":{"start":{"line":83,"column":2},"end":{"line":83,"column":3}},"loc":{"start":{"line":83,"column":49},"end":{"line":105,"column":3}},"line":83},"6":{"name":"(anonymous_6)","decl":{"start":{"line":106,"column":2},"end":{"line":106,"column":3}},"loc":{"start":{"line":106,"column":32},"end":{"line":114,"column":3}},"line":106},"7":{"name":"(anonymous_7)","decl":{"start":{"line":108,"column":52},"end":{"line":108,"column":53}},"loc":{"start":{"line":108,"column":59},"end":{"line":108,"column":79}},"line":108},"8":{"name":"(anonymous_8)","decl":{"start":{"line":109,"column":54},"end":{"line":109,"column":55}},"loc":{"start":{"line":109,"column":61},"end":{"line":109,"column":84}},"line":109},"9":{"name":"(anonymous_9)","decl":{"start":{"line":110,"column":55},"end":{"line":110,"column":56}},"loc":{"start":{"line":110,"column":62},"end":{"line":110,"column":85}},"line":110},"10":{"name":"(anonymous_10)","decl":{"start":{"line":111,"column":53},"end":{"line":111,"column":54}},"loc":{"start":{"line":111,"column":60},"end":{"line":111,"column":82}},"line":111},"11":{"name":"(anonymous_11)","decl":{"start":{"line":112,"column":56},"end":{"line":112,"column":57}},"loc":{"start":{"line":112,"column":63},"end":{"line":112,"column":88}},"line":112},"12":{"name":"(anonymous_12)","decl":{"start":{"line":115,"column":2},"end":{"line":115,"column":3}},"loc":{"start":{"line":115,"column":28},"end":{"line":118,"column":3}},"line":115},"13":{"name":"(anonymous_13)","decl":{"start":{"line":117,"column":26},"end":{"line":117,"column":27}},"loc":{"start":{"line":117,"column":38},"end":{"line":117,"column":51}},"line":117}},"branchMap":{"0":{"loc":{"start":{"line":6,"column":22},"end":{"line":6,"column":44}},"type":"binary-expr","locations":[{"start":{"line":6,"column":22},"end":{"line":6,"column":39}},{"start":{"line":6,"column":43},"end":{"line":6,"column":44}}],"line":6},"1":{"loc":{"start":{"line":7,"column":21},"end":{"line":7,"column":44}},"type":"binary-expr","locations":[{"start":{"line":7,"column":21},"end":{"line":7,"column":37}},{"start":{"line":7,"column":41},"end":{"line":7,"column":44}}],"line":7},"2":{"loc":{"start":{"line":12,"column":6},"end":{"line":18,"column":7}},"type":"if","locations":[{"start":{"line":12,"column":6},"end":{"line":18,"column":7}},{"start":{},"end":{}}],"line":12},"3":{"loc":{"start":{"line":25,"column":22},"end":{"line":25,"column":76}},"type":"cond-expr","locations":[{"start":{"line":25,"column":38},"end":{"line":25,"column":67}},{"start":{"line":25,"column":70},"end":{"line":25,"column":76}}],"line":25},"4":{"loc":{"start":{"line":38,"column":27},"end":{"line":38,"column":83}},"type":"cond-expr","locations":[{"start":{"line":38,"column":52},"end":{"line":38,"column":65}},{"start":{"line":38,"column":68},"end":{"line":38,"column":83}}],"line":38},"5":{"loc":{"start":{"line":58,"column":22},"end":{"line":58,"column":76}},"type":"cond-expr","locations":[{"start":{"line":58,"column":38},"end":{"line":58,"column":67}},{"start":{"line":58,"column":70},"end":{"line":58,"column":76}}],"line":58},"6":{"loc":{"start":{"line":71,"column":18},"end":{"line":71,"column":46}},"type":"cond-expr","locations":[{"start":{"line":71,"column":34},"end":{"line":71,"column":38}},{"start":{"line":71,"column":41},"end":{"line":71,"column":46}}],"line":71},"7":{"loc":{"start":{"line":74,"column":27},"end":{"line":74,"column":83}},"type":"cond-expr","locations":[{"start":{"line":74,"column":52},"end":{"line":74,"column":65}},{"start":{"line":74,"column":68},"end":{"line":74,"column":83}}],"line":74},"8":{"loc":{"start":{"line":78,"column":18},"end":{"line":78,"column":46}},"type":"cond-expr","locations":[{"start":{"line":78,"column":34},"end":{"line":78,"column":38}},{"start":{"line":78,"column":41},"end":{"line":78,"column":46}}],"line":78},"9":{"loc":{"start":{"line":116,"column":4},"end":{"line":116,"column":39}},"type":"if","locations":[{"start":{"line":116,"column":4},"end":{"line":116,"column":39}},{"start":{},"end":{}}],"line":116}},"s":{"0":16,"1":16,"2":16,"3":16,"4":6,"5":6,"6":6,"7":2,"8":2,"9":4,"10":4,"11":3,"12":1,"13":1,"14":1,"15":4,"16":4,"17":4,"18":5,"19":3,"20":1,"21":1,"22":1,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0},"f":{"0":16,"1":6,"2":4,"3":4,"4":5,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0},"b":{"0":[16,1],"1":[16,4],"2":[2,4],"3":[2,2],"4":[1,0],"5":[2,3],"6":[1,2],"7":[1,0],"8":[0,1],"9":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/monitoring/metrics.ts"],"sourcesContent":["import { prisma } from \"@/lib/shared/database/client\";\nimport { Logger } from \"@/lib/shared/types\";\nimport { MetricType } from \"@prisma/client\";\nimport { TestMetrics } from \"../engine/types\";\n\nexport interface MetricsServiceConfig {\n  logger: Logger;\n  sampleRate?: number;\n  batchSize?: number;\n}\n\nexport class MetricsService {\n  private readonly logger: Logger;\n  private readonly sampleRate: number;\n  private readonly batchSize: number;\n  private metricsQueue: Array<{\n    type: \"engine\" | \"learning\";\n    data: any;\n  }> = [];\n\n  constructor(config: MetricsServiceConfig) {\n    this.logger = config.logger;\n    this.sampleRate = config.sampleRate || 1.0;\n    this.batchSize = config.batchSize || 100;\n  }\n\n  async recordEngineMetric(data: {\n    type: MetricType;\n    value: number;\n    confidence: number;\n    metadata?: Record<string, unknown>;\n    operationId?: string;\n  }): Promise<void> {\n    const engineLogger = this.logger.child({ context: 'engine-metrics' });\n\n    try {\n      if (Math.random() >= this.sampleRate) {\n        engineLogger.debug(\"Skipping metric due to sampling\", { \n          type: data.type,\n          sampleRate: this.sampleRate \n        });\n        return;\n      }\n\n      await prisma.$transaction(async (tx) => {\n        await tx.engineMetric.create({\n          data: {\n            type: data.type,\n            value: data.value,\n            confidence: data.confidence,\n            metadata: data.metadata ? JSON.stringify(data.metadata) : undefined,\n            operationId: data.operationId,\n            timestamp: new Date(),\n          },\n        });\n      });\n\n      engineLogger.info(\"Successfully recorded engine metric\", {\n        type: data.type,\n        value: data.value,\n        confidence: data.confidence,\n        operationId: data.operationId,\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      engineLogger.error(\"Failed to record engine metric\", { \n        error: errorMessage,\n        data,\n        sampleRate: this.sampleRate \n      });\n      throw new Error(`Database error: Failed to record engine metric - ${errorMessage}`);\n    }\n  }\n\n  async recordLearningMetrics(data: {\n    type: MetricType;\n    value: number;\n    interval: string;\n    sessionId?: string;\n    modelId?: string;\n    metadata?: Record<string, unknown>;\n  }): Promise<void> {\n    const learningLogger = this.logger.child({ context: 'learning-metrics' });\n\n    try {\n      await prisma.$transaction(async (tx) => {\n        await tx.learningMetric.create({\n          data: {\n            type: data.type,\n            value: data.value,\n            interval: data.interval,\n            sessionId: data.sessionId,\n            modelId: data.modelId,\n            metadata: data.metadata ? JSON.stringify(data.metadata) : undefined,\n            timestamp: new Date(),\n            timeframe: \"1h\",\n            aggregated: false,\n          }\n        });\n      });\n\n      learningLogger.info(\"Successfully recorded learning metric\", {\n        type: data.type,\n        value: data.value,\n        interval: data.interval,\n        sessionId: data.sessionId,\n        modelId: data.modelId,\n        metadata: data.metadata ? true : false,\n      });\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n      learningLogger.error(\"Failed to record learning metric\", { \n        error: errorMessage,\n        data,\n        metadata: data.metadata ? true : false \n      });\n      throw new Error(`Database error: Failed to record learning metric - ${errorMessage}`);\n    }\n  }\n\n  async getMetricsForVariant(variant: string, startTime: number): Promise<TestMetrics> {\n    try {\n      const metrics = await prisma.engineMetric.findMany({\n        where: {\n          metadata: {\n            path: ['variant'],\n            equals: variant,\n          },\n          timestamp: {\n            gte: new Date(startTime),\n          },\n        },\n        orderBy: {\n          timestamp: \"desc\",\n        },\n        take: 100,\n      });\n\n      return this.aggregateTestMetrics(metrics);\n    } catch (error) {\n      this.logger.error(\"Failed to get metrics for variant\", { error, variant });\n      throw new Error(\"Database error: Failed to get variant metrics\");\n    }\n  }\n\n  private aggregateTestMetrics(metrics: any[]): TestMetrics {\n    return {\n      latency: this.calculateAverage(metrics.filter(m => m.type === \"LATENCY\")),\n      errorRate: this.calculateAverage(metrics.filter(m => m.type === \"ERROR_RATE\")),\n      throughput: this.calculateAverage(metrics.filter(m => m.type === \"THROUGHPUT\")),\n      cpuUsage: this.calculateAverage(metrics.filter(m => m.type === \"CPU_USAGE\")),\n      memoryUsage: this.calculateAverage(metrics.filter(m => m.type === \"MEMORY_USAGE\")),\n    };\n  }\n\n  private calculateAverage(metrics: any[]): number {\n    if (metrics.length === 0) return 0;\n    return metrics.reduce((sum, m) => sum + m.value, 0) / metrics.length;\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"08fb651c71b91d6d7f84d55b4ff0d0f022f9b4da"}}