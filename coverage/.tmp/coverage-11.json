{"/workspaces/sophra/src/lib/shared/engine/processors/base-processor.ts":{"path":"/workspaces/sophra/src/lib/shared/engine/processors/base-processor.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":25}},"1":{"start":{"line":4,"column":4},"end":{"line":4,"column":27}},"2":{"start":{"line":7,"column":27},"end":{"line":7,"column":30}},"3":{"start":{"line":8,"column":20},"end":{"line":8,"column":36}},"4":{"start":{"line":9,"column":27},"end":{"line":9,"column":127}},"5":{"start":{"line":9,"column":71},"end":{"line":9,"column":80}},"6":{"start":{"line":10,"column":4},"end":{"line":10,"column":75}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":2},"end":{"line":2,"column":3}},"loc":{"start":{"line":2,"column":31},"end":{"line":5,"column":3}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":6,"column":2},"end":{"line":6,"column":3}},"loc":{"start":{"line":6,"column":31},"end":{"line":11,"column":3}},"line":6},"2":{"name":"(anonymous_2)","decl":{"start":{"line":9,"column":57},"end":{"line":9,"column":58}},"loc":{"start":{"line":9,"column":71},"end":{"line":9,"column":80}},"line":9}},"branchMap":{},"s":{"0":9,"1":9,"2":0,"3":0,"4":0,"5":0,"6":0},"f":{"0":9,"1":0,"2":0},"b":{},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/shared/engine/processors/base-processor.ts"],"sourcesContent":["import { Logger } from \"@/lib/shared/types\";\nimport { LearningEvent, LearningPattern } from \"@prisma/client\";\nimport { MetricsAdapter } from \"../adapters/metrics-adapter\";\n\nexport abstract class BaseProcessor {\n  constructor(\n    protected logger: Logger,\n    protected metrics: MetricsAdapter\n  ) {}\n\n  abstract analyze(events: LearningEvent[]): Promise<LearningPattern[]>;\n\n  protected calculateConfidence(pattern: Partial<LearningPattern>): number {\n    const baseConfidence = 0.5;\n    const metrics = pattern.features as Record<string, number>;\n    const metricsAverage =\n      Object.values(metrics).reduce((sum, val) => sum + val, 0) /\n      Math.max(Object.keys(metrics).length, 1);\n\n    return Math.min(Math.max(baseConfidence + metricsAverage * 0.1, 0), 1);\n  }\n}\n"],"mappings":"AAIO,aAAe,cAAc;AAAA,EAClC,YACY,QACA,SACV;AAFU;AACA;AAAA,EACT;AAAA,EAIO,oBAAoB,SAA2C;AACvE,UAAM,iBAAiB;AACvB,UAAM,UAAU,QAAQ;AACxB,UAAM,iBACJ,OAAO,OAAO,OAAO,EAAE,OAAO,CAAC,KAAK,QAAQ,MAAM,KAAK,CAAC,IACxD,KAAK,IAAI,OAAO,KAAK,OAAO,EAAE,QAAQ,CAAC;AAEzC,WAAO,KAAK,IAAI,KAAK,IAAI,iBAAiB,iBAAiB,KAAK,CAAC,GAAG,CAAC;AAAA,EACvE;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1c0a2f7933877021a39021558e5e1a05eae6208a"},"/workspaces/sophra/src/lib/shared/engine/processors/strategy-processor.ts":{"path":"/workspaces/sophra/src/lib/shared/engine/processors/strategy-processor.ts","statementMap":{"0":{"start":{"line":8,"column":4},"end":{"line":8,"column":27}},"1":{"start":{"line":9,"column":4},"end":{"line":9,"column":25}},"2":{"start":{"line":12,"column":4},"end":{"line":12,"column":14}},"3":{"start":{"line":15,"column":23},"end":{"line":15,"column":25}},"4":{"start":{"line":16,"column":4},"end":{"line":53,"column":5}},"5":{"start":{"line":17,"column":6},"end":{"line":33,"column":9}},"6":{"start":{"line":34,"column":6},"end":{"line":52,"column":7}},"7":{"start":{"line":35,"column":8},"end":{"line":51,"column":11}},"8":{"start":{"line":54,"column":4},"end":{"line":54,"column":22}},"9":{"start":{"line":57,"column":4},"end":{"line":70,"column":5}},"10":{"start":{"line":59,"column":8},"end":{"line":59,"column":43}},"11":{"start":{"line":60,"column":8},"end":{"line":60,"column":14}},"12":{"start":{"line":62,"column":8},"end":{"line":62,"column":44}},"13":{"start":{"line":63,"column":8},"end":{"line":63,"column":14}},"14":{"start":{"line":65,"column":8},"end":{"line":65,"column":43}},"15":{"start":{"line":66,"column":8},"end":{"line":66,"column":14}},"16":{"start":{"line":68,"column":8},"end":{"line":68,"column":43}},"17":{"start":{"line":69,"column":8},"end":{"line":69,"column":14}},"18":{"start":{"line":71,"column":4},"end":{"line":71,"column":49}},"19":{"start":{"line":74,"column":4},"end":{"line":81,"column":7}},"20":{"start":{"line":84,"column":4},"end":{"line":91,"column":7}},"21":{"start":{"line":94,"column":4},"end":{"line":101,"column":7}},"22":{"start":{"line":104,"column":4},"end":{"line":111,"column":7}},"23":{"start":{"line":114,"column":4},"end":{"line":128,"column":7}},"24":{"start":{"line":131,"column":21},"end":{"line":131,"column":37}},"25":{"start":{"line":132,"column":4},"end":{"line":132,"column":60}},"26":{"start":{"line":135,"column":21},"end":{"line":135,"column":37}},"27":{"start":{"line":136,"column":4},"end":{"line":136,"column":60}},"28":{"start":{"line":139,"column":21},"end":{"line":139,"column":37}},"29":{"start":{"line":140,"column":4},"end":{"line":140,"column":70}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":2},"end":{"line":7,"column":3}},"loc":{"start":{"line":7,"column":39},"end":{"line":10,"column":3}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":11,"column":2},"end":{"line":11,"column":3}},"loc":{"start":{"line":11,"column":24},"end":{"line":13,"column":3}},"line":11},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":2},"end":{"line":14,"column":3}},"loc":{"start":{"line":14,"column":36},"end":{"line":55,"column":3}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":56,"column":2},"end":{"line":56,"column":3}},"loc":{"start":{"line":56,"column":34},"end":{"line":72,"column":3}},"line":56},"4":{"name":"(anonymous_4)","decl":{"start":{"line":73,"column":2},"end":{"line":73,"column":3}},"loc":{"start":{"line":73,"column":32},"end":{"line":82,"column":3}},"line":73},"5":{"name":"(anonymous_5)","decl":{"start":{"line":83,"column":2},"end":{"line":83,"column":3}},"loc":{"start":{"line":83,"column":33},"end":{"line":92,"column":3}},"line":83},"6":{"name":"(anonymous_6)","decl":{"start":{"line":93,"column":2},"end":{"line":93,"column":3}},"loc":{"start":{"line":93,"column":32},"end":{"line":102,"column":3}},"line":93},"7":{"name":"(anonymous_7)","decl":{"start":{"line":103,"column":2},"end":{"line":103,"column":3}},"loc":{"start":{"line":103,"column":32},"end":{"line":112,"column":3}},"line":103},"8":{"name":"(anonymous_8)","decl":{"start":{"line":113,"column":2},"end":{"line":113,"column":3}},"loc":{"start":{"line":113,"column":42},"end":{"line":129,"column":3}},"line":113},"9":{"name":"(anonymous_9)","decl":{"start":{"line":130,"column":2},"end":{"line":130,"column":3}},"loc":{"start":{"line":130,"column":36},"end":{"line":133,"column":3}},"line":130},"10":{"name":"(anonymous_10)","decl":{"start":{"line":134,"column":2},"end":{"line":134,"column":3}},"loc":{"start":{"line":134,"column":30},"end":{"line":137,"column":3}},"line":134},"11":{"name":"(anonymous_11)","decl":{"start":{"line":138,"column":2},"end":{"line":138,"column":3}},"loc":{"start":{"line":138,"column":32},"end":{"line":141,"column":3}},"line":138}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":4},"end":{"line":53,"column":5}},"type":"if","locations":[{"start":{"line":16,"column":4},"end":{"line":53,"column":5}},{"start":{},"end":{}}],"line":16},"1":{"loc":{"start":{"line":34,"column":6},"end":{"line":52,"column":7}},"type":"if","locations":[{"start":{"line":34,"column":6},"end":{"line":52,"column":7}},{"start":{},"end":{}}],"line":34},"2":{"loc":{"start":{"line":57,"column":4},"end":{"line":70,"column":5}},"type":"switch","locations":[{"start":{"line":58,"column":6},"end":{"line":60,"column":14}},{"start":{"line":61,"column":6},"end":{"line":63,"column":14}},{"start":{"line":64,"column":6},"end":{"line":66,"column":14}},{"start":{"line":67,"column":6},"end":{"line":69,"column":14}}],"line":57},"3":{"loc":{"start":{"line":132,"column":11},"end":{"line":132,"column":59}},"type":"binary-expr","locations":[{"start":{"line":132,"column":11},"end":{"line":132,"column":36}},{"start":{"line":132,"column":40},"end":{"line":132,"column":59}}],"line":132},"4":{"loc":{"start":{"line":136,"column":11},"end":{"line":136,"column":59}},"type":"binary-expr","locations":[{"start":{"line":136,"column":11},"end":{"line":136,"column":36}},{"start":{"line":136,"column":40},"end":{"line":136,"column":59}}],"line":136},"5":{"loc":{"start":{"line":140,"column":11},"end":{"line":140,"column":69}},"type":"binary-expr","locations":[{"start":{"line":140,"column":11},"end":{"line":140,"column":41}},{"start":{"line":140,"column":45},"end":{"line":140,"column":69}}],"line":140}},"s":{"0":9,"1":9,"2":0,"3":2,"4":2,"5":2,"6":2,"7":1,"8":2,"9":4,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":4,"19":1,"20":1,"21":1,"22":1,"23":4,"24":3,"25":3,"26":1,"27":1,"28":1,"29":1},"f":{"0":9,"1":0,"2":2,"3":4,"4":1,"5":1,"6":1,"7":1,"8":4,"9":3,"10":1,"11":1},"b":{"0":[2,0],"1":[1,1],"2":[1,1,1,1],"3":[3,3],"4":[1,1],"5":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/shared/engine/processors/strategy-processor.ts"],"sourcesContent":["import { Logger } from \"@/lib/shared/types\";\nimport {\n  EngineOptimizationStrategy,\n  EngineOptimizationType,\n  EngineRiskLevel,\n  LearningEvent,\n  LearningPattern,\n  PrismaClient,\n} from \"@prisma/client\";\nimport { MetricsAdapter } from \"../adapters/metrics-adapter\";\nimport { BaseProcessor } from \"./base-processor\";\n\nexport class StrategyProcessor extends BaseProcessor {\n  constructor(\n    logger: Logger,\n    metrics: MetricsAdapter,\n    private prisma: PrismaClient\n  ) {\n    super(logger, metrics);\n  }\n\n  async analyze(events: LearningEvent[]): Promise<LearningPattern[]> {\n    return [];\n  }\n\n  async generateStrategies(\n    pattern: LearningPattern\n  ): Promise<EngineOptimizationStrategy[]> {\n    const strategies: EngineOptimizationStrategy[] = [];\n\n    if (pattern.type === \"high_relevance_search\") {\n      strategies.push({\n        id: `opt_${pattern.id}_weights`,\n        type: EngineOptimizationType.WEIGHT_ADJUSTMENT,\n        priority: pattern.confidence,\n        confidence: pattern.confidence,\n        impact: 0.8,\n        metadata: {\n          targetMetrics: [\"RELEVANCE_SCORE\", \"SEARCH_LATENCY\"],\n          expectedImprovement: 0.15,\n          riskLevel: EngineRiskLevel.LOW,\n          dependencies: [],\n          searchPattern: pattern.id,\n        },\n        learningResultId: pattern.id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      });\n\n      if (this.isHighPerformancePattern(pattern)) {\n        strategies.push({\n          id: `opt_${pattern.id}_query`,\n          type: EngineOptimizationType.QUERY_TRANSFORMATION,\n          priority: pattern.confidence * 0.9,\n          confidence: pattern.confidence,\n          impact: 0.6,\n          metadata: {\n            targetMetrics: [\"SEARCH_LATENCY\"],\n            expectedImprovement: 0.2,\n            riskLevel: EngineRiskLevel.MEDIUM,\n            dependencies: [],\n            searchPattern: pattern.id,\n          },\n          learningResultId: pattern.id,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        });\n      }\n    }\n\n    return strategies;\n  }\n\n  async executeStrategy(strategy: EngineOptimizationStrategy): Promise<void> {\n    switch (strategy.type) {\n      case EngineOptimizationType.WEIGHT_ADJUSTMENT:\n        await this.adjustWeights(strategy);\n        break;\n      case EngineOptimizationType.QUERY_TRANSFORMATION:\n        await this.transformQuery(strategy);\n        break;\n      case EngineOptimizationType.INDEX_OPTIMIZATION:\n        await this.optimizeIndex(strategy);\n        break;\n      case EngineOptimizationType.CACHE_STRATEGY:\n        await this.optimizeCache(strategy);\n        break;\n    }\n    await this.recordStrategyExecution(strategy);\n  }\n\n  private async adjustWeights(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    await this.prisma.searchConfig.upsert({\n      where: { key: \"weightAdjustments\" },\n      create: {\n        key: \"weightAdjustments\",\n        value: JSON.stringify([strategy.metadata]),\n      },\n      update: { value: JSON.stringify([strategy.metadata]) },\n    });\n  }\n\n  private async transformQuery(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    await this.prisma.searchConfig.upsert({\n      where: { key: \"queryTransformations\" },\n      create: {\n        key: \"queryTransformations\",\n        value: JSON.stringify([strategy.metadata]),\n      },\n      update: { value: JSON.stringify([strategy.metadata]) },\n    });\n  }\n\n  private async optimizeIndex(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    await this.prisma.searchConfig.upsert({\n      where: { key: \"indexConfigurations\" },\n      create: {\n        key: \"indexConfigurations\",\n        value: JSON.stringify([strategy.metadata]),\n      },\n      update: { value: JSON.stringify([strategy.metadata]) },\n    });\n  }\n\n  private async optimizeCache(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    await this.prisma.searchConfig.upsert({\n      where: { key: \"cacheConfigurations\" },\n      create: {\n        key: \"cacheConfigurations\",\n        value: JSON.stringify([strategy.metadata]),\n      },\n      update: { value: JSON.stringify([strategy.metadata]) },\n    });\n  }\n\n  private async recordStrategyExecution(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    await this.prisma.engineLearningResult.update({\n      where: { id: strategy.learningResultId },\n      data: {\n        metadata: JSON.stringify({\n          strategyType: strategy.type,\n          confidence: strategy.confidence,\n          executionTimestamp: new Date().toISOString(),\n        }),\n        validatedAt: new Date(),\n        performance: JSON.stringify({\n          status: \"EXECUTED\",\n          timestamp: new Date().toISOString(),\n        }),\n      },\n    });\n  }\n\n  private isHighPerformancePattern(pattern: LearningPattern): boolean {\n    const features = pattern.features as { took: number };\n    return features?.took !== undefined && features.took < 100;\n  }\n\n  private isSlowQueryPattern(pattern: LearningPattern): boolean {\n    const features = pattern.features as { took: number };\n    return features?.took !== undefined && features.took > 500;\n  }\n\n  private isHighTrafficPattern(pattern: LearningPattern): boolean {\n    const features = pattern.features as { totalHits: number };\n    return features?.totalHits !== undefined && features.totalHits > 1000;\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b3c9bae2995c5805c52527d63bae4e07d877bddd"}}