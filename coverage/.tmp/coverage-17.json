{"/workspaces/sophra/src/app/api/nous/signals/route.ts":{"path":"/workspaces/sophra/src/app/api/nous/signals/route.ts","statementMap":{"0":{"start":{"line":5,"column":23},"end":{"line":5,"column":31}},"1":{"start":{"line":6,"column":27},"end":{"line":6,"column":58}},"2":{"start":{"line":8,"column":2},"end":{"line":58,"column":3}},"3":{"start":{"line":9,"column":16},"end":{"line":9,"column":32}},"4":{"start":{"line":10,"column":17},"end":{"line":10,"column":62}},"5":{"start":{"line":11,"column":21},"end":{"line":11,"column":71}},"6":{"start":{"line":12,"column":19},"end":{"line":12,"column":49}},"7":{"start":{"line":13,"column":17},"end":{"line":13,"column":45}},"8":{"start":{"line":14,"column":18},"end":{"line":17,"column":5}},"9":{"start":{"line":18,"column":34},"end":{"line":34,"column":6}},"10":{"start":{"line":35,"column":4},"end":{"line":45,"column":7}},"11":{"start":{"line":47,"column":4},"end":{"line":47,"column":55}},"12":{"start":{"line":48,"column":4},"end":{"line":57,"column":6}},"13":{"start":{"line":61,"column":2},"end":{"line":141,"column":3}},"14":{"start":{"line":62,"column":17},"end":{"line":62,"column":33}},"15":{"start":{"line":63,"column":32},"end":{"line":63,"column":42}},"16":{"start":{"line":64,"column":29},"end":{"line":76,"column":5}},"17":{"start":{"line":77,"column":23},"end":{"line":77,"column":69}},"18":{"start":{"line":78,"column":4},"end":{"line":91,"column":5}},"19":{"start":{"line":79,"column":6},"end":{"line":82,"column":9}},"20":{"start":{"line":83,"column":6},"end":{"line":90,"column":8}},"21":{"start":{"line":105,"column":8},"end":{"line":105,"column":23}},"22":{"start":{"line":106,"column":19},"end":{"line":121,"column":6}},"23":{"start":{"line":122,"column":4},"end":{"line":128,"column":7}},"24":{"start":{"line":130,"column":4},"end":{"line":130,"column":55}},"25":{"start":{"line":131,"column":4},"end":{"line":140,"column":6}}},"fnMap":{"0":{"name":"GET","decl":{"start":{"line":7,"column":22},"end":{"line":7,"column":25}},"loc":{"start":{"line":7,"column":31},"end":{"line":59,"column":1}},"line":7},"1":{"name":"POST","decl":{"start":{"line":60,"column":22},"end":{"line":60,"column":26}},"loc":{"start":{"line":60,"column":32},"end":{"line":142,"column":1}},"line":60}},"branchMap":{"0":{"loc":{"start":{"line":10,"column":26},"end":{"line":10,"column":61}},"type":"binary-expr","locations":[{"start":{"line":10,"column":26},"end":{"line":10,"column":54}},{"start":{"line":10,"column":58},"end":{"line":10,"column":61}}],"line":10},"1":{"loc":{"start":{"line":11,"column":30},"end":{"line":11,"column":70}},"type":"binary-expr","locations":[{"start":{"line":11,"column":30},"end":{"line":11,"column":62}},{"start":{"line":11,"column":66},"end":{"line":11,"column":70}}],"line":11},"2":{"loc":{"start":{"line":15,"column":9},"end":{"line":15,"column":29}},"type":"binary-expr","locations":[{"start":{"line":15,"column":9},"end":{"line":15,"column":15}},{"start":{"line":15,"column":19},"end":{"line":15,"column":29}}],"line":15},"3":{"loc":{"start":{"line":16,"column":9},"end":{"line":16,"column":25}},"type":"binary-expr","locations":[{"start":{"line":16,"column":9},"end":{"line":16,"column":13}},{"start":{"line":16,"column":17},"end":{"line":16,"column":25}}],"line":16},"4":{"loc":{"start":{"line":21,"column":13},"end":{"line":21,"column":33}},"type":"binary-expr","locations":[{"start":{"line":21,"column":13},"end":{"line":21,"column":19}},{"start":{"line":21,"column":23},"end":{"line":21,"column":33}}],"line":21},"5":{"loc":{"start":{"line":22,"column":13},"end":{"line":22,"column":29}},"type":"binary-expr","locations":[{"start":{"line":22,"column":13},"end":{"line":22,"column":17}},{"start":{"line":22,"column":21},"end":{"line":22,"column":29}}],"line":22},"6":{"loc":{"start":{"line":30,"column":13},"end":{"line":30,"column":33}},"type":"binary-expr","locations":[{"start":{"line":30,"column":13},"end":{"line":30,"column":19}},{"start":{"line":30,"column":23},"end":{"line":30,"column":33}}],"line":30},"7":{"loc":{"start":{"line":31,"column":13},"end":{"line":31,"column":29}},"type":"binary-expr","locations":[{"start":{"line":31,"column":13},"end":{"line":31,"column":17}},{"start":{"line":31,"column":21},"end":{"line":31,"column":29}}],"line":31},"8":{"loc":{"start":{"line":68,"column":17},"end":{"line":68,"column":64}},"type":"cond-expr","locations":[{"start":{"line":68,"column":34},"end":{"line":68,"column":58}},{"start":{"line":68,"column":61},"end":{"line":68,"column":64}}],"line":68},"9":{"loc":{"start":{"line":69,"column":17},"end":{"line":69,"column":40}},"type":"binary-expr","locations":[{"start":{"line":69,"column":17},"end":{"line":69,"column":31}},{"start":{"line":69,"column":35},"end":{"line":69,"column":40}}],"line":69},"10":{"loc":{"start":{"line":70,"column":14},"end":{"line":70,"column":34}},"type":"binary-expr","locations":[{"start":{"line":70,"column":14},"end":{"line":70,"column":25}},{"start":{"line":70,"column":29},"end":{"line":70,"column":34}}],"line":70},"11":{"loc":{"start":{"line":71,"column":19},"end":{"line":71,"column":71}},"type":"cond-expr","locations":[{"start":{"line":71,"column":38},"end":{"line":71,"column":64}},{"start":{"line":71,"column":67},"end":{"line":71,"column":71}}],"line":71},"12":{"loc":{"start":{"line":72,"column":16},"end":{"line":72,"column":37}},"type":"binary-expr","locations":[{"start":{"line":72,"column":16},"end":{"line":72,"column":29}},{"start":{"line":72,"column":33},"end":{"line":72,"column":37}}],"line":72},"13":{"loc":{"start":{"line":73,"column":13},"end":{"line":73,"column":31}},"type":"binary-expr","locations":[{"start":{"line":73,"column":13},"end":{"line":73,"column":23}},{"start":{"line":73,"column":27},"end":{"line":73,"column":31}}],"line":73},"14":{"loc":{"start":{"line":74,"column":15},"end":{"line":74,"column":35}},"type":"binary-expr","locations":[{"start":{"line":74,"column":15},"end":{"line":74,"column":27}},{"start":{"line":74,"column":31},"end":{"line":74,"column":35}}],"line":74},"15":{"loc":{"start":{"line":75,"column":16},"end":{"line":75,"column":37}},"type":"binary-expr","locations":[{"start":{"line":75,"column":16},"end":{"line":75,"column":29}},{"start":{"line":75,"column":33},"end":{"line":75,"column":37}}],"line":75},"16":{"loc":{"start":{"line":78,"column":4},"end":{"line":91,"column":5}},"type":"if","locations":[{"start":{"line":78,"column":4},"end":{"line":91,"column":5}},{"start":{},"end":{}}],"line":78}},"s":{"0":1,"1":1,"2":3,"3":3,"4":3,"5":3,"6":3,"7":3,"8":3,"9":3,"10":2,"11":1,"12":1,"13":2,"14":2,"15":2,"16":2,"17":2,"18":2,"19":0,"20":0,"21":2,"22":2,"23":1,"24":1,"25":1},"f":{"0":3,"1":2},"b":{"0":[3,3],"1":[3,3],"2":[3,1],"3":[3,1],"4":[3,1],"5":[3,1],"6":[3,1],"7":[3,1],"8":[2,0],"9":[2,0],"10":[2,0],"11":[0,2],"12":[2,2],"13":[2,2],"14":[2,2],"15":[2,0],"16":[0,2]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/api/nous/signals/route.ts"],"sourcesContent":["import { Prisma, SignalType } from '@prisma/client';\nimport { prisma } from \"../../../../lib/shared/database/client\";\nimport logger from \"../../../../lib/shared/logger\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { z } from \"zod\";\nimport { SignalSchema } from \"../../../../lib/shared/database/validation/generated\";\n\n// Declare Node.js runtime\nexport const runtime = \"nodejs\";\n\n// Use the generated schema but make ID optional for creation\nconst SignalCreateSchema = SignalSchema.omit({ id: true });\n\nexport async function GET(req: NextRequest): Promise<NextResponse> {\n  try {\n    const url = new URL(req.url);\n    const page = parseInt(url.searchParams.get(\"page\") || \"1\");\n    const pageSize = parseInt(url.searchParams.get(\"pageSize\") || \"50\");\n    const source = url.searchParams.get(\"source\");\n    const type = url.searchParams.get(\"type\");\n\n    const where = {\n      ...(source && { source }),\n      ...(type && { type }),\n    };\n\n    const [signals, totalCount] = await Promise.all([\n      prisma.signal.findMany({\n        where: {\n          ...(source && { source }),\n          ...(type && { type: type as SignalType }),\n        },\n        orderBy: { timestamp: \"desc\" },\n        take: pageSize,\n        skip: (page - 1) * pageSize,\n      }),\n      prisma.signal.count({\n        where: {\n          ...(source && { source }),\n          ...(type && { type: type as SignalType }),\n        },\n      }),\n    ]);\n\n    return NextResponse.json({\n      success: true,\n      data: signals,\n      metadata: {\n        count: signals.length,\n        page,\n        pageSize,\n        totalCount,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    logger.error(\"Failed to fetch signals\", { error });\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to fetch signals\",\n        metadata: {\n          timestamp: new Date().toISOString(),\n        },\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(req: NextRequest): Promise<NextResponse> {\n  try {\n    const body = await req.json();\n    const now = new Date();\n    \n    // Add default fields\n    const dataWithDefaults = {\n      ...body,\n      createdAt: now,\n      updatedAt: now,\n      timestamp: body.timestamp ? new Date(body.timestamp) : now,\n      processed: body.processed ?? false,\n      manual: body.manual ?? false,\n      processedAt: body.processedAt ? new Date(body.processedAt) : null,\n      metadata: body.metadata ?? null,\n      error: body.error ?? null,\n      retries: body.retries ?? null,\n      priority: body.priority ?? null,\n    };\n\n    const validation = SignalCreateSchema.safeParse(dataWithDefaults);\n\n    if (!validation.success) {\n      logger.error(\"Invalid signal creation request\", {\n        errors: validation.error.format(),\n        received: dataWithDefaults,\n      });\n      return NextResponse.json(\n        {\n          success: false,\n          error: \"Invalid request format\",\n          details: validation.error.format(),\n        },\n        { status: 400 }\n      );\n    }\n\n    const { \n      type, \n      source, \n      value, \n      strength,\n      priority,\n      retries,\n      manual,\n      processed,\n      processedAt,\n      error,\n      timestamp, \n      metadata \n    } = validation.data;\n\n    const signal = await prisma.signal.create({\n      data: {\n        type,\n        source,\n        value: value as Prisma.InputJsonValue,\n        strength,\n        priority,\n        retries,\n        manual,\n        processed,\n        processedAt,\n        error,\n        timestamp: new Date(timestamp),\n        metadata: metadata as Prisma.InputJsonValue,\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: signal,\n      metadata: {\n        timestamp: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    logger.error(\"Failed to create signal\", { error });\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to create signal\",\n        metadata: {\n          timestamp: new Date().toISOString(),\n        },\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b4d606e17834adc10e5e6388180ead328e2def37"}}