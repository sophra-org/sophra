{"/workspaces/sophra/src/app/api/nous/ab-testing/experiments/route.ts":{"path":"/workspaces/sophra/src/app/api/nous/ab-testing/experiments/route.ts","statementMap":{"0":{"start":{"line":6,"column":25},"end":{"line":13,"column":2}},"1":{"start":{"line":15,"column":2},"end":{"line":50,"column":3}},"2":{"start":{"line":16,"column":29},"end":{"line":16,"column":49}},"3":{"start":{"line":17,"column":17},"end":{"line":17,"column":67}},"4":{"start":{"line":18,"column":18},"end":{"line":18,"column":84}},"5":{"start":{"line":19,"column":19},"end":{"line":19,"column":45}},"6":{"start":{"line":20,"column":17},"end":{"line":20,"column":35}},"7":{"start":{"line":21,"column":18},"end":{"line":21,"column":42}},"8":{"start":{"line":22,"column":33},"end":{"line":30,"column":6}},"9":{"start":{"line":31,"column":4},"end":{"line":40,"column":7}},"10":{"start":{"line":42,"column":4},"end":{"line":42,"column":59}},"11":{"start":{"line":43,"column":4},"end":{"line":49,"column":6}},"12":{"start":{"line":53,"column":2},"end":{"line":94,"column":3}},"13":{"start":{"line":54,"column":17},"end":{"line":54,"column":37}},"14":{"start":{"line":55,"column":23},"end":{"line":55,"column":55}},"15":{"start":{"line":56,"column":4},"end":{"line":64,"column":5}},"16":{"start":{"line":57,"column":6},"end":{"line":63,"column":8}},"17":{"start":{"line":65,"column":23},"end":{"line":73,"column":6}},"18":{"start":{"line":74,"column":4},"end":{"line":77,"column":7}},"19":{"start":{"line":78,"column":4},"end":{"line":84,"column":6}},"20":{"start":{"line":86,"column":4},"end":{"line":86,"column":59}},"21":{"start":{"line":87,"column":4},"end":{"line":93,"column":6}}},"fnMap":{"0":{"name":"GET","decl":{"start":{"line":14,"column":22},"end":{"line":14,"column":25}},"loc":{"start":{"line":14,"column":35},"end":{"line":51,"column":1}},"line":14},"1":{"name":"POST","decl":{"start":{"line":52,"column":22},"end":{"line":52,"column":26}},"loc":{"start":{"line":52,"column":36},"end":{"line":95,"column":1}},"line":52}},"branchMap":{"0":{"loc":{"start":{"line":17,"column":29},"end":{"line":17,"column":66}},"type":"binary-expr","locations":[{"start":{"line":17,"column":29},"end":{"line":17,"column":61}},{"start":{"line":17,"column":65},"end":{"line":17,"column":66}}],"line":17},"1":{"loc":{"start":{"line":18,"column":43},"end":{"line":18,"column":82}},"type":"binary-expr","locations":[{"start":{"line":18,"column":43},"end":{"line":18,"column":76}},{"start":{"line":18,"column":80},"end":{"line":18,"column":82}}],"line":18},"2":{"loc":{"start":{"line":21,"column":18},"end":{"line":21,"column":42}},"type":"cond-expr","locations":[{"start":{"line":21,"column":27},"end":{"line":21,"column":37}},{"start":{"line":21,"column":40},"end":{"line":21,"column":42}}],"line":21},"3":{"loc":{"start":{"line":56,"column":4},"end":{"line":64,"column":5}},"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":64,"column":5}},{"start":{},"end":{}}],"line":56}},"s":{"0":1,"1":4,"2":4,"3":4,"4":4,"5":4,"6":4,"7":4,"8":4,"9":3,"10":1,"11":1,"12":3,"13":3,"14":3,"15":3,"16":1,"17":2,"18":1,"19":1,"20":1,"21":1},"f":{"0":4,"1":3},"b":{"0":[4,3],"1":[4,3],"2":[1,3],"3":[1,2]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/api/nous/ab-testing/experiments/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport logger from \"@/lib/shared/logger\";\nimport { ExperimentStatus } from \"@prisma/client\";\nimport { z } from \"zod\";\nimport { prisma } from \"@/lib/shared/database/client\";\n\nconst ExperimentSchema = z.object({\n  name: z.string().min(1),\n  description: z.string().optional(),\n  configuration: z.object({\n    variants: z.array(z.string()),\n    distribution: z.array(z.number())\n  })\n});\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = Math.max(1, Number(searchParams.get('page')) || 1);\n    const limit = Math.max(1, Math.min(50, Number(searchParams.get('limit')) || 10));\n    const status = searchParams.get('status') as ExperimentStatus | null;\n\n    const skip = (page - 1) * limit;\n    const where = status ? { status } : {};\n\n    const [experiments, total] = await Promise.all([\n      prisma.aBTest.findMany({\n        where,\n        skip,\n        take: limit,\n        orderBy: { createdAt: 'desc' }\n      }),\n      prisma.aBTest.count({ where })\n    ]);\n\n    return NextResponse.json({\n      success: true,\n      data: experiments,\n      metadata: {\n        total,\n        page,\n        limit,\n        hasMore: skip + limit < total\n      }\n    });\n  } catch (error) {\n    logger.error('Failed to fetch experiments', { error });\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to fetch experiments'\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const validation = ExperimentSchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: 'Invalid experiment data'\n        },\n        { status: 400 }\n      );\n    }\n    const experiment = await prisma.aBTest.create({\n      data: {\n        ...validation.data,\n        status: ExperimentStatus.PENDING,\n        startDate: new Date(),\n        endDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days from now\n      }\n    });\n\n    logger.info('Created new experiment', {\n      experimentId: experiment.id,\n      name: experiment.name\n    });\n\n    return NextResponse.json(\n      {\n        success: true,\n        data: experiment\n      },\n      { status: 201 }\n    );\n  } catch (error) {\n    logger.error('Failed to create experiment', { error });\n    return NextResponse.json(\n      {\n        success: false,\n        error: 'Failed to create experiment'\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"mappings":"AAAA,SAAsB,oBAAoB;AAC1C,OAAO,YAAY;AACnB,SAAS,wBAAwB;AACjC,SAAS,SAAS;AAClB,SAAS,cAAc;AAEvB,MAAM,mBAAmB,EAAE,OAAO;AAAA,EAChC,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC;AAAA,EACtB,aAAa,EAAE,OAAO,EAAE,SAAS;AAAA,EACjC,eAAe,EAAE,OAAO;AAAA,IACtB,UAAU,EAAE,MAAM,EAAE,OAAO,CAAC;AAAA,IAC5B,cAAc,EAAE,MAAM,EAAE,OAAO,CAAC;AAAA,EAClC,CAAC;AACH,CAAC;AAED,sBAAsB,IAAI,SAAsB;AAC9C,MAAI;AACF,UAAM,EAAE,aAAa,IAAI,IAAI,IAAI,QAAQ,GAAG;AAC5C,UAAM,OAAO,KAAK,IAAI,GAAG,OAAO,aAAa,IAAI,MAAM,CAAC,KAAK,CAAC;AAC9D,UAAM,QAAQ,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,OAAO,aAAa,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC;AAC/E,UAAM,SAAS,aAAa,IAAI,QAAQ;AAExC,UAAM,QAAQ,OAAO,KAAK;AAC1B,UAAM,QAAQ,SAAS,EAAE,OAAO,IAAI,CAAC;AAErC,UAAM,CAAC,aAAa,KAAK,IAAI,MAAM,QAAQ,IAAI;AAAA,MAC7C,OAAO,OAAO,SAAS;AAAA,QACrB;AAAA,QACA;AAAA,QACA,MAAM;AAAA,QACN,SAAS,EAAE,WAAW,OAAO;AAAA,MAC/B,CAAC;AAAA,MACD,OAAO,OAAO,MAAM,EAAE,MAAM,CAAC;AAAA,IAC/B,CAAC;AAED,WAAO,aAAa,KAAK;AAAA,MACvB,SAAS;AAAA,MACT,MAAM;AAAA,MACN,UAAU;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,OAAO,QAAQ;AAAA,MAC1B;AAAA,IACF,CAAC;AAAA,EACH,SAAS,OAAO;AACd,WAAO,MAAM,+BAA+B,EAAE,MAAM,CAAC;AACrD,WAAO,aAAa;AAAA,MAClB;AAAA,QACE,SAAS;AAAA,QACT,OAAO;AAAA,MACT;AAAA,MACA,EAAE,QAAQ,IAAI;AAAA,IAChB;AAAA,EACF;AACF;AAEA,sBAAsB,KAAK,SAAsB;AAC/C,MAAI;AACF,UAAM,OAAO,MAAM,QAAQ,KAAK;AAChC,UAAM,aAAa,iBAAiB,UAAU,IAAI;AAElD,QAAI,CAAC,WAAW,SAAS;AACvB,aAAO,aAAa;AAAA,QAClB;AAAA,UACE,SAAS;AAAA,UACT,OAAO;AAAA,QACT;AAAA,QACA,EAAE,QAAQ,IAAI;AAAA,MAChB;AAAA,IACF;AACA,UAAM,aAAa,MAAM,OAAO,OAAO,OAAO;AAAA,MAC5C,MAAM;AAAA,QACJ,GAAG,WAAW;AAAA,QACd,QAAQ,iBAAiB;AAAA,QACzB,WAAW,oBAAI,KAAK;AAAA,QACpB,SAAS,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,GAAI;AAAA;AAAA,MACzD;AAAA,IACF,CAAC;AAED,WAAO,KAAK,0BAA0B;AAAA,MACpC,cAAc,WAAW;AAAA,MACzB,MAAM,WAAW;AAAA,IACnB,CAAC;AAED,WAAO,aAAa;AAAA,MAClB;AAAA,QACE,SAAS;AAAA,QACT,MAAM;AAAA,MACR;AAAA,MACA,EAAE,QAAQ,IAAI;AAAA,IAChB;AAAA,EACF,SAAS,OAAO;AACd,WAAO,MAAM,+BAA+B,EAAE,MAAM,CAAC;AACrD,WAAO,aAAa;AAAA,MAClB;AAAA,QACE,SAAS;AAAA,QACT,OAAO;AAAA,MACT;AAAA,MACA,EAAE,QAAQ,IAAI;AAAA,IAChB;AAAA,EACF;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b01051f71f2e3ed6eeeb7e2752f9d60b9a720fa7"}}