{"/workspaces/sophra/src/lib/shared/test/prisma.mock.ts":{"path":"/workspaces/sophra/src/lib/shared/test/prisma.mock.ts","statementMap":{"0":{"start":{"line":2,"column":38},"end":{"line":117,"column":2}},"1":{"start":{"line":2,"column":45},"end":{"line":117,"column":1}},"2":{"start":{"line":118,"column":26},"end":{"line":118,"column":50}},"3":{"start":{"line":119,"column":30},"end":{"line":176,"column":1}},"4":{"start":{"line":120,"column":28},"end":{"line":120,"column":38}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":38},"end":{"line":2,"column":39}},"loc":{"start":{"line":2,"column":45},"end":{"line":117,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":120,"column":22},"end":{"line":120,"column":23}},"loc":{"start":{"line":120,"column":28},"end":{"line":120,"column":38}},"line":120}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":0},"f":{"0":1,"1":0},"b":{},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/shared/test/prisma.mock.ts"],"sourcesContent":["import { vi } from 'vitest';\nimport type { PrismaClient } from '@prisma/client';\n\nexport const createMockPrismaClient = () => ({\n  $connect: vi.fn().mockResolvedValue(undefined),\n  $disconnect: vi.fn().mockResolvedValue(undefined),\n  $queryRaw: vi.fn().mockResolvedValue([{ '?column?': 1 }]),\n  engineState: {\n    findFirst: vi.fn().mockResolvedValue({\n      id: \"state1\",\n      status: \"READY\",\n      confidence: 0.8,\n      lastActive: new Date(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      currentPhase: null,\n      metadata: \"{}\"\n    }),\n    create: vi.fn().mockResolvedValue({\n      id: \"state1\",\n      status: \"READY\",\n      confidence: 0.8,\n      lastActive: new Date(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      currentPhase: null,\n      metadata: \"{}\"\n    }),\n    update: vi.fn().mockResolvedValue({\n      id: \"state1\",\n      status: \"READY\",\n      confidence: 0.8,\n      lastActive: new Date(),\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      currentPhase: null,\n      metadata: \"{}\"\n    })\n  },\n  engineOperation: {\n    create: vi.fn().mockResolvedValue({\n      id: 'test-operation',\n      type: 'PATTERN_DETECTION',\n      status: 'RUNNING',\n      startTime: new Date(),\n      endTime: null,\n      metrics: {},\n      metadata: {},\n      error: null,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }),\n    update: vi.fn().mockResolvedValue({}),\n    findMany: vi.fn().mockResolvedValue([])\n  },\n  learningEvent: {\n    create: vi.fn().mockResolvedValue({}),\n    update: vi.fn().mockResolvedValue({}),\n    findMany: vi.fn().mockResolvedValue([])\n  },\n  learningPattern: {\n    create: vi.fn().mockResolvedValue({\n      id: 'test-pattern',\n      type: 'TEST_PATTERN',\n      confidence: 0.8,\n      features: {},\n      metadata: {},\n      eventId: 'test-event',\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }),\n    findMany: vi.fn().mockResolvedValue([])\n  },\n  experimentConfig: {\n    findUnique: vi.fn().mockResolvedValue(null),\n    create: vi.fn().mockResolvedValue({}),\n    update: vi.fn().mockResolvedValue({})\n  },\n  engineLearningResult: {\n    create: vi.fn().mockResolvedValue({}),\n    update: vi.fn().mockResolvedValue({})\n  },\n  searchWeights: {\n    findFirst: vi.fn().mockResolvedValue({\n      id: 'weights1',\n      titleWeight: 1.0,\n      contentWeight: 0.8,\n      tagWeight: 0.6,\n      active: true,\n      metadata: \"{}\",\n      createdAt: new Date(),\n      updatedAt: new Date()\n    }),\n    create: vi.fn().mockResolvedValue({}),\n    update: vi.fn().mockResolvedValue({})\n  },\n  searchConfig: {\n    upsert: vi.fn().mockResolvedValue({})\n  },\n  index: {\n    findUnique: vi.fn().mockResolvedValue({\n      name: 'test-index',\n      id: '',\n      status: '',\n      settings: null,\n      mappings: null,\n      created_at: new Date(),\n      updated_at: new Date(),\n      deleted_at: null,\n      doc_count: 0,\n      size_bytes: 0,\n      health: ''\n    }),\n    create: vi.fn(),\n    update: vi.fn(),\n    delete: vi.fn(),\n    findMany: vi.fn()\n  }\n});\n\nexport const mockPrisma = createMockPrismaClient();\n\n// Export the mock client type for use in other files\nexport type MockPrismaClient = ReturnType<typeof createMockPrismaClient>;\n\n// Export the mock Prisma client configuration for use in vi.mock\nexport const __prismaClient = {\n  PrismaClient: vi.fn(() => mockPrisma),\n  Prisma: {\n    JsonValue: undefined,\n    JsonObject: undefined,\n  },\n  EngineOperationType: {\n    PATTERN_DETECTION: 'PATTERN_DETECTION',\n    STRATEGY_EXECUTION: 'STRATEGY_EXECUTION',\n    LEARNING: 'LEARNING'\n  },\n  EngineOperationStatus: {\n    RUNNING: 'RUNNING',\n    COMPLETED: 'COMPLETED',\n    FAILED: 'FAILED'\n  },\n  EngineRiskLevel: {\n    LOW: 'LOW',\n    MEDIUM: 'MEDIUM',\n    HIGH: 'HIGH'\n  },\n  MetricType: {\n    REDIS_GET: 'REDIS_GET',\n    REDIS_ERROR: 'REDIS_ERROR',\n    SEARCH_LATENCY: 'SEARCH_LATENCY',\n    SEARCH_THROUGHPUT: 'SEARCH_THROUGHPUT',\n    SEARCH_ERROR: 'SEARCH_ERROR',\n    SEARCH_RELEVANCE: 'SEARCH_RELEVANCE',\n    SEARCH_COVERAGE: 'SEARCH_COVERAGE',\n    SEARCH_DIVERSITY: 'SEARCH_DIVERSITY',\n    SEARCH_FRESHNESS: 'SEARCH_FRESHNESS',\n    SEARCH_QUALITY: 'SEARCH_QUALITY'\n  },\n  LearningEventType: {\n    SEARCH: 'SEARCH',\n    CLICK: 'CLICK',\n    CONVERSION: 'CONVERSION',\n    FEEDBACK: 'FEEDBACK'\n  },\n  LearningEventStatus: {\n    PENDING: 'PENDING',\n    PROCESSED: 'PROCESSED',\n    FAILED: 'FAILED'\n  },\n  LearningEventPriority: {\n    LOW: 'LOW',\n    MEDIUM: 'MEDIUM',\n    HIGH: 'HIGH'\n  },\n  ExperimentStatus: {\n    DRAFT: 'DRAFT',\n    RUNNING: 'RUNNING',\n    PAUSED: 'PAUSED',\n    COMPLETED: 'COMPLETED',\n    PENDING: 'PENDING',\n    ACTIVE: 'ACTIVE'\n  }\n};\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"eb066fae066651c7a138aa7ea24eee7e52fdbc24"},"/workspaces/sophra/src/lib/cortex/monitoring/metrics-config.ts":{"path":"/workspaces/sophra/src/lib/cortex/monitoring/metrics-config.ts","statementMap":{"0":{"start":{"line":1,"column":29},"end":{"line":11,"column":1}}},"fnMap":{},"branchMap":{"0":{"loc":{"start":{"line":6,"column":17},"end":{"line":6,"column":54}},"type":"binary-expr","locations":[{"start":{"line":6,"column":17},"end":{"line":6,"column":37}},{"start":{"line":6,"column":41},"end":{"line":6,"column":54}}],"line":6}},"s":{"0":1},"f":{},"b":{"0":[1,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/monitoring/metrics-config.ts"],"sourcesContent":["/**\n * 📊 Metrics Configuration: Your Monitoring Control Panel!\n *\n * This is where we set up how we want to track our application's health.\n * Like configuring all the dials and gauges on your car's dashboard! 🚗\n *\n * Features:\n * - ⚡ Event loop monitoring\n * - 🗑️ Garbage collection tracking\n * - 🏷️ Application labeling\n * - 📏 Metric prefixing\n * - ⏰ Collection intervals\n *\n * @const {Object} metricsConfig\n * @property {boolean} eventLoopMonitoring - Watch how fast we process tasks\n * @property {boolean} gcMonitoring - Track memory cleanup\n * @property {Object} defaultLabels - Tags for all metrics\n * @property {string} prefix - Start all metric names with this\n * @property {boolean} collectDefaultMetrics - Gather standard stats\n * @property {number} defaultMetricsInterval - How often to check (ms)\n */\nexport const metricsConfig = {\n  eventLoopMonitoring: true,\n  gcMonitoring: true,\n  defaultLabels: {\n    app: \"sophra\",\n    environment: process.env.NODE_ENV || \"development\",\n  },\n  prefix: \"sophra_\",\n  collectDefaultMetrics: true,\n  defaultMetricsInterval: 10000,\n};\n"],"mappings":"AAqBO,aAAM,gBAAgB;AAAA,EAC3B,qBAAqB;AAAA,EACrB,cAAc;AAAA,EACd,eAAe;AAAA,IACb,KAAK;AAAA,IACL,aAAa,QAAQ,IAAI,YAAY;AAAA,EACvC;AAAA,EACA,QAAQ;AAAA,EACR,uBAAuB;AAAA,EACvB,wBAAwB;AAC1B;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"03911af9e14bfc53cabc408de339163b6b95b167"},"/workspaces/sophra/src/lib/cortex/monitoring/metrics.ts":{"path":"/workspaces/sophra/src/lib/cortex/monitoring/metrics.ts","statementMap":{"0":{"start":{"line":5,"column":4},"end":{"line":15,"column":6}},"1":{"start":{"line":16,"column":4},"end":{"line":16,"column":24}},"2":{"start":{"line":17,"column":4},"end":{"line":17,"column":25}},"3":{"start":{"line":18,"column":4},"end":{"line":18,"column":26}},"4":{"start":{"line":19,"column":4},"end":{"line":19,"column":25}},"5":{"start":{"line":20,"column":4},"end":{"line":33,"column":6}},"6":{"start":{"line":21,"column":6},"end":{"line":32,"column":7}},"7":{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},"8":{"start":{"line":23,"column":10},"end":{"line":23,"column":50}},"9":{"start":{"line":25,"column":8},"end":{"line":25,"column":115}},"10":{"start":{"line":26,"column":8},"end":{"line":26,"column":59}},"11":{"start":{"line":28,"column":8},"end":{"line":31,"column":11}},"12":{"start":{"line":34,"column":4},"end":{"line":37,"column":6}},"13":{"start":{"line":35,"column":6},"end":{"line":35,"column":97}},"14":{"start":{"line":36,"column":6},"end":{"line":36,"column":31}},"15":{"start":{"line":38,"column":4},"end":{"line":38,"column":25}},"16":{"start":{"line":39,"column":4},"end":{"line":39,"column":35}},"17":{"start":{"line":40,"column":4},"end":{"line":45,"column":7}},"18":{"start":{"line":46,"column":4},"end":{"line":51,"column":7}},"19":{"start":{"line":52,"column":4},"end":{"line":57,"column":7}},"20":{"start":{"line":58,"column":4},"end":{"line":63,"column":7}},"21":{"start":{"line":64,"column":4},"end":{"line":69,"column":7}},"22":{"start":{"line":70,"column":4},"end":{"line":75,"column":7}},"23":{"start":{"line":78,"column":22},"end":{"line":78,"column":53}},"24":{"start":{"line":79,"column":4},"end":{"line":79,"column":114}},"25":{"start":{"line":80,"column":4},"end":{"line":80,"column":125}},"26":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"27":{"start":{"line":82,"column":6},"end":{"line":82,"column":136}},"28":{"start":{"line":84,"column":4},"end":{"line":87,"column":7}},"29":{"start":{"line":90,"column":4},"end":{"line":90,"column":105}},"30":{"start":{"line":91,"column":4},"end":{"line":91,"column":115}},"31":{"start":{"line":92,"column":4},"end":{"line":95,"column":7}},"32":{"start":{"line":98,"column":4},"end":{"line":102,"column":34}},"33":{"start":{"line":103,"column":4},"end":{"line":105,"column":7}},"34":{"start":{"line":108,"column":18},"end":{"line":108,"column":31}},"35":{"start":{"line":109,"column":4},"end":{"line":113,"column":5}},"36":{"start":{"line":110,"column":20},"end":{"line":110,"column":32}},"37":{"start":{"line":111,"column":6},"end":{"line":111,"column":89}},"38":{"start":{"line":112,"column":6},"end":{"line":112,"column":77}},"39":{"start":{"line":116,"column":4},"end":{"line":116,"column":61}},"40":{"start":{"line":117,"column":4},"end":{"line":121,"column":7}},"41":{"start":{"line":124,"column":4},"end":{"line":124,"column":79}},"42":{"start":{"line":125,"column":4},"end":{"line":129,"column":7}},"43":{"start":{"line":132,"column":4},"end":{"line":136,"column":12}},"44":{"start":{"line":139,"column":4},"end":{"line":143,"column":6}},"45":{"start":{"line":146,"column":4},"end":{"line":150,"column":6}},"46":{"start":{"line":153,"column":4},"end":{"line":157,"column":6}},"47":{"start":{"line":160,"column":4},"end":{"line":164,"column":6}},"48":{"start":{"line":167,"column":4},"end":{"line":171,"column":6}},"49":{"start":{"line":174,"column":57},"end":{"line":174,"column":63}},"50":{"start":{"line":175,"column":4},"end":{"line":177,"column":7}},"51":{"start":{"line":176,"column":6},"end":{"line":176,"column":89}},"52":{"start":{"line":180,"column":53},"end":{"line":180,"column":60}},"53":{"start":{"line":181,"column":30},"end":{"line":191,"column":5}},"54":{"start":{"line":183,"column":25},"end":{"line":186,"column":9}},"55":{"start":{"line":185,"column":22},"end":{"line":185,"column":48}},"56":{"start":{"line":187,"column":8},"end":{"line":187,"column":62}},"57":{"start":{"line":188,"column":8},"end":{"line":188,"column":19}},"58":{"start":{"line":192,"column":4},"end":{"line":194,"column":7}},"59":{"start":{"line":193,"column":6},"end":{"line":193,"column":94}},"60":{"start":{"line":197,"column":4},"end":{"line":197,"column":41}},"61":{"start":{"line":200,"column":29},"end":{"line":206,"column":5}},"62":{"start":{"line":202,"column":8},"end":{"line":202,"column":74}},"63":{"start":{"line":203,"column":8},"end":{"line":203,"column":19}},"64":{"start":{"line":207,"column":4},"end":{"line":211,"column":12}},"65":{"start":{"line":214,"column":4},"end":{"line":232,"column":5}},"66":{"start":{"line":215,"column":30},"end":{"line":215,"column":37}},"67":{"start":{"line":216,"column":6},"end":{"line":218,"column":7}},"68":{"start":{"line":217,"column":8},"end":{"line":217,"column":52}},"69":{"start":{"line":219,"column":6},"end":{"line":219,"column":99}},"70":{"start":{"line":220,"column":6},"end":{"line":220,"column":102}},"71":{"start":{"line":221,"column":6},"end":{"line":221,"column":93}},"72":{"start":{"line":222,"column":6},"end":{"line":226,"column":9}},"73":{"start":{"line":228,"column":6},"end":{"line":231,"column":9}},"74":{"start":{"line":235,"column":4},"end":{"line":235,"column":58}},"75":{"start":{"line":238,"column":4},"end":{"line":245,"column":5}},"76":{"start":{"line":239,"column":6},"end":{"line":244,"column":9}},"77":{"start":{"line":248,"column":4},"end":{"line":255,"column":5}},"78":{"start":{"line":249,"column":6},"end":{"line":254,"column":9}},"79":{"start":{"line":258,"column":4},"end":{"line":268,"column":6}},"80":{"start":{"line":271,"column":4},"end":{"line":271,"column":39}},"81":{"start":{"line":274,"column":4},"end":{"line":274,"column":35}},"82":{"start":{"line":277,"column":4},"end":{"line":277,"column":34}},"83":{"start":{"line":280,"column":4},"end":{"line":280,"column":33}},"84":{"start":{"line":283,"column":4},"end":{"line":283,"column":36}},"85":{"start":{"line":286,"column":4},"end":{"line":286,"column":40}},"86":{"start":{"line":289,"column":4},"end":{"line":289,"column":45}},"87":{"start":{"line":292,"column":4},"end":{"line":292,"column":41}},"88":{"start":{"line":295,"column":4},"end":{"line":295,"column":42}},"89":{"start":{"line":298,"column":4},"end":{"line":298,"column":50}},"90":{"start":{"line":299,"column":4},"end":{"line":299,"column":68}},"91":{"start":{"line":302,"column":4},"end":{"line":302,"column":28}},"92":{"start":{"line":305,"column":4},"end":{"line":305,"column":29}},"93":{"start":{"line":308,"column":26},"end":{"line":308,"column":56}},"94":{"start":{"line":309,"column":4},"end":{"line":309,"column":42}},"95":{"start":{"line":309,"column":31},"end":{"line":309,"column":42}},"96":{"start":{"line":310,"column":17},"end":{"line":310,"column":88}},"97":{"start":{"line":310,"column":52},"end":{"line":310,"column":61}},"98":{"start":{"line":311,"column":21},"end":{"line":311,"column":112}},"99":{"start":{"line":311,"column":56},"end":{"line":311,"column":85}},"100":{"start":{"line":312,"column":4},"end":{"line":312,"column":38}},"101":{"start":{"line":315,"column":4},"end":{"line":315,"column":35}},"102":{"start":{"line":318,"column":26},"end":{"line":320,"column":5}},"103":{"start":{"line":321,"column":4},"end":{"line":321,"column":34}},"104":{"start":{"line":321,"column":24},"end":{"line":321,"column":34}},"105":{"start":{"line":322,"column":4},"end":{"line":324,"column":6}},"106":{"start":{"line":323,"column":13},"end":{"line":323,"column":20}},"107":{"start":{"line":327,"column":4},"end":{"line":333,"column":6}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":4,"column":2},"end":{"line":4,"column":3}},"loc":{"start":{"line":4,"column":39},"end":{"line":76,"column":3}},"line":4},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":30},"end":{"line":20,"column":31}},"loc":{"start":{"line":20,"column":46},"end":{"line":33,"column":5}},"line":20},"2":{"name":"(anonymous_2)","decl":{"start":{"line":34,"column":33},"end":{"line":34,"column":34}},"loc":{"start":{"line":34,"column":43},"end":{"line":37,"column":5}},"line":34},"3":{"name":"(anonymous_3)","decl":{"start":{"line":77,"column":2},"end":{"line":77,"column":3}},"loc":{"start":{"line":77,"column":31},"end":{"line":88,"column":3}},"line":77},"4":{"name":"(anonymous_4)","decl":{"start":{"line":89,"column":2},"end":{"line":89,"column":3}},"loc":{"start":{"line":89,"column":28},"end":{"line":96,"column":3}},"line":89},"5":{"name":"(anonymous_5)","decl":{"start":{"line":97,"column":2},"end":{"line":97,"column":3}},"loc":{"start":{"line":97,"column":35},"end":{"line":106,"column":3}},"line":97},"6":{"name":"(anonymous_6)","decl":{"start":{"line":107,"column":2},"end":{"line":107,"column":3}},"loc":{"start":{"line":107,"column":36},"end":{"line":114,"column":3}},"line":107},"7":{"name":"(anonymous_7)","decl":{"start":{"line":115,"column":2},"end":{"line":115,"column":3}},"loc":{"start":{"line":115,"column":43},"end":{"line":122,"column":3}},"line":115},"8":{"name":"(anonymous_8)","decl":{"start":{"line":123,"column":2},"end":{"line":123,"column":3}},"loc":{"start":{"line":123,"column":43},"end":{"line":130,"column":3}},"line":123},"9":{"name":"(anonymous_9)","decl":{"start":{"line":131,"column":2},"end":{"line":131,"column":3}},"loc":{"start":{"line":131,"column":34},"end":{"line":137,"column":3}},"line":131},"10":{"name":"(anonymous_10)","decl":{"start":{"line":138,"column":2},"end":{"line":138,"column":3}},"loc":{"start":{"line":138,"column":31},"end":{"line":144,"column":3}},"line":138},"11":{"name":"(anonymous_11)","decl":{"start":{"line":145,"column":2},"end":{"line":145,"column":3}},"loc":{"start":{"line":145,"column":30},"end":{"line":151,"column":3}},"line":145},"12":{"name":"(anonymous_12)","decl":{"start":{"line":152,"column":2},"end":{"line":152,"column":3}},"loc":{"start":{"line":152,"column":31},"end":{"line":158,"column":3}},"line":152},"13":{"name":"(anonymous_13)","decl":{"start":{"line":159,"column":2},"end":{"line":159,"column":3}},"loc":{"start":{"line":159,"column":31},"end":{"line":165,"column":3}},"line":159},"14":{"name":"(anonymous_14)","decl":{"start":{"line":166,"column":2},"end":{"line":166,"column":3}},"loc":{"start":{"line":166,"column":29},"end":{"line":172,"column":3}},"line":166},"15":{"name":"(anonymous_15)","decl":{"start":{"line":173,"column":2},"end":{"line":173,"column":3}},"loc":{"start":{"line":173,"column":30},"end":{"line":178,"column":3}},"line":173},"16":{"name":"(anonymous_16)","decl":{"start":{"line":175,"column":36},"end":{"line":175,"column":37}},"loc":{"start":{"line":175,"column":62},"end":{"line":177,"column":5}},"line":175},"17":{"name":"(anonymous_17)","decl":{"start":{"line":179,"column":2},"end":{"line":179,"column":3}},"loc":{"start":{"line":179,"column":27},"end":{"line":195,"column":3}},"line":179},"18":{"name":"(anonymous_18)","decl":{"start":{"line":182,"column":6},"end":{"line":182,"column":7}},"loc":{"start":{"line":182,"column":29},"end":{"line":189,"column":7}},"line":182},"19":{"name":"(anonymous_19)","decl":{"start":{"line":185,"column":10},"end":{"line":185,"column":11}},"loc":{"start":{"line":185,"column":22},"end":{"line":185,"column":48}},"line":185},"20":{"name":"(anonymous_20)","decl":{"start":{"line":192,"column":46},"end":{"line":192,"column":47}},"loc":{"start":{"line":192,"column":72},"end":{"line":194,"column":5}},"line":192},"21":{"name":"(anonymous_21)","decl":{"start":{"line":196,"column":2},"end":{"line":196,"column":3}},"loc":{"start":{"line":196,"column":21},"end":{"line":198,"column":3}},"line":196},"22":{"name":"(anonymous_22)","decl":{"start":{"line":199,"column":2},"end":{"line":199,"column":3}},"loc":{"start":{"line":199,"column":32},"end":{"line":212,"column":3}},"line":199},"23":{"name":"(anonymous_23)","decl":{"start":{"line":201,"column":6},"end":{"line":201,"column":7}},"loc":{"start":{"line":201,"column":29},"end":{"line":204,"column":7}},"line":201},"24":{"name":"(anonymous_24)","decl":{"start":{"line":213,"column":2},"end":{"line":213,"column":3}},"loc":{"start":{"line":213,"column":31},"end":{"line":233,"column":3}},"line":213},"25":{"name":"(anonymous_25)","decl":{"start":{"line":234,"column":2},"end":{"line":234,"column":3}},"loc":{"start":{"line":234,"column":18},"end":{"line":236,"column":3}},"line":234},"26":{"name":"(anonymous_26)","decl":{"start":{"line":237,"column":2},"end":{"line":237,"column":3}},"loc":{"start":{"line":237,"column":30},"end":{"line":246,"column":3}},"line":237},"27":{"name":"(anonymous_27)","decl":{"start":{"line":247,"column":2},"end":{"line":247,"column":3}},"loc":{"start":{"line":247,"column":28},"end":{"line":256,"column":3}},"line":247},"28":{"name":"(anonymous_28)","decl":{"start":{"line":257,"column":2},"end":{"line":257,"column":3}},"loc":{"start":{"line":257,"column":34},"end":{"line":269,"column":3}},"line":257},"29":{"name":"(anonymous_29)","decl":{"start":{"line":270,"column":2},"end":{"line":270,"column":3}},"loc":{"start":{"line":270,"column":28},"end":{"line":272,"column":3}},"line":270},"30":{"name":"(anonymous_30)","decl":{"start":{"line":273,"column":2},"end":{"line":273,"column":3}},"loc":{"start":{"line":273,"column":24},"end":{"line":275,"column":3}},"line":273},"31":{"name":"(anonymous_31)","decl":{"start":{"line":276,"column":2},"end":{"line":276,"column":3}},"loc":{"start":{"line":276,"column":23},"end":{"line":278,"column":3}},"line":276},"32":{"name":"(anonymous_32)","decl":{"start":{"line":279,"column":2},"end":{"line":279,"column":3}},"loc":{"start":{"line":279,"column":22},"end":{"line":281,"column":3}},"line":279},"33":{"name":"(anonymous_33)","decl":{"start":{"line":282,"column":2},"end":{"line":282,"column":3}},"loc":{"start":{"line":282,"column":25},"end":{"line":284,"column":3}},"line":282},"34":{"name":"(anonymous_34)","decl":{"start":{"line":285,"column":2},"end":{"line":285,"column":3}},"loc":{"start":{"line":285,"column":28},"end":{"line":287,"column":3}},"line":285},"35":{"name":"(anonymous_35)","decl":{"start":{"line":288,"column":2},"end":{"line":288,"column":3}},"loc":{"start":{"line":288,"column":34},"end":{"line":290,"column":3}},"line":288},"36":{"name":"(anonymous_36)","decl":{"start":{"line":291,"column":2},"end":{"line":291,"column":3}},"loc":{"start":{"line":291,"column":30},"end":{"line":293,"column":3}},"line":291},"37":{"name":"(anonymous_37)","decl":{"start":{"line":294,"column":2},"end":{"line":294,"column":3}},"loc":{"start":{"line":294,"column":31},"end":{"line":296,"column":3}},"line":294},"38":{"name":"(anonymous_38)","decl":{"start":{"line":297,"column":2},"end":{"line":297,"column":3}},"loc":{"start":{"line":297,"column":30},"end":{"line":300,"column":3}},"line":297},"39":{"name":"(anonymous_39)","decl":{"start":{"line":301,"column":2},"end":{"line":301,"column":3}},"loc":{"start":{"line":301,"column":19},"end":{"line":303,"column":3}},"line":301},"40":{"name":"(anonymous_40)","decl":{"start":{"line":304,"column":2},"end":{"line":304,"column":3}},"loc":{"start":{"line":304,"column":20},"end":{"line":306,"column":3}},"line":304},"41":{"name":"(anonymous_41)","decl":{"start":{"line":307,"column":2},"end":{"line":307,"column":3}},"loc":{"start":{"line":307,"column":31},"end":{"line":313,"column":3}},"line":307},"42":{"name":"(anonymous_42)","decl":{"start":{"line":310,"column":38},"end":{"line":310,"column":39}},"loc":{"start":{"line":310,"column":52},"end":{"line":310,"column":61}},"line":310},"43":{"name":"(anonymous_43)","decl":{"start":{"line":311,"column":42},"end":{"line":311,"column":43}},"loc":{"start":{"line":311,"column":56},"end":{"line":311,"column":85}},"line":311},"44":{"name":"(anonymous_44)","decl":{"start":{"line":314,"column":2},"end":{"line":314,"column":3}},"loc":{"start":{"line":314,"column":34},"end":{"line":316,"column":3}},"line":314},"45":{"name":"(anonymous_45)","decl":{"start":{"line":317,"column":2},"end":{"line":317,"column":3}},"loc":{"start":{"line":317,"column":28},"end":{"line":325,"column":3}},"line":317},"46":{"name":"(anonymous_46)","decl":{"start":{"line":323,"column":6},"end":{"line":323,"column":7}},"loc":{"start":{"line":323,"column":13},"end":{"line":323,"column":20}},"line":323},"47":{"name":"(anonymous_47)","decl":{"start":{"line":326,"column":2},"end":{"line":326,"column":3}},"loc":{"start":{"line":326,"column":50},"end":{"line":334,"column":3}},"line":326}},"branchMap":{"0":{"loc":{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},"type":"if","locations":[{"start":{"line":22,"column":8},"end":{"line":24,"column":9}},{"start":{},"end":{}}],"line":22},"1":{"loc":{"start":{"line":25,"column":68},"end":{"line":25,"column":97}},"type":"binary-expr","locations":[{"start":{"line":25,"column":68},"end":{"line":25,"column":84}},{"start":{"line":25,"column":88},"end":{"line":25,"column":97}}],"line":25},"2":{"loc":{"start":{"line":78,"column":22},"end":{"line":78,"column":53}},"type":"binary-expr","locations":[{"start":{"line":78,"column":22},"end":{"line":78,"column":40}},{"start":{"line":78,"column":44},"end":{"line":78,"column":53}}],"line":78},"3":{"loc":{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":83,"column":5}},{"start":{},"end":{}}],"line":81},"4":{"loc":{"start":{"line":109,"column":4},"end":{"line":113,"column":5}},"type":"if","locations":[{"start":{"line":109,"column":4},"end":{"line":113,"column":5}},{"start":{},"end":{}}],"line":109},"5":{"loc":{"start":{"line":142,"column":6},"end":{"line":142,"column":100}},"type":"cond-expr","locations":[{"start":{"line":142,"column":27},"end":{"line":142,"column":73}},{"start":{"line":142,"column":76},"end":{"line":142,"column":100}}],"line":142},"6":{"loc":{"start":{"line":180,"column":12},"end":{"line":180,"column":33}},"type":"default-arg","locations":[{"start":{"line":180,"column":25},"end":{"line":180,"column":33}}],"line":180},"7":{"loc":{"start":{"line":187,"column":24},"end":{"line":187,"column":61}},"type":"cond-expr","locations":[{"start":{"line":187,"column":52},"end":{"line":187,"column":57}},{"start":{"line":187,"column":60},"end":{"line":187,"column":61}}],"line":187},"8":{"loc":{"start":{"line":208,"column":6},"end":{"line":208,"column":40}},"type":"binary-expr","locations":[{"start":{"line":208,"column":6},"end":{"line":208,"column":27}},{"start":{"line":208,"column":31},"end":{"line":208,"column":40}}],"line":208},"9":{"loc":{"start":{"line":209,"column":6},"end":{"line":209,"column":43}},"type":"binary-expr","locations":[{"start":{"line":209,"column":6},"end":{"line":209,"column":30}},{"start":{"line":209,"column":34},"end":{"line":209,"column":43}}],"line":209},"10":{"loc":{"start":{"line":210,"column":6},"end":{"line":210,"column":40}},"type":"binary-expr","locations":[{"start":{"line":210,"column":6},"end":{"line":210,"column":32}},{"start":{"line":210,"column":36},"end":{"line":210,"column":40}}],"line":210},"11":{"loc":{"start":{"line":216,"column":6},"end":{"line":218,"column":7}},"type":"if","locations":[{"start":{"line":216,"column":6},"end":{"line":218,"column":7}},{"start":{},"end":{}}],"line":216},"12":{"loc":{"start":{"line":216,"column":10},"end":{"line":216,"column":129}},"type":"binary-expr","locations":[{"start":{"line":216,"column":10},"end":{"line":216,"column":17}},{"start":{"line":216,"column":21},"end":{"line":216,"column":25}},{"start":{"line":216,"column":29},"end":{"line":216,"column":60}},{"start":{"line":216,"column":64},"end":{"line":216,"column":96}},{"start":{"line":216,"column":100},"end":{"line":216,"column":129}}],"line":216},"13":{"loc":{"start":{"line":238,"column":4},"end":{"line":245,"column":5}},"type":"if","locations":[{"start":{"line":238,"column":4},"end":{"line":245,"column":5}},{"start":{},"end":{}}],"line":238},"14":{"loc":{"start":{"line":248,"column":4},"end":{"line":255,"column":5}},"type":"if","locations":[{"start":{"line":248,"column":4},"end":{"line":255,"column":5}},{"start":{},"end":{}}],"line":248},"15":{"loc":{"start":{"line":309,"column":4},"end":{"line":309,"column":42}},"type":"if","locations":[{"start":{"line":309,"column":4},"end":{"line":309,"column":42}},{"start":{},"end":{}}],"line":309},"16":{"loc":{"start":{"line":321,"column":4},"end":{"line":321,"column":34}},"type":"if","locations":[{"start":{"line":321,"column":4},"end":{"line":321,"column":34}},{"start":{},"end":{}}],"line":321}},"s":{"0":7,"1":7,"2":7,"3":7,"4":7,"5":7,"6":4,"7":4,"8":0,"9":4,"10":4,"11":0,"12":7,"13":0,"14":0,"15":7,"16":7,"17":7,"18":7,"19":7,"20":7,"21":7,"22":7,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0},"f":{"0":7,"1":4,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0},"b":{"0":[0,4],"1":[4,4],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0,0,0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/cortex/monitoring/metrics.ts"],"sourcesContent":["import { AnalyticsMetrics } from \"@/lib/cortex/analytics/types\";\nimport type { SearchFeedbackData } from \"@/lib/cortex/feedback/service\";\nimport { MetricsService as NousMetricsService } from \"@/lib/cortex/monitoring/metrics\";\nimport { TestMetrics } from \"@/lib/nous/engine/types\";\nimport type { Logger } from \"@/lib/shared/types\";\nimport { MetricType } from \"@prisma/client\";\nimport { Counter, Gauge, Registry, collectDefaultMetrics } from \"prom-client\";\nimport { metricsConfig } from \"./metrics-config\";\n\ninterface _MetricsLabels {\n  type: string;\n  service: string;\n  operation: string;\n}\n\ninterface ElasticsearchErrorParams {\n  error_type: string;\n  index: string;\n  search_type?: string;\n}\n\nexport interface IMetricsService {\n  recordLatency(name: string, type: string, value: number): void;\n  incrementError(name: string, service: string, operation: string): void;\n  updateResourceUsage(metrics: ResourceMetrics): void;\n  updateCacheHitRatio(hits: number, misses: number): void;\n  updateSearchQuality(metrics: {\n    relevance: number;\n    conversion_rate: number;\n    click_through_rate?: number;\n    query_hash?: string;\n  }): void;\n  recordAlert(\n    metric: string,\n    data: {\n      threshold: number;\n      value: number;\n      actual: number;\n      severity: \"info\" | \"warning\" | \"critical\";\n    }\n  ): void;\n  recordReportDistribution(params: {\n    report_type: string;\n    recipient_count: number;\n    type: string;\n    timeWindow: string;\n  }): void;\n}\n\ninterface ResourceMetrics {\n  memory: {\n    used: number;\n    total: number;\n  };\n  cpu: {\n    usage: number;\n  };\n}\n\nexport interface EngineMetrics {\n  averageLatency: number;\n  requestsPerSecond: number;\n  errorRate: number;\n  cpuUsage: number;\n  memoryUsage: number;\n  totalOperations: number;\n  successfulOperations: number;\n  failedOperations: number;\n  pendingOperations: number;\n}\n\nexport class MetricsService implements NousMetricsService {\n  private readonly logger: Logger;\n  private readonly registry: Registry;\n  private readonly errorCounter: Counter<string>;\n  private readonly operationLatency: Gauge<string>;\n  private readonly abTestMetrics: Gauge<string>;\n  private readonly analyticsMetrics: Gauge<string>;\n  private readonly searchFeedback: Counter<string>;\n  private metrics = {\n    averageLatency: 0,\n    throughput: 0,\n    errorRate: 0,\n    cpuUsage: 0,\n    memoryUsage: 0,\n    totalOperations: 0,\n    successfulOperations: 0,\n    failedOperations: 0,\n    pendingOperations: 0,\n  };\n  public sampleRate: number = 1.0;\n  public batchSize: number = 100;\n  private baselineLoad = 0;\n  private currentLoad = 0;\n\n  public recordEngineMetric = async (data: {\n    type: MetricType;\n    value: number;\n    confidence: number;\n    metadata?: Record<string, unknown>;\n    operationId?: string;\n  }): Promise<void> => {\n    try {\n      if (typeof data.value !== 'number') {\n        throw new Error('Invalid metric value');\n      }\n\n      this.analyticsMetrics\n        .labels(data.type, String(data.value), data.operationId || \"default\")\n        .set(data.value);\n\n      this.logger.debug('Recording engine metric', data);\n    } catch (error) {\n      this.logger.error('Failed to record engine metric', {\n        error,\n        metric: data\n      });\n    }\n  };\n\n  public recordLearningMetrics = (\n    data: {\n      type: MetricType;\n      value: number;\n      interval: string;\n      sessionId?: string;\n      modelId?: string;\n      metadata?: Record<string, unknown>;\n    }\n  ): Promise<void> => {\n    this.analyticsMetrics\n      .labels(data.type, String(data.value), data.interval)\n      .set(data.value);\n    return Promise.resolve();\n  };\n\n  constructor({ logger, environment }: { logger: Logger; environment: string }) {\n    this.logger = logger;\n    this.registry = new Registry();\n\n    // Initialize default metrics collection\n    collectDefaultMetrics({\n      register: this.registry,\n      prefix: metricsConfig.prefix,\n      labels: { ...metricsConfig.defaultLabels },\n      gcDurationBuckets: [0.001, 0.01, 0.1, 1, 2, 5],\n    });\n\n    this.errorCounter = new Counter({\n      name: \"sophra_errors_total\",\n      help: \"Total number of errors\",\n      labelNames: [\"type\", \"service\", \"operation\"],\n      registers: [this.registry],\n    });\n\n    this.operationLatency = new Gauge({\n      name: \"sophra_operation_latency\",\n      help: \"Operation latency in milliseconds\",\n      labelNames: [\"operation\", \"service\", \"value\"],\n      registers: [this.registry],\n    });\n\n    this.searchFeedback = new Counter({\n      name: \"sophra_search_feedback\",\n      help: \"Search feedback metrics\",\n      labelNames: [\"user_action\", \"query_hash\", \"relevance_score\"],\n      registers: [this.registry],\n    });\n\n    this.abTestMetrics = new Gauge({\n      name: \"sophra_abtest_metrics\",\n      help: \"A/B test metrics\",\n      labelNames: [\"test_id\", \"variant_id\", \"query_hash\", \"metric_type\"],\n      registers: [this.registry],\n    });\n\n    this.analyticsMetrics = new Gauge({\n      name: \"sophra_analytics_metrics\",\n      help: \"Analytics metrics\",\n      labelNames: [\"metric_type\", \"value\", \"time_window\"],\n      registers: [this.registry],\n    });\n  }\n  updateSearchQuality(metrics: {\n    relevance: number;\n    conversion_rate: number;\n    click_through_rate?: number;\n    query_hash?: string;\n  }): void {\n    const queryHash = metrics.query_hash || \"current\";\n\n    this.analyticsMetrics\n      .labels(\"search_relevance\", String(metrics.relevance), queryHash)\n      .set(metrics.relevance);\n\n    this.analyticsMetrics\n      .labels(\"conversion_rate\", String(metrics.conversion_rate), queryHash)\n      .set(metrics.conversion_rate);\n\n    if (metrics.click_through_rate !== undefined) {\n      this.analyticsMetrics\n        .labels(\"click_through_rate\", String(metrics.click_through_rate), queryHash)\n        .set(metrics.click_through_rate);\n    }\n\n    this.logger.debug('Updating search quality metrics', {\n      ...metrics,\n      query_hash: queryHash\n    });\n  }\n  recordAlert(\n    metric: string,\n    data: {\n      threshold: number;\n      value: number;\n      actual: number;\n      severity: \"info\" | \"warning\" | \"critical\";\n    }\n  ): void {\n    this.analyticsMetrics\n      .labels(`${metric}_alert`, String(data.actual), data.severity)\n      .set(data.actual);\n\n    this.analyticsMetrics\n      .labels(`${metric}_threshold`, String(data.threshold), data.severity)\n      .set(data.threshold);\n\n    this.logger.debug('Recording metric alert', {\n      metric,\n      ...data\n    });\n  }\n  recordReportDistribution(params: {\n    report_type: string;\n    recipient_count: number;\n    type: string;\n    timeWindow: string;\n  }): void {\n    this.analyticsMetrics\n      .labels(\n        \"report_distribution\",\n        String(params.recipient_count),\n        params.timeWindow\n      )\n      .set(params.recipient_count);\n\n    this.logger.debug('Recording report distribution', {\n      ...params\n    });\n  }\n\n  public updateCacheHitRatio(hits: number, misses: number): void {\n    const total = hits + misses;\n    if (total > 0) {\n      const ratio = hits / total;\n      this.analyticsMetrics\n        .labels(\"cache_hit_ratio\", ratio.toString(), \"1m\")\n        .set(ratio);\n      this.logger.debug(\"Updating cache hit ratio\", { hits, misses, ratio });\n    }\n  }\n\n  public incrementError(type: string, service: string, operation: string): void {\n    this.errorCounter.labels(type, service, operation).inc();\n    this.logger.debug('Incrementing error counter', {\n      error: type,\n      service,\n      operation\n    });\n  }\n\n  public recordLatency(\n    operation: string,\n    service: string,\n    value: number\n  ): void {\n    this.operationLatency\n      .labels(operation, service, String(value))\n      .set(value);\n    \n    this.logger.debug('Recording latency', {\n      operation,\n      service,\n      latency: value\n    });\n  }\n\n  public observeSearchFeedback(feedback: SearchFeedbackData): void {\n    this.searchFeedback\n      .labels(\n        feedback.userAction,\n        feedback.queryHash,\n        feedback.relevanceScore.toString()\n      )\n      .inc();\n  }\n\n  public incrementSearchError(params: ElasticsearchErrorParams): void {\n    this.incrementError(\n      params.error_type,\n      \"search\",\n      params.search_type\n        ? `${params.search_type}_search_${params.index}`\n        : `search_${params.index}`\n    );\n  }\n\n  public incrementIndexError(params: ElasticsearchErrorParams): void {\n    this.incrementError(\n      params.error_type,\n      \"elasticsearch\",\n      `index_${params.index}`\n    );\n  }\n\n  public incrementUpdateError(params: ElasticsearchErrorParams): void {\n    this.incrementError(\n      params.error_type,\n      \"elasticsearch\",\n      `update_${params.index}`\n    );\n  }\n\n  public incrementDeleteError(params: ElasticsearchErrorParams): void {\n    this.incrementError(\n      params.error_type,\n      \"elasticsearch\",\n      `delete_${params.index}`\n    );\n  }\n\n  public incrementBulkError(params: ElasticsearchErrorParams): void {\n    this.incrementError(\n      params.error_type,\n      \"elasticsearch\",\n      `bulk_${params.index}`\n    );\n  }\n\n  public updateABTestMetrics(params: {\n    test_id: string;\n    variant_id: string;\n    query_hash: string;\n    metrics: Record<string, number>;\n  }): void {\n    const { test_id, variant_id, query_hash, metrics } = params;\n    Object.entries(metrics).forEach(([metric_type, value]) => {\n      this.abTestMetrics\n        .labels(test_id, variant_id, query_hash, metric_type)\n        .set(value);\n    });\n  }\n  public updateAnalytics(metrics: AnalyticsMetrics): void {\n    const { timeWindow = \"hourly\", ...rawMetrics } = metrics;\n\n    // Normalize metrics keys to snake_case for consistency\n    const normalizedMetrics = Object.entries(rawMetrics).reduce(\n      (acc, [key, value]) => {\n        const snakeKey = key.replace(\n          /[A-Z]/g,\n          (letter) => `_${letter.toLowerCase()}`\n        );\n        acc[snakeKey] = typeof value === \"number\" ? value : 0;\n        return acc;\n      },\n      {} as Record<string, number>\n    );\n\n    Object.entries(normalizedMetrics).forEach(([metric_type, value]) => {\n      this.analyticsMetrics\n        .labels(metric_type, String(value), String(timeWindow))\n        .set(value);\n    });\n  }\n\n  public async getMetrics(): Promise<string> {\n    return await this.registry.metrics();\n  }\n\n  public incrementMetric(\n    name: string,\n    labels: Record<string, string | number>\n  ): void {\n    const normalizedLabels = Object.entries(labels).reduce(\n      (acc, [key, value]) => {\n        acc[key.replace(/([A-Z])/g, \"_$1\").toLowerCase()] = String(value);\n        return acc;\n      },\n      {} as Record<string, string>\n    );\n\n    this.errorCounter\n      .labels(\n        normalizedLabels.type || \"unknown\",\n        normalizedLabels.service || \"unknown\",\n        normalizedLabels.operation || name\n      )\n      .inc();\n  }\n\n  public updateResourceUsage(metrics: ResourceMetrics): void {\n    try {\n      const { memory, cpu } = metrics;\n\n      if (!memory || !cpu || typeof memory.used !== 'number' || typeof memory.total !== 'number' || typeof cpu.usage !== 'number') {\n        throw new Error('Invalid resource metrics');\n      }\n\n      this.analyticsMetrics\n        .labels(\"memory_used\", String(memory.used), \"current\")\n        .set(memory.used);\n\n      this.analyticsMetrics\n        .labels(\"memory_total\", String(memory.total), \"current\")\n        .set(memory.total);\n\n      this.analyticsMetrics\n        .labels(\"cpu_usage\", String(cpu.usage), \"current\")\n        .set(cpu.usage);\n\n      this.logger.debug('Updating resource usage metrics', {\n        cpuUsage: cpu.usage,\n        memoryUsage: memory.used,\n        memoryTotal: memory.total\n      });\n    } catch (error) {\n      this.logger.error('Failed to update resource metrics', {\n        error,\n        metrics\n      });\n    }\n  }\n\n  public hasMetric(name: string): boolean {\n    return this.registry.getSingleMetric(name) !== undefined;\n  }\n\n  public createHistogram(name: string, help: string): void {\n    if (!this.hasMetric(name)) {\n      new Counter({\n        name: `sophra_${name}`,\n        help,\n        labelNames: [\"operation\", \"service\"],\n        registers: [this.registry],\n      });\n    }\n  }\n\n  public createCounter(name: string, help: string): void {\n    if (!this.hasMetric(name)) {\n      new Counter({\n        name: `sophra_${name}`,\n        help,\n        labelNames: [\"type\", \"service\", \"operation\"],\n        registers: [this.registry],\n      });\n    }\n  }\n\n  public static async getEngineMetrics(): Promise<EngineMetrics> {\n    return {\n      averageLatency: 0,\n      requestsPerSecond: 0,\n      errorRate: 0,\n      cpuUsage: 0,\n      memoryUsage: 0,\n      totalOperations: 0,\n      successfulOperations: 0,\n      failedOperations: 0,\n      pendingOperations: 0,\n    };\n  }\n\n  async getAverageLatency(): Promise<number> {\n    return this.metrics.averageLatency;\n  }\n\n  async getThroughput(): Promise<number> {\n    return this.metrics.throughput;\n  }\n\n  async getErrorRate(): Promise<number> {\n    return this.metrics.errorRate;\n  }\n\n  async getCPUUsage(): Promise<number> {\n    return this.metrics.cpuUsage;\n  }\n\n  async getMemoryUsage(): Promise<number> {\n    return this.metrics.memoryUsage;\n  }\n\n  async getOperationCount(): Promise<number> {\n    return this.metrics.totalOperations;\n  }\n\n  async getSuccessfulOperations(): Promise<number> {\n    return this.metrics.successfulOperations;\n  }\n\n  async getFailedOperations(): Promise<number> {\n    return this.metrics.failedOperations;\n  }\n\n  async getPendingOperations(): Promise<number> {\n    return this.metrics.pendingOperations;\n  }\n\n  async updateMetrics(update: Partial<typeof this.metrics>): Promise<void> {\n    this.metrics = { ...this.metrics, ...update };\n    this.logger.debug(\"Updated metrics\", { metrics: this.metrics });\n  }\n\n  public getCurrentLoad(): number {\n    return this.currentLoad;\n  }\n\n  public getBaselineLoad(): number {\n    return this.baselineLoad;\n  }\n\n  public async getMetricVariability(): Promise<number> {\n    const latencyValues = await this.getLatencyHistory();\n    if (!latencyValues.length) return 0.1; // default variability\n\n    const mean =\n      latencyValues.reduce((sum, val) => sum + val, 0) / latencyValues.length;\n    const variance =\n      latencyValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) /\n      latencyValues.length;\n    return Math.sqrt(variance) / mean; // coefficient of variation\n  }\n\n  public async getAverageTrafficVolume(): Promise<number> {\n    return this.metrics.throughput;\n  }\n\n  private async getLatencyHistory(): Promise<number[]> {\n    const latencyMetric = this.registry.getSingleMetric(\n      \"sophra_operation_latency\"\n    );\n    if (!latencyMetric) return [];\n\n    return (await (latencyMetric as Gauge<string>).get()).values.map(\n      (v) => v.value\n    );\n  }\n\n  public async getMetricsForVariant(\n    _variant: string,\n    startTime: number\n  ): Promise<TestMetrics> {\n    return {\n      latency: await this.getAverageLatency(),\n      errorRate: await this.getErrorRate(),\n      throughput: await this.getThroughput(),\n      cpuUsage: await this.getCPUUsage(),\n      memoryUsage: await this.getMemoryUsage(),\n    };\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"2ceecb0bf99cb226061e4f8e5ed3b49fad98efe0"},"/workspaces/sophra/src/lib/shared/logger/src/logger.ts":{"path":"/workspaces/sophra/src/lib/shared/logger/src/logger.ts","statementMap":{"0":{"start":{"line":5,"column":0},"end":{"line":27,"column":1}},"1":{"start":{"line":6,"column":24},"end":{"line":25,"column":3}},"2":{"start":{"line":7,"column":26},"end":{"line":7,"column":49}},"3":{"start":{"line":8,"column":4},"end":{"line":8,"column":36}},"4":{"start":{"line":9,"column":24},"end":{"line":9,"column":53}},"5":{"start":{"line":10,"column":27},"end":{"line":10,"column":59}},"6":{"start":{"line":11,"column":4},"end":{"line":11,"column":34}},"7":{"start":{"line":12,"column":4},"end":{"line":12,"column":55}},"8":{"start":{"line":13,"column":4},"end":{"line":24,"column":7}},"9":{"start":{"line":26,"column":2},"end":{"line":26,"column":18}},"10":{"start":{"line":28,"column":19},"end":{"line":39,"column":1}},"11":{"start":{"line":40,"column":19},"end":{"line":51,"column":1}},"12":{"start":{"line":52,"column":28},"end":{"line":88,"column":1}},"13":{"start":{"line":53,"column":21},"end":{"line":53,"column":28}},"14":{"start":{"line":54,"column":20},"end":{"line":71,"column":3}},"15":{"start":{"line":55,"column":19},"end":{"line":66,"column":5}},"16":{"start":{"line":67,"column":4},"end":{"line":69,"column":5}},"17":{"start":{"line":68,"column":6},"end":{"line":68,"column":18}},"18":{"start":{"line":70,"column":4},"end":{"line":70,"column":49}},"19":{"start":{"line":72,"column":24},"end":{"line":86,"column":3}},"20":{"start":{"line":73,"column":24},"end":{"line":73,"column":98}},"21":{"start":{"line":74,"column":23},"end":{"line":74,"column":94}},"22":{"start":{"line":75,"column":23},"end":{"line":75,"column":94}},"23":{"start":{"line":76,"column":24},"end":{"line":76,"column":98}},"24":{"start":{"line":77,"column":23},"end":{"line":77,"column":93}},"25":{"start":{"line":78,"column":26},"end":{"line":78,"column":102}},"26":{"start":{"line":81,"column":6},"end":{"line":81,"column":26}},"27":{"start":{"line":84,"column":6},"end":{"line":84,"column":30}},"28":{"start":{"line":87,"column":2},"end":{"line":87,"column":23}},"29":{"start":{"line":89,"column":27},"end":{"line":89,"column":31}},"30":{"start":{"line":91,"column":14},"end":{"line":91,"column":25}},"31":{"start":{"line":92,"column":2},"end":{"line":92,"column":31}},"32":{"start":{"line":93,"column":16},"end":{"line":93,"column":44}},"33":{"start":{"line":94,"column":21},"end":{"line":96,"column":4}},"34":{"start":{"line":95,"column":4},"end":{"line":95,"column":138}},"35":{"start":{"line":97,"column":2},"end":{"line":97,"column":35}},"36":{"start":{"line":97,"column":19},"end":{"line":97,"column":35}},"37":{"start":{"line":98,"column":16},"end":{"line":98,"column":93}},"38":{"start":{"line":99,"column":2},"end":{"line":99,"column":31}},"39":{"start":{"line":99,"column":14},"end":{"line":99,"column":31}},"40":{"start":{"line":100,"column":19},"end":{"line":100,"column":27}},"41":{"start":{"line":101,"column":2},"end":{"line":108,"column":3}},"42":{"start":{"line":102,"column":21},"end":{"line":104,"column":5}},"43":{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},"44":{"start":{"line":106,"column":6},"end":{"line":106,"column":67}},"45":{"start":{"line":109,"column":22},"end":{"line":109,"column":35}},"46":{"start":{"line":110,"column":23},"end":{"line":110,"column":59}},"47":{"start":{"line":111,"column":2},"end":{"line":111,"column":186}},"48":{"start":{"line":114,"column":24},"end":{"line":114,"column":52}},"49":{"start":{"line":115,"column":2},"end":{"line":117,"column":3}},"50":{"start":{"line":116,"column":4},"end":{"line":116,"column":46}},"51":{"start":{"line":118,"column":2},"end":{"line":166,"column":3}},"52":{"start":{"line":119,"column":19},"end":{"line":124,"column":5}},"53":{"start":{"line":125,"column":23},"end":{"line":145,"column":5}},"54":{"start":{"line":132,"column":32},"end":{"line":132,"column":66}},"55":{"start":{"line":133,"column":28},"end":{"line":133,"column":71}},"56":{"start":{"line":134,"column":25},"end":{"line":136,"column":36}},"57":{"start":{"line":137,"column":27},"end":{"line":137,"column":49}},"58":{"start":{"line":138,"column":75},"end":{"line":138,"column":83}},"59":{"start":{"line":139,"column":34},"end":{"line":139,"column":110}},"60":{"start":{"line":140,"column":14},"end":{"line":140,"column":83}},"61":{"start":{"line":146,"column":4},"end":{"line":149,"column":5}},"62":{"start":{"line":147,"column":22},"end":{"line":147,"column":60}},"63":{"start":{"line":148,"column":6},"end":{"line":148,"column":53}},"64":{"start":{"line":150,"column":4},"end":{"line":164,"column":7}},"65":{"start":{"line":165,"column":4},"end":{"line":165,"column":50}},"66":{"start":{"line":167,"column":2},"end":{"line":169,"column":3}},"67":{"start":{"line":168,"column":4},"end":{"line":168,"column":46}},"68":{"start":{"line":170,"column":22},"end":{"line":173,"column":4}},"69":{"start":{"line":174,"column":2},"end":{"line":174,"column":53}},"70":{"start":{"line":175,"column":2},"end":{"line":175,"column":21}},"71":{"start":{"line":177,"column":22},"end":{"line":177,"column":33}},"72":{"start":{"line":179,"column":38},"end":{"line":191,"column":18}},"73":{"start":{"line":180,"column":2},"end":{"line":180,"column":31}},"74":{"start":{"line":181,"column":2},"end":{"line":181,"column":29}},"75":{"start":{"line":182,"column":2},"end":{"line":182,"column":29}},"76":{"start":{"line":183,"column":2},"end":{"line":183,"column":31}},"77":{"start":{"line":184,"column":2},"end":{"line":184,"column":29}},"78":{"start":{"line":185,"column":2},"end":{"line":185,"column":35}},"79":{"start":{"line":186,"column":2},"end":{"line":186,"column":31}},"80":{"start":{"line":187,"column":2},"end":{"line":187,"column":29}},"81":{"start":{"line":188,"column":2},"end":{"line":188,"column":33}},"82":{"start":{"line":189,"column":2},"end":{"line":189,"column":31}},"83":{"start":{"line":190,"column":2},"end":{"line":190,"column":19}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":24},"end":{"line":6,"column":25}},"loc":{"start":{"line":6,"column":36},"end":{"line":25,"column":3}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":52,"column":28},"end":{"line":52,"column":29}},"loc":{"start":{"line":52,"column":43},"end":{"line":88,"column":1}},"line":52},"2":{"name":"(anonymous_2)","decl":{"start":{"line":54,"column":20},"end":{"line":54,"column":21}},"loc":{"start":{"line":54,"column":31},"end":{"line":71,"column":3}},"line":54},"3":{"name":"(anonymous_3)","decl":{"start":{"line":73,"column":11},"end":{"line":73,"column":12}},"loc":{"start":{"line":73,"column":24},"end":{"line":73,"column":98}},"line":73},"4":{"name":"(anonymous_4)","decl":{"start":{"line":74,"column":10},"end":{"line":74,"column":11}},"loc":{"start":{"line":74,"column":23},"end":{"line":74,"column":94}},"line":74},"5":{"name":"(anonymous_5)","decl":{"start":{"line":75,"column":10},"end":{"line":75,"column":11}},"loc":{"start":{"line":75,"column":23},"end":{"line":75,"column":94}},"line":75},"6":{"name":"(anonymous_6)","decl":{"start":{"line":76,"column":11},"end":{"line":76,"column":12}},"loc":{"start":{"line":76,"column":24},"end":{"line":76,"column":98}},"line":76},"7":{"name":"(anonymous_7)","decl":{"start":{"line":77,"column":10},"end":{"line":77,"column":11}},"loc":{"start":{"line":77,"column":23},"end":{"line":77,"column":93}},"line":77},"8":{"name":"(anonymous_8)","decl":{"start":{"line":78,"column":13},"end":{"line":78,"column":14}},"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":102}},"line":78},"9":{"name":"(anonymous_9)","decl":{"start":{"line":80,"column":4},"end":{"line":80,"column":5}},"loc":{"start":{"line":80,"column":16},"end":{"line":82,"column":5}},"line":80},"10":{"name":"(anonymous_10)","decl":{"start":{"line":83,"column":4},"end":{"line":83,"column":5}},"loc":{"start":{"line":83,"column":24},"end":{"line":85,"column":5}},"line":83},"11":{"name":"getCallerFile","decl":{"start":{"line":90,"column":9},"end":{"line":90,"column":22}},"loc":{"start":{"line":90,"column":25},"end":{"line":112,"column":1}},"line":90},"12":{"name":"(anonymous_12)","decl":{"start":{"line":94,"column":32},"end":{"line":94,"column":33}},"loc":{"start":{"line":94,"column":42},"end":{"line":96,"column":3}},"line":94},"13":{"name":"getLogger","decl":{"start":{"line":113,"column":16},"end":{"line":113,"column":25}},"loc":{"start":{"line":113,"column":37},"end":{"line":176,"column":1}},"line":113},"14":{"name":"(anonymous_14)","decl":{"start":{"line":131,"column":12},"end":{"line":131,"column":13}},"loc":{"start":{"line":131,"column":83},"end":{"line":141,"column":13}},"line":131},"15":{"name":"(anonymous_15)","decl":{"start":{"line":179,"column":39},"end":{"line":179,"column":40}},"loc":{"start":{"line":179,"column":54},"end":{"line":191,"column":1}},"line":179}},"branchMap":{"0":{"loc":{"start":{"line":5,"column":0},"end":{"line":27,"column":1}},"type":"if","locations":[{"start":{"line":5,"column":0},"end":{"line":27,"column":1}},{"start":{},"end":{}}],"line":5},"1":{"loc":{"start":{"line":67,"column":4},"end":{"line":69,"column":5}},"type":"if","locations":[{"start":{"line":67,"column":4},"end":{"line":69,"column":5}},{"start":{},"end":{}}],"line":67},"2":{"loc":{"start":{"line":67,"column":8},"end":{"line":67,"column":55}},"type":"binary-expr","locations":[{"start":{"line":67,"column":8},"end":{"line":67,"column":26}},{"start":{"line":67,"column":30},"end":{"line":67,"column":55}}],"line":67},"3":{"loc":{"start":{"line":73,"column":24},"end":{"line":73,"column":98}},"type":"binary-expr","locations":[{"start":{"line":73,"column":24},"end":{"line":73,"column":54}},{"start":{"line":73,"column":58},"end":{"line":73,"column":98}}],"line":73},"4":{"loc":{"start":{"line":74,"column":23},"end":{"line":74,"column":94}},"type":"binary-expr","locations":[{"start":{"line":74,"column":23},"end":{"line":74,"column":51}},{"start":{"line":74,"column":55},"end":{"line":74,"column":94}}],"line":74},"5":{"loc":{"start":{"line":75,"column":23},"end":{"line":75,"column":94}},"type":"binary-expr","locations":[{"start":{"line":75,"column":23},"end":{"line":75,"column":51}},{"start":{"line":75,"column":55},"end":{"line":75,"column":94}}],"line":75},"6":{"loc":{"start":{"line":76,"column":24},"end":{"line":76,"column":98}},"type":"binary-expr","locations":[{"start":{"line":76,"column":24},"end":{"line":76,"column":54}},{"start":{"line":76,"column":58},"end":{"line":76,"column":98}}],"line":76},"7":{"loc":{"start":{"line":77,"column":23},"end":{"line":77,"column":93}},"type":"binary-expr","locations":[{"start":{"line":77,"column":23},"end":{"line":77,"column":51}},{"start":{"line":77,"column":55},"end":{"line":77,"column":93}}],"line":77},"8":{"loc":{"start":{"line":78,"column":26},"end":{"line":78,"column":102}},"type":"binary-expr","locations":[{"start":{"line":78,"column":26},"end":{"line":78,"column":60}},{"start":{"line":78,"column":64},"end":{"line":78,"column":102}}],"line":78},"9":{"loc":{"start":{"line":93,"column":16},"end":{"line":93,"column":44}},"type":"binary-expr","locations":[{"start":{"line":93,"column":16},"end":{"line":93,"column":38}},{"start":{"line":93,"column":42},"end":{"line":93,"column":44}}],"line":93},"10":{"loc":{"start":{"line":95,"column":11},"end":{"line":95,"column":137}},"type":"binary-expr","locations":[{"start":{"line":95,"column":11},"end":{"line":95,"column":31}},{"start":{"line":95,"column":35},"end":{"line":95,"column":66}},{"start":{"line":95,"column":70},"end":{"line":95,"column":97}},{"start":{"line":95,"column":101},"end":{"line":95,"column":137}}],"line":95},"11":{"loc":{"start":{"line":97,"column":2},"end":{"line":97,"column":35}},"type":"if","locations":[{"start":{"line":97,"column":2},"end":{"line":97,"column":35}},{"start":{},"end":{}}],"line":97},"12":{"loc":{"start":{"line":98,"column":16},"end":{"line":98,"column":93}},"type":"binary-expr","locations":[{"start":{"line":98,"column":16},"end":{"line":98,"column":53}},{"start":{"line":98,"column":57},"end":{"line":98,"column":93}}],"line":98},"13":{"loc":{"start":{"line":99,"column":2},"end":{"line":99,"column":31}},"type":"if","locations":[{"start":{"line":99,"column":2},"end":{"line":99,"column":31}},{"start":{},"end":{}}],"line":99},"14":{"loc":{"start":{"line":101,"column":2},"end":{"line":108,"column":3}},"type":"if","locations":[{"start":{"line":101,"column":2},"end":{"line":108,"column":3}},{"start":{},"end":{}}],"line":101},"15":{"loc":{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},"type":"if","locations":[{"start":{"line":105,"column":4},"end":{"line":107,"column":5}},{"start":{},"end":{}}],"line":105},"16":{"loc":{"start":{"line":114,"column":24},"end":{"line":114,"column":52}},"type":"binary-expr","locations":[{"start":{"line":114,"column":24},"end":{"line":114,"column":33}},{"start":{"line":114,"column":37},"end":{"line":114,"column":52}}],"line":114},"17":{"loc":{"start":{"line":115,"column":2},"end":{"line":117,"column":3}},"type":"if","locations":[{"start":{"line":115,"column":2},"end":{"line":117,"column":3}},{"start":{},"end":{}}],"line":115},"18":{"loc":{"start":{"line":118,"column":2},"end":{"line":166,"column":3}},"type":"if","locations":[{"start":{"line":118,"column":2},"end":{"line":166,"column":3}},{"start":{},"end":{}}],"line":118},"19":{"loc":{"start":{"line":118,"column":6},"end":{"line":118,"column":38}},"type":"binary-expr","locations":[{"start":{"line":118,"column":6},"end":{"line":118,"column":27}},{"start":{"line":118,"column":31},"end":{"line":118,"column":38}}],"line":118},"20":{"loc":{"start":{"line":121,"column":19},"end":{"line":121,"column":56}},"type":"binary-expr","locations":[{"start":{"line":121,"column":19},"end":{"line":121,"column":39}},{"start":{"line":121,"column":43},"end":{"line":121,"column":56}}],"line":121},"21":{"loc":{"start":{"line":122,"column":13},"end":{"line":122,"column":44}},"type":"binary-expr","locations":[{"start":{"line":122,"column":13},"end":{"line":122,"column":34}},{"start":{"line":122,"column":38},"end":{"line":122,"column":44}}],"line":122},"22":{"loc":{"start":{"line":123,"column":17},"end":{"line":123,"column":57}},"type":"binary-expr","locations":[{"start":{"line":123,"column":17},"end":{"line":123,"column":44}},{"start":{"line":123,"column":48},"end":{"line":123,"column":57}}],"line":123},"23":{"loc":{"start":{"line":133,"column":28},"end":{"line":133,"column":71}},"type":"binary-expr","locations":[{"start":{"line":133,"column":28},"end":{"line":133,"column":63}},{"start":{"line":133,"column":67},"end":{"line":133,"column":71}}],"line":133},"24":{"loc":{"start":{"line":137,"column":27},"end":{"line":137,"column":49}},"type":"binary-expr","locations":[{"start":{"line":137,"column":27},"end":{"line":137,"column":37}},{"start":{"line":137,"column":41},"end":{"line":137,"column":49}}],"line":137},"25":{"loc":{"start":{"line":139,"column":34},"end":{"line":139,"column":110}},"type":"cond-expr","locations":[{"start":{"line":139,"column":69},"end":{"line":139,"column":105}},{"start":{"line":139,"column":108},"end":{"line":139,"column":110}}],"line":139},"26":{"loc":{"start":{"line":146,"column":4},"end":{"line":149,"column":5}},"type":"if","locations":[{"start":{"line":146,"column":4},"end":{"line":149,"column":5}},{"start":{},"end":{}}],"line":146},"27":{"loc":{"start":{"line":146,"column":8},"end":{"line":146,"column":105}},"type":"binary-expr","locations":[{"start":{"line":146,"column":8},"end":{"line":146,"column":33}},{"start":{"line":146,"column":37},"end":{"line":146,"column":74}},{"start":{"line":146,"column":78},"end":{"line":146,"column":85}},{"start":{"line":146,"column":89},"end":{"line":146,"column":105}}],"line":146},"28":{"loc":{"start":{"line":167,"column":2},"end":{"line":169,"column":3}},"type":"if","locations":[{"start":{"line":167,"column":2},"end":{"line":169,"column":3}},{"start":{},"end":{}}],"line":167},"29":{"loc":{"start":{"line":191,"column":3},"end":{"line":191,"column":17}},"type":"binary-expr","locations":[{"start":{"line":191,"column":3},"end":{"line":191,"column":11}},{"start":{"line":191,"column":15},"end":{"line":191,"column":17}}],"line":191}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":2,"14":2,"15":0,"16":0,"17":0,"18":0,"19":2,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":2,"29":1,"30":1,"31":1,"32":1,"33":1,"34":4,"35":1,"36":0,"37":1,"38":1,"39":0,"40":1,"41":1,"42":0,"43":0,"44":0,"45":1,"46":1,"47":1,"48":2,"49":2,"50":0,"51":2,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":2,"67":2,"68":0,"69":0,"70":0,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":1,"83":1},"f":{"0":1,"1":2,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1,"12":4,"13":2,"14":0,"15":1},"b":{"0":[1,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[1,0],"10":[4,3,2,1],"11":[0,1],"12":[1,1],"13":[0,1],"14":[0,1],"15":[0,0],"16":[2,1],"17":[0,2],"18":[0,2],"19":[2,2],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0,0,0],"28":[2,0],"29":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/shared/logger/src/logger.ts"],"sourcesContent":["import { Logger } from \"@/lib/shared/types\";\nimport path from \"path\";\nimport type * as Winston from \"winston\";\n\n// Dynamic imports for server-side only modules\nlet winston: typeof Winston;\nlet Logtail: typeof import(\"@logtail/node\").Logtail;\nlet LogtailTransport: typeof import(\"@logtail/winston\").LogtailTransport;\n\n// Initialize server-side modules\nif (typeof window === \"undefined\") {\n  const importWinston = async () => {\n    const winstonModule = await import(\"winston\");\n    winston = winstonModule.default;\n    const logtailNode = await import(\"@logtail/node\");\n    const logtailWinston = await import(\"@logtail/winston\");\n    Logtail = logtailNode.Logtail;\n    LogtailTransport = logtailWinston.LogtailTransport;\n\n    // Move winston color configuration here\n    winston.addColors({\n      error: \"white bgRed bold\",\n      warn: \"black bgYellow\",\n      info: \"black bgGreen\",\n      debug: \"white bgBlue\",\n      http: \"white bgMagenta\",\n      verbose: \"white bgGray\",\n      build: \"black bgCyan\",\n      test: \"white bgMagenta\",\n      deploy: \"white bgGreen\",\n      cache: \"white bgBlue\",\n    });\n  };\n  // Execute the import\n  importWinston();\n}\n\n// Add turborepo-specific emoji indicators\nconst LOG_EMOJIS = {\n  error: \"🚨\",\n  warn: \"⚠️\",\n  info: \"ℹ️\",\n  debug: \"🔍\",\n  http: \"🌐\",\n  verbose: \"📝\",\n  build: \"📦\",\n  test: \"🧪\",\n  deploy: \"🚀\",\n  cache: \"💾\",\n} as const;\n\n// Enhanced log colors with background colors\nconst LOG_COLORS = {\n  error: \"white bgRed bold\",\n  warn: \"black bgYellow\",\n  info: \"black bgGreen\",\n  debug: \"white bgBlue\",\n  http: \"white bgMagenta\",\n  verbose: \"white bgGray\",\n  build: \"black bgCyan\",\n  test: \"white bgMagenta\",\n  deploy: \"white bgGreen\",\n  cache: \"white bgBlue\",\n} as const;\n\nexport interface LoggerConfig {\n  service?: string;\n  logtailToken?: string;\n  environment?: string;\n  level?: string;\n  silent?: boolean;\n  workspace?: string;\n}\n\n// Create a browser-safe logger implementation\nconst createBrowserLogger = (component: string): Logger => {\n  let currentLevel = LogLevel.DEBUG;\n\n  const shouldLog = (level: LogLevel): boolean => {\n    const levels = {\n      [LogLevel.ERROR]: 0,\n      [LogLevel.WARN]: 1,\n      [LogLevel.INFO]: 2,\n      [LogLevel.HTTP]: 3,\n      [LogLevel.DEBUG]: 4,\n      [LogLevel.VERBOSE]: 5,\n      [LogLevel.BUILD]: 6,\n      [LogLevel.TEST]: 7,\n      [LogLevel.DEPLOY]: 8,\n      [LogLevel.CACHE]: 9,\n    };\n    if (!(level in levels) || !(currentLevel in levels)) {\n      return true;\n    }\n    return levels[level] <= levels[currentLevel as LogLevel];\n  };\n\n  const browserLogger = {\n    error: (...args: any[]) => shouldLog(LogLevel.ERROR) && console.error(`[${component}]`, ...args),\n    warn: (...args: any[]) => shouldLog(LogLevel.WARN) && console.warn(`[${component}]`, ...args),\n    info: (...args: any[]) => shouldLog(LogLevel.INFO) && console.info(`[${component}]`, ...args),\n    debug: (...args: any[]) => shouldLog(LogLevel.DEBUG) && console.debug(`[${component}]`, ...args),\n    http: (...args: any[]) => shouldLog(LogLevel.HTTP) && console.log(`[${component}]`, ...args),\n    verbose: (...args: any[]) => shouldLog(LogLevel.VERBOSE) && console.log(`[${component}]`, ...args),\n    service: \"sophra\",\n    get level() {\n      return currentLevel;\n    },\n    set level(newLevel: string) {\n      currentLevel = newLevel as LogLevel;\n    },\n  } as unknown as Logger;\n  return browserLogger;\n};\n\nlet globalLoggerInstance: Winston.Logger | null = null;\n\nfunction getCallerFile(): string {\n  // Create an error to get the stack trace\n  const err = new Error();\n  Error.captureStackTrace(err);\n\n  // Parse the stack trace to find the caller\n  const stack = err.stack?.split(\"\\n\") || [];\n\n  // Find the first line that's not from this file or node internal\n  const callerLine = stack.find((line) => {\n    return (\n      line.includes(\"at \") &&\n      !line.includes(\"getCallerFile\") &&\n      !line.includes(\"getLogger\") &&\n      !line.includes(\"Object.<anonymous>\")\n    );\n  });\n\n  if (!callerLine) return \"sophra\";\n\n  // Extract the file path\n  const match =\n    callerLine.match(/\\((.+?):\\d+:\\d+\\)/) ||\n    callerLine.match(/at (.+?):\\d+:\\d+/);\n\n  if (!match) return \"unknown\";\n\n  // Get the full path\n  const fullPath = match[1];\n\n  // Handle webpack-internal paths\n  if (fullPath.includes(\"webpack-internal\")) {\n    // Look for src/app or src/lib pattern\n    const srcMatch = fullPath.match(\n      /src\\/(app|lib)\\/(.*?)(\\/route|\\/page|\\/index|\\.[jt]sx?)/\n    );\n    if (srcMatch) {\n      return srcMatch[2]\n        .replace(/^api\\//, \"\") // Remove api prefix\n        .replace(/\\//g, \".\"); // Convert slashes to dots\n    }\n  }\n\n  // For non-webpack paths, use the relative path approach\n  const projectRoot = process.cwd();\n  const relativePath = path.relative(projectRoot, fullPath);\n\n  return relativePath\n    .replace(/\\.(js|ts|tsx|jsx)$/, \"\") // Remove extension\n    .replace(/^src\\/(app|lib)\\//, \"\") // Remove src/app or src/lib\n    .replace(/\\/route$/, \"\") // Remove route suffix\n    .replace(/\\/(index|page)$/, \"\") // Remove index/page suffix\n    .replace(/\\//g, \".\") // Convert slashes to dots\n    .replace(/^api\\./, \"\"); // Remove api prefix\n}\n\n// Modify getLogger to use automatic component detection\nexport function getLogger(component?: string): Logger {\n  const autoComponent = component || getCallerFile();\n\n  // Check if we're in a browser environment\n  if (typeof window !== \"undefined\") {\n    return createBrowserLogger(autoComponent);\n  }\n\n  // Server-side logging logic\n  if (!globalLoggerInstance && winston) {\n    const config = {\n      service: \"sophra\",\n      environment: process.env.NODE_ENV || \"development\",\n      level: process.env.LOG_LEVEL || \"info\",\n      workspace: process.env.TURBO_WORKSPACE || \"unknown\",\n    };\n\n    const transports: Winston.transport[] = [\n      new winston.transports.Console({\n        format: winston.format.combine(\n          winston.format.colorize({ colors: LOG_COLORS }),\n          winston.format.simple(),\n          winston.format.printf(\n            ({ level, message, timestamp, component, ...metadata }) => {\n              // Extract the base level without any color codes\n              const baseLevel = level.replace(/\\u001b\\[\\d+m/g, \"\");\n              const emoji =\n                LOG_EMOJIS[\n                  baseLevel.toLowerCase() as keyof typeof LOG_EMOJIS\n                ] || \"📋\";\n              const ts = new Date(\n                timestamp as string | number | Date\n              ).toLocaleTimeString();\n              const comp = component || \"sophra\";\n\n              // Only include metadata if it's not empty and exclude certain fields\n              const { service, environment, workspace, ...restMetadata } =\n                metadata;\n              const metadataStr = Object.keys(restMetadata).length\n                ? ` | ${JSON.stringify(restMetadata)}`\n                : \"\";\n\n              return `${emoji} ${ts} [${comp}] ${level}: ${message}${metadataStr}`;\n            }\n          )\n        ),\n      }),\n    ];\n\n    if (\n      process.env.LOGTAIL_TOKEN &&\n      process.env.NODE_ENV === \"production\" &&\n      Logtail &&\n      LogtailTransport\n    ) {\n      const logtail = new Logtail(process.env.LOGTAIL_TOKEN);\n      transports.push(new LogtailTransport(logtail));\n    }\n\n    globalLoggerInstance = winston.createLogger({\n      level: config.level,\n      format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.errors({ stack: true }),\n        winston.format.splat()\n      ),\n      defaultMeta: {\n        service: config.service,\n        component: autoComponent,\n        environment: config.environment,\n        workspace: config.workspace,\n      },\n      transports,\n    }) as Logger;\n\n    (globalLoggerInstance as Logger).service = config.service;\n  }\n\n  // If winston isn't initialized yet, return a browser-like logger\n  if (!globalLoggerInstance) {\n    return createBrowserLogger(autoComponent);\n  }\n\n  const childLogger = globalLoggerInstance.child({\n    component: autoComponent,\n    workspace: process.env.TURBO_WORKSPACE,\n  }) as Logger;\n\n  childLogger.service = (globalLoggerInstance as Logger).service;\n\n  return childLogger;\n}\n\n// Create a default logger instance\nexport const logger = getLogger();\nexport default logger;\n\nexport enum LogLevel {\n  ERROR = \"error\",\n  WARN = \"warn\",\n  INFO = \"info\",\n  DEBUG = \"debug\",\n  HTTP = \"http\",\n  VERBOSE = \"verbose\",\n  BUILD = \"build\",\n  TEST = \"test\",\n  DEPLOY = \"deploy\",\n  CACHE = \"cache\",\n}\n"],"mappings":"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","names":["component","LogLevel"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"87973e60e2c51316d3b66c7a23120f56a7926d9c"},"/workspaces/sophra/src/lib/shared/logger/index.ts":{"path":"/workspaces/sophra/src/lib/shared/logger/index.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":2,"column":42}}},"fnMap":{},"branchMap":{},"s":{"0":1},"f":{},"b":{},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/shared/logger/index.ts"],"sourcesContent":["import { getLogger } from \"./src/logger\";\n\n// Create and export the default logger instance\nexport const logger = getLogger(\"default\");\n\n// Re-export everything from the main logger\nexport * from \"./src/logger\";\nexport default logger;\n"],"mappings":"AAAA,SAAS,iBAAiB;AAGnB,aAAM,SAAS,UAAU,SAAS;AAGzC,cAAc;AACd,eAAe;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f275a05ed3b683c4cfd8794e3f9c5bf1037ebde0"},"/workspaces/sophra/src/lib/nous/types/learning.ts":{"path":"/workspaces/sophra/src/lib/nous/types/learning.ts","statementMap":{"0":{"start":{"line":2,"column":47},"end":{"line":12,"column":27}},"1":{"start":{"line":3,"column":2},"end":{"line":3,"column":58}},"2":{"start":{"line":4,"column":2},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":2},"end":{"line":5,"column":54}},"4":{"start":{"line":6,"column":2},"end":{"line":6,"column":60}},"5":{"start":{"line":7,"column":2},"end":{"line":7,"column":60}},"6":{"start":{"line":8,"column":2},"end":{"line":8,"column":62}},"7":{"start":{"line":9,"column":2},"end":{"line":9,"column":54}},"8":{"start":{"line":10,"column":2},"end":{"line":10,"column":64}},"9":{"start":{"line":11,"column":2},"end":{"line":11,"column":28}},"10":{"start":{"line":13,"column":49},"end":{"line":20,"column":29}},"11":{"start":{"line":14,"column":2},"end":{"line":14,"column":46}},"12":{"start":{"line":15,"column":2},"end":{"line":15,"column":52}},"13":{"start":{"line":16,"column":2},"end":{"line":16,"column":50}},"14":{"start":{"line":17,"column":2},"end":{"line":17,"column":44}},"15":{"start":{"line":18,"column":2},"end":{"line":18,"column":46}},"16":{"start":{"line":19,"column":2},"end":{"line":19,"column":30}},"17":{"start":{"line":21,"column":51},"end":{"line":27,"column":31}},"18":{"start":{"line":22,"column":2},"end":{"line":22,"column":50}},"19":{"start":{"line":23,"column":2},"end":{"line":23,"column":42}},"20":{"start":{"line":24,"column":2},"end":{"line":24,"column":46}},"21":{"start":{"line":25,"column":2},"end":{"line":25,"column":40}},"22":{"start":{"line":26,"column":2},"end":{"line":26,"column":32}},"23":{"start":{"line":28,"column":43},"end":{"line":46,"column":2}},"24":{"start":{"line":47,"column":37},"end":{"line":55,"column":2}},"25":{"start":{"line":56,"column":35},"end":{"line":76,"column":2}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":48},"end":{"line":2,"column":49}},"loc":{"start":{"line":2,"column":72},"end":{"line":12,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":13,"column":50},"end":{"line":13,"column":51}},"loc":{"start":{"line":13,"column":76},"end":{"line":20,"column":1}},"line":13},"2":{"name":"(anonymous_2)","decl":{"start":{"line":21,"column":52},"end":{"line":21,"column":53}},"loc":{"start":{"line":21,"column":80},"end":{"line":27,"column":1}},"line":21}},"branchMap":{"0":{"loc":{"start":{"line":12,"column":3},"end":{"line":12,"column":26}},"type":"binary-expr","locations":[{"start":{"line":12,"column":3},"end":{"line":12,"column":20}},{"start":{"line":12,"column":24},"end":{"line":12,"column":26}}],"line":12},"1":{"loc":{"start":{"line":20,"column":3},"end":{"line":20,"column":28}},"type":"binary-expr","locations":[{"start":{"line":20,"column":3},"end":{"line":20,"column":22}},{"start":{"line":20,"column":26},"end":{"line":20,"column":28}}],"line":20},"2":{"loc":{"start":{"line":27,"column":3},"end":{"line":27,"column":30}},"type":"binary-expr","locations":[{"start":{"line":27,"column":3},"end":{"line":27,"column":24}},{"start":{"line":27,"column":28},"end":{"line":27,"column":30}}],"line":27}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1},"f":{"0":1,"1":1,"2":1},"b":{"0":[1,1],"1":[1,1],"2":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/types/learning.ts"],"sourcesContent":["import { EngineOptimizationType } from \"@/lib/nous/engine/types\";\nimport { z } from \"zod\";\n\nexport enum LearningEventType {\n  SEARCH_PATTERN = \"SEARCH_PATTERN\",\n  USER_FEEDBACK = \"USER_FEEDBACK\",\n  MODEL_UPDATE = \"MODEL_UPDATE\",\n  ADAPTATION_RULE = \"ADAPTATION_RULE\",\n  SIGNAL_DETECTED = \"SIGNAL_DETECTED\",\n  METRIC_THRESHOLD = \"METRIC_THRESHOLD\",\n  SYSTEM_STATE = \"SYSTEM_STATE\",\n  EXPERIMENT_RESULT = \"EXPERIMENT_RESULT\",\n}\n\nexport enum LearningEventStatus {\n  PENDING = \"PENDING\",\n  PROCESSING = \"PROCESSING\",\n  COMPLETED = \"COMPLETED\",\n  FAILED = \"FAILED\",\n  IGNORED = \"IGNORED\",\n}\n\nexport enum LearningEventPriority {\n  CRITICAL = \"CRITICAL\",\n  HIGH = \"HIGH\",\n  MEDIUM = \"MEDIUM\",\n  LOW = \"LOW\",\n}\n\nexport interface SearchPatternMetadata {\n  // Search metrics\n  relevantHits?: number;\n  totalHits?: number;\n  took?: number;\n  adaptationRulesApplied?: number;\n  searchType?: string;\n  facetsUsed?: boolean;\n\n  // Health check fields\n  source?: string;\n\n  // Additional metadata\n  [key: string]: any; // Allow any additional string-keyed fields\n}\n\n// Align with existing SearchPatternMetadata\nexport interface LearningEventMetadata extends SearchPatternMetadata {\n  source?: string;\n  correlationId?: string;\n  sessionId?: string;\n  userId?: string;\n  clientId?: string;\n  environment?: string;\n  version?: string;\n  tags?: string[];\n  metrics?: Record<string, number>;\n  context?: Record<string, unknown>;\n}\n\nexport interface LearningPattern {\n  id: string;\n  type: string;\n  confidence: number;\n  metrics: Record<string, number>;\n  features: {\n    relevantHits?: number;\n    totalHits?: number;\n    searchType?: string;\n    facetsUsed?: string[];\n    took?: number;\n  };\n  correlations?: Array<{\n    patternId: string;\n    strength: number;\n  }>;\n  metadata: {\n    source: string;\n    detectedAt: string;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface EngineOptimizationStrategy {\n  id: string;\n  type: EngineOptimizationType;\n  priority: number;\n  confidence: number;\n  impact: number;\n  metadata: {\n    targetMetrics: string[];\n    expectedImprovement: number;\n    riskLevel: string;\n    dependencies: string[];\n    searchPattern?: string;\n  };\n  learningResultId: string;\n  resultId: string;\n}\n\nexport interface LearningEvent {\n  id: string;\n  type: LearningEventType;\n  status: LearningEventStatus;\n  priority: LearningEventPriority;\n  timestamp: Date;\n  processedAt?: Date;\n  metadata: LearningEventMetadata;\n  patterns: LearningPattern[];\n  correlationId?: string;\n  metrics: Record<string, number>;\n  sessionId?: string;\n  userId?: string;\n  clientId?: string;\n  environment?: string;\n  version?: string;\n  tags: string[];\n  error?: string;\n  retryCount: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Zod schemas for validation\nexport const LearningEventMetadataSchema = z.object({\n  source: z.string().optional(),\n  correlationId: z.string().optional(),\n  sessionId: z.string().optional(),\n  userId: z.string().optional(),\n  clientId: z.string().optional(),\n  environment: z.string().optional(),\n  version: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n  metrics: z.record(z.number()).optional(),\n  context: z.record(z.unknown()).optional(),\n  // SearchPatternMetadata fields\n  relevantHits: z.number().optional(),\n  totalHits: z.number().optional(),\n  took: z.number().optional(),\n  adaptationRulesApplied: z.number().optional(),\n  searchType: z.string().optional(),\n  facetsUsed: z.boolean().optional(),\n});\n\nexport const LearningPatternSchema = z.object({\n  id: z.string(),\n  type: z.string(),\n  confidence: z.number(),\n  features: z.record(z.unknown()),\n  metadata: z.record(z.unknown()).optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const LearningEventSchema = z.object({\n  id: z.string(),\n  type: z.nativeEnum(LearningEventType),\n  status: z.nativeEnum(LearningEventStatus),\n  priority: z.nativeEnum(LearningEventPriority),\n  timestamp: z.date(),\n  processedAt: z.date().optional(),\n  metadata: LearningEventMetadataSchema,\n  patterns: z.array(LearningPatternSchema),\n  correlationId: z.string().optional(),\n  sessionId: z.string().optional(),\n  userId: z.string().optional(),\n  clientId: z.string().optional(),\n  environment: z.string().optional(),\n  version: z.string().optional(),\n  tags: z.array(z.string()),\n  error: z.string().optional(),\n  retryCount: z.number(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\n// Request/Response types\nexport interface GetLearningEventsRequest {\n  limit?: number;\n  type?: LearningEventType;\n  status?: LearningEventStatus;\n  priority?: LearningEventPriority;\n  startDate?: string;\n  endDate?: string;\n  correlationId?: string;\n  sessionId?: string;\n  userId?: string;\n  clientId?: string;\n  environment?: string;\n  tags?: string[];\n}\n\nexport interface GetLearningEventsResponse {\n  success: boolean;\n  data?: LearningEvent[];\n  error?: string;\n  meta?: {\n    total: number;\n    timestamp: string;\n    limit: number;\n  };\n}\n\n// Service method types\nexport interface LearningEventService {\n  getEvents(\n    request: GetLearningEventsRequest\n  ): Promise<GetLearningEventsResponse>;\n  createEvent(\n    event: Omit<LearningEvent, \"id\" | \"createdAt\" | \"updatedAt\">\n  ): Promise<LearningEvent>;\n  updateEvent(\n    id: string,\n    updates: Partial<LearningEvent>\n  ): Promise<LearningEvent>;\n  deleteEvent(id: string): Promise<void>;\n}\n"],"mappings":"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","names":["LearningEventType","LearningEventStatus","LearningEventPriority"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"94aecbbcd6bc8c774b24ee2d39e532d7cfaabab3"},"/workspaces/sophra/src/lib/nous/types/models.ts":{"path":"/workspaces/sophra/src/lib/nous/types/models.ts","statementMap":{"0":{"start":{"line":1,"column":39},"end":{"line":8,"column":19}},"1":{"start":{"line":2,"column":2},"end":{"line":2,"column":48}},"2":{"start":{"line":3,"column":2},"end":{"line":3,"column":54}},"3":{"start":{"line":4,"column":2},"end":{"line":4,"column":52}},"4":{"start":{"line":5,"column":2},"end":{"line":5,"column":56}},"5":{"start":{"line":6,"column":2},"end":{"line":6,"column":56}},"6":{"start":{"line":7,"column":2},"end":{"line":7,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":1,"column":40},"end":{"line":1,"column":41}},"loc":{"start":{"line":1,"column":56},"end":{"line":8,"column":1}},"line":1}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":3},"end":{"line":8,"column":18}},"type":"binary-expr","locations":[{"start":{"line":8,"column":3},"end":{"line":8,"column":12}},{"start":{"line":8,"column":16},"end":{"line":8,"column":18}}],"line":8}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1},"f":{"0":1},"b":{"0":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/types/models.ts"],"sourcesContent":["export enum ModelType {\n  SEARCH_RANKER = 'search_ranker',\n  PATTERN_DETECTOR = 'pattern_detector',\n  QUERY_OPTIMIZER = 'query_optimizer',\n  FEEDBACK_ANALYZER = 'feedback_analyzer',\n  OPENAI_FINE_TUNED = 'openai_fine_tuned'\n}\n\nexport interface ModelConfig {\n  type: ModelType;\n  hyperparameters: Record<string, unknown>;\n  features: string[];\n  trainingParams: Record<string, unknown>;\n}\n\nexport interface ModelVersion {\n  id: string;\n  createdAt: Date;\n  config: ModelConfig;\n  metrics: Record<string, number>;\n  artifactPath: string;\n  parentVersion?: string;\n}\n\nexport interface TrainingMetrics {\n  loss: number;\n  accuracy: number;\n  validationMetrics: Record<string, number>;\n  trainingDuration: number;\n  iterationCount: number;\n}\n\nexport interface ModelEvaluation {\n  versionId: string;\n  timestamp: Date;\n  metrics: Record<string, number>;\n  testCases: Array<Record<string, unknown>>;\n  performanceComparison?: Record<string, number>;\n}\n"],"mappings":"AAAO,WAAK,YAAL,kBAAKA,eAAL;AACL,EAAAA,WAAA,mBAAgB;AAChB,EAAAA,WAAA,sBAAmB;AACnB,EAAAA,WAAA,qBAAkB;AAClB,EAAAA,WAAA,uBAAoB;AACpB,EAAAA,WAAA,uBAAoB;AALV,SAAAA;AAAA,GAAA;","names":["ModelType"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a03476bf8b2c92a278b45897c92b4e06d2ccfe89"},"/workspaces/sophra/src/lib/nous/engine/types.ts":{"path":"/workspaces/sophra/src/lib/nous/engine/types.ts","statementMap":{"0":{"start":{"line":8,"column":42},"end":{"line":16,"column":22}},"1":{"start":{"line":9,"column":2},"end":{"line":9,"column":49}},"2":{"start":{"line":10,"column":2},"end":{"line":10,"column":35}},"3":{"start":{"line":11,"column":2},"end":{"line":11,"column":41}},"4":{"start":{"line":12,"column":2},"end":{"line":12,"column":45}},"5":{"start":{"line":13,"column":2},"end":{"line":13,"column":37}},"6":{"start":{"line":14,"column":2},"end":{"line":14,"column":35}},"7":{"start":{"line":15,"column":2},"end":{"line":15,"column":23}},"8":{"start":{"line":17,"column":49},"end":{"line":24,"column":29}},"9":{"start":{"line":18,"column":2},"end":{"line":18,"column":48}},"10":{"start":{"line":19,"column":2},"end":{"line":19,"column":56}},"11":{"start":{"line":20,"column":2},"end":{"line":20,"column":52}},"12":{"start":{"line":21,"column":2},"end":{"line":21,"column":48}},"13":{"start":{"line":22,"column":2},"end":{"line":22,"column":66}},"14":{"start":{"line":23,"column":2},"end":{"line":23,"column":30}},"15":{"start":{"line":25,"column":51},"end":{"line":32,"column":31}},"16":{"start":{"line":26,"column":2},"end":{"line":26,"column":48}},"17":{"start":{"line":27,"column":2},"end":{"line":27,"column":56}},"18":{"start":{"line":28,"column":2},"end":{"line":28,"column":52}},"19":{"start":{"line":29,"column":2},"end":{"line":29,"column":46}},"20":{"start":{"line":30,"column":2},"end":{"line":30,"column":52}},"21":{"start":{"line":31,"column":2},"end":{"line":31,"column":32}},"22":{"start":{"line":33,"column":52},"end":{"line":41,"column":32}},"23":{"start":{"line":34,"column":2},"end":{"line":34,"column":69}},"24":{"start":{"line":35,"column":2},"end":{"line":35,"column":71}},"25":{"start":{"line":36,"column":2},"end":{"line":36,"column":75}},"26":{"start":{"line":37,"column":2},"end":{"line":37,"column":71}},"27":{"start":{"line":38,"column":2},"end":{"line":38,"column":61}},"28":{"start":{"line":39,"column":2},"end":{"line":39,"column":63}},"29":{"start":{"line":40,"column":2},"end":{"line":40,"column":33}},"30":{"start":{"line":42,"column":45},"end":{"line":48,"column":25}},"31":{"start":{"line":43,"column":2},"end":{"line":43,"column":34}},"32":{"start":{"line":44,"column":2},"end":{"line":44,"column":40}},"33":{"start":{"line":45,"column":2},"end":{"line":45,"column":36}},"34":{"start":{"line":46,"column":2},"end":{"line":46,"column":44}},"35":{"start":{"line":47,"column":2},"end":{"line":47,"column":26}},"36":{"start":{"line":49,"column":33},"end":{"line":56,"column":2}},"37":{"start":{"line":57,"column":37},"end":{"line":66,"column":2}},"38":{"start":{"line":67,"column":35},"end":{"line":72,"column":2}},"39":{"start":{"line":73,"column":43},"end":{"line":78,"column":2}},"40":{"start":{"line":74,"column":24},"end":{"line":74,"column":45}},"41":{"start":{"line":77,"column":25},"end":{"line":77,"column":52}},"42":{"start":{"line":79,"column":42},"end":{"line":92,"column":2}},"43":{"start":{"line":84,"column":40},"end":{"line":84,"column":72}},"44":{"start":{"line":93,"column":48},"end":{"line":111,"column":2}},"45":{"start":{"line":112,"column":43},"end":{"line":125,"column":2}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":43},"end":{"line":8,"column":44}},"loc":{"start":{"line":8,"column":62},"end":{"line":16,"column":1}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":17,"column":50},"end":{"line":17,"column":51}},"loc":{"start":{"line":17,"column":76},"end":{"line":24,"column":1}},"line":17},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":52},"end":{"line":25,"column":53}},"loc":{"start":{"line":25,"column":80},"end":{"line":32,"column":1}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":33,"column":53},"end":{"line":33,"column":54}},"loc":{"start":{"line":33,"column":82},"end":{"line":41,"column":1}},"line":33},"4":{"name":"(anonymous_4)","decl":{"start":{"line":42,"column":46},"end":{"line":42,"column":47}},"loc":{"start":{"line":42,"column":68},"end":{"line":48,"column":1}},"line":42},"5":{"name":"(anonymous_5)","decl":{"start":{"line":74,"column":18},"end":{"line":74,"column":19}},"loc":{"start":{"line":74,"column":24},"end":{"line":74,"column":45}},"line":74},"6":{"name":"(anonymous_6)","decl":{"start":{"line":77,"column":19},"end":{"line":77,"column":20}},"loc":{"start":{"line":77,"column":25},"end":{"line":77,"column":52}},"line":77},"7":{"name":"(anonymous_7)","decl":{"start":{"line":84,"column":34},"end":{"line":84,"column":35}},"loc":{"start":{"line":84,"column":40},"end":{"line":84,"column":72}},"line":84}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":3},"end":{"line":16,"column":21}},"type":"binary-expr","locations":[{"start":{"line":16,"column":3},"end":{"line":16,"column":15}},{"start":{"line":16,"column":19},"end":{"line":16,"column":21}}],"line":16},"1":{"loc":{"start":{"line":24,"column":3},"end":{"line":24,"column":28}},"type":"binary-expr","locations":[{"start":{"line":24,"column":3},"end":{"line":24,"column":22}},{"start":{"line":24,"column":26},"end":{"line":24,"column":28}}],"line":24},"2":{"loc":{"start":{"line":32,"column":3},"end":{"line":32,"column":30}},"type":"binary-expr","locations":[{"start":{"line":32,"column":3},"end":{"line":32,"column":24}},{"start":{"line":32,"column":28},"end":{"line":32,"column":30}}],"line":32},"3":{"loc":{"start":{"line":41,"column":3},"end":{"line":41,"column":31}},"type":"binary-expr","locations":[{"start":{"line":41,"column":3},"end":{"line":41,"column":25}},{"start":{"line":41,"column":29},"end":{"line":41,"column":31}}],"line":41},"4":{"loc":{"start":{"line":48,"column":3},"end":{"line":48,"column":24}},"type":"binary-expr","locations":[{"start":{"line":48,"column":3},"end":{"line":48,"column":18}},{"start":{"line":48,"column":22},"end":{"line":48,"column":24}}],"line":48}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":0,"41":0,"42":1,"43":0,"44":1,"45":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0},"b":{"0":[1,1],"1":[1,1],"2":[1,1],"3":[1,1],"4":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/engine/types.ts"],"sourcesContent":["import { Logger } from \"@/lib/shared/types\";\nimport Redis from \"ioredis\";\nimport { z } from \"zod\";\nimport { MetricsService } from \"../monitoring/metrics\";\nimport {\n  LearningEventMetadata,\n  LearningEventMetadataSchema,\n  LearningEventType,\n  LearningPattern,\n  LearningPatternSchema,\n} from \"../types/learning\";\nimport { ModelType } from \"../types/models\";\n\nexport enum EngineStatus {\n  INITIALIZING = \"INITIALIZING\",\n  READY = \"READY\",\n  LEARNING = \"LEARNING\",\n  OPTIMIZING = \"OPTIMIZING\",\n  PAUSED = \"PAUSED\",\n  ERROR = \"ERROR\",\n}\n\nexport enum EngineOperationType {\n  LEARNING = \"LEARNING\",\n  OPTIMIZATION = \"OPTIMIZATION\",\n  VALIDATION = \"VALIDATION\",\n  ROLLBACK = \"ROLLBACK\",\n  PATTERN_DETECTION = \"PATTERN_DETECTION\",\n}\n\nexport enum EngineOperationStatus {\n  PENDING = \"PENDING\",\n  IN_PROGRESS = \"IN_PROGRESS\",\n  COMPLETED = \"COMPLETED\",\n  FAILED = \"FAILED\",\n  CANCELLED = \"CANCELLED\",\n}\n\nexport enum EngineOptimizationType {\n  WEIGHT_ADJUSTMENT = \"WEIGHT_ADJUSTMENT\",\n  CACHE_OPTIMIZATION = \"CACHE_OPTIMIZATION\",\n  QUERY_TRANSFORMATION = \"QUERY_TRANSFORMATION\",\n  INDEX_OPTIMIZATION = \"INDEX_OPTIMIZATION\",\n  FEEDBACK_LOOP = \"FEEDBACK_LOOP\",\n  CACHE_STRATEGY = \"CACHE_STRATEGY\",\n}\n\nexport enum EngineRiskLevel {\n  LOW = \"LOW\",\n  MEDIUM = \"MEDIUM\",\n  HIGH = \"HIGH\",\n  CRITICAL = \"CRITICAL\",\n}\n\nexport interface EngineConfig {\n  redis: Redis;\n  logger: Logger;\n  metrics: MetricsService;\n}\n\nexport interface EngineMetrics {\n  eventType: LearningEventType;\n  patternCount: number;\n  processingTimeMs: number;\n  confidence: number;\n}\n\nexport interface EngineState {\n  id: string;\n  status: EngineStatus;\n  currentPhase?: string;\n  confidence: number;\n  lastActive: Date;\n  metadata?: Record<string, unknown>;\n}\n\nexport interface EngineOperation {\n  createdAt: Date;\n  updatedAt: Date;\n  id: string;\n  type: EngineOperationType;\n  status: EngineOperationStatus;\n  startTime: Date;\n  endTime?: Date;\n  metrics?: Record<string, number>;\n  metadata?: Record<string, unknown>;\n  error?: string;\n}\n\nexport interface PatternAnalysisResult {\n  pattern: LearningPattern;\n  confidence: number;\n  modelType: ModelType;\n  metadata: LearningEventMetadata;\n}\n\nexport interface EngineLearningResult {\n  id: string;\n  patterns: LearningPattern[];\n  confidence: number;\n  metadata: LearningEventMetadata;\n  recommendations: EngineOptimizationStrategy[];\n  appliedAt?: Date;\n  validatedAt?: Date;\n  performance?: {\n    beforeMetrics: Record<string, number>;\n    afterMetrics: Record<string, number>;\n    improvement: number;\n  };\n}\n\nexport interface EngineOptimizationStrategyMetadata {\n  targetMetrics: string[];\n  expectedImprovement: number;\n  riskLevel: EngineRiskLevel;\n  dependencies?: string[];\n  searchPattern?: string;\n}\n\nexport interface EngineOptimizationStrategy {\n  id: string;\n  type: EngineOptimizationType;\n  priority: number;\n  confidence: number;\n  impact: number;\n  metadata: {\n    targetMetrics: string[];\n    expectedImprovement: number;\n    riskLevel: EngineRiskLevel;\n    dependencies: string[];\n    searchPattern?: string;\n  };\n  learningResultId: string;\n  resultId: string;\n}\n\nexport interface EngineConfidenceScore {\n  value: number;\n  factors: {\n    patternFrequency: number;\n    historicalSuccess: number;\n    dataQuality: number;\n    patternStability: number;\n  };\n  metadata: {\n    sampleSize: number;\n    timeWindow: string;\n    lastUpdated: Date;\n  };\n}\n\nexport interface ABTestResults {\n  winner: \"control\" | \"treatment\";\n  improvement: number;\n  metrics: {\n    control: Record<string, number>;\n    treatment: Record<string, number>;\n  };\n}\n\nexport interface ImpactAnalysis {\n  weightedImprovement: number;\n  improvements: Record<string, number>;\n  significance: number;\n  confidence: number;\n  loadFactor: number;\n  isSignificant: boolean;\n  value: number;\n}\n\nexport interface TestMetrics {\n  latency: number;\n  errorRate: number;\n  throughput: number;\n  cpuUsage: number;\n  memoryUsage: number;\n}\n\nexport interface VariantAnalysis {\n  metrics: TestMetrics;\n  sampleSize: number;\n  confidence: number;\n}\n\n// Zod Schemas\nexport const EngineStateSchema = z.object({\n  id: z.string(),\n  status: z.nativeEnum(EngineStatus),\n  currentPhase: z.string().optional(),\n  confidence: z.number().min(0).max(1),\n  lastActive: z.date(),\n  metadata: z.record(z.unknown()).optional(),\n});\n\nexport const EngineOperationSchema = z.object({\n  id: z.string(),\n  type: z.nativeEnum(EngineOperationType),\n  status: z.nativeEnum(EngineOperationStatus),\n  startTime: z.date(),\n  endTime: z.date().optional(),\n  metrics: z.record(z.number()).optional(),\n  metadata: z.record(z.unknown()).optional(),\n  error: z.string().optional(),\n});\n\nexport const EngineMetricsSchema = z.object({\n  eventType: z.nativeEnum(LearningEventType),\n  patternCount: z.number().min(0),\n  processingTimeMs: z.number().min(0),\n  confidence: z.number().min(0).max(1),\n});\n\nexport const PatternAnalysisResultSchema = z.object({\n  pattern: z.lazy(() => LearningPatternSchema),\n  confidence: z.number().min(0).max(1),\n  modelType: z.nativeEnum(ModelType),\n  metadata: z.lazy(() => LearningEventMetadataSchema),\n});\n\nexport const EngineLearningResultSchema = z.object({\n  id: z.string(),\n  patterns: z.array(LearningPatternSchema),\n  confidence: z.number().min(0).max(1),\n  metadata: LearningEventMetadataSchema,\n  recommendations: z.array(z.lazy(() => EngineOptimizationStrategySchema)),\n  appliedAt: z.date().optional(),\n  validatedAt: z.date().optional(),\n  performance: z\n    .object({\n      beforeMetrics: z.record(z.number()),\n      afterMetrics: z.record(z.number()),\n      improvement: z.number(),\n    })\n    .optional(),\n});\n\nexport const EngineOptimizationStrategySchema = z.object({\n  id: z.string(),\n  type: z.enum([\n    \"WEIGHT_ADJUSTMENT\",\n    \"CACHE_OPTIMIZATION\",\n    \"QUERY_TRANSFORMATION\",\n    \"INDEX_OPTIMIZATION\",\n    \"FEEDBACK_LOOP\",\n  ]),\n  priority: z.number().min(0).max(1),\n  confidence: z.number().min(0).max(1),\n  impact: z.number(),\n  metadata: z.object({\n    targetMetrics: z.array(z.string()),\n    expectedImprovement: z.number(),\n    riskLevel: z.enum([\"LOW\", \"MEDIUM\", \"HIGH\", \"CRITICAL\"]),\n    dependencies: z.array(z.string()).optional(),\n  }),\n});\n\nexport const EngineConfidenceScoreSchema = z.object({\n  value: z.number().min(0).max(1),\n  factors: z.object({\n    patternFrequency: z.number().min(0).max(1),\n    historicalSuccess: z.number().min(0).max(1),\n    dataQuality: z.number().min(0).max(1),\n    patternStability: z.number().min(0).max(1),\n  }),\n  metadata: z.object({\n    sampleSize: z.number().min(0),\n    timeWindow: z.string(),\n    lastUpdated: z.date(),\n  }),\n});\n"],"mappings":"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","names":["EngineStatus","EngineOperationType","EngineOperationStatus","EngineOptimizationType","EngineRiskLevel"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"d41302b07057b4ebd128cc681968c8277eb91276"},"/workspaces/sophra/src/lib/nous/engine/service.ts":{"path":"/workspaces/sophra/src/lib/nous/engine/service.ts","statementMap":{"0":{"start":{"line":20,"column":4},"end":{"line":20,"column":57}},"1":{"start":{"line":21,"column":4},"end":{"line":21,"column":30}},"2":{"start":{"line":22,"column":4},"end":{"line":22,"column":31}},"3":{"start":{"line":25,"column":4},"end":{"line":29,"column":5}},"4":{"start":{"line":26,"column":6},"end":{"line":26,"column":57}},"5":{"start":{"line":28,"column":6},"end":{"line":28,"column":65}},"6":{"start":{"line":30,"column":4},"end":{"line":30,"column":54}},"7":{"start":{"line":30,"column":21},"end":{"line":30,"column":47}},"8":{"start":{"line":33,"column":4},"end":{"line":33,"column":33}},"9":{"start":{"line":36,"column":4},"end":{"line":36,"column":33}},"10":{"start":{"line":39,"column":4},"end":{"line":46,"column":5}},"11":{"start":{"line":40,"column":22},"end":{"line":40,"column":52}},"12":{"start":{"line":41,"column":6},"end":{"line":41,"column":31}},"13":{"start":{"line":41,"column":20},"end":{"line":41,"column":31}},"14":{"start":{"line":42,"column":23},"end":{"line":42,"column":26}},"15":{"start":{"line":43,"column":6},"end":{"line":43,"column":43}},"16":{"start":{"line":45,"column":6},"end":{"line":45,"column":17}},"17":{"start":{"line":49,"column":4},"end":{"line":72,"column":5}},"18":{"start":{"line":50,"column":22},"end":{"line":61,"column":8}},"19":{"start":{"line":62,"column":6},"end":{"line":64,"column":7}},"20":{"start":{"line":63,"column":8},"end":{"line":63,"column":36}},"21":{"start":{"line":65,"column":27},"end":{"line":68,"column":7}},"22":{"start":{"line":66,"column":25},"end":{"line":66,"column":51}},"23":{"start":{"line":69,"column":6},"end":{"line":69,"column":55}},"24":{"start":{"line":71,"column":6},"end":{"line":71,"column":34}},"25":{"start":{"line":75,"column":4},"end":{"line":81,"column":6}},"26":{"start":{"line":86,"column":4},"end":{"line":86,"column":25}},"27":{"start":{"line":87,"column":4},"end":{"line":87,"column":29}},"28":{"start":{"line":88,"column":4},"end":{"line":88,"column":68}},"29":{"start":{"line":89,"column":4},"end":{"line":92,"column":7}},"30":{"start":{"line":95,"column":4},"end":{"line":104,"column":5}},"31":{"start":{"line":96,"column":6},"end":{"line":96,"column":62}},"32":{"start":{"line":97,"column":6},"end":{"line":100,"column":9}},"33":{"start":{"line":102,"column":6},"end":{"line":102,"column":74}},"34":{"start":{"line":103,"column":6},"end":{"line":103,"column":18}},"35":{"start":{"line":107,"column":26},"end":{"line":109,"column":6}},"36":{"start":{"line":110,"column":4},"end":{"line":119,"column":5}},"37":{"start":{"line":111,"column":6},"end":{"line":118,"column":8}},"38":{"start":{"line":120,"column":21},"end":{"line":128,"column":6}},"39":{"start":{"line":129,"column":4},"end":{"line":135,"column":6}},"40":{"start":{"line":138,"column":4},"end":{"line":175,"column":5}},"41":{"start":{"line":139,"column":24},"end":{"line":148,"column":8}},"42":{"start":{"line":149,"column":6},"end":{"line":152,"column":9}},"43":{"start":{"line":153,"column":6},"end":{"line":156,"column":9}},"44":{"start":{"line":157,"column":6},"end":{"line":168,"column":8}},"45":{"start":{"line":170,"column":6},"end":{"line":173,"column":9}},"46":{"start":{"line":174,"column":6},"end":{"line":174,"column":18}},"47":{"start":{"line":178,"column":4},"end":{"line":180,"column":5}},"48":{"start":{"line":179,"column":6},"end":{"line":179,"column":48}},"49":{"start":{"line":181,"column":4},"end":{"line":210,"column":5}},"50":{"start":{"line":182,"column":27},"end":{"line":189,"column":8}},"51":{"start":{"line":190,"column":6},"end":{"line":197,"column":8}},"52":{"start":{"line":198,"column":6},"end":{"line":203,"column":9}},"53":{"start":{"line":205,"column":6},"end":{"line":208,"column":9}},"54":{"start":{"line":209,"column":6},"end":{"line":209,"column":18}},"55":{"start":{"line":213,"column":4},"end":{"line":233,"column":5}},"56":{"start":{"line":214,"column":24},"end":{"line":214,"column":79}},"57":{"start":{"line":215,"column":6},"end":{"line":224,"column":9}},"58":{"start":{"line":225,"column":6},"end":{"line":228,"column":9}},"59":{"start":{"line":229,"column":6},"end":{"line":229,"column":23}},"60":{"start":{"line":231,"column":6},"end":{"line":231,"column":69}},"61":{"start":{"line":232,"column":6},"end":{"line":232,"column":18}},"62":{"start":{"line":236,"column":4},"end":{"line":261,"column":5}},"63":{"start":{"line":237,"column":6},"end":{"line":245,"column":9}},"64":{"start":{"line":246,"column":6},"end":{"line":252,"column":7}},"65":{"start":{"line":247,"column":8},"end":{"line":251,"column":11}},"66":{"start":{"line":253,"column":6},"end":{"line":257,"column":9}},"67":{"start":{"line":259,"column":6},"end":{"line":259,"column":80}},"68":{"start":{"line":260,"column":6},"end":{"line":260,"column":18}},"69":{"start":{"line":264,"column":4},"end":{"line":293,"column":5}},"70":{"start":{"line":265,"column":24},"end":{"line":267,"column":7}},"71":{"start":{"line":268,"column":23},"end":{"line":268,"column":25}},"72":{"start":{"line":269,"column":23},"end":{"line":269,"column":24}},"73":{"start":{"line":270,"column":6},"end":{"line":279,"column":7}},"74":{"start":{"line":271,"column":8},"end":{"line":278,"column":9}},"75":{"start":{"line":272,"column":35},"end":{"line":272,"column":74}},"76":{"start":{"line":273,"column":10},"end":{"line":273,"column":45}},"77":{"start":{"line":274,"column":10},"end":{"line":277,"column":12}},"78":{"start":{"line":276,"column":48},"end":{"line":276,"column":75}},"79":{"start":{"line":280,"column":6},"end":{"line":287,"column":9}},"80":{"start":{"line":288,"column":6},"end":{"line":288,"column":57}},"81":{"start":{"line":289,"column":6},"end":{"line":289,"column":37}},"82":{"start":{"line":291,"column":6},"end":{"line":291,"column":64}},"83":{"start":{"line":292,"column":6},"end":{"line":292,"column":18}},"84":{"start":{"line":296,"column":4},"end":{"line":335,"column":5}},"85":{"start":{"line":297,"column":23},"end":{"line":297,"column":25}},"86":{"start":{"line":298,"column":23},"end":{"line":298,"column":37}},"87":{"start":{"line":299,"column":6},"end":{"line":321,"column":7}},"88":{"start":{"line":300,"column":31},"end":{"line":300,"column":73}},"89":{"start":{"line":301,"column":8},"end":{"line":320,"column":9}},"90":{"start":{"line":302,"column":10},"end":{"line":319,"column":13}},"91":{"start":{"line":322,"column":6},"end":{"line":327,"column":9}},"92":{"start":{"line":328,"column":6},"end":{"line":328,"column":22}},"93":{"start":{"line":330,"column":6},"end":{"line":333,"column":9}},"94":{"start":{"line":334,"column":6},"end":{"line":334,"column":18}},"95":{"start":{"line":338,"column":4},"end":{"line":362,"column":5}},"96":{"start":{"line":339,"column":24},"end":{"line":341,"column":7}},"97":{"start":{"line":342,"column":25},"end":{"line":342,"column":27}},"98":{"start":{"line":343,"column":28},"end":{"line":343,"column":29}},"99":{"start":{"line":344,"column":6},"end":{"line":348,"column":7}},"100":{"start":{"line":345,"column":30},"end":{"line":345,"column":80}},"101":{"start":{"line":346,"column":8},"end":{"line":346,"column":42}},"102":{"start":{"line":347,"column":8},"end":{"line":347,"column":46}},"103":{"start":{"line":349,"column":32},"end":{"line":349,"column":65}},"104":{"start":{"line":350,"column":6},"end":{"line":357,"column":9}},"105":{"start":{"line":358,"column":6},"end":{"line":358,"column":39}},"106":{"start":{"line":360,"column":6},"end":{"line":360,"column":71}},"107":{"start":{"line":361,"column":6},"end":{"line":361,"column":18}},"108":{"start":{"line":365,"column":4},"end":{"line":454,"column":5}},"109":{"start":{"line":366,"column":25},"end":{"line":366,"column":27}},"110":{"start":{"line":367,"column":6},"end":{"line":437,"column":7}},"111":{"start":{"line":368,"column":8},"end":{"line":382,"column":11}},"112":{"start":{"line":383,"column":8},"end":{"line":400,"column":9}},"113":{"start":{"line":384,"column":10},"end":{"line":399,"column":13}},"114":{"start":{"line":401,"column":8},"end":{"line":418,"column":9}},"115":{"start":{"line":402,"column":10},"end":{"line":417,"column":13}},"116":{"start":{"line":419,"column":8},"end":{"line":436,"column":9}},"117":{"start":{"line":420,"column":10},"end":{"line":435,"column":13}},"118":{"start":{"line":438,"column":6},"end":{"line":446,"column":9}},"119":{"start":{"line":440,"column":45},"end":{"line":440,"column":63}},"120":{"start":{"line":447,"column":6},"end":{"line":447,"column":24}},"121":{"start":{"line":449,"column":6},"end":{"line":452,"column":9}},"122":{"start":{"line":453,"column":6},"end":{"line":453,"column":18}},"123":{"start":{"line":457,"column":4},"end":{"line":540,"column":5}},"124":{"start":{"line":458,"column":24},"end":{"line":458,"column":55}},"125":{"start":{"line":459,"column":27},"end":{"line":467,"column":8}},"126":{"start":{"line":468,"column":27},"end":{"line":485,"column":7}},"127":{"start":{"line":470,"column":22},"end":{"line":483,"column":11}},"128":{"start":{"line":486,"column":6},"end":{"line":495,"column":7}},"129":{"start":{"line":487,"column":8},"end":{"line":493,"column":11}},"130":{"start":{"line":494,"column":8},"end":{"line":494,"column":15}},"131":{"start":{"line":496,"column":29},"end":{"line":496,"column":70}},"132":{"start":{"line":497,"column":33},"end":{"line":504,"column":7}},"133":{"start":{"line":499,"column":17},"end":{"line":501,"column":54}},"134":{"start":{"line":505,"column":6},"end":{"line":524,"column":9}},"135":{"start":{"line":508,"column":54},"end":{"line":508,"column":66}},"136":{"start":{"line":515,"column":43},"end":{"line":521,"column":13}},"137":{"start":{"line":525,"column":6},"end":{"line":533,"column":9}},"138":{"start":{"line":534,"column":6},"end":{"line":537,"column":9}},"139":{"start":{"line":539,"column":6},"end":{"line":539,"column":71}},"140":{"start":{"line":543,"column":31},"end":{"line":543,"column":33}},"141":{"start":{"line":544,"column":4},"end":{"line":580,"column":5}},"142":{"start":{"line":545,"column":6},"end":{"line":579,"column":7}},"143":{"start":{"line":546,"column":8},"end":{"line":562,"column":9}},"144":{"start":{"line":548,"column":12},"end":{"line":548,"column":57}},"145":{"start":{"line":549,"column":12},"end":{"line":549,"column":18}},"146":{"start":{"line":551,"column":12},"end":{"line":551,"column":54}},"147":{"start":{"line":552,"column":12},"end":{"line":552,"column":18}},"148":{"start":{"line":554,"column":12},"end":{"line":554,"column":60}},"149":{"start":{"line":555,"column":12},"end":{"line":555,"column":18}},"150":{"start":{"line":557,"column":12},"end":{"line":557,"column":58}},"151":{"start":{"line":558,"column":12},"end":{"line":558,"column":18}},"152":{"start":{"line":560,"column":12},"end":{"line":560,"column":54}},"153":{"start":{"line":561,"column":12},"end":{"line":561,"column":18}},"154":{"start":{"line":563,"column":8},"end":{"line":563,"column":42}},"155":{"start":{"line":564,"column":8},"end":{"line":572,"column":11}},"156":{"start":{"line":574,"column":8},"end":{"line":578,"column":11}},"157":{"start":{"line":581,"column":4},"end":{"line":581,"column":30}},"158":{"start":{"line":584,"column":4},"end":{"line":622,"column":5}},"159":{"start":{"line":585,"column":29},"end":{"line":588,"column":8}},"160":{"start":{"line":589,"column":6},"end":{"line":591,"column":7}},"161":{"start":{"line":590,"column":8},"end":{"line":590,"column":51}},"162":{"start":{"line":592,"column":25},"end":{"line":604,"column":7}},"163":{"start":{"line":605,"column":6},"end":{"line":608,"column":9}},"164":{"start":{"line":609,"column":6},"end":{"line":611,"column":9}},"165":{"start":{"line":612,"column":6},"end":{"line":615,"column":9}},"166":{"start":{"line":617,"column":6},"end":{"line":620,"column":9}},"167":{"start":{"line":621,"column":6},"end":{"line":621,"column":18}},"168":{"start":{"line":625,"column":4},"end":{"line":679,"column":5}},"169":{"start":{"line":626,"column":26},"end":{"line":631,"column":7}},"170":{"start":{"line":632,"column":6},"end":{"line":657,"column":9}},"171":{"start":{"line":658,"column":6},"end":{"line":667,"column":9}},"172":{"start":{"line":668,"column":6},"end":{"line":672,"column":9}},"173":{"start":{"line":674,"column":6},"end":{"line":677,"column":9}},"174":{"start":{"line":678,"column":6},"end":{"line":678,"column":18}},"175":{"start":{"line":682,"column":4},"end":{"line":714,"column":5}},"176":{"start":{"line":683,"column":34},"end":{"line":688,"column":7}},"177":{"start":{"line":689,"column":6},"end":{"line":698,"column":9}},"178":{"start":{"line":699,"column":6},"end":{"line":707,"column":9}},"179":{"start":{"line":709,"column":6},"end":{"line":712,"column":9}},"180":{"start":{"line":713,"column":6},"end":{"line":713,"column":18}},"181":{"start":{"line":717,"column":4},"end":{"line":749,"column":5}},"182":{"start":{"line":718,"column":26},"end":{"line":723,"column":7}},"183":{"start":{"line":724,"column":6},"end":{"line":733,"column":9}},"184":{"start":{"line":734,"column":6},"end":{"line":742,"column":9}},"185":{"start":{"line":744,"column":6},"end":{"line":747,"column":9}},"186":{"start":{"line":748,"column":6},"end":{"line":748,"column":18}},"187":{"start":{"line":752,"column":4},"end":{"line":780,"column":5}},"188":{"start":{"line":753,"column":28},"end":{"line":753,"column":66}},"189":{"start":{"line":754,"column":6},"end":{"line":754,"column":43}},"190":{"start":{"line":755,"column":6},"end":{"line":755,"column":72}},"191":{"start":{"line":755,"column":37},"end":{"line":755,"column":70}},"192":{"start":{"line":756,"column":27},"end":{"line":756,"column":65}},"193":{"start":{"line":757,"column":21},"end":{"line":757,"column":78}},"194":{"start":{"line":758,"column":6},"end":{"line":761,"column":7}},"195":{"start":{"line":759,"column":8},"end":{"line":759,"column":46}},"196":{"start":{"line":760,"column":8},"end":{"line":760,"column":74}},"197":{"start":{"line":762,"column":6},"end":{"line":772,"column":9}},"198":{"start":{"line":774,"column":6},"end":{"line":777,"column":9}},"199":{"start":{"line":778,"column":6},"end":{"line":778,"column":44}},"200":{"start":{"line":779,"column":6},"end":{"line":779,"column":18}},"201":{"start":{"line":783,"column":23},"end":{"line":796,"column":5}},"202":{"start":{"line":797,"column":4},"end":{"line":823,"column":5}},"203":{"start":{"line":798,"column":6},"end":{"line":804,"column":9}},"204":{"start":{"line":805,"column":22},"end":{"line":805,"column":71}},"205":{"start":{"line":806,"column":6},"end":{"line":808,"column":7}},"206":{"start":{"line":807,"column":8},"end":{"line":807,"column":45}},"207":{"start":{"line":809,"column":6},"end":{"line":819,"column":9}},"208":{"start":{"line":821,"column":6},"end":{"line":821,"column":79}},"209":{"start":{"line":822,"column":6},"end":{"line":822,"column":18}},"210":{"start":{"line":826,"column":4},"end":{"line":856,"column":5}},"211":{"start":{"line":827,"column":6},"end":{"line":840,"column":7}},"212":{"start":{"line":829,"column":10},"end":{"line":829,"column":47}},"213":{"start":{"line":830,"column":10},"end":{"line":830,"column":16}},"214":{"start":{"line":832,"column":10},"end":{"line":832,"column":45}},"215":{"start":{"line":833,"column":10},"end":{"line":833,"column":16}},"216":{"start":{"line":835,"column":10},"end":{"line":835,"column":59}},"217":{"start":{"line":836,"column":10},"end":{"line":836,"column":16}},"218":{"start":{"line":838,"column":10},"end":{"line":838,"column":57}},"219":{"start":{"line":839,"column":10},"end":{"line":839,"column":16}},"220":{"start":{"line":841,"column":6},"end":{"line":849,"column":9}},"221":{"start":{"line":851,"column":6},"end":{"line":854,"column":9}},"222":{"start":{"line":855,"column":6},"end":{"line":855,"column":18}},"223":{"start":{"line":859,"column":4},"end":{"line":888,"column":5}},"224":{"start":{"line":860,"column":27},"end":{"line":862,"column":8}},"225":{"start":{"line":863,"column":23},"end":{"line":863,"column":45}},"226":{"start":{"line":864,"column":6},"end":{"line":866,"column":7}},"227":{"start":{"line":865,"column":8},"end":{"line":865,"column":81}},"228":{"start":{"line":867,"column":6},"end":{"line":880,"column":7}},"229":{"start":{"line":869,"column":10},"end":{"line":869,"column":45}},"230":{"start":{"line":870,"column":10},"end":{"line":870,"column":16}},"231":{"start":{"line":872,"column":10},"end":{"line":872,"column":45}},"232":{"start":{"line":873,"column":10},"end":{"line":873,"column":16}},"233":{"start":{"line":875,"column":10},"end":{"line":875,"column":46}},"234":{"start":{"line":876,"column":10},"end":{"line":876,"column":16}},"235":{"start":{"line":878,"column":10},"end":{"line":878,"column":45}},"236":{"start":{"line":879,"column":10},"end":{"line":879,"column":16}},"237":{"start":{"line":881,"column":6},"end":{"line":881,"column":51}},"238":{"start":{"line":883,"column":6},"end":{"line":886,"column":9}},"239":{"start":{"line":887,"column":6},"end":{"line":887,"column":18}},"240":{"start":{"line":891,"column":4},"end":{"line":891,"column":43}},"241":{"start":{"line":894,"column":4},"end":{"line":900,"column":6}},"242":{"start":{"line":903,"column":20},"end":{"line":909,"column":5}},"243":{"start":{"line":910,"column":23},"end":{"line":910,"column":49}},"244":{"start":{"line":911,"column":25},"end":{"line":911,"column":27}},"245":{"start":{"line":912,"column":30},"end":{"line":912,"column":31}},"246":{"start":{"line":913,"column":4},"end":{"line":918,"column":5}},"247":{"start":{"line":914,"column":29},"end":{"line":914,"column":78}},"248":{"start":{"line":915,"column":27},"end":{"line":915,"column":54}},"249":{"start":{"line":916,"column":6},"end":{"line":916,"column":42}},"250":{"start":{"line":917,"column":6},"end":{"line":917,"column":51}},"251":{"start":{"line":919,"column":25},"end":{"line":919,"column":77}},"252":{"start":{"line":920,"column":4},"end":{"line":928,"column":6}},"253":{"start":{"line":931,"column":20},"end":{"line":931,"column":58}},"254":{"start":{"line":932,"column":4},"end":{"line":940,"column":7}},"255":{"start":{"line":941,"column":4},"end":{"line":948,"column":6}},"256":{"start":{"line":951,"column":4},"end":{"line":991,"column":5}},"257":{"start":{"line":952,"column":29},"end":{"line":961,"column":8}},"258":{"start":{"line":962,"column":6},"end":{"line":964,"column":7}},"259":{"start":{"line":963,"column":8},"end":{"line":963,"column":57}},"260":{"start":{"line":965,"column":30},"end":{"line":967,"column":23}},"261":{"start":{"line":968,"column":6},"end":{"line":971,"column":9}},"262":{"start":{"line":972,"column":6},"end":{"line":981,"column":9}},"263":{"start":{"line":982,"column":6},"end":{"line":984,"column":9}},"264":{"start":{"line":986,"column":6},"end":{"line":989,"column":9}},"265":{"start":{"line":990,"column":6},"end":{"line":990,"column":18}},"266":{"start":{"line":994,"column":4},"end":{"line":1020,"column":5}},"267":{"start":{"line":995,"column":6},"end":{"line":1004,"column":9}},"268":{"start":{"line":1005,"column":6},"end":{"line":1013,"column":9}},"269":{"start":{"line":1015,"column":6},"end":{"line":1018,"column":9}},"270":{"start":{"line":1019,"column":6},"end":{"line":1019,"column":18}},"271":{"start":{"line":1023,"column":4},"end":{"line":1054,"column":5}},"272":{"start":{"line":1024,"column":21},"end":{"line":1026,"column":8}},"273":{"start":{"line":1027,"column":6},"end":{"line":1038,"column":7}},"274":{"start":{"line":1028,"column":32},"end":{"line":1028,"column":56}},"275":{"start":{"line":1029,"column":39},"end":{"line":1031,"column":9}},"276":{"start":{"line":1030,"column":17},"end":{"line":1030,"column":62}},"277":{"start":{"line":1032,"column":8},"end":{"line":1037,"column":11}},"278":{"start":{"line":1039,"column":6},"end":{"line":1047,"column":9}},"279":{"start":{"line":1049,"column":6},"end":{"line":1052,"column":9}},"280":{"start":{"line":1053,"column":6},"end":{"line":1053,"column":18}},"281":{"start":{"line":1057,"column":4},"end":{"line":1088,"column":5}},"282":{"start":{"line":1058,"column":21},"end":{"line":1060,"column":8}},"283":{"start":{"line":1061,"column":6},"end":{"line":1072,"column":7}},"284":{"start":{"line":1062,"column":29},"end":{"line":1062,"column":53}},"285":{"start":{"line":1063,"column":31},"end":{"line":1065,"column":9}},"286":{"start":{"line":1064,"column":17},"end":{"line":1064,"column":68}},"287":{"start":{"line":1066,"column":8},"end":{"line":1071,"column":11}},"288":{"start":{"line":1073,"column":6},"end":{"line":1081,"column":9}},"289":{"start":{"line":1083,"column":6},"end":{"line":1086,"column":9}},"290":{"start":{"line":1087,"column":6},"end":{"line":1087,"column":18}},"291":{"start":{"line":1091,"column":4},"end":{"line":1099,"column":6}},"292":{"start":{"line":1093,"column":21},"end":{"line":1093,"column":31}},"293":{"start":{"line":1094,"column":8},"end":{"line":1094,"column":42}},"294":{"start":{"line":1095,"column":8},"end":{"line":1095,"column":33}},"295":{"start":{"line":1096,"column":8},"end":{"line":1096,"column":22}},"296":{"start":{"line":1102,"column":4},"end":{"line":1102,"column":14}},"297":{"start":{"line":1105,"column":4},"end":{"line":1105,"column":15}},"298":{"start":{"line":1108,"column":4},"end":{"line":1108,"column":20}},"299":{"start":{"line":1111,"column":21},"end":{"line":1111,"column":37}},"300":{"start":{"line":1112,"column":21},"end":{"line":1112,"column":37}},"301":{"start":{"line":1113,"column":26},"end":{"line":1115,"column":5}},"302":{"start":{"line":1114,"column":15},"end":{"line":1114,"column":30}},"303":{"start":{"line":1116,"column":4},"end":{"line":1116,"column":45}},"304":{"start":{"line":1116,"column":36},"end":{"line":1116,"column":45}},"305":{"start":{"line":1117,"column":22},"end":{"line":1117,"column":23}},"306":{"start":{"line":1118,"column":4},"end":{"line":1121,"column":5}},"307":{"start":{"line":1119,"column":19},"end":{"line":1119,"column":64}},"308":{"start":{"line":1120,"column":6},"end":{"line":1120,"column":77}},"309":{"start":{"line":1122,"column":4},"end":{"line":1122,"column":46}},"310":{"start":{"line":1125,"column":4},"end":{"line":1135,"column":7}},"311":{"start":{"line":1138,"column":21},"end":{"line":1138,"column":23}},"312":{"start":{"line":1139,"column":23},"end":{"line":1139,"column":65}},"313":{"start":{"line":1140,"column":4},"end":{"line":1164,"column":5}},"314":{"start":{"line":1141,"column":6},"end":{"line":1141,"column":45}},"315":{"start":{"line":1141,"column":36},"end":{"line":1141,"column":45}},"316":{"start":{"line":1142,"column":25},"end":{"line":1142,"column":114}},"317":{"start":{"line":1142,"column":57},"end":{"line":1142,"column":88}},"318":{"start":{"line":1143,"column":25},"end":{"line":1143,"column":44}},"319":{"start":{"line":1144,"column":6},"end":{"line":1163,"column":9}},"320":{"start":{"line":1165,"column":4},"end":{"line":1165,"column":20}},"321":{"start":{"line":1168,"column":21},"end":{"line":1168,"column":23}},"322":{"start":{"line":1169,"column":25},"end":{"line":1169,"column":62}},"323":{"start":{"line":1170,"column":4},"end":{"line":1203,"column":5}},"324":{"start":{"line":1171,"column":41},"end":{"line":1171,"column":50}},"325":{"start":{"line":1172,"column":25},"end":{"line":1172,"column":26}},"326":{"start":{"line":1173,"column":22},"end":{"line":1173,"column":23}},"327":{"start":{"line":1174,"column":6},"end":{"line":1181,"column":9}},"328":{"start":{"line":1175,"column":8},"end":{"line":1177,"column":9}},"329":{"start":{"line":1176,"column":10},"end":{"line":1176,"column":66}},"330":{"start":{"line":1176,"column":47},"end":{"line":1176,"column":64}},"331":{"start":{"line":1178,"column":8},"end":{"line":1179,"column":54}},"332":{"start":{"line":1179,"column":10},"end":{"line":1179,"column":54}},"333":{"start":{"line":1180,"column":8},"end":{"line":1180,"column":77}},"334":{"start":{"line":1180,"column":39},"end":{"line":1180,"column":77}},"335":{"start":{"line":1182,"column":6},"end":{"line":1202,"column":9}},"336":{"start":{"line":1204,"column":4},"end":{"line":1204,"column":20}},"337":{"start":{"line":1207,"column":36},"end":{"line":1207,"column":45}},"338":{"start":{"line":1208,"column":4},"end":{"line":1214,"column":7}},"339":{"start":{"line":1209,"column":24},"end":{"line":1209,"column":97}},"340":{"start":{"line":1210,"column":6},"end":{"line":1212,"column":7}},"341":{"start":{"line":1211,"column":8},"end":{"line":1211,"column":35}},"342":{"start":{"line":1213,"column":6},"end":{"line":1213,"column":41}},"343":{"start":{"line":1215,"column":4},"end":{"line":1215,"column":19}},"344":{"start":{"line":1218,"column":37},"end":{"line":1218,"column":46}},"345":{"start":{"line":1219,"column":4},"end":{"line":1225,"column":7}},"346":{"start":{"line":1220,"column":24},"end":{"line":1220,"column":62}},"347":{"start":{"line":1221,"column":6},"end":{"line":1223,"column":7}},"348":{"start":{"line":1222,"column":8},"end":{"line":1222,"column":36}},"349":{"start":{"line":1224,"column":6},"end":{"line":1224,"column":42}},"350":{"start":{"line":1226,"column":4},"end":{"line":1226,"column":20}},"351":{"start":{"line":1229,"column":4},"end":{"line":1260,"column":5}},"352":{"start":{"line":1230,"column":6},"end":{"line":1243,"column":7}},"353":{"start":{"line":1232,"column":10},"end":{"line":1232,"column":47}},"354":{"start":{"line":1233,"column":10},"end":{"line":1233,"column":16}},"355":{"start":{"line":1235,"column":10},"end":{"line":1235,"column":45}},"356":{"start":{"line":1236,"column":10},"end":{"line":1236,"column":16}},"357":{"start":{"line":1238,"column":10},"end":{"line":1238,"column":59}},"358":{"start":{"line":1239,"column":10},"end":{"line":1239,"column":16}},"359":{"start":{"line":1241,"column":10},"end":{"line":1241,"column":57}},"360":{"start":{"line":1242,"column":10},"end":{"line":1242,"column":16}},"361":{"start":{"line":1244,"column":6},"end":{"line":1253,"column":9}},"362":{"start":{"line":1255,"column":6},"end":{"line":1258,"column":9}},"363":{"start":{"line":1259,"column":6},"end":{"line":1259,"column":18}},"364":{"start":{"line":1263,"column":24},"end":{"line":1263,"column":53}},"365":{"start":{"line":1264,"column":25},"end":{"line":1264,"column":55}},"366":{"start":{"line":1265,"column":4},"end":{"line":1265,"column":38}},"367":{"start":{"line":1268,"column":23},"end":{"line":1268,"column":49}},"368":{"start":{"line":1269,"column":19},"end":{"line":1269,"column":54}},"369":{"start":{"line":1270,"column":4},"end":{"line":1270,"column":52}},"370":{"start":{"line":1273,"column":19},"end":{"line":1273,"column":46}},"371":{"start":{"line":1274,"column":17},"end":{"line":1274,"column":67}},"372":{"start":{"line":1274,"column":43},"end":{"line":1274,"column":50}},"373":{"start":{"line":1275,"column":19},"end":{"line":1277,"column":5}},"374":{"start":{"line":1276,"column":31},"end":{"line":1276,"column":57}},"375":{"start":{"line":1278,"column":26},"end":{"line":1278,"column":68}},"376":{"start":{"line":1279,"column":4},"end":{"line":1279,"column":29}},"377":{"start":{"line":1282,"column":21},"end":{"line":1282,"column":24}},"378":{"start":{"line":1283,"column":24},"end":{"line":1283,"column":65}},"379":{"start":{"line":1284,"column":4},"end":{"line":1284,"column":51}},"380":{"start":{"line":1287,"column":26},"end":{"line":1287,"column":70}},"381":{"start":{"line":1288,"column":23},"end":{"line":1288,"column":63}},"382":{"start":{"line":1289,"column":4},"end":{"line":1289,"column":70}},"383":{"start":{"line":1292,"column":22},"end":{"line":1292,"column":50}},"384":{"start":{"line":1293,"column":4},"end":{"line":1299,"column":6}},"385":{"start":{"line":1302,"column":4},"end":{"line":1306,"column":6}},"386":{"start":{"line":1309,"column":4},"end":{"line":1309,"column":41}},"387":{"start":{"line":1309,"column":29},"end":{"line":1309,"column":41}},"388":{"start":{"line":1310,"column":4},"end":{"line":1310,"column":107}},"389":{"start":{"line":1313,"column":27},"end":{"line":1313,"column":51}},"390":{"start":{"line":1314,"column":29},"end":{"line":1314,"column":55}},"391":{"start":{"line":1315,"column":4},"end":{"line":1324,"column":47}},"392":{"start":{"line":1316,"column":29},"end":{"line":1318,"column":7}},"393":{"start":{"line":1319,"column":27},"end":{"line":1321,"column":7}},"394":{"start":{"line":1322,"column":26},"end":{"line":1322,"column":72}},"395":{"start":{"line":1323,"column":6},"end":{"line":1323,"column":33}},"396":{"start":{"line":1327,"column":24},"end":{"line":1329,"column":5}},"397":{"start":{"line":1328,"column":15},"end":{"line":1328,"column":39}},"398":{"start":{"line":1330,"column":21},"end":{"line":1330,"column":77}},"399":{"start":{"line":1330,"column":50},"end":{"line":1330,"column":55}},"400":{"start":{"line":1331,"column":19},"end":{"line":1333,"column":5}},"401":{"start":{"line":1332,"column":36},"end":{"line":1332,"column":66}},"402":{"start":{"line":1334,"column":4},"end":{"line":1334,"column":73}},"403":{"start":{"line":1337,"column":4},"end":{"line":1337,"column":61}},"404":{"start":{"line":1340,"column":4},"end":{"line":1340,"column":45}},"405":{"start":{"line":1343,"column":24},"end":{"line":1346,"column":37}},"406":{"start":{"line":1344,"column":22},"end":{"line":1344,"column":88}},"407":{"start":{"line":1347,"column":4},"end":{"line":1347,"column":53}},"408":{"start":{"line":1350,"column":4},"end":{"line":1350,"column":61}},"409":{"start":{"line":1350,"column":35},"end":{"line":1350,"column":40}},"410":{"start":{"line":1353,"column":4},"end":{"line":1358,"column":6}},"411":{"start":{"line":1361,"column":27},"end":{"line":1364,"column":6}},"412":{"start":{"line":1365,"column":4},"end":{"line":1367,"column":5}},"413":{"start":{"line":1366,"column":6},"end":{"line":1366,"column":49}},"414":{"start":{"line":1368,"column":23},"end":{"line":1379,"column":5}},"415":{"start":{"line":1380,"column":4},"end":{"line":1383,"column":7}},"416":{"start":{"line":1384,"column":4},"end":{"line":1386,"column":7}},"417":{"start":{"line":1389,"column":24},"end":{"line":1393,"column":5}},"418":{"start":{"line":1394,"column":4},"end":{"line":1403,"column":7}},"419":{"start":{"line":1406,"column":32},"end":{"line":1410,"column":5}},"420":{"start":{"line":1411,"column":4},"end":{"line":1420,"column":7}},"421":{"start":{"line":1423,"column":24},"end":{"line":1428,"column":5}},"422":{"start":{"line":1429,"column":4},"end":{"line":1438,"column":7}},"423":{"start":{"line":1441,"column":4},"end":{"line":1455,"column":7}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":19,"column":2},"end":{"line":19,"column":3}},"loc":{"start":{"line":19,"column":22},"end":{"line":23,"column":3}},"line":19},"1":{"name":"(anonymous_1)","decl":{"start":{"line":24,"column":2},"end":{"line":24,"column":3}},"loc":{"start":{"line":24,"column":30},"end":{"line":31,"column":3}},"line":24},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":15},"end":{"line":30,"column":16}},"loc":{"start":{"line":30,"column":21},"end":{"line":30,"column":47}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":32,"column":2},"end":{"line":32,"column":3}},"loc":{"start":{"line":32,"column":19},"end":{"line":34,"column":3}},"line":32},"4":{"name":"(anonymous_4)","decl":{"start":{"line":35,"column":2},"end":{"line":35,"column":3}},"loc":{"start":{"line":35,"column":20},"end":{"line":37,"column":3}},"line":35},"5":{"name":"(anonymous_5)","decl":{"start":{"line":38,"column":2},"end":{"line":38,"column":3}},"loc":{"start":{"line":38,"column":31},"end":{"line":47,"column":3}},"line":38},"6":{"name":"(anonymous_6)","decl":{"start":{"line":48,"column":2},"end":{"line":48,"column":3}},"loc":{"start":{"line":48,"column":34},"end":{"line":73,"column":3}},"line":48},"7":{"name":"(anonymous_7)","decl":{"start":{"line":66,"column":8},"end":{"line":66,"column":9}},"loc":{"start":{"line":66,"column":25},"end":{"line":66,"column":51}},"line":66},"8":{"name":"(anonymous_8)","decl":{"start":{"line":74,"column":2},"end":{"line":74,"column":3}},"loc":{"start":{"line":74,"column":50},"end":{"line":82,"column":3}},"line":74},"9":{"name":"(anonymous_9)","decl":{"start":{"line":85,"column":2},"end":{"line":85,"column":3}},"loc":{"start":{"line":85,"column":22},"end":{"line":93,"column":3}},"line":85},"10":{"name":"(anonymous_10)","decl":{"start":{"line":94,"column":2},"end":{"line":94,"column":3}},"loc":{"start":{"line":94,"column":21},"end":{"line":105,"column":3}},"line":94},"11":{"name":"(anonymous_11)","decl":{"start":{"line":106,"column":2},"end":{"line":106,"column":3}},"loc":{"start":{"line":106,"column":33},"end":{"line":136,"column":3}},"line":106},"12":{"name":"(anonymous_12)","decl":{"start":{"line":137,"column":2},"end":{"line":137,"column":3}},"loc":{"start":{"line":137,"column":29},"end":{"line":176,"column":3}},"line":137},"13":{"name":"(anonymous_13)","decl":{"start":{"line":177,"column":2},"end":{"line":177,"column":3}},"loc":{"start":{"line":177,"column":34},"end":{"line":211,"column":3}},"line":177},"14":{"name":"(anonymous_14)","decl":{"start":{"line":212,"column":2},"end":{"line":212,"column":3}},"loc":{"start":{"line":212,"column":29},"end":{"line":234,"column":3}},"line":212},"15":{"name":"(anonymous_15)","decl":{"start":{"line":235,"column":2},"end":{"line":235,"column":3}},"loc":{"start":{"line":235,"column":45},"end":{"line":262,"column":3}},"line":235},"16":{"name":"(anonymous_16)","decl":{"start":{"line":263,"column":2},"end":{"line":263,"column":3}},"loc":{"start":{"line":263,"column":31},"end":{"line":294,"column":3}},"line":263},"17":{"name":"(anonymous_17)","decl":{"start":{"line":276,"column":36},"end":{"line":276,"column":37}},"loc":{"start":{"line":276,"column":48},"end":{"line":276,"column":75}},"line":276},"18":{"name":"(anonymous_18)","decl":{"start":{"line":295,"column":2},"end":{"line":295,"column":3}},"loc":{"start":{"line":295,"column":37},"end":{"line":336,"column":3}},"line":295},"19":{"name":"(anonymous_19)","decl":{"start":{"line":337,"column":2},"end":{"line":337,"column":3}},"loc":{"start":{"line":337,"column":39},"end":{"line":363,"column":3}},"line":337},"20":{"name":"(anonymous_20)","decl":{"start":{"line":364,"column":2},"end":{"line":364,"column":3}},"loc":{"start":{"line":364,"column":48},"end":{"line":455,"column":3}},"line":364},"21":{"name":"(anonymous_21)","decl":{"start":{"line":440,"column":33},"end":{"line":440,"column":34}},"loc":{"start":{"line":440,"column":45},"end":{"line":440,"column":63}},"line":440},"22":{"name":"(anonymous_22)","decl":{"start":{"line":456,"column":2},"end":{"line":456,"column":3}},"loc":{"start":{"line":456,"column":41},"end":{"line":541,"column":3}},"line":456},"23":{"name":"(anonymous_23)","decl":{"start":{"line":470,"column":10},"end":{"line":470,"column":11}},"loc":{"start":{"line":470,"column":22},"end":{"line":483,"column":11}},"line":470},"24":{"name":"(anonymous_24)","decl":{"start":{"line":499,"column":10},"end":{"line":499,"column":11}},"loc":{"start":{"line":499,"column":17},"end":{"line":501,"column":54}},"line":499},"25":{"name":"(anonymous_25)","decl":{"start":{"line":508,"column":47},"end":{"line":508,"column":48}},"loc":{"start":{"line":508,"column":54},"end":{"line":508,"column":66}},"line":508},"26":{"name":"(anonymous_26)","decl":{"start":{"line":515,"column":35},"end":{"line":515,"column":36}},"loc":{"start":{"line":515,"column":43},"end":{"line":521,"column":13}},"line":515},"27":{"name":"(anonymous_27)","decl":{"start":{"line":542,"column":2},"end":{"line":542,"column":3}},"loc":{"start":{"line":542,"column":38},"end":{"line":582,"column":3}},"line":542},"28":{"name":"(anonymous_28)","decl":{"start":{"line":583,"column":2},"end":{"line":583,"column":3}},"loc":{"start":{"line":583,"column":42},"end":{"line":623,"column":3}},"line":583},"29":{"name":"(anonymous_29)","decl":{"start":{"line":624,"column":2},"end":{"line":624,"column":3}},"loc":{"start":{"line":624,"column":39},"end":{"line":680,"column":3}},"line":624},"30":{"name":"(anonymous_30)","decl":{"start":{"line":681,"column":2},"end":{"line":681,"column":3}},"loc":{"start":{"line":681,"column":45},"end":{"line":715,"column":3}},"line":681},"31":{"name":"(anonymous_31)","decl":{"start":{"line":716,"column":2},"end":{"line":716,"column":3}},"loc":{"start":{"line":716,"column":43},"end":{"line":750,"column":3}},"line":716},"32":{"name":"(anonymous_32)","decl":{"start":{"line":751,"column":2},"end":{"line":751,"column":3}},"loc":{"start":{"line":751,"column":40},"end":{"line":781,"column":3}},"line":751},"33":{"name":"(anonymous_33)","decl":{"start":{"line":755,"column":24},"end":{"line":755,"column":25}},"loc":{"start":{"line":755,"column":37},"end":{"line":755,"column":70}},"line":755},"34":{"name":"(anonymous_34)","decl":{"start":{"line":782,"column":2},"end":{"line":782,"column":3}},"loc":{"start":{"line":782,"column":32},"end":{"line":824,"column":3}},"line":782},"35":{"name":"(anonymous_35)","decl":{"start":{"line":825,"column":2},"end":{"line":825,"column":3}},"loc":{"start":{"line":825,"column":35},"end":{"line":857,"column":3}},"line":825},"36":{"name":"(anonymous_36)","decl":{"start":{"line":858,"column":2},"end":{"line":858,"column":3}},"loc":{"start":{"line":858,"column":34},"end":{"line":889,"column":3}},"line":858},"37":{"name":"(anonymous_37)","decl":{"start":{"line":890,"column":2},"end":{"line":890,"column":3}},"loc":{"start":{"line":890,"column":41},"end":{"line":892,"column":3}},"line":890},"38":{"name":"(anonymous_38)","decl":{"start":{"line":893,"column":2},"end":{"line":893,"column":3}},"loc":{"start":{"line":893,"column":36},"end":{"line":901,"column":3}},"line":893},"39":{"name":"(anonymous_39)","decl":{"start":{"line":902,"column":2},"end":{"line":902,"column":3}},"loc":{"start":{"line":902,"column":41},"end":{"line":929,"column":3}},"line":902},"40":{"name":"(anonymous_40)","decl":{"start":{"line":930,"column":2},"end":{"line":930,"column":3}},"loc":{"start":{"line":930,"column":40},"end":{"line":949,"column":3}},"line":930},"41":{"name":"(anonymous_41)","decl":{"start":{"line":950,"column":2},"end":{"line":950,"column":3}},"loc":{"start":{"line":950,"column":34},"end":{"line":992,"column":3}},"line":950},"42":{"name":"(anonymous_42)","decl":{"start":{"line":993,"column":2},"end":{"line":993,"column":3}},"loc":{"start":{"line":993,"column":32},"end":{"line":1021,"column":3}},"line":993},"43":{"name":"(anonymous_43)","decl":{"start":{"line":1022,"column":2},"end":{"line":1022,"column":3}},"loc":{"start":{"line":1022,"column":46},"end":{"line":1055,"column":3}},"line":1022},"44":{"name":"(anonymous_44)","decl":{"start":{"line":1030,"column":10},"end":{"line":1030,"column":11}},"loc":{"start":{"line":1030,"column":17},"end":{"line":1030,"column":62}},"line":1030},"45":{"name":"(anonymous_45)","decl":{"start":{"line":1056,"column":2},"end":{"line":1056,"column":3}},"loc":{"start":{"line":1056,"column":44},"end":{"line":1089,"column":3}},"line":1056},"46":{"name":"(anonymous_46)","decl":{"start":{"line":1064,"column":10},"end":{"line":1064,"column":11}},"loc":{"start":{"line":1064,"column":17},"end":{"line":1064,"column":68}},"line":1064},"47":{"name":"(anonymous_47)","decl":{"start":{"line":1090,"column":2},"end":{"line":1090,"column":3}},"loc":{"start":{"line":1090,"column":28},"end":{"line":1100,"column":3}},"line":1090},"48":{"name":"(anonymous_48)","decl":{"start":{"line":1092,"column":6},"end":{"line":1092,"column":7}},"loc":{"start":{"line":1092,"column":25},"end":{"line":1097,"column":7}},"line":1092},"49":{"name":"(anonymous_49)","decl":{"start":{"line":1101,"column":2},"end":{"line":1101,"column":3}},"loc":{"start":{"line":1101,"column":42},"end":{"line":1103,"column":3}},"line":1101},"50":{"name":"(anonymous_50)","decl":{"start":{"line":1104,"column":2},"end":{"line":1104,"column":3}},"loc":{"start":{"line":1104,"column":45},"end":{"line":1106,"column":3}},"line":1104},"51":{"name":"(anonymous_51)","decl":{"start":{"line":1107,"column":2},"end":{"line":1107,"column":3}},"loc":{"start":{"line":1107,"column":45},"end":{"line":1109,"column":3}},"line":1107},"52":{"name":"(anonymous_52)","decl":{"start":{"line":1110,"column":2},"end":{"line":1110,"column":3}},"loc":{"start":{"line":1110,"column":44},"end":{"line":1123,"column":3}},"line":1110},"53":{"name":"(anonymous_53)","decl":{"start":{"line":1114,"column":6},"end":{"line":1114,"column":7}},"loc":{"start":{"line":1114,"column":15},"end":{"line":1114,"column":30}},"line":1114},"54":{"name":"(anonymous_54)","decl":{"start":{"line":1124,"column":2},"end":{"line":1124,"column":3}},"loc":{"start":{"line":1124,"column":45},"end":{"line":1136,"column":3}},"line":1124},"55":{"name":"(anonymous_55)","decl":{"start":{"line":1137,"column":2},"end":{"line":1137,"column":3}},"loc":{"start":{"line":1137,"column":40},"end":{"line":1166,"column":3}},"line":1137},"56":{"name":"(anonymous_56)","decl":{"start":{"line":1142,"column":45},"end":{"line":1142,"column":46}},"loc":{"start":{"line":1142,"column":57},"end":{"line":1142,"column":88}},"line":1142},"57":{"name":"(anonymous_57)","decl":{"start":{"line":1167,"column":2},"end":{"line":1167,"column":3}},"loc":{"start":{"line":1167,"column":43},"end":{"line":1205,"column":3}},"line":1167},"58":{"name":"(anonymous_58)","decl":{"start":{"line":1174,"column":28},"end":{"line":1174,"column":29}},"loc":{"start":{"line":1174,"column":39},"end":{"line":1181,"column":7}},"line":1174},"59":{"name":"(anonymous_59)","decl":{"start":{"line":1176,"column":40},"end":{"line":1176,"column":41}},"loc":{"start":{"line":1176,"column":47},"end":{"line":1176,"column":64}},"line":1176},"60":{"name":"(anonymous_60)","decl":{"start":{"line":1206,"column":2},"end":{"line":1206,"column":3}},"loc":{"start":{"line":1206,"column":46},"end":{"line":1216,"column":3}},"line":1206},"61":{"name":"(anonymous_61)","decl":{"start":{"line":1208,"column":19},"end":{"line":1208,"column":20}},"loc":{"start":{"line":1208,"column":30},"end":{"line":1214,"column":5}},"line":1208},"62":{"name":"(anonymous_62)","decl":{"start":{"line":1217,"column":2},"end":{"line":1217,"column":3}},"loc":{"start":{"line":1217,"column":35},"end":{"line":1227,"column":3}},"line":1217},"63":{"name":"(anonymous_63)","decl":{"start":{"line":1219,"column":19},"end":{"line":1219,"column":20}},"loc":{"start":{"line":1219,"column":30},"end":{"line":1225,"column":5}},"line":1219},"64":{"name":"(anonymous_64)","decl":{"start":{"line":1228,"column":2},"end":{"line":1228,"column":3}},"loc":{"start":{"line":1228,"column":41},"end":{"line":1261,"column":3}},"line":1228},"65":{"name":"(anonymous_65)","decl":{"start":{"line":1262,"column":2},"end":{"line":1262,"column":3}},"loc":{"start":{"line":1262,"column":24},"end":{"line":1266,"column":3}},"line":1262},"66":{"name":"(anonymous_66)","decl":{"start":{"line":1267,"column":2},"end":{"line":1267,"column":3}},"loc":{"start":{"line":1267,"column":50},"end":{"line":1271,"column":3}},"line":1267},"67":{"name":"(anonymous_67)","decl":{"start":{"line":1272,"column":2},"end":{"line":1272,"column":3}},"loc":{"start":{"line":1272,"column":44},"end":{"line":1280,"column":3}},"line":1272},"68":{"name":"(anonymous_68)","decl":{"start":{"line":1274,"column":31},"end":{"line":1274,"column":32}},"loc":{"start":{"line":1274,"column":43},"end":{"line":1274,"column":50}},"line":1274},"69":{"name":"(anonymous_69)","decl":{"start":{"line":1276,"column":20},"end":{"line":1276,"column":21}},"loc":{"start":{"line":1276,"column":31},"end":{"line":1276,"column":57}},"line":1276},"70":{"name":"(anonymous_70)","decl":{"start":{"line":1281,"column":2},"end":{"line":1281,"column":3}},"loc":{"start":{"line":1281,"column":38},"end":{"line":1285,"column":3}},"line":1281},"71":{"name":"(anonymous_71)","decl":{"start":{"line":1286,"column":2},"end":{"line":1286,"column":3}},"loc":{"start":{"line":1286,"column":39},"end":{"line":1290,"column":3}},"line":1286},"72":{"name":"(anonymous_72)","decl":{"start":{"line":1291,"column":2},"end":{"line":1291,"column":3}},"loc":{"start":{"line":1291,"column":43},"end":{"line":1300,"column":3}},"line":1291},"73":{"name":"(anonymous_73)","decl":{"start":{"line":1301,"column":2},"end":{"line":1301,"column":3}},"loc":{"start":{"line":1301,"column":26},"end":{"line":1307,"column":3}},"line":1301},"74":{"name":"(anonymous_74)","decl":{"start":{"line":1308,"column":2},"end":{"line":1308,"column":3}},"loc":{"start":{"line":1308,"column":42},"end":{"line":1311,"column":3}},"line":1308},"75":{"name":"(anonymous_75)","decl":{"start":{"line":1312,"column":2},"end":{"line":1312,"column":3}},"loc":{"start":{"line":1312,"column":36},"end":{"line":1325,"column":3}},"line":1312},"76":{"name":"(anonymous_76)","decl":{"start":{"line":1315,"column":46},"end":{"line":1315,"column":47}},"loc":{"start":{"line":1315,"column":65},"end":{"line":1324,"column":5}},"line":1315},"77":{"name":"(anonymous_77)","decl":{"start":{"line":1326,"column":2},"end":{"line":1326,"column":3}},"loc":{"start":{"line":1326,"column":33},"end":{"line":1335,"column":3}},"line":1326},"78":{"name":"(anonymous_78)","decl":{"start":{"line":1328,"column":6},"end":{"line":1328,"column":7}},"loc":{"start":{"line":1328,"column":15},"end":{"line":1328,"column":39}},"line":1328},"79":{"name":"(anonymous_79)","decl":{"start":{"line":1330,"column":40},"end":{"line":1330,"column":41}},"loc":{"start":{"line":1330,"column":50},"end":{"line":1330,"column":55}},"line":1330},"80":{"name":"(anonymous_80)","decl":{"start":{"line":1332,"column":25},"end":{"line":1332,"column":26}},"loc":{"start":{"line":1332,"column":36},"end":{"line":1332,"column":66}},"line":1332},"81":{"name":"(anonymous_81)","decl":{"start":{"line":1336,"column":2},"end":{"line":1336,"column":3}},"loc":{"start":{"line":1336,"column":38},"end":{"line":1338,"column":3}},"line":1336},"82":{"name":"(anonymous_82)","decl":{"start":{"line":1339,"column":2},"end":{"line":1339,"column":3}},"loc":{"start":{"line":1339,"column":40},"end":{"line":1341,"column":3}},"line":1339},"83":{"name":"(anonymous_83)","decl":{"start":{"line":1342,"column":2},"end":{"line":1342,"column":3}},"loc":{"start":{"line":1342,"column":38},"end":{"line":1348,"column":3}},"line":1342},"84":{"name":"(anonymous_84)","decl":{"start":{"line":1344,"column":6},"end":{"line":1344,"column":7}},"loc":{"start":{"line":1344,"column":22},"end":{"line":1344,"column":88}},"line":1344},"85":{"name":"(anonymous_85)","decl":{"start":{"line":1349,"column":2},"end":{"line":1349,"column":3}},"loc":{"start":{"line":1349,"column":24},"end":{"line":1351,"column":3}},"line":1349},"86":{"name":"(anonymous_86)","decl":{"start":{"line":1350,"column":25},"end":{"line":1350,"column":26}},"loc":{"start":{"line":1350,"column":35},"end":{"line":1350,"column":40}},"line":1350},"87":{"name":"(anonymous_87)","decl":{"start":{"line":1352,"column":2},"end":{"line":1352,"column":3}},"loc":{"start":{"line":1352,"column":33},"end":{"line":1359,"column":3}},"line":1352},"88":{"name":"(anonymous_88)","decl":{"start":{"line":1360,"column":2},"end":{"line":1360,"column":3}},"loc":{"start":{"line":1360,"column":32},"end":{"line":1387,"column":3}},"line":1360},"89":{"name":"(anonymous_89)","decl":{"start":{"line":1388,"column":2},"end":{"line":1388,"column":3}},"loc":{"start":{"line":1388,"column":32},"end":{"line":1404,"column":3}},"line":1388},"90":{"name":"(anonymous_90)","decl":{"start":{"line":1405,"column":2},"end":{"line":1405,"column":3}},"loc":{"start":{"line":1405,"column":33},"end":{"line":1421,"column":3}},"line":1405},"91":{"name":"(anonymous_91)","decl":{"start":{"line":1422,"column":2},"end":{"line":1422,"column":3}},"loc":{"start":{"line":1422,"column":32},"end":{"line":1439,"column":3}},"line":1422},"92":{"name":"(anonymous_92)","decl":{"start":{"line":1440,"column":2},"end":{"line":1440,"column":3}},"loc":{"start":{"line":1440,"column":42},"end":{"line":1456,"column":3}},"line":1440}},"branchMap":{"0":{"loc":{"start":{"line":41,"column":6},"end":{"line":41,"column":31}},"type":"if","locations":[{"start":{"line":41,"column":6},"end":{"line":41,"column":31}},{"start":{},"end":{}}],"line":41},"1":{"loc":{"start":{"line":62,"column":6},"end":{"line":64,"column":7}},"type":"if","locations":[{"start":{"line":62,"column":6},"end":{"line":64,"column":7}},{"start":{},"end":{}}],"line":62},"2":{"loc":{"start":{"line":110,"column":4},"end":{"line":119,"column":5}},"type":"if","locations":[{"start":{"line":110,"column":4},"end":{"line":119,"column":5}},{"start":{},"end":{}}],"line":110},"3":{"loc":{"start":{"line":114,"column":22},"end":{"line":114,"column":58}},"type":"binary-expr","locations":[{"start":{"line":114,"column":22},"end":{"line":114,"column":48}},{"start":{"line":114,"column":52},"end":{"line":114,"column":58}}],"line":114},"4":{"loc":{"start":{"line":171,"column":15},"end":{"line":171,"column":71}},"type":"cond-expr","locations":[{"start":{"line":171,"column":40},"end":{"line":171,"column":53}},{"start":{"line":171,"column":56},"end":{"line":171,"column":71}}],"line":171},"5":{"loc":{"start":{"line":178,"column":4},"end":{"line":180,"column":5}},"type":"if","locations":[{"start":{"line":178,"column":4},"end":{"line":180,"column":5}},{"start":{},"end":{}}],"line":178},"6":{"loc":{"start":{"line":187,"column":20},"end":{"line":187,"column":78}},"type":"cond-expr","locations":[{"start":{"line":187,"column":38},"end":{"line":187,"column":69}},{"start":{"line":187,"column":72},"end":{"line":187,"column":78}}],"line":187},"7":{"loc":{"start":{"line":193,"column":22},"end":{"line":193,"column":57}},"type":"binary-expr","locations":[{"start":{"line":193,"column":22},"end":{"line":193,"column":47}},{"start":{"line":193,"column":51},"end":{"line":193,"column":57}}],"line":193},"8":{"loc":{"start":{"line":206,"column":15},"end":{"line":206,"column":71}},"type":"cond-expr","locations":[{"start":{"line":206,"column":40},"end":{"line":206,"column":53}},{"start":{"line":206,"column":56},"end":{"line":206,"column":71}}],"line":206},"9":{"loc":{"start":{"line":242,"column":19},"end":{"line":242,"column":71}},"type":"cond-expr","locations":[{"start":{"line":242,"column":34},"end":{"line":242,"column":62}},{"start":{"line":242,"column":65},"end":{"line":242,"column":71}}],"line":242},"10":{"loc":{"start":{"line":246,"column":6},"end":{"line":252,"column":7}},"type":"if","locations":[{"start":{"line":246,"column":6},"end":{"line":252,"column":7}},{"start":{},"end":{}}],"line":246},"11":{"loc":{"start":{"line":250,"column":22},"end":{"line":250,"column":84}},"type":"binary-expr","locations":[{"start":{"line":250,"column":22},"end":{"line":250,"column":46}},{"start":{"line":250,"column":50},"end":{"line":250,"column":79}},{"start":{"line":250,"column":83},"end":{"line":250,"column":84}}],"line":250},"12":{"loc":{"start":{"line":271,"column":8},"end":{"line":278,"column":9}},"type":"if","locations":[{"start":{"line":271,"column":8},"end":{"line":278,"column":9}},{"start":{},"end":{}}],"line":271},"13":{"loc":{"start":{"line":299,"column":6},"end":{"line":321,"column":7}},"type":"if","locations":[{"start":{"line":299,"column":6},"end":{"line":321,"column":7}},{"start":{},"end":{}}],"line":299},"14":{"loc":{"start":{"line":299,"column":10},"end":{"line":299,"column":53}},"type":"binary-expr","locations":[{"start":{"line":299,"column":10},"end":{"line":299,"column":31}},{"start":{"line":299,"column":35},"end":{"line":299,"column":53}}],"line":299},"15":{"loc":{"start":{"line":301,"column":8},"end":{"line":320,"column":9}},"type":"if","locations":[{"start":{"line":301,"column":8},"end":{"line":320,"column":9}},{"start":{},"end":{}}],"line":301},"16":{"loc":{"start":{"line":310,"column":26},"end":{"line":310,"column":95}},"type":"cond-expr","locations":[{"start":{"line":310,"column":48},"end":{"line":310,"column":86}},{"start":{"line":310,"column":89},"end":{"line":310,"column":95}}],"line":310},"17":{"loc":{"start":{"line":324,"column":15},"end":{"line":324,"column":59}},"type":"cond-expr","locations":[{"start":{"line":324,"column":33},"end":{"line":324,"column":55}},{"start":{"line":324,"column":58},"end":{"line":324,"column":59}}],"line":324},"18":{"loc":{"start":{"line":367,"column":6},"end":{"line":437,"column":7}},"type":"if","locations":[{"start":{"line":367,"column":6},"end":{"line":437,"column":7}},{"start":{},"end":{}}],"line":367},"19":{"loc":{"start":{"line":383,"column":8},"end":{"line":400,"column":9}},"type":"if","locations":[{"start":{"line":383,"column":8},"end":{"line":400,"column":9}},{"start":{},"end":{}}],"line":383},"20":{"loc":{"start":{"line":383,"column":12},"end":{"line":383,"column":110}},"type":"binary-expr","locations":[{"start":{"line":383,"column":12},"end":{"line":383,"column":34}},{"start":{"line":383,"column":38},"end":{"line":383,"column":79}},{"start":{"line":383,"column":83},"end":{"line":383,"column":110}}],"line":383},"21":{"loc":{"start":{"line":401,"column":8},"end":{"line":418,"column":9}},"type":"if","locations":[{"start":{"line":401,"column":8},"end":{"line":418,"column":9}},{"start":{},"end":{}}],"line":401},"22":{"loc":{"start":{"line":401,"column":12},"end":{"line":401,"column":110}},"type":"binary-expr","locations":[{"start":{"line":401,"column":12},"end":{"line":401,"column":34}},{"start":{"line":401,"column":38},"end":{"line":401,"column":79}},{"start":{"line":401,"column":83},"end":{"line":401,"column":110}}],"line":401},"23":{"loc":{"start":{"line":419,"column":8},"end":{"line":436,"column":9}},"type":"if","locations":[{"start":{"line":419,"column":8},"end":{"line":436,"column":9}},{"start":{},"end":{}}],"line":419},"24":{"loc":{"start":{"line":419,"column":12},"end":{"line":419,"column":83}},"type":"binary-expr","locations":[{"start":{"line":419,"column":12},"end":{"line":419,"column":39}},{"start":{"line":419,"column":43},"end":{"line":419,"column":83}}],"line":419},"25":{"loc":{"start":{"line":486,"column":6},"end":{"line":495,"column":7}},"type":"if","locations":[{"start":{"line":486,"column":6},"end":{"line":495,"column":7}},{"start":{},"end":{}}],"line":486},"26":{"loc":{"start":{"line":491,"column":24},"end":{"line":491,"column":58}},"type":"binary-expr","locations":[{"start":{"line":491,"column":24},"end":{"line":491,"column":53}},{"start":{"line":491,"column":57},"end":{"line":491,"column":58}}],"line":491},"27":{"loc":{"start":{"line":499,"column":17},"end":{"line":501,"column":54}},"type":"binary-expr","locations":[{"start":{"line":499,"column":17},"end":{"line":499,"column":35}},{"start":{"line":500,"column":10},"end":{"line":500,"column":24}},{"start":{"line":501,"column":10},"end":{"line":501,"column":54}}],"line":499},"28":{"loc":{"start":{"line":531,"column":22},"end":{"line":531,"column":56}},"type":"binary-expr","locations":[{"start":{"line":531,"column":22},"end":{"line":531,"column":51}},{"start":{"line":531,"column":55},"end":{"line":531,"column":56}}],"line":531},"29":{"loc":{"start":{"line":546,"column":8},"end":{"line":562,"column":9}},"type":"switch","locations":[{"start":{"line":547,"column":10},"end":{"line":549,"column":18}},{"start":{"line":550,"column":10},"end":{"line":552,"column":18}},{"start":{"line":553,"column":10},"end":{"line":555,"column":18}},{"start":{"line":556,"column":10},"end":{"line":558,"column":18}},{"start":{"line":559,"column":10},"end":{"line":561,"column":18}}],"line":546},"30":{"loc":{"start":{"line":589,"column":6},"end":{"line":591,"column":7}},"type":"if","locations":[{"start":{"line":589,"column":6},"end":{"line":591,"column":7}},{"start":{},"end":{}}],"line":589},"31":{"loc":{"start":{"line":758,"column":6},"end":{"line":761,"column":7}},"type":"if","locations":[{"start":{"line":758,"column":6},"end":{"line":761,"column":7}},{"start":{},"end":{}}],"line":758},"32":{"loc":{"start":{"line":806,"column":6},"end":{"line":808,"column":7}},"type":"if","locations":[{"start":{"line":806,"column":6},"end":{"line":808,"column":7}},{"start":{},"end":{}}],"line":806},"33":{"loc":{"start":{"line":827,"column":6},"end":{"line":840,"column":7}},"type":"switch","locations":[{"start":{"line":828,"column":8},"end":{"line":830,"column":16}},{"start":{"line":831,"column":8},"end":{"line":833,"column":16}},{"start":{"line":834,"column":8},"end":{"line":836,"column":16}},{"start":{"line":837,"column":8},"end":{"line":839,"column":16}}],"line":827},"34":{"loc":{"start":{"line":864,"column":6},"end":{"line":866,"column":7}},"type":"if","locations":[{"start":{"line":864,"column":6},"end":{"line":866,"column":7}},{"start":{},"end":{}}],"line":864},"35":{"loc":{"start":{"line":864,"column":10},"end":{"line":864,"column":99}},"type":"binary-expr","locations":[{"start":{"line":864,"column":10},"end":{"line":864,"column":62}},{"start":{"line":864,"column":66},"end":{"line":864,"column":99}}],"line":864},"36":{"loc":{"start":{"line":867,"column":6},"end":{"line":880,"column":7}},"type":"switch","locations":[{"start":{"line":868,"column":8},"end":{"line":870,"column":16}},{"start":{"line":871,"column":8},"end":{"line":873,"column":16}},{"start":{"line":874,"column":8},"end":{"line":876,"column":16}},{"start":{"line":877,"column":8},"end":{"line":879,"column":16}}],"line":867},"37":{"loc":{"start":{"line":962,"column":6},"end":{"line":964,"column":7}},"type":"if","locations":[{"start":{"line":962,"column":6},"end":{"line":964,"column":7}},{"start":{},"end":{}}],"line":962},"38":{"loc":{"start":{"line":1027,"column":6},"end":{"line":1038,"column":7}},"type":"if","locations":[{"start":{"line":1027,"column":6},"end":{"line":1038,"column":7}},{"start":{},"end":{}}],"line":1027},"39":{"loc":{"start":{"line":1061,"column":6},"end":{"line":1072,"column":7}},"type":"if","locations":[{"start":{"line":1061,"column":6},"end":{"line":1072,"column":7}},{"start":{},"end":{}}],"line":1061},"40":{"loc":{"start":{"line":1094,"column":23},"end":{"line":1094,"column":41}},"type":"binary-expr","locations":[{"start":{"line":1094,"column":23},"end":{"line":1094,"column":35}},{"start":{"line":1094,"column":39},"end":{"line":1094,"column":41}}],"line":1094},"41":{"loc":{"start":{"line":1111,"column":21},"end":{"line":1111,"column":37}},"type":"binary-expr","locations":[{"start":{"line":1111,"column":21},"end":{"line":1111,"column":31}},{"start":{"line":1111,"column":35},"end":{"line":1111,"column":37}}],"line":1111},"42":{"loc":{"start":{"line":1112,"column":21},"end":{"line":1112,"column":37}},"type":"binary-expr","locations":[{"start":{"line":1112,"column":21},"end":{"line":1112,"column":31}},{"start":{"line":1112,"column":35},"end":{"line":1112,"column":37}}],"line":1112},"43":{"loc":{"start":{"line":1116,"column":4},"end":{"line":1116,"column":45}},"type":"if","locations":[{"start":{"line":1116,"column":4},"end":{"line":1116,"column":45}},{"start":{},"end":{}}],"line":1116},"44":{"loc":{"start":{"line":1141,"column":6},"end":{"line":1141,"column":45}},"type":"if","locations":[{"start":{"line":1141,"column":6},"end":{"line":1141,"column":45}},{"start":{},"end":{}}],"line":1141},"45":{"loc":{"start":{"line":1142,"column":64},"end":{"line":1142,"column":87}},"type":"binary-expr","locations":[{"start":{"line":1142,"column":64},"end":{"line":1142,"column":82}},{"start":{"line":1142,"column":86},"end":{"line":1142,"column":87}}],"line":1142},"46":{"loc":{"start":{"line":1175,"column":8},"end":{"line":1177,"column":9}},"type":"if","locations":[{"start":{"line":1175,"column":8},"end":{"line":1177,"column":9}},{"start":{},"end":{}}],"line":1175},"47":{"loc":{"start":{"line":1178,"column":8},"end":{"line":1179,"column":54}},"type":"if","locations":[{"start":{"line":1178,"column":8},"end":{"line":1179,"column":54}},{"start":{},"end":{}}],"line":1178},"48":{"loc":{"start":{"line":1180,"column":8},"end":{"line":1180,"column":77}},"type":"if","locations":[{"start":{"line":1180,"column":8},"end":{"line":1180,"column":77}},{"start":{},"end":{}}],"line":1180},"49":{"loc":{"start":{"line":1210,"column":6},"end":{"line":1212,"column":7}},"type":"if","locations":[{"start":{"line":1210,"column":6},"end":{"line":1212,"column":7}},{"start":{},"end":{}}],"line":1210},"50":{"loc":{"start":{"line":1220,"column":24},"end":{"line":1220,"column":62}},"type":"binary-expr","locations":[{"start":{"line":1220,"column":24},"end":{"line":1220,"column":49}},{"start":{"line":1220,"column":53},"end":{"line":1220,"column":62}}],"line":1220},"51":{"loc":{"start":{"line":1221,"column":6},"end":{"line":1223,"column":7}},"type":"if","locations":[{"start":{"line":1221,"column":6},"end":{"line":1223,"column":7}},{"start":{},"end":{}}],"line":1221},"52":{"loc":{"start":{"line":1230,"column":6},"end":{"line":1243,"column":7}},"type":"switch","locations":[{"start":{"line":1231,"column":8},"end":{"line":1233,"column":16}},{"start":{"line":1234,"column":8},"end":{"line":1236,"column":16}},{"start":{"line":1237,"column":8},"end":{"line":1239,"column":16}},{"start":{"line":1240,"column":8},"end":{"line":1242,"column":16}}],"line":1230},"53":{"loc":{"start":{"line":1309,"column":4},"end":{"line":1309,"column":41}},"type":"if","locations":[{"start":{"line":1309,"column":4},"end":{"line":1309,"column":41}},{"start":{},"end":{}}],"line":1309},"54":{"loc":{"start":{"line":1310,"column":11},"end":{"line":1310,"column":106}},"type":"cond-expr","locations":[{"start":{"line":1310,"column":83},"end":{"line":1310,"column":94}},{"start":{"line":1310,"column":97},"end":{"line":1310,"column":106}}],"line":1310},"55":{"loc":{"start":{"line":1365,"column":4},"end":{"line":1367,"column":5}},"type":"if","locations":[{"start":{"line":1365,"column":4},"end":{"line":1367,"column":5}},{"start":{},"end":{}}],"line":1365}},"s":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":7,"27":7,"28":7,"29":7,"30":6,"31":6,"32":6,"33":0,"34":0,"35":6,"36":6,"37":5,"38":1,"39":1,"40":3,"41":3,"42":2,"43":2,"44":2,"45":1,"46":1,"47":3,"48":0,"49":3,"50":3,"51":3,"52":3,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":1,"63":1,"64":1,"65":1,"66":1,"67":0,"68":0,"69":1,"70":1,"71":1,"72":1,"73":1,"74":1,"75":1,"76":1,"77":1,"78":1,"79":1,"80":1,"81":1,"82":0,"83":0,"84":1,"85":1,"86":1,"87":1,"88":1,"89":1,"90":1,"91":1,"92":1,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0,"127":0,"128":0,"129":0,"130":0,"131":0,"132":0,"133":0,"134":0,"135":0,"136":0,"137":0,"138":0,"139":0,"140":0,"141":0,"142":0,"143":0,"144":0,"145":0,"146":0,"147":0,"148":0,"149":0,"150":0,"151":0,"152":0,"153":0,"154":0,"155":0,"156":0,"157":0,"158":0,"159":0,"160":0,"161":0,"162":0,"163":0,"164":0,"165":0,"166":0,"167":0,"168":0,"169":0,"170":0,"171":0,"172":0,"173":0,"174":0,"175":0,"176":0,"177":0,"178":0,"179":0,"180":0,"181":0,"182":0,"183":0,"184":0,"185":0,"186":0,"187":0,"188":0,"189":0,"190":0,"191":0,"192":0,"193":0,"194":0,"195":0,"196":0,"197":0,"198":0,"199":0,"200":0,"201":0,"202":0,"203":0,"204":0,"205":0,"206":0,"207":0,"208":0,"209":0,"210":0,"211":0,"212":0,"213":0,"214":0,"215":0,"216":0,"217":0,"218":0,"219":0,"220":0,"221":0,"222":0,"223":2,"224":2,"225":2,"226":2,"227":0,"228":2,"229":2,"230":1,"231":0,"232":0,"233":0,"234":0,"235":0,"236":0,"237":1,"238":1,"239":1,"240":0,"241":0,"242":0,"243":0,"244":0,"245":0,"246":0,"247":0,"248":0,"249":0,"250":0,"251":0,"252":0,"253":0,"254":0,"255":0,"256":0,"257":0,"258":0,"259":0,"260":0,"261":0,"262":0,"263":0,"264":0,"265":0,"266":0,"267":0,"268":0,"269":0,"270":0,"271":0,"272":0,"273":0,"274":0,"275":0,"276":0,"277":0,"278":0,"279":0,"280":0,"281":0,"282":0,"283":0,"284":0,"285":0,"286":0,"287":0,"288":0,"289":0,"290":0,"291":0,"292":0,"293":0,"294":0,"295":0,"296":0,"297":0,"298":0,"299":0,"300":0,"301":0,"302":0,"303":0,"304":0,"305":0,"306":0,"307":0,"308":0,"309":0,"310":0,"311":0,"312":0,"313":0,"314":0,"315":0,"316":0,"317":0,"318":0,"319":0,"320":0,"321":0,"322":0,"323":0,"324":0,"325":0,"326":0,"327":0,"328":0,"329":0,"330":0,"331":0,"332":0,"333":0,"334":0,"335":0,"336":0,"337":0,"338":0,"339":0,"340":0,"341":0,"342":0,"343":0,"344":0,"345":0,"346":0,"347":0,"348":0,"349":0,"350":0,"351":0,"352":0,"353":0,"354":0,"355":0,"356":0,"357":0,"358":0,"359":0,"360":0,"361":0,"362":0,"363":0,"364":0,"365":0,"366":0,"367":0,"368":0,"369":0,"370":0,"371":0,"372":0,"373":0,"374":0,"375":0,"376":0,"377":0,"378":0,"379":0,"380":0,"381":0,"382":0,"383":0,"384":0,"385":0,"386":0,"387":0,"388":0,"389":0,"390":0,"391":0,"392":0,"393":0,"394":0,"395":0,"396":0,"397":0,"398":0,"399":0,"400":0,"401":0,"402":0,"403":0,"404":0,"405":0,"406":0,"407":0,"408":0,"409":0,"410":0,"411":2,"412":2,"413":1,"414":1,"415":1,"416":1,"417":0,"418":0,"419":0,"420":0,"421":0,"422":0,"423":1},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":7,"10":6,"11":6,"12":3,"13":3,"14":0,"15":1,"16":1,"17":1,"18":1,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":2,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":2,"89":0,"90":0,"91":0,"92":1},"b":{"0":[0,0],"1":[0,0],"2":[5,1],"3":[5,5],"4":[1,0],"5":[0,3],"6":[0,3],"7":[3,3],"8":[0,0],"9":[1,0],"10":[1,0],"11":[1,0,0],"12":[1,0],"13":[1,0],"14":[1,1],"15":[1,0],"16":[1,0],"17":[1,0],"18":[0,0],"19":[0,0],"20":[0,0,0],"21":[0,0],"22":[0,0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0,0],"28":[0,0],"29":[0,0,0,0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0,0,0],"34":[0,2],"35":[2,0],"36":[2,0,0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0],"50":[0,0],"51":[0,0],"52":[0,0,0,0],"53":[0,0],"54":[0,0],"55":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/engine/service.ts"],"sourcesContent":["import { MetricsService } from \"@/lib/cortex/monitoring/metrics\";\nimport { JsonValue, prisma } from \"@/lib/shared/database/client\";\nimport logger from \"@/lib/shared/logger\";\nimport { Logger } from \"@/lib/shared/types\";\nimport {\n  $Enums,\n  EngineOperation,\n  LearningEventStatus,\n  MetricType,\n} from \"@prisma/client\";\nimport Redis from \"ioredis\";\nimport { MetricsServiceConfig } from \"../monitoring/metrics\";\nimport {\n  LearningEvent,\n  LearningEventType,\n  LearningPattern,\n} from \"../types/learning\";\nimport {\n  ABTestResults,\n  EngineOperationStatus,\n  EngineOperationType,\n  EngineOptimizationStrategy,\n  EngineOptimizationType,\n  EngineRiskLevel,\n  EngineState,\n  EngineStatus,\n  ImpactAnalysis,\n  TestMetrics,\n  VariantAnalysis,\n} from \"./types\";\n\nexport class EnhancedMetricsService extends MetricsService {\n  private cachedThroughput: number = 0;\n\n  constructor(config: Logger) {\n    super({ logger: config, environment: 'production' });\n    this.updateCachedMetrics();\n  }\n\n  private async updateCachedMetrics(): Promise<void> {\n    try {\n      this.cachedThroughput = await this.getThroughput();\n    } catch (error) {\n      logger.error(\"Failed to update cached metrics\", { error });\n    }\n    // Update every minute\n    setTimeout(() => this.updateCachedMetrics(), 60000);\n  }\n\n  getCurrentLoad(): number {\n    return this.cachedThroughput;\n  }\n\n  getBaselineLoad(): number {\n    return this.cachedThroughput;\n  }\n\n  async getMetricVariability(): Promise<number> {\n    try {\n      const latency = await this.getAverageLatency();\n      if (!latency) return 0.1; // default variability\n\n      // Calculate variability using standard deviation / mean\n      const variance = 0.1; // This should be calculated from historical data\n      return Math.sqrt(variance) / latency; // coefficient of variation\n    } catch (error) {\n      return 0.1; // fallback to default\n    }\n  }\n\n  async getAverageTrafficVolume(): Promise<number> {\n    try {\n      const metrics = await prisma.engineMetric.findMany({\n        where: {\n          type: MetricType.THROUGHPUT,\n          timestamp: {\n            gte: new Date(Date.now() - 24 * 60 * 60 * 1000), // Last 24 hours\n          },\n        },\n        select: {\n          value: true,\n        },\n      });\n\n      if (!metrics.length) {\n        return this.getThroughput(); // Use base class method\n      }\n\n      const totalTraffic = metrics.reduce(\n        (sum: number, metric: { value: number }) => sum + Number(metric.value),\n        0\n      );\n      return Math.round(totalTraffic / metrics.length);\n    } catch (error) {\n      return this.getThroughput(); // Fallback to current throughput on error\n    }\n  }\n\n  async getMetricsForVariant(\n    _variant: string,\n    startTime: number\n  ): Promise<TestMetrics> {\n    return {\n      latency: await this.getAverageLatency(),\n      errorRate: await this.getErrorRate(),\n      throughput: await this.getThroughput(),\n      cpuUsage: await this.getCPUUsage(),\n      memoryUsage: await this.getMemoryUsage(),\n    };\n  }\n}\n\nexport class EngineService {\n  private readonly logger: Logger;\n  private readonly metrics: MetricsService;\n  private currentState: EngineState | null = null;\n\nconstructor(\n    private readonly config: {\n      redis: Redis;\n      logger: Logger;\n    }\n  ) {\n    this.logger = config.logger.child({ service: \"EngineService\" });\n\n    this.metrics = new MetricsService({ \n      logger: this.logger,\n      environment: 'production'\n    });\n  }\n\n  async initialize(): Promise<void> {\n    try {\n      this.currentState = await this.getOrCreateEngineState();\n      this.logger.info(\"Engine service initialized\", {\n        status: EngineStatus.READY,\n        confidence: 0.8,\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to initialize engine service\", { error });\n      throw error;\n    }\n  }\n\n  private async getOrCreateEngineState(): Promise<EngineState> {\n    const existingState = await prisma.engineState.findFirst({\n      orderBy: { lastActive: \"desc\" },\n    });\n\n    if (existingState) {\n      return {\n        id: existingState.id,\n        status: existingState.status as EngineStatus,\n        currentPhase: existingState.currentPhase || undefined,\n        confidence: existingState.confidence,\n        lastActive: existingState.lastActive,\n        metadata: existingState.metadata as Record<string, unknown> | undefined,\n      };\n    }\n\n    const newState = await prisma.engineState.create({\n      data: {\n        status: EngineStatus.READY,\n        confidence: 0.8,\n        metadata: {\n          initializationTime: new Date().toISOString(),\n        },\n      },\n    });\n\n    return {\n      id: newState.id,\n      status: newState.status as EngineStatus,\n      confidence: newState.confidence,\n      lastActive: newState.lastActive,\n      metadata: newState.metadata as Record<string, unknown> | undefined,\n    };\n  }\n\n  async startOperation(type: EngineOperationType): Promise<EngineOperation> {\n    try {\n      const operation = await prisma.engineOperation.create({\n        data: {\n          type,\n          status: EngineOperationStatus.PENDING,\n          metadata: {\n            startedBy: \"system\",\n            engineState: this.currentState?.status,\n          },\n        },\n      });\n\n      await this.updateEngineState({\n        status: EngineStatus.LEARNING,\n        currentPhase: type,\n      });\n\n      this.logger.info(\"Started engine operation\", {\n        type,\n        operationId: operation.id,\n      });\n\n      return {\n        id: operation.id,\n        type: operation.type as EngineOperationType,\n        status: operation.status as EngineOperationStatus,\n        startTime: operation.startTime,\n        error: null,\n        createdAt: operation.createdAt,\n        updatedAt: operation.updatedAt,\n        endTime: null,\n        metrics: {},\n        metadata: operation.metadata as JsonValue,\n      };\n    } catch (error) {\n      this.logger.error(\"Failed to start operation\", { \n        error: error instanceof Error ? error.message : 'Unknown error',\n        type \n      });\n      throw error;\n    }\n  }\n\n  private async updateEngineState(update: Partial<EngineState>): Promise<void> {\n    if (!this.currentState?.id) {\n      throw new Error(\"Engine not initialized\");\n    }\n\n    try {\n      const updatedState = await prisma.engineState.update({\n        where: { id: this.currentState.id },\n        data: {\n          ...update,\n          lastActive: new Date(),\n          metadata: update.metadata\n            ? JSON.stringify(update.metadata)\n            : undefined,\n        },\n      });\n\n      this.currentState = {\n        id: updatedState.id,\n        status: updatedState.status as EngineStatus,\n        currentPhase: updatedState.currentPhase || undefined,\n        confidence: updatedState.confidence,\n        lastActive: updatedState.lastActive,\n        metadata: updatedState.metadata as Record<string, unknown> | undefined,\n      };\n\n      await this.metrics.recordEngineMetric({\n        type: MetricType.MODEL_ACCURACY,\n        value: this.currentState.confidence,\n        confidence: 1.0,\n        metadata: { stateUpdate: update },\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to update engine state\", { \n        error: error instanceof Error ? error.message : 'Unknown error',\n        update \n      });\n      throw error;\n    }\n  }\n\n  async startLearningCycle(): Promise<EngineOperation> {\n    try {\n      const operation = await this.startOperation(EngineOperationType.LEARNING);\n\n      await prisma.engineOperation.update({\n        where: { id: operation.id },\n        data: {\n          status: EngineOperationStatus.IN_PROGRESS,\n          metadata: JSON.stringify({\n            startedAt: new Date().toISOString(),\n            initialConfidence: this.currentState?.confidence,\n          }),\n        },\n      });\n\n      this.logger.info(\"Started learning cycle\", {\n        operationId: operation.id,\n        currentConfidence: this.currentState?.confidence,\n      });\n\n      return operation;\n    } catch (error) {\n      this.logger.error(\"Failed to start learning cycle\", { error });\n      throw error;\n    }\n  }\n\n  async completeOperation(\n    operationId: string,\n    data: {\n      status: EngineOperationStatus;\n      metrics?: Record<string, number>;\n      error?: string;\n    }\n  ): Promise<void> {\n    try {\n      await prisma.engineOperation.update({\n        where: { id: operationId },\n        data: {\n          status: data.status,\n          endTime: new Date(),\n          metrics: data.metrics ? JSON.stringify(data.metrics) : undefined,\n          error: data.error,\n        },\n      });\n\n      if (data.status === EngineOperationStatus.COMPLETED) {\n        await this.updateEngineState({\n          status: EngineStatus.READY,\n          currentPhase: undefined,\n          confidence:\n            data.metrics?.confidence || this.currentState?.confidence || 0,\n        });\n      }\n\n      this.logger.info(\"Completed operation\", {\n        operationId,\n        status: data.status,\n        metrics: data.metrics,\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to complete operation\", { error, operationId });\n      throw error;\n    }\n  }\n\n  async detectPatterns(events: LearningEvent[]): Promise<{\n    operation: EngineOperation;\n    patterns: LearningPattern[];\n  }> {\n    try {\n      const operation = await this.startOperation(\n        EngineOperationType.PATTERN_DETECTION\n      );\n      const patterns: LearningPattern[] = [];\n      let confidence = 0;\n\n      for (const event of events) {\n        if (event.type === LearningEventType.SEARCH_PATTERN) {\n          const detectedPatterns = await this.analyzeSearchPatterns(event);\n          patterns.push(...detectedPatterns);\n\n          // Update confidence based on pattern quality\n          confidence = Math.max(\n            confidence,\n            detectedPatterns.reduce((acc, p) => Math.max(acc, p.confidence), 0)\n          );\n        }\n      }\n\n      await this.completeOperation(operation.id, {\n        status: EngineOperationStatus.COMPLETED,\n        metrics: {\n          patternCount: patterns.length,\n          confidence,\n          processingTimeMs: Date.now() - operation.startTime.getTime(),\n        },\n      });\n\n      operation.status = EngineOperationStatus.COMPLETED;\n\n      return { operation, patterns };\n    } catch (error) {\n      this.logger.error(\"Failed to detect patterns\", { error });\n      throw error;\n    }\n  }\n\n  private async analyzeSearchPatterns(\n    event: LearningEvent\n  ): Promise<LearningPattern[]> {\n    try {\n      const patterns: LearningPattern[] = [];\n      const metadata = event.metadata;\n\n      if (metadata.relevantHits && metadata.totalHits) {\n        const relevanceRatio = metadata.relevantHits / metadata.totalHits;\n\n        if (relevanceRatio > 0.8) {\n          patterns.push({\n            id: `pattern_${event.id}`,\n            type: \"high_relevance_search\",\n            confidence: relevanceRatio,\n            features: {\n              relevantHits: metadata.relevantHits,\n              totalHits: metadata.totalHits,\n              searchType: metadata.searchType,\n              facetsUsed: metadata.facetsUsed\n                ? String(metadata.facetsUsed).split(\",\")\n                : undefined,\n            },\n            metadata: {\n              source: event.id,\n              detectedAt: new Date().toISOString(),\n            },\n            createdAt: new Date(),\n            updatedAt: new Date(),\n            metrics: {},\n          });\n        }\n      }\n\n      await this.metrics.recordEngineMetric({\n        type: MetricType.MODEL_ACCURACY,\n        value: patterns.length ? patterns[0].confidence : 0,\n        confidence: 1.0,\n        metadata: { eventId: event.id },\n      });\n\n      return patterns;\n    } catch (error) {\n      this.logger.error(\"Failed to analyze search patterns\", {\n        error,\n        eventId: event.id,\n      });\n      throw error;\n    }\n  }\n\n  async optimizeFromPatterns(patterns: LearningPattern[]): Promise<{\n    operation: EngineOperation;\n    strategies: EngineOptimizationStrategy[];\n  }> {\n    try {\n      const operation = await this.startOperation(\n        EngineOperationType.OPTIMIZATION\n      );\n      const strategies: EngineOptimizationStrategy[] = [];\n      let totalConfidence = 0;\n\n      for (const pattern of patterns) {\n        const optimizations =\n          await this.generateOptimizationStrategies(pattern);\n        strategies.push(...optimizations);\n        totalConfidence += pattern.confidence;\n      }\n\n      const averageConfidence = totalConfidence / patterns.length;\n\n      await this.completeOperation(operation.id, {\n        status: EngineOperationStatus.COMPLETED,\n        metrics: {\n          strategyCount: strategies.length,\n          confidence: averageConfidence,\n          processingTimeMs: Date.now() - operation.startTime.getTime(),\n        },\n      });\n\n      return { operation, strategies };\n    } catch (error) {\n      this.logger.error(\"Failed to optimize from patterns\", { error });\n      throw error;\n    }\n  }\n\n  private async generateOptimizationStrategies(\n    pattern: LearningPattern\n  ): Promise<EngineOptimizationStrategy[]> {\n    try {\n      const strategies: EngineOptimizationStrategy[] = [];\n\n      if (pattern.type === \"high_relevance_search\") {\n        // Weight adjustment strategy\n        strategies.push({\n          id: `opt_${pattern.id}_weights`,\n          type: EngineOptimizationType.WEIGHT_ADJUSTMENT,\n          priority: pattern.confidence,\n          confidence: pattern.confidence,\n          impact: 0.8,\n          metadata: {\n            targetMetrics: [\"RELEVANCE_SCORE\", \"SEARCH_LATENCY\"],\n            expectedImprovement: 0.15,\n            riskLevel: EngineRiskLevel.LOW,\n            dependencies: [],\n          },\n          resultId: \"\",\n          learningResultId: \"\",\n        });\n        // Query transformation for high-performance patterns\n        if (\n          pattern.features?.took &&\n          typeof pattern.features.took === \"number\" &&\n          pattern.features.took < 100\n        ) {\n          strategies.push({\n            id: `opt_${pattern.id}_query`,\n            type: EngineOptimizationType.QUERY_TRANSFORMATION,\n            priority: pattern.confidence * 0.95,\n            confidence: pattern.confidence,\n            impact: 0.7,\n            metadata: {\n              targetMetrics: [\"SEARCH_LATENCY\", \"RELEVANCE_SCORE\"],\n              expectedImprovement: 0.2,\n              riskLevel: EngineRiskLevel.LOW,\n              dependencies: [],\n              searchPattern: pattern.features.searchType as string,\n            },\n            resultId: \"\",\n            learningResultId: \"\",\n          });\n        }\n        // Index optimization for slow queries\n        if (\n          pattern.features?.took &&\n          typeof pattern.features.took === \"number\" &&\n          pattern.features.took > 500\n        ) {\n          strategies.push({\n            id: `opt_${pattern.id}_index`,\n            type: EngineOptimizationType.INDEX_OPTIMIZATION,\n            priority: pattern.confidence * 0.85,\n            confidence: pattern.confidence * 0.9,\n            impact: 0.9,\n            metadata: {\n              targetMetrics: [\"SEARCH_LATENCY\"],\n              expectedImprovement: 0.4,\n              riskLevel: EngineRiskLevel.MEDIUM,\n              dependencies: [],\n              searchPattern: pattern.features.searchType as string,\n            },\n            resultId: \"\",\n            learningResultId: \"\",\n          });\n        }\n        // Cache strategy for high-traffic patterns\n        if (\n          pattern.features?.totalHits &&\n          Number(pattern.features.totalHits) > 1000\n        ) {\n          strategies.push({\n            id: `opt_${pattern.id}_cache`,\n            type: EngineOptimizationType.CACHE_STRATEGY,\n            priority: pattern.confidence * 0.9,\n            confidence: pattern.confidence,\n            impact: 0.6,\n            metadata: {\n              targetMetrics: [\"SEARCH_LATENCY\"],\n              expectedImprovement: 0.3,\n              riskLevel: EngineRiskLevel.LOW,\n              dependencies: [],\n              searchPattern: pattern.features.searchType as string,\n            },\n            resultId: \"\",\n            learningResultId: \"\",\n          });\n        }\n      }\n\n      await this.metrics.recordEngineMetric({\n        type: MetricType.MODEL_ACCURACY,\n        value:\n          strategies.reduce((acc, s) => acc + s.confidence, 0) /\n          strategies.length,\n        confidence: pattern.confidence,\n        metadata: {\n          patternId: pattern.id,\n          strategiesGenerated: strategies.length,\n        },\n      });\n\n      return strategies;\n    } catch (error) {\n      this.logger.error(\"Failed to generate optimization strategies\", {\n        error,\n        patternId: pattern.id,\n      });\n      throw error;\n    }\n  }\n\n  async executeAutonomousLearningCycle(): Promise<void> {\n    try {\n      // 1. Start learning cycle\n      const operation = await this.startLearningCycle();\n\n      // 2. Fetch recent learning events\n      const recentEvents = await prisma.learningEvent.findMany({\n        where: {\n          status: LearningEventStatus.COMPLETED,\n          createdAt: { gte: new Date(Date.now() - 24 * 60 * 60 * 1000) }, // Last 24h\n        },\n        orderBy: { createdAt: \"desc\" },\n        take: 100,\n      });\n      const { patterns } = await this.detectPatterns(\n        recentEvents.map(\n          (event) =>\n            ({\n              id: event.id,\n              type: event.type,\n              status: event.status,\n              error: event.error,\n              createdAt: event.createdAt,\n              updatedAt: event.updatedAt,\n              metadata: event.metadata,\n              patterns: [],\n              retryCount: event.retryCount,\n              priority: 1,\n              timestamp: event.createdAt,\n              tags: [],\n            }) as unknown as LearningEvent\n        )\n      );\n\n      if (patterns.length === 0) {\n        await this.completeOperation(operation.id, {\n          status: EngineOperationStatus.COMPLETED,\n          metrics: {\n            patternCount: 0,\n            confidence: this.currentState?.confidence || 0,\n          },\n        });\n        return;\n      }\n\n      // 4. Generate optimization strategies\n      const { strategies } = await this.optimizeFromPatterns(patterns);\n\n      // 5. Execute highest impact strategies autonomously\n      const executedStrategies = await this.executeStrategies(\n        strategies.filter(\n          (s) =>\n            s.confidence > 0.8 && // High confidence\n            s.impact > 0.5 && // High impact\n            s.metadata.riskLevel === EngineRiskLevel.LOW // Low risk\n        )\n      );\n\n      // 6. Record learning results\n      await prisma.engineLearningResult.create({\n        data: {\n          patterns: JSON.stringify(patterns),\n          confidence: Math.max(...patterns.map((p) => p.confidence)),\n          metadata: JSON.stringify({\n            eventCount: recentEvents.length,\n            executedStrategies: executedStrategies.length,\n          }),\n          operationId: operation.id,\n          recommendations: {\n            create: strategies.map((s) => ({\n              type: s.type as unknown as $Enums.EngineOptimizationType,\n              priority: s.priority,\n              confidence: s.confidence,\n              impact: s.impact,\n              metadata: JSON.stringify(s.metadata),\n            })),\n          },\n        },\n      });\n\n      // 7. Complete cycle\n      await this.completeOperation(operation.id, {\n        status: EngineOperationStatus.COMPLETED,\n        metrics: {\n          patternCount: patterns.length,\n          strategiesGenerated: strategies.length,\n          strategiesExecuted: executedStrategies.length,\n          confidence: this.currentState?.confidence || 0,\n        },\n      });\n\n      this.logger.info(\"Completed autonomous learning cycle\", {\n        patternsDetected: patterns.length,\n        strategiesExecuted: executedStrategies.length,\n      });\n    } catch (error) {\n      this.logger.error(\"Failed autonomous learning cycle\", { error });\n    }\n  }\n  \n  private async executeStrategies(\n    strategies: EngineOptimizationStrategy[]\n  ): Promise<EngineOptimizationStrategy[]> {\n    const executedStrategies: EngineOptimizationStrategy[] = [];\n\n    for (const strategy of strategies) {\n      try {\n        switch (strategy.type) {\n          case EngineOptimizationType.WEIGHT_ADJUSTMENT:\n            await this.executeWeightAdjustment(strategy);\n            break;\n          case EngineOptimizationType.CACHE_OPTIMIZATION:\n            await this.executeCacheStrategy(strategy);\n            break;\n          case EngineOptimizationType.QUERY_TRANSFORMATION:\n            await this.executeQueryTransformation(strategy);\n            break;\n          case EngineOptimizationType.INDEX_OPTIMIZATION:\n            await this.executeIndexOptimization(strategy);\n            break;\n          case EngineOptimizationType.CACHE_OPTIMIZATION:\n            await this.executeCacheStrategy(strategy);\n            break;\n          // Add other strategy types as needed\n        }\n        executedStrategies.push(strategy);\n\n        await this.metrics.recordEngineMetric({\n          type: MetricType.MODEL_ACCURACY,\n          value: strategy.confidence,\n          confidence: strategy.confidence,\n          metadata: {\n            strategyType: strategy.type,\n            impact: strategy.impact,\n          },\n        });\n      } catch (error) {\n        this.logger.error(\"Failed to execute strategy\", {\n          error,\n          strategyId: strategy.id,\n          type: strategy.type,\n        });\n      }\n    }\n\n    return executedStrategies;\n  }\n\n  private async executeWeightAdjustment(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    try {\n      const currentWeights = await prisma.searchWeights.findFirst({\n        where: { active: true },\n        orderBy: { createdAt: \"desc\" },\n      });\n\n      if (!currentWeights) {\n        throw new Error(\"No active weights found\");\n      }\n\n      // Calculate new weights based on pattern analysis\n      const newWeights = {\n        ...currentWeights,\n        titleWeight:\n          currentWeights.titleWeight *\n          (1 + strategy.metadata.expectedImprovement),\n        contentWeight: currentWeights.contentWeight,\n        tagWeight: currentWeights.tagWeight * 1.1, // Boost tag relevance\n        active: true,\n        metadata: JSON.stringify({\n          optimizationId: strategy.id,\n          previousWeights: currentWeights,\n          confidence: strategy.confidence,\n        }),\n      };\n\n      // Deactivate current weights\n      await prisma.searchWeights.update({\n        where: { id: currentWeights.id },\n        data: { active: false },\n      });\n\n      // Create new weights\n      await prisma.searchWeights.create({\n        data: newWeights,\n      });\n\n      this.logger.info(\"Executed weight adjustment\", {\n        strategyId: strategy.id,\n        improvement: strategy.metadata.expectedImprovement,\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to execute weight adjustment\", {\n        error,\n        strategyId: strategy.id,\n      });\n      throw error;\n    }\n  }\n\n  private async executeCacheStrategy(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    try {\n      const cacheConfig = {\n        ttl: 3600, // 1 hour default\n        maxSize: 1000,\n        priority: strategy.priority,\n      };\n\n      // Update cache rules in search service\n      await prisma.searchConfig.upsert({\n        where: { key: \"cacheRules\" },\n        create: {\n          key: \"cacheRules\",\n          value: JSON.stringify({\n            enabled: true,\n            rules: [\n              {\n                pattern: strategy.metadata.searchPattern,\n                config: cacheConfig,\n              },\n            ],\n          }),\n        },\n        update: {\n          value: JSON.stringify({\n            enabled: true,\n            rules: [\n              {\n                pattern: strategy.metadata.searchPattern,\n                config: cacheConfig,\n              },\n            ],\n          }),\n        },\n      });\n\n      // Record cache strategy metrics\n      await this.metrics.recordEngineMetric({\n        type: MetricType.CACHE_EFFICIENCY,\n        value: strategy.confidence,\n        confidence: strategy.confidence,\n        metadata: {\n          strategyId: strategy.id,\n          cacheConfig,\n          expectedLatencyImprovement: strategy.metadata.expectedImprovement,\n        },\n      });\n\n      this.logger.info(\"Executed cache strategy\", {\n        strategyId: strategy.id,\n        pattern: strategy.metadata.searchPattern,\n        config: cacheConfig,\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to execute cache strategy\", {\n        error,\n        strategyId: strategy.id,\n      });\n      throw error;\n    }\n  }\n\n  private async executeQueryTransformation(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    try {\n      const transformationRules = {\n        pattern: strategy.metadata.searchPattern,\n        boost: strategy.metadata.expectedImprovement,\n        priority: strategy.priority,\n        confidence: strategy.confidence,\n      };\n\n      await prisma.searchConfig.upsert({\n        where: { key: \"queryTransformations\" },\n        create: {\n          key: \"queryTransformations\",\n          value: JSON.stringify([transformationRules]),\n        },\n        update: {\n          value: JSON.stringify([transformationRules]),\n        },\n      });\n\n      await this.metrics.recordEngineMetric({\n        type: MetricType.MODEL_ACCURACY,\n        value: strategy.confidence,\n        confidence: strategy.confidence,\n        metadata: {\n          strategyId: strategy.id,\n          transformationType: \"query_optimization\",\n        },\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to execute query transformation\", {\n        error,\n        strategyId: strategy.id,\n      });\n      throw error;\n    }\n  }\n\n  private async executeIndexOptimization(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    try {\n      const indexConfig = {\n        fields: [\"title\", \"content\", \"tags\"],\n        type: \"BTREE\",\n        priority: strategy.priority,\n        searchPattern: strategy.metadata.searchPattern,\n      };\n\n      await prisma.searchConfig.upsert({\n        where: { key: \"indexConfigurations\" },\n        create: {\n          key: \"indexConfigurations\",\n          value: JSON.stringify([indexConfig]),\n        },\n        update: {\n          value: JSON.stringify([indexConfig]),\n        },\n      });\n\n      await this.metrics.recordEngineMetric({\n        type: MetricType.SEARCH_LATENCY,\n        value: strategy.metadata.expectedImprovement,\n        confidence: strategy.confidence,\n        metadata: {\n          strategyId: strategy.id,\n          indexType: \"BTREE\",\n        },\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to execute index optimization\", {\n        error,\n        strategyId: strategy.id,\n      });\n      throw error;\n    }\n  }\n\n  private async implementFeedbackLoop(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    try {\n      const beforeMetrics = await this.collectPerformanceMetrics();\n\n      // Execute strategy\n      await this.executeStrategy(strategy);\n\n      // Wait for impact period\n      await new Promise((resolve) => setTimeout(resolve, 5 * 60 * 1000)); // 5 minutes\n\n      const afterMetrics = await this.collectPerformanceMetrics();\n      const impact = this.calculateStrategyImpact(beforeMetrics, afterMetrics);\n\n      if (impact.value < strategy.metadata.expectedImprovement * 0.5) {\n        await this.rollbackStrategy(strategy);\n        throw new Error(\"Strategy did not meet performance expectations\");\n      }\n\n      await prisma.engineLearningResult.update({\n        where: { id: strategy.learningResultId },\n        data: {\n          performance: JSON.stringify({\n            beforeMetrics,\n            afterMetrics,\n            improvement: impact,\n          }),\n          validatedAt: new Date(),\n        },\n      });\n    } catch (error) {\n      this.logger.error(\"Feedback loop failed\", {\n        error,\n        strategyId: strategy.id,\n      });\n      await this.rollbackStrategy(strategy);\n      throw error;\n    }\n  }\n\n  private async executeABTest(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    const testConfig = {\n      id: `ab_${strategy.id}`,\n      variants: {\n        control: { weight: 0.5 },\n        treatment: {\n          weight: 0.5,\n          strategyId: strategy.id,\n        },\n      },\n      metrics: strategy.metadata.targetMetrics,\n      duration: 3600 * 24, // 24 hours\n      minimumSampleSize: 1000,\n    };\n\n    try {\n      await prisma.experimentConfig.create({\n        data: {\n          key: testConfig.id,\n          value: JSON.stringify(testConfig),\n          status: \"ACTIVE\",\n        },\n      });\n\n      const results = await this.monitorABTest(testConfig.id, strategy);\n\n      if (results.winner === \"treatment\") {\n        await this.executeStrategy(strategy);\n      }\n\n      await prisma.engineLearningResult.update({\n        where: { id: strategy.learningResultId },\n        data: {\n          performance: JSON.stringify({\n            abTestResults: results,\n            improvement: results.improvement,\n            timestamp: new Date().toISOString(),\n          }),\n          validatedAt: new Date(),\n        },\n      });\n    } catch (error) {\n      this.logger.error(\"A/B test failed\", { error, strategyId: strategy.id });\n      throw error;\n    }\n  }\n\n  private async rollbackStrategy(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    try {\n      switch (strategy.type) {\n        case EngineOptimizationType.WEIGHT_ADJUSTMENT:\n          await this.rollbackWeights(strategy);\n          break;\n        case EngineOptimizationType.CACHE_OPTIMIZATION:\n          await this.rollbackCache(strategy);\n          break;\n        case EngineOptimizationType.QUERY_TRANSFORMATION:\n          await this.rollbackQueryTransformation(strategy);\n          break;\n        case EngineOptimizationType.INDEX_OPTIMIZATION:\n          await this.rollbackIndexOptimization(strategy);\n          break;\n      }\n\n      await prisma.engineLearningResult.update({\n        where: { id: strategy.learningResultId },\n        data: {\n          performance: {\n            rolledBack: true,\n            rollbackReason: \"Performance degradation\",\n          },\n        },\n      });\n    } catch (error) {\n      this.logger.error(\"Strategy rollback failed\", {\n        error,\n        strategyId: strategy.id,\n      });\n      throw error;\n    }\n  }\n\n  public async executeStrategy(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    try {\n      // Validate risk level\n      const currentState = await prisma.engineState.findFirst({\n        where: { id: this.currentState?.id },\n      });\n\n      const metadata = currentState?.metadata as Record<string, unknown>;\n      if (\n        strategy.metadata.riskLevel === EngineRiskLevel.HIGH &&\n        metadata?.riskTolerance === 'low'\n      ) {\n        throw new Error('High risk strategies are not allowed in current state');\n      }\n\n      switch (strategy.type) {\n        case EngineOptimizationType.WEIGHT_ADJUSTMENT:\n          await this.adjustWeights(strategy);\n          break;\n        case EngineOptimizationType.CACHE_OPTIMIZATION:\n          await this.optimizeCache(strategy);\n          break;\n        case EngineOptimizationType.QUERY_TRANSFORMATION:\n          await this.transformQuery(strategy);\n          break;\n        case EngineOptimizationType.INDEX_OPTIMIZATION:\n          await this.optimizeIndex(strategy);\n          break;\n      }\n\n      await this.recordStrategyExecution(strategy);\n    } catch (error) {\n      this.logger.error(\"Strategy execution failed\", {\n        error,\n        strategyId: strategy.id,\n      });\n      throw error;\n    }\n  }\n\n  public async rollbackStrategyPublic(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    return this.rollbackStrategy(strategy);\n  }\n\n  protected async collectPerformanceMetrics(): Promise<Record<string, number>> {\n    return {\n      latency: await this.metrics.getAverageLatency(),\n      throughput: await this.metrics.getThroughput(),\n      errorRate: await this.metrics.getErrorRate(),\n      cpuUsage: await this.metrics.getCPUUsage(),\n      memoryUsage: await this.metrics.getMemoryUsage(),\n    };\n  }\n\n  protected calculateStrategyImpact(\n    before: Record<string, number>,\n    after: Record<string, number>\n  ): ImpactAnalysis {\n    // Metric importance weights\n    const weights = {\n      latency: 0.4,\n      throughput: 0.3,\n      errorRate: 0.2,\n      cpuUsage: 0.05,\n      memoryUsage: 0.05,\n    };\n\n    // Calculate load-adjusted improvements\n    const loadFactor = this.calculateLoadFactor();\n    const improvements: Record<string, number> = {};\n    let weightedImprovement = 0;\n\n    for (const [metric, weight] of Object.entries(weights)) {\n      const rawImprovement = (after[metric] - before[metric]) / before[metric];\n      const loadAdjusted = rawImprovement * loadFactor;\n\n      improvements[metric] = loadAdjusted;\n      weightedImprovement += loadAdjusted * weight;\n    }\n\n    // Statistical significance\n    const significance = this.calculateStatisticalSignificance(before, after);\n\n    return {\n      weightedImprovement,\n      improvements,\n      significance,\n      confidence: this.calculateConfidenceInterval(improvements),\n      loadFactor,\n      isSignificant: significance > 0.95,\n      value: weightedImprovement,\n    };\n  }\n\n  protected async monitorABTest(\n    testId: string,\n    strategy: EngineOptimizationStrategy\n  ): Promise<ABTestResults> {\n    const metrics = await this.collectPerformanceMetrics();\n    await prisma.engineLearningResult.update({\n      where: { id: strategy.learningResultId },\n      data: {\n        performance: JSON.stringify({\n          metrics,\n          timestamp: new Date().toISOString(),\n        }),\n      },\n    });\n\n    return {\n      winner: \"control\" as const,\n      improvement: 0.15,\n      metrics: {\n        control: metrics,\n        treatment: metrics,\n      },\n    };\n  }\n\n  protected async rollbackWeights(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    try {\n      const currentWeights = await prisma.searchWeights.findFirst({\n        where: {\n          active: true,\n          metadata: {\n            path: [\"$\"],\n            string_contains: strategy.id,\n          },\n        },\n        orderBy: { createdAt: \"desc\" },\n      });\n\n      if (!currentWeights) {\n        throw new Error(\"No weights found for rollback\");\n      }\n\n      const previousWeights = JSON.parse(\n        currentWeights.metadata as string\n      ).previousWeights;\n\n      // Deactivate current weights\n      await prisma.searchWeights.update({\n        where: { id: currentWeights.id },\n        data: { active: false },\n      });\n\n      // Restore previous weights\n      await prisma.searchWeights.create({\n        data: {\n          ...previousWeights,\n          active: true,\n          metadata: JSON.stringify({\n            rolledBackFrom: strategy.id,\n            timestamp: new Date().toISOString(),\n          }),\n        },\n      });\n\n      this.logger.info(\"Rolled back weight adjustment\", {\n        strategyId: strategy.id,\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to rollback weights\", {\n        error,\n        strategyId: strategy.id,\n      });\n      throw error;\n    }\n  }\n\n  protected async rollbackCache(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    try {\n      await prisma.searchConfig.update({\n        where: { key: \"cacheConfigurations\" },\n        data: {\n          value: JSON.stringify({\n            enabled: false,\n            rolledBack: true,\n            strategyId: strategy.id,\n          }),\n        },\n      });\n\n      await this.metrics.recordEngineMetric({\n        type: MetricType.CACHE_HIT_RATE,\n        value: 0,\n        confidence: 1,\n        metadata: {\n          strategyId: strategy.id,\n          action: \"rollback\",\n        },\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to rollback cache\", {\n        error,\n        strategyId: strategy.id,\n      });\n      throw error;\n    }\n  }\n\n  protected async rollbackQueryTransformation(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    try {\n      const config = await prisma.searchConfig.findUnique({\n        where: { key: \"queryTransformations\" },\n      });\n      if (config) {\n        const transformations = JSON.parse(config.value as string);\n        const updatedTransformations = transformations.filter(\n          (t: { pattern: string }) => t.pattern !== strategy.metadata.searchPattern\n        );\n\n        await prisma.searchConfig.update({\n          where: { key: \"queryTransformations\" },\n          data: {\n            value: JSON.stringify(updatedTransformations),\n          },\n        });\n      }\n\n      await this.metrics.recordEngineMetric({\n        type: MetricType.MODEL_ACCURACY,\n        value: 0,\n        confidence: 1,\n        metadata: {\n          strategyId: strategy.id,\n          transformationType: \"rollback\",\n        },\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to rollback query transformation\", {\n        error,\n        strategyId: strategy.id,\n      });\n      throw error;\n    }\n  }\n\n  protected async rollbackIndexOptimization(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    try {\n      const config = await prisma.searchConfig.findUnique({\n        where: { key: \"indexConfigurations\" },\n      });\n      if (config) {\n        const indexConfigs = JSON.parse(config.value as string);\n        const updatedConfigs = indexConfigs.filter(\n          (c: any) => c.searchPattern !== strategy.metadata.searchPattern\n        );\n\n        await prisma.searchConfig.update({\n          where: { key: \"indexConfigurations\" },\n          data: {\n            value: JSON.stringify(updatedConfigs),\n          },\n        });\n      }\n\n      await this.metrics.recordEngineMetric({\n        type: MetricType.SEARCH_LATENCY,\n        value: 0,\n        confidence: 1,\n        metadata: {\n          strategyId: strategy.id,\n          indexType: \"rollback\",\n        },\n      });\n    } catch (error) {\n      this.logger.error(\"Failed to rollback index optimization\", {\n        error,\n        strategyId: strategy.id,\n      });\n      throw error;\n    }\n  }\n\n  protected groupEventsByType(\n    events: LearningEvent[]\n  ): Record<string, LearningEvent[]> {\n    return events.reduce(\n      (groups, event) => {\n        const type = event.type;\n        groups[type] = groups[type] || [];\n        groups[type].push(event);\n        return groups;\n      },\n      {} as Record<string, LearningEvent[]>\n    );\n  }\n\n  protected async detectPerformancePatterns(\n    events: LearningEvent[]\n  ): Promise<LearningPattern[]> {\n    // Implementation for performance pattern detection\n    return [];\n  }\n\n  protected static calculatePatternConfidence(pattern: LearningPattern): number {\n    // Implementation for calculating pattern confidence\n    return 0.8;\n  }\n\n  protected async analyzePatternCorrelations(\n    patterns: LearningPattern[]\n  ): Promise<LearningPattern[]> {\n    // Implementation for analyzing pattern correlations\n    return patterns;\n  }\n\n  protected async calculatePatternCorrelation(\n    p1: LearningPattern,\n    p2: LearningPattern\n  ): Promise<number> {\n    const metrics1 = p1.metrics || {};\n    const metrics2 = p2.metrics || {};\n\n    const commonMetrics = Object.keys(metrics1).filter(\n      (key) => key in metrics2\n    );\n    if (commonMetrics.length === 0) return 0;\n\n    let correlation = 0;\n    for (const metric of commonMetrics) {\n      const diff = Math.abs(metrics1[metric] - metrics2[metric]);\n      correlation += 1 - diff / Math.max(metrics1[metric], metrics2[metric]);\n    }\n\n    return correlation / commonMetrics.length;\n  }\n\n  private async updateTestResults(\n    strategy: EngineOptimizationStrategy,\n    results: ABTestResults\n  ): Promise<void> {\n    await prisma.engineLearningResult.update({\n      where: { id: strategy.learningResultId },\n      data: {\n        performance: JSON.stringify({\n          testResults: results,\n          improvement: results.improvement,\n          timestamp: new Date().toISOString(),\n        }),\n        validatedAt: new Date(),\n      },\n    });\n  }\n\n  protected async detectTimeBasedPatterns(\n    events: LearningEvent[]\n  ): Promise<LearningPattern[]> {\n    const patterns: LearningPattern[] = [];\n    const timeGroups = this.groupEventsByTimeWindow(events, 3600000); // 1 hour windows\n\n    for (const [timestamp, windowEvents] of Array.from(timeGroups.entries())) {\n      if (windowEvents.length < 10) continue; // Minimum sample size\n\n      const avgLatency =\n        windowEvents.reduce((sum, e) => sum + (e.metrics?.latency || 0), 0) /\n        windowEvents.length;\n      const throughput = windowEvents.length;\n\n      patterns.push({\n        id: `time_${timestamp}`,\n        type: \"TIME_BASED\",\n        confidence: 0.8,\n        metrics: {\n          averageLatency: avgLatency,\n          throughput: throughput,\n          eventCount: windowEvents.length,\n        },\n        features: {\n          took: avgLatency,\n          totalHits: throughput,\n        },\n        metadata: {\n          source: \"time_analysis\",\n          detectedAt: new Date().toISOString(),\n        },\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      });\n    }\n\n    return patterns;\n  }\n\n  protected async detectUserBehaviorPatterns(\n    events: LearningEvent[]\n  ): Promise<LearningPattern[]> {\n    const patterns: LearningPattern[] = [];\n    const userSessions = this.groupEventsByUserSession(events);\n\n    for (const [sessionId, sessionEvents] of Array.from(userSessions.entries())) {\n      const facetsUsed = new Set<string>();\n      let relevantHits = 0;\n      let totalHits = 0;\n\n      sessionEvents.forEach((event) => {\n        if (event.metadata?.facets) {\n          event.metadata.facets.forEach((f: string) => facetsUsed.add(f));\n        }\n        if (event.metadata?.relevantHits)\n          relevantHits += event.metadata.relevantHits;\n        if (event.metadata?.totalHits) totalHits += event.metadata.totalHits;\n      });\n\n      patterns.push({\n        id: `behavior_${sessionId}`,\n        type: \"USER_BEHAVIOR\",\n        confidence: 0.7,\n        metrics: {\n          relevanceScore: relevantHits / totalHits,\n          facetUsage: facetsUsed.size,\n          sessionLength: sessionEvents.length,\n        },\n        features: {\n          relevantHits,\n          totalHits,\n          facetsUsed: Array.from(facetsUsed),\n        },\n        metadata: {\n          source: \"user_behavior\",\n          detectedAt: new Date().toISOString(),\n        },\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      });\n    }\n\n    return patterns;\n  }\n\n  private groupEventsByTimeWindow(\n    events: LearningEvent[],\n    windowSize: number\n  ): Map<number, LearningEvent[]> {\n    const windows = new Map<number, LearningEvent[]>();\n\n    events.forEach((event) => {\n      const timestamp =\n        Math.floor(new Date(event.createdAt).getTime() / windowSize) *\n        windowSize;\n      if (!windows.has(timestamp)) {\n        windows.set(timestamp, []);\n      }\n      windows.get(timestamp)!.push(event);\n    });\n\n    return windows;\n  }\n\n  private groupEventsByUserSession(\n    events: LearningEvent[]\n  ): Map<string, LearningEvent[]> {\n    const sessions = new Map<string, LearningEvent[]>();\n\n    events.forEach((event: LearningEvent) => {\n      const sessionId = event.metadata?.sessionId || \"default\";\n      if (!sessions.has(sessionId)) {\n        sessions.set(sessionId, []);\n      }\n      sessions.get(sessionId)!.push(event);\n    });\n\n    return sessions;\n  }\n\n  protected async handleStrategyRollback(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    try {\n      switch (strategy.type) {\n        case EngineOptimizationType.WEIGHT_ADJUSTMENT:\n          await this.rollbackWeights(strategy);\n          break;\n        case EngineOptimizationType.CACHE_OPTIMIZATION:\n          await this.rollbackCache(strategy);\n          break;\n        case EngineOptimizationType.QUERY_TRANSFORMATION:\n          await this.rollbackQueryTransformation(strategy);\n          break;\n        case EngineOptimizationType.INDEX_OPTIMIZATION:\n          await this.rollbackIndexOptimization(strategy);\n          break;\n      }\n\n      await prisma.engineLearningResult.update({\n        where: { id: strategy.learningResultId },\n        data: {\n          performance: JSON.stringify({\n            rolledBack: true,\n            rollbackReason: \"Performance degradation\",\n            timestamp: new Date().toISOString(),\n          }),\n        },\n      });\n    } catch (error) {\n      this.logger.error(\"Strategy rollback failed\", {\n        error,\n        strategyId: strategy.id,\n      });\n      throw error;\n    }\n  }\n\n  protected calculateLoadFactor(): number {\n    const currentLoad = this.metrics.getCurrentLoad();\n    const baselineLoad = this.metrics.getBaselineLoad();\n    return currentLoad / baselineLoad;\n  }\n\n  protected calculateStatisticalSignificance(\n    before: Record<string, number>,\n    after: Record<string, number>\n  ): number {\n    const sampleSize = Object.keys(before).length;\n    const tScore = this.calculateTScore(before, after);\n    return this.calculatePValue(tScore, sampleSize);\n  }\n\n  protected calculateConfidenceInterval(\n    improvements: Record<string, number>\n  ): number {\n    const values = Object.values(improvements);\n    const mean = values.reduce((sum: number, n: number) => sum + n) / values.length;\n    const stdDev = Math.sqrt(\n      values.reduce((sq: number, n: number) => sq + Math.pow(n - mean, 2), 0) /\n        (values.length - 1)\n    );\n    const marginOfError = 1.96 * (stdDev / Math.sqrt(values.length));\n    return 1 - marginOfError;\n  }\n\n  protected async calculateRequiredSampleSize(): Promise<number> {\n    const baseSize = 1000;\n    const variability = await this.metrics.getMetricVariability();\n    return Math.ceil(baseSize * (1 + variability));\n  }\n\n  protected async calculateOptimalTestDuration(): Promise<number> {\n    const trafficVolume = await this.metrics.getAverageTrafficVolume();\n    const sampleSize = await this.calculateRequiredSampleSize();\n    return Math.ceil((sampleSize / trafficVolume) * 24 * 60 * 60 * 1000); // in ms\n  }\n\n  protected async collectTestMetrics(\n    testId: string,\n    config: {\n      sampleSize: number;\n      duration: number;\n      metrics: string[];\n    }\n  ): Promise<Record<string, TestMetrics>> {\n    const startTime = Date.now() - config.duration;\n    return {\n      control: await this.metrics.getMetricsForVariant(\"control\", startTime),\n      treatment: await this.metrics.getMetricsForVariant(\n        \"treatment\",\n        startTime\n      ),\n    };\n  }\n\n  protected analyzeVariant(metrics: TestMetrics): VariantAnalysis {\n    return {\n      metrics,\n      sampleSize: this.calculateEffectiveSampleSize(metrics),\n      confidence: this.calculateVariantConfidence(metrics),\n    };\n  }\n\n  protected determineWinner(\n    analysis: Record<string, VariantAnalysis>,\n    significance: number\n  ): \"control\" | \"treatment\" | null {\n    if (significance < 0.95) return null;\n    return analysis.treatment.metrics.latency < analysis.control.metrics.latency\n      ? \"treatment\"\n      : \"control\";\n  }\n\n  protected calculateNetImprovement(\n    analysis: Record<string, VariantAnalysis>\n  ): number {\n    const controlMetrics = analysis.control.metrics;\n    const treatmentMetrics = analysis.treatment.metrics;\n\n    return (\n      Object.keys(controlMetrics).reduce((total, metric) => {\n        const treatmentValue = Number(\n          treatmentMetrics[metric as keyof TestMetrics]\n        );\n        const controlValue = Number(\n          controlMetrics[metric as keyof TestMetrics]\n        );\n        const improvement = (treatmentValue - controlValue) / controlValue;\n        return total + improvement;\n      }, 0) / Object.keys(controlMetrics).length\n    );\n  }\n  private calculateTScore(\n    before: Record<string, number>,\n    after: Record<string, number>\n  ): number {\n    const differences = Object.keys(before).map(\n      (key) => after[key] - before[key]\n    );\n    const meanDiff = differences.reduce((a, b) => a + b) / differences.length;\n    const stdDev = Math.sqrt(\n      differences.reduce((sq: number, n: number) => sq + Math.pow(n - meanDiff, 2), 0) /\n        (differences.length - 1)\n    );\n    return Math.abs(meanDiff / (stdDev / Math.sqrt(differences.length)));\n  }\n\n  private calculatePValue(tScore: number, sampleSize: number): number {\n    // Simplified t-distribution calculation\n    return 1 / (1 + Math.exp(tScore - Math.log(sampleSize)));\n  }\n\n  private calculateEffectiveSampleSize(metrics: TestMetrics): number {\n    return Object.keys(metrics).length * 100; // Simplified calculation\n  }\n\n  private calculateVariantConfidence(metrics: TestMetrics): number {\n    const variability =\n      Object.values(metrics).reduce(\n        (sum, value) =>\n          sum + Math.abs(value - this.calculateMean(Object.values(metrics))),\n        0\n      ) / Object.values(metrics).length;\n\n    return Math.max(0, Math.min(1, 1 - variability));\n  }\n\n  private calculateMean(values: number[]): number {\n    return values.reduce((a, b) => a + b, 0) / values.length;\n  }\n\n  async pushLearningEvent(event: LearningEvent) {\n    await this.config.redis.xadd(\n      \"nous:learning:stream\",\n      \"*\",\n      \"event\",\n      JSON.stringify(event)\n    );\n  }\n\n  private async adjustWeights(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    const currentWeights = await prisma.searchWeights.findFirst({\n      where: { active: true },\n      orderBy: { createdAt: \"desc\" },\n    });\n\n    if (!currentWeights) {\n      throw new Error(\"No active weights found\");\n    }\n\n    const newWeights = {\n      ...currentWeights,\n      titleWeight:\n        currentWeights.titleWeight *\n        (1 + strategy.metadata.expectedImprovement),\n      contentWeight: currentWeights.contentWeight,\n      tagWeight: currentWeights.tagWeight * 1.1,\n      active: true,\n      metadata: JSON.stringify({\n        optimizationId: strategy.id,\n        previousWeights: currentWeights,\n        confidence: strategy.confidence,\n      }),\n    };\n\n    await prisma.searchWeights.update({\n      where: { id: currentWeights.id },\n      data: { active: false },\n    });\n\n    await prisma.searchWeights.create({\n      data: newWeights,\n    });\n  }\n\n  private async optimizeCache(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    const cacheConfig = {\n      ttl: 3600,\n      maxSize: 1000,\n      priority: strategy.priority,\n    };\n\n    await prisma.searchConfig.upsert({\n      where: { key: \"cacheConfigurations\" },\n      create: {\n        key: \"cacheConfigurations\",\n        value: JSON.stringify(cacheConfig),\n      },\n      update: {\n        value: JSON.stringify(cacheConfig),\n      },\n    });\n  }\n\n  private async transformQuery(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    const transformationRules = {\n      pattern: strategy.metadata.searchPattern,\n      priority: strategy.priority,\n      confidence: strategy.confidence,\n    };\n\n    await prisma.searchConfig.upsert({\n      where: { key: \"queryTransformations\" },\n      create: {\n        key: \"queryTransformations\",\n        value: JSON.stringify([transformationRules]),\n      },\n      update: {\n        value: JSON.stringify([transformationRules]),\n      },\n    });\n  }\n\n  private async optimizeIndex(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    const indexConfig = {\n      fields: [\"title\", \"content\", \"tags\"],\n      type: \"BTREE\",\n      priority: strategy.priority,\n      searchPattern: strategy.metadata.searchPattern,\n    };\n\n    await prisma.searchConfig.upsert({\n      where: { key: \"indexConfigurations\" },\n      create: {\n        key: \"indexConfigurations\",\n        value: JSON.stringify([indexConfig]),\n      },\n      update: {\n        value: JSON.stringify([indexConfig]),\n      },\n    });\n  }\n\n  private async recordStrategyExecution(\n    strategy: EngineOptimizationStrategy\n  ): Promise<void> {\n    await prisma.engineLearningResult.update({\n      where: { id: strategy.learningResultId },\n      data: {\n        metadata: JSON.stringify({\n          strategyType: strategy.type,\n          confidence: strategy.confidence,\n          executionTimestamp: new Date().toISOString(),\n        }),\n        validatedAt: new Date(),\n        performance: JSON.stringify({\n          status: \"EXECUTED\",\n          timestamp: new Date().toISOString(),\n        }),\n      },\n    });\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"91eb3a0da98462bfa99e8e1a97fba08408cd274b"}}