{"/workspaces/sophra/src/app/api/nous/adapt/rules/route.ts":{"path":"/workspaces/sophra/src/app/api/nous/adapt/rules/route.ts","statementMap":{"0":{"start":{"line":6,"column":23},"end":{"line":6,"column":31}},"1":{"start":{"line":7,"column":29},"end":{"line":16,"column":2}},"2":{"start":{"line":17,"column":33},"end":{"line":19,"column":2}},"3":{"start":{"line":21,"column":2},"end":{"line":39,"column":3}},"4":{"start":{"line":22,"column":18},"end":{"line":24,"column":6}},"5":{"start":{"line":25,"column":4},"end":{"line":28,"column":7}},"6":{"start":{"line":30,"column":4},"end":{"line":30,"column":65}},"7":{"start":{"line":31,"column":4},"end":{"line":38,"column":6}},"8":{"start":{"line":42,"column":2},"end":{"line":95,"column":3}},"9":{"start":{"line":43,"column":17},"end":{"line":43,"column":33}},"10":{"start":{"line":44,"column":23},"end":{"line":44,"column":63}},"11":{"start":{"line":45,"column":4},"end":{"line":54,"column":5}},"12":{"start":{"line":46,"column":6},"end":{"line":53,"column":8}},"13":{"start":{"line":55,"column":22},"end":{"line":55,"column":37}},"14":{"start":{"line":56,"column":4},"end":{"line":61,"column":5}},"15":{"start":{"line":57,"column":6},"end":{"line":60,"column":9}},"16":{"start":{"line":62,"column":25},"end":{"line":76,"column":5}},"17":{"start":{"line":64,"column":18},"end":{"line":74,"column":10}},"18":{"start":{"line":77,"column":4},"end":{"line":80,"column":7}},"19":{"start":{"line":79,"column":39},"end":{"line":79,"column":43}},"20":{"start":{"line":81,"column":4},"end":{"line":84,"column":7}},"21":{"start":{"line":86,"column":4},"end":{"line":86,"column":66}},"22":{"start":{"line":87,"column":4},"end":{"line":94,"column":6}}},"fnMap":{"0":{"name":"GET","decl":{"start":{"line":20,"column":22},"end":{"line":20,"column":25}},"loc":{"start":{"line":20,"column":28},"end":{"line":40,"column":1}},"line":20},"1":{"name":"POST","decl":{"start":{"line":41,"column":22},"end":{"line":41,"column":26}},"loc":{"start":{"line":41,"column":32},"end":{"line":96,"column":1}},"line":41},"2":{"name":"(anonymous_2)","decl":{"start":{"line":64,"column":8},"end":{"line":64,"column":9}},"loc":{"start":{"line":64,"column":18},"end":{"line":74,"column":10}},"line":64},"3":{"name":"(anonymous_3)","decl":{"start":{"line":79,"column":32},"end":{"line":79,"column":33}},"loc":{"start":{"line":79,"column":39},"end":{"line":79,"column":43}},"line":79}},"branchMap":{"0":{"loc":{"start":{"line":27,"column":13},"end":{"line":27,"column":24}},"type":"binary-expr","locations":[{"start":{"line":27,"column":13},"end":{"line":27,"column":18}},{"start":{"line":27,"column":22},"end":{"line":27,"column":24}}],"line":27},"1":{"loc":{"start":{"line":35,"column":17},"end":{"line":35,"column":73}},"type":"cond-expr","locations":[{"start":{"line":35,"column":42},"end":{"line":35,"column":55}},{"start":{"line":35,"column":58},"end":{"line":35,"column":73}}],"line":35},"2":{"loc":{"start":{"line":45,"column":4},"end":{"line":54,"column":5}},"type":"if","locations":[{"start":{"line":45,"column":4},"end":{"line":54,"column":5}},{"start":{},"end":{}}],"line":45},"3":{"loc":{"start":{"line":56,"column":4},"end":{"line":61,"column":5}},"type":"if","locations":[{"start":{"line":56,"column":4},"end":{"line":61,"column":5}},{"start":{},"end":{}}],"line":56},"4":{"loc":{"start":{"line":91,"column":17},"end":{"line":91,"column":73}},"type":"cond-expr","locations":[{"start":{"line":91,"column":42},"end":{"line":91,"column":55}},{"start":{"line":91,"column":58},"end":{"line":91,"column":73}}],"line":91}},"s":{"0":1,"1":1,"2":1,"3":2,"4":2,"5":1,"6":1,"7":1,"8":4,"9":4,"10":4,"11":4,"12":1,"13":3,"14":3,"15":1,"16":2,"17":2,"18":1,"19":1,"20":1,"21":1,"22":1},"f":{"0":2,"1":4,"2":2,"3":1},"b":{"0":[1,0],"1":[1,0],"2":[1,3],"3":[1,2],"4":[1,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/api/nous/adapt/rules/route.ts"],"sourcesContent":["import { prisma } from \"@lib/shared/database/client\";\nimport logger from \"@lib/shared/logger\";\nimport { RulePriority, Prisma } from \"@prisma/client\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { z } from \"zod\";\n\n// Declare Node.js runtime\nexport const runtime = \"nodejs\";\n\nconst AdaptationRuleSchema = z.object({\n  id: z.string().optional(),\n  name: z.string(),\n  description: z.string(),\n  type: z.string(),\n  conditions: z.record(z.unknown()),\n  actions: z.record(z.unknown()),\n  priority: z.nativeEnum(RulePriority),\n  enabled: z.boolean().default(true),\n});\n\nconst AdaptationRuleListSchema = z.object({\n  rules: z.array(AdaptationRuleSchema),\n});\n\nexport async function GET(): Promise<NextResponse> {\n  try {\n    const rules = await prisma.adaptationRule.findMany({\n      orderBy: { priority: \"asc\" },\n    });\n\n    // Always return rules array, empty if none found\n    return NextResponse.json({ \n      success: true,\n      rules: rules || []\n    });\n  } catch (error) {\n    logger.error(\"Failed to fetch adaptation rules:\", { error });\n    return NextResponse.json(\n      { \n        success: false,\n        error: \"Failed to fetch adaptation rules\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(req: NextRequest): Promise<NextResponse> {\n  try {\n    const body = await req.json();\n    const validation = AdaptationRuleListSchema.safeParse(body);\n\n    if (!validation.success) {\n      return NextResponse.json(\n        { \n          success: false,\n          error: \"Invalid request format\", \n          details: validation.error.format() \n        },\n        { status: 400 }\n      );\n    }\n\n    const { rules } = validation.data;\n\n    // Handle empty rules array\n    if (!rules.length) {\n      return NextResponse.json({\n        success: true,\n        rules: []\n      });\n    }\n\n    // Use transaction to ensure all rules are created or none\n    const createdRules = await prisma.$transaction(\n      rules.map(rule => \n        prisma.adaptationRule.create({\n          data: {\n            name: rule.name,\n            description: rule.description,\n            type: rule.type,\n            conditions: rule.conditions as Prisma.InputJsonValue,\n            actions: rule.actions as Prisma.InputJsonValue,\n            priority: rule.priority,\n            enabled: rule.enabled,\n          },\n        })\n      )\n    );\n\n    logger.info(\"Created adaptation rules:\", {\n      count: createdRules.length,\n      ruleIds: createdRules.map((r) => r.id),\n    });\n\n    return NextResponse.json({\n      success: true,\n      rules: createdRules,\n    });\n  } catch (error) {\n    logger.error(\"Failed to create adaptation rules:\", { error });\n    return NextResponse.json(\n      { \n        success: false,\n        error: \"Failed to create adaptation rules\",\n        details: error instanceof Error ? error.message : \"Unknown error\"\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"mappings":"AAAA,SAAS,cAAc;AACvB,OAAO,YAAY;AACnB,SAAS,oBAA4B;AACrC,SAAsB,oBAAoB;AAC1C,SAAS,SAAS;AAGX,aAAM,UAAU;AAEvB,MAAM,uBAAuB,EAAE,OAAO;AAAA,EACpC,IAAI,EAAE,OAAO,EAAE,SAAS;AAAA,EACxB,MAAM,EAAE,OAAO;AAAA,EACf,aAAa,EAAE,OAAO;AAAA,EACtB,MAAM,EAAE,OAAO;AAAA,EACf,YAAY,EAAE,OAAO,EAAE,QAAQ,CAAC;AAAA,EAChC,SAAS,EAAE,OAAO,EAAE,QAAQ,CAAC;AAAA,EAC7B,UAAU,EAAE,WAAW,YAAY;AAAA,EACnC,SAAS,EAAE,QAAQ,EAAE,QAAQ,IAAI;AACnC,CAAC;AAED,MAAM,2BAA2B,EAAE,OAAO;AAAA,EACxC,OAAO,EAAE,MAAM,oBAAoB;AACrC,CAAC;AAED,sBAAsB,MAA6B;AACjD,MAAI;AACF,UAAM,QAAQ,MAAM,OAAO,eAAe,SAAS;AAAA,MACjD,SAAS,EAAE,UAAU,MAAM;AAAA,IAC7B,CAAC;AAGD,WAAO,aAAa,KAAK;AAAA,MACvB,SAAS;AAAA,MACT,OAAO,SAAS,CAAC;AAAA,IACnB,CAAC;AAAA,EACH,SAAS,OAAO;AACd,WAAO,MAAM,qCAAqC,EAAE,MAAM,CAAC;AAC3D,WAAO,aAAa;AAAA,MAClB;AAAA,QACE,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MACpD;AAAA,MACA,EAAE,QAAQ,IAAI;AAAA,IAChB;AAAA,EACF;AACF;AAEA,sBAAsB,KAAK,KAAyC;AAClE,MAAI;AACF,UAAM,OAAO,MAAM,IAAI,KAAK;AAC5B,UAAM,aAAa,yBAAyB,UAAU,IAAI;AAE1D,QAAI,CAAC,WAAW,SAAS;AACvB,aAAO,aAAa;AAAA,QAClB;AAAA,UACE,SAAS;AAAA,UACT,OAAO;AAAA,UACP,SAAS,WAAW,MAAM,OAAO;AAAA,QACnC;AAAA,QACA,EAAE,QAAQ,IAAI;AAAA,MAChB;AAAA,IACF;AAEA,UAAM,EAAE,MAAM,IAAI,WAAW;AAG7B,QAAI,CAAC,MAAM,QAAQ;AACjB,aAAO,aAAa,KAAK;AAAA,QACvB,SAAS;AAAA,QACT,OAAO,CAAC;AAAA,MACV,CAAC;AAAA,IACH;AAGA,UAAM,eAAe,MAAM,OAAO;AAAA,MAChC,MAAM;AAAA,QAAI,UACR,OAAO,eAAe,OAAO;AAAA,UAC3B,MAAM;AAAA,YACJ,MAAM,KAAK;AAAA,YACX,aAAa,KAAK;AAAA,YAClB,MAAM,KAAK;AAAA,YACX,YAAY,KAAK;AAAA,YACjB,SAAS,KAAK;AAAA,YACd,UAAU,KAAK;AAAA,YACf,SAAS,KAAK;AAAA,UAChB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,WAAO,KAAK,6BAA6B;AAAA,MACvC,OAAO,aAAa;AAAA,MACpB,SAAS,aAAa,IAAI,CAAC,MAAM,EAAE,EAAE;AAAA,IACvC,CAAC;AAED,WAAO,aAAa,KAAK;AAAA,MACvB,SAAS;AAAA,MACT,OAAO;AAAA,IACT,CAAC;AAAA,EACH,SAAS,OAAO;AACd,WAAO,MAAM,sCAAsC,EAAE,MAAM,CAAC;AAC5D,WAAO,aAAa;AAAA,MAClB;AAAA,QACE,SAAS;AAAA,QACT,OAAO;AAAA,QACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,MACpD;AAAA,MACA,EAAE,QAAQ,IAAI;AAAA,IAChB;AAAA,EACF;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"4aabcba93b1551224652ed1505d8719860964fec"}}