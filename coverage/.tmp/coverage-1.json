{"/workspaces/sophra/src/lib/nous/observe/signals.ts":{"path":"/workspaces/sophra/src/lib/nous/observe/signals.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":49}},"1":{"start":{"line":6,"column":32},"end":{"line":6,"column":34}},"2":{"start":{"line":7,"column":4},"end":{"line":11,"column":5}},"3":{"start":{"line":8,"column":6},"end":{"line":10,"column":7}},"4":{"start":{"line":9,"column":8},"end":{"line":9,"column":47}},"5":{"start":{"line":12,"column":4},"end":{"line":12,"column":31}},"6":{"start":{"line":15,"column":4},"end":{"line":15,"column":49}},"7":{"start":{"line":18,"column":4},"end":{"line":18,"column":42}},"8":{"start":{"line":21,"column":4},"end":{"line":23,"column":5}},"9":{"start":{"line":22,"column":6},"end":{"line":22,"column":19}},"10":{"start":{"line":24,"column":21},"end":{"line":24,"column":36}},"11":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"12":{"start":{"line":26,"column":6},"end":{"line":26,"column":19}},"13":{"start":{"line":28,"column":18},"end":{"line":28,"column":30}},"14":{"start":{"line":29,"column":24},"end":{"line":29,"column":39}},"15":{"start":{"line":30,"column":4},"end":{"line":34,"column":5}},"16":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"17":{"start":{"line":32,"column":8},"end":{"line":32,"column":21}},"18":{"start":{"line":35,"column":4},"end":{"line":35,"column":69}},"19":{"start":{"line":40,"column":4},"end":{"line":40,"column":37}},"20":{"start":{"line":43,"column":30},"end":{"line":43,"column":32}},"21":{"start":{"line":44,"column":39},"end":{"line":44,"column":49}},"22":{"start":{"line":45,"column":4},"end":{"line":65,"column":5}},"23":{"start":{"line":46,"column":23},"end":{"line":46,"column":52}},"24":{"start":{"line":47,"column":24},"end":{"line":63,"column":7}},"25":{"start":{"line":64,"column":6},"end":{"line":64,"column":40}},"26":{"start":{"line":66,"column":4},"end":{"line":66,"column":29}},"27":{"start":{"line":69,"column":21},"end":{"line":69,"column":50}},"28":{"start":{"line":70,"column":4},"end":{"line":76,"column":6}},"29":{"start":{"line":79,"column":4},"end":{"line":85,"column":7}},"30":{"start":{"line":80,"column":24},"end":{"line":80,"column":34}},"31":{"start":{"line":81,"column":24},"end":{"line":81,"column":34}},"32":{"start":{"line":82,"column":24},"end":{"line":82,"column":48}},"33":{"start":{"line":83,"column":24},"end":{"line":83,"column":48}},"34":{"start":{"line":84,"column":6},"end":{"line":84,"column":51}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":2},"end":{"line":2,"column":3}},"loc":{"start":{"line":2,"column":16},"end":{"line":4,"column":3}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":5,"column":2},"end":{"line":5,"column":3}},"loc":{"start":{"line":5,"column":16},"end":{"line":13,"column":3}},"line":5},"2":{"name":"(anonymous_2)","decl":{"start":{"line":14,"column":2},"end":{"line":14,"column":3}},"loc":{"start":{"line":14,"column":45},"end":{"line":16,"column":3}},"line":14},"3":{"name":"(anonymous_3)","decl":{"start":{"line":17,"column":2},"end":{"line":17,"column":3}},"loc":{"start":{"line":17,"column":37},"end":{"line":19,"column":3}},"line":17},"4":{"name":"(anonymous_4)","decl":{"start":{"line":20,"column":2},"end":{"line":20,"column":3}},"loc":{"start":{"line":20,"column":38},"end":{"line":36,"column":3}},"line":20},"5":{"name":"(anonymous_5)","decl":{"start":{"line":39,"column":2},"end":{"line":39,"column":3}},"loc":{"start":{"line":39,"column":28},"end":{"line":41,"column":3}},"line":39},"6":{"name":"(anonymous_6)","decl":{"start":{"line":42,"column":2},"end":{"line":42,"column":3}},"loc":{"start":{"line":42,"column":25},"end":{"line":67,"column":3}},"line":42},"7":{"name":"(anonymous_7)","decl":{"start":{"line":68,"column":2},"end":{"line":68,"column":3}},"loc":{"start":{"line":68,"column":25},"end":{"line":77,"column":3}},"line":68},"8":{"name":"(anonymous_8)","decl":{"start":{"line":78,"column":2},"end":{"line":78,"column":3}},"loc":{"start":{"line":78,"column":22},"end":{"line":86,"column":3}},"line":78},"9":{"name":"(anonymous_9)","decl":{"start":{"line":79,"column":24},"end":{"line":79,"column":25}},"loc":{"start":{"line":79,"column":34},"end":{"line":85,"column":5}},"line":79}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":6},"end":{"line":10,"column":7}},"type":"if","locations":[{"start":{"line":8,"column":6},"end":{"line":10,"column":7}},{"start":{},"end":{}}],"line":8},"1":{"loc":{"start":{"line":21,"column":4},"end":{"line":23,"column":5}},"type":"if","locations":[{"start":{"line":21,"column":4},"end":{"line":23,"column":5}},{"start":{},"end":{}}],"line":21},"2":{"loc":{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},"type":"if","locations":[{"start":{"line":25,"column":4},"end":{"line":27,"column":5}},{"start":{},"end":{}}],"line":25},"3":{"loc":{"start":{"line":25,"column":8},"end":{"line":25,"column":129}},"type":"binary-expr","locations":[{"start":{"line":25,"column":8},"end":{"line":25,"column":37}},{"start":{"line":25,"column":42},"end":{"line":25,"column":83}},{"start":{"line":25,"column":87},"end":{"line":25,"column":128}}],"line":25},"4":{"loc":{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},"type":"if","locations":[{"start":{"line":31,"column":6},"end":{"line":33,"column":7}},{"start":{},"end":{}}],"line":31},"5":{"loc":{"start":{"line":31,"column":10},"end":{"line":31,"column":72}},"type":"binary-expr","locations":[{"start":{"line":31,"column":10},"end":{"line":31,"column":36}},{"start":{"line":31,"column":40},"end":{"line":31,"column":72}}],"line":31},"6":{"loc":{"start":{"line":35,"column":11},"end":{"line":35,"column":68}},"type":"binary-expr","locations":[{"start":{"line":35,"column":11},"end":{"line":35,"column":34}},{"start":{"line":35,"column":38},"end":{"line":35,"column":68}}],"line":35},"7":{"loc":{"start":{"line":82,"column":24},"end":{"line":82,"column":48}},"type":"binary-expr","locations":[{"start":{"line":82,"column":24},"end":{"line":82,"column":43}},{"start":{"line":82,"column":47},"end":{"line":82,"column":48}}],"line":82},"8":{"loc":{"start":{"line":83,"column":24},"end":{"line":83,"column":48}},"type":"binary-expr","locations":[{"start":{"line":83,"column":24},"end":{"line":83,"column":43}},{"start":{"line":83,"column":47},"end":{"line":83,"column":48}}],"line":83}},"s":{"0":4,"1":4,"2":4,"3":4,"4":2,"5":4,"6":4,"7":1,"8":4,"9":1,"10":3,"11":3,"12":0,"13":3,"14":3,"15":3,"16":3,"17":0,"18":3,"19":5,"20":2,"21":2,"22":2,"23":4,"24":4,"25":4,"26":2,"27":1,"28":1,"29":4,"30":7,"31":7,"32":7,"33":7,"34":7},"f":{"0":4,"1":4,"2":4,"3":1,"4":4,"5":5,"6":2,"7":1,"8":4,"9":7},"b":{"0":[2,2],"1":[1,3],"2":[0,3],"3":[3,3,3],"4":[0,3],"5":[3,0],"6":[3,2],"7":[7,1],"8":[7,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/lib/nous/observe/signals.ts"],"sourcesContent":["import { Signal, SignalPattern, SignalType, Prisma } from \"@prisma/client\";\n\ninterface SignalMetadata {\n  strength?: number;\n  priority?: number;\n  processing_time?: number;\n  transformations?: string[];\n  processor_id?: string;\n  confidence?: number;\n}\n\ninterface SignalData {\n  [key: string]: unknown;\n  features?: Record<string, unknown>;\n}\n\nexport interface SignalProcessor {\n  processor_id: string;\n  process_signal(signal: Signal): Signal;\n  process_batch(signals: Signal[]): Signal[];\n  extract_features(signal: Signal): Record<string, unknown>;\n  detect_patterns(signals: Signal[]): SignalPattern[];\n  prioritize(signals: Signal[]): Signal[];\n}\n\nexport interface ProcessorCriteria {\n  signal_types: SignalType[];\n  min_strength: number;\n  max_strength: number;\n  required_fields: string[];\n  custom_filter?: (signal: Signal) => boolean;\n}\n\nexport class SignalRouter {\n  private _processors: Map<string, ProcessorCriteria> = new Map();\n\n  route(signal: Signal): string[] {\n    const matching_processors: string[] = [];\n\n    for (const [processor_id, criteria] of Array.from(this._processors.entries())) {\n      if (this._matches_criteria(signal, criteria)) {\n        matching_processors.push(processor_id);\n      }\n    }\n\n    return matching_processors;\n  }\n\n  register_processor(processor_id: string, criteria: ProcessorCriteria): void {\n    this._processors.set(processor_id, criteria);\n  }\n\n  unregister_processor(processor_id: string): void {\n    this._processors.delete(processor_id);\n  }\n\n  private _matches_criteria(\n    signal: Signal,\n    criteria: ProcessorCriteria\n  ): boolean {\n    // Check signal type\n    if (!criteria.signal_types.includes(signal.type)) {\n      return false;\n    }\n\n    const metadata = signal.metadata as SignalMetadata;\n    // Check strength bounds\n    if (\n      metadata?.strength !== undefined &&\n      (metadata.strength < criteria.min_strength ||\n       metadata.strength > criteria.max_strength)\n    ) {\n      return false;\n    }\n\n    // Check required fields in both value and metadata\n    const value = signal.value as SignalData;\n    const metadataObj = signal.metadata as Record<string, unknown>;\n    for (const required_field of criteria.required_fields) {\n      if (!(required_field in value) && !(required_field in metadataObj)) {\n        return false;\n      }\n    }\n\n    // Apply custom filter if present\n    return !criteria.custom_filter || criteria.custom_filter(signal);\n  }\n}\n\nexport abstract class BaseSignalProcessor implements SignalProcessor {\n  constructor(public processor_id: string) {}\n\n  process_batch(signals: Signal[]): Signal[] {\n    const processed_signals: Signal[] = [];\n    const start_time = new Date();\n\n    for (const signal of this.prioritize(signals)) {\n      const features = this.extract_features(signal);\n      const processed: Signal = {\n        ...signal,\n        id: `proc_${signal.id}`,\n        value: {\n          ...(signal.value as SignalData),\n          features\n        } as Prisma.JsonValue,\n        source: this.processor_id,\n        metadata: {\n          ...(signal.metadata as SignalMetadata),\n          processing_time: (new Date().getTime() - start_time.getTime()) / 1000,\n          transformations: [\"feature_extraction\"],\n          processor_id: this.processor_id,\n          confidence: 1.0, // Should be overridden by implementations\n        } as Prisma.JsonValue,\n      };\n      processed_signals.push(processed);\n    }\n\n    return processed_signals;\n  }\n\n  abstract extract_features(signal: Signal): Record<string, unknown>;\n  abstract detect_patterns(signals: Signal[]): SignalPattern[];\n\n  process_signal(signal: Signal): Signal {\n    const features = this.extract_features(signal);\n    return {\n      ...signal,\n      value: {\n        ...(signal.value as SignalData),\n        features\n      } as Prisma.JsonValue\n    };\n  }\n\n  prioritize(signals: Signal[]): Signal[] {\n    return signals.sort((a, b) => {\n      const bMetadata = b.metadata as SignalMetadata;\n      const aMetadata = a.metadata as SignalMetadata;\n      const bPriority = bMetadata?.priority ?? 0;\n      const aPriority = aMetadata?.priority ?? 0;\n      return Number(bPriority) - Number(aPriority);\n    });\n  }\n}\n"],"mappings":"AAiCO,aAAM,aAAa;AAAA,EAAnB;AACL,SAAQ,cAA8C,oBAAI,IAAI;AAAA;AAAA,EAE9D,MAAM,QAA0B;AAC9B,UAAM,sBAAgC,CAAC;AAEvC,eAAW,CAAC,cAAc,QAAQ,KAAK,MAAM,KAAK,KAAK,YAAY,QAAQ,CAAC,GAAG;AAC7E,UAAI,KAAK,kBAAkB,QAAQ,QAAQ,GAAG;AAC5C,4BAAoB,KAAK,YAAY;AAAA,MACvC;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,mBAAmB,cAAsB,UAAmC;AAC1E,SAAK,YAAY,IAAI,cAAc,QAAQ;AAAA,EAC7C;AAAA,EAEA,qBAAqB,cAA4B;AAC/C,SAAK,YAAY,OAAO,YAAY;AAAA,EACtC;AAAA,EAEQ,kBACN,QACA,UACS;AAET,QAAI,CAAC,SAAS,aAAa,SAAS,OAAO,IAAI,GAAG;AAChD,aAAO;AAAA,IACT;AAEA,UAAM,WAAW,OAAO;AAExB,QACE,UAAU,aAAa,WACtB,SAAS,WAAW,SAAS,gBAC7B,SAAS,WAAW,SAAS,eAC9B;AACA,aAAO;AAAA,IACT;AAGA,UAAM,QAAQ,OAAO;AACrB,UAAM,cAAc,OAAO;AAC3B,eAAW,kBAAkB,SAAS,iBAAiB;AACrD,UAAI,EAAE,kBAAkB,UAAU,EAAE,kBAAkB,cAAc;AAClE,eAAO;AAAA,MACT;AAAA,IACF;AAGA,WAAO,CAAC,SAAS,iBAAiB,SAAS,cAAc,MAAM;AAAA,EACjE;AACF;AAEO,aAAe,oBAA+C;AAAA,EACnE,YAAmB,cAAsB;AAAtB;AAAA,EAAuB;AAAA,EAE1C,cAAc,SAA6B;AACzC,UAAM,oBAA8B,CAAC;AACrC,UAAM,aAAa,oBAAI,KAAK;AAE5B,eAAW,UAAU,KAAK,WAAW,OAAO,GAAG;AAC7C,YAAM,WAAW,KAAK,iBAAiB,MAAM;AAC7C,YAAM,YAAoB;AAAA,QACxB,GAAG;AAAA,QACH,IAAI,QAAQ,OAAO,EAAE;AAAA,QACrB,OAAO;AAAA,UACL,GAAI,OAAO;AAAA,UACX;AAAA,QACF;AAAA,QACA,QAAQ,KAAK;AAAA,QACb,UAAU;AAAA,UACR,GAAI,OAAO;AAAA,UACX,mBAAkB,oBAAI,KAAK,GAAE,QAAQ,IAAI,WAAW,QAAQ,KAAK;AAAA,UACjE,iBAAiB,CAAC,oBAAoB;AAAA,UACtC,cAAc,KAAK;AAAA,UACnB,YAAY;AAAA;AAAA,QACd;AAAA,MACF;AACA,wBAAkB,KAAK,SAAS;AAAA,IAClC;AAEA,WAAO;AAAA,EACT;AAAA,EAKA,eAAe,QAAwB;AACrC,UAAM,WAAW,KAAK,iBAAiB,MAAM;AAC7C,WAAO;AAAA,MACL,GAAG;AAAA,MACH,OAAO;AAAA,QACL,GAAI,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,WAAW,SAA6B;AACtC,WAAO,QAAQ,KAAK,CAAC,GAAG,MAAM;AAC5B,YAAM,YAAY,EAAE;AACpB,YAAM,YAAY,EAAE;AACpB,YAAM,YAAY,WAAW,YAAY;AACzC,YAAM,YAAY,WAAW,YAAY;AACzC,aAAO,OAAO,SAAS,IAAI,OAAO,SAAS;AAAA,IAC7C,CAAC;AAAA,EACH;AACF;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"49c53212f7c150bc23220b802c49511f139c3a4f"}}