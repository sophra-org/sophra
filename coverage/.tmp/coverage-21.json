{"/workspaces/sophra/src/app/api/cortex/feedback/__mocks__/next-server.ts":{"path":"/workspaces/sophra/src/app/api/cortex/feedback/__mocks__/next-server.ts","statementMap":{"0":{"start":{"line":3,"column":4},"end":{"line":3,"column":19}},"1":{"start":{"line":4,"column":4},"end":{"line":4,"column":33}},"2":{"start":{"line":5,"column":4},"end":{"line":5,"column":31}},"3":{"start":{"line":8,"column":4},"end":{"line":8,"column":38}},"4":{"start":{"line":11,"column":28},"end":{"line":19,"column":1}},"5":{"start":{"line":12,"column":19},"end":{"line":17,"column":3}},"6":{"start":{"line":16,"column":22},"end":{"line":16,"column":26}},"7":{"start":{"line":18,"column":2},"end":{"line":18,"column":18}},"8":{"start":{"line":20,"column":28},"end":{"line":22,"column":1}},"9":{"start":{"line":21,"column":24},"end":{"line":21,"column":48}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":2},"end":{"line":2,"column":3}},"loc":{"start":{"line":2,"column":25},"end":{"line":6,"column":3}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":7,"column":2},"end":{"line":7,"column":3}},"loc":{"start":{"line":7,"column":9},"end":{"line":9,"column":3}},"line":7},"2":{"name":"(anonymous_2)","decl":{"start":{"line":11,"column":28},"end":{"line":11,"column":29}},"loc":{"start":{"line":11,"column":44},"end":{"line":19,"column":1}},"line":11},"3":{"name":"(anonymous_3)","decl":{"start":{"line":16,"column":10},"end":{"line":16,"column":11}},"loc":{"start":{"line":16,"column":22},"end":{"line":16,"column":26}},"line":16},"4":{"name":"(anonymous_4)","decl":{"start":{"line":21,"column":8},"end":{"line":21,"column":9}},"loc":{"start":{"line":21,"column":24},"end":{"line":21,"column":48}},"line":21}},"branchMap":{"0":{"loc":{"start":{"line":4,"column":16},"end":{"line":4,"column":32}},"type":"binary-expr","locations":[{"start":{"line":4,"column":16},"end":{"line":4,"column":26}},{"start":{"line":4,"column":30},"end":{"line":4,"column":32}}],"line":4},"1":{"loc":{"start":{"line":13,"column":12},"end":{"line":13,"column":31}},"type":"binary-expr","locations":[{"start":{"line":13,"column":12},"end":{"line":13,"column":24}},{"start":{"line":13,"column":28},"end":{"line":13,"column":31}}],"line":13},"2":{"loc":{"start":{"line":15,"column":8},"end":{"line":15,"column":69}},"type":"cond-expr","locations":[{"start":{"line":15,"column":23},"end":{"line":15,"column":62}},{"start":{"line":15,"column":65},"end":{"line":15,"column":69}}],"line":15},"3":{"loc":{"start":{"line":15,"column":23},"end":{"line":15,"column":62}},"type":"binary-expr","locations":[{"start":{"line":15,"column":23},"end":{"line":15,"column":41}},{"start":{"line":15,"column":45},"end":{"line":15,"column":62}}],"line":15}},"s":{"0":7,"1":7,"2":7,"3":3,"4":1,"5":7,"6":7,"7":7,"8":1,"9":7},"f":{"0":7,"1":3,"2":7,"3":7,"4":7},"b":{"0":[7,3],"1":[7,3],"2":[4,3],"3":[4,4]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/api/cortex/feedback/__mocks__/next-server.ts"],"sourcesContent":["export class MockNextRequest {\n    url: string;\n    private body: string;\n    method?: string;\n    \n    constructor(url: string, init?: { method?: string; body?: string }) {\n        this.url = url;\n        this.body = init?.body || '';\n        this.method = init?.method;\n    }\n    \n    text() {\n        return Promise.resolve(this.body);\n    }\n}\n\nexport const mockResponse = (data: any, init?: ResponseInit) => {\n    const response = {\n        status: init?.status || 200,\n        headers: new Headers(init?.headers),\n        ok: init?.status ? init.status >= 200 && init.status < 300 : true,\n        json: async () => data\n    };\n    return response;\n};\n\nexport const NextResponse = {\n    json: (data: any, init?: ResponseInit) => mockResponse(data, init)\n};\n\nexport { MockNextRequest as NextRequest }; "],"mappings":"AAAO,aAAM,gBAAgB;AAAA,EAKzB,YAAY,KAAa,MAA2C;AAChE,SAAK,MAAM;AACX,SAAK,OAAO,MAAM,QAAQ;AAC1B,SAAK,SAAS,MAAM;AAAA,EACxB;AAAA,EAEA,OAAO;AACH,WAAO,QAAQ,QAAQ,KAAK,IAAI;AAAA,EACpC;AACJ;AAEO,aAAM,eAAe,CAAC,MAAW,SAAwB;AAC5D,QAAM,WAAW;AAAA,IACb,QAAQ,MAAM,UAAU;AAAA,IACxB,SAAS,IAAI,QAAQ,MAAM,OAAO;AAAA,IAClC,IAAI,MAAM,SAAS,KAAK,UAAU,OAAO,KAAK,SAAS,MAAM;AAAA,IAC7D,MAAM,YAAY;AAAA,EACtB;AACA,SAAO;AACX;AAEO,aAAM,eAAe;AAAA,EACxB,MAAM,CAAC,MAAW,SAAwB,aAAa,MAAM,IAAI;AACrE;AAEA,SAAS,mBAAmB;","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3db7689ba657789d9236bba08e81cbe0ce49ca6e"},"/workspaces/sophra/src/app/api/cortex/feedback/route.ts":{"path":"/workspaces/sophra/src/app/api/cortex/feedback/route.ts","statementMap":{"0":{"start":{"line":7,"column":23},"end":{"line":7,"column":31}},"1":{"start":{"line":8,"column":33},"end":{"line":19,"column":20}},"2":{"start":{"line":9,"column":2},"end":{"line":9,"column":35}},"3":{"start":{"line":10,"column":2},"end":{"line":10,"column":45}},"4":{"start":{"line":11,"column":2},"end":{"line":11,"column":71}},"5":{"start":{"line":12,"column":2},"end":{"line":12,"column":59}},"6":{"start":{"line":13,"column":2},"end":{"line":13,"column":61}},"7":{"start":{"line":14,"column":2},"end":{"line":14,"column":71}},"8":{"start":{"line":15,"column":2},"end":{"line":15,"column":57}},"9":{"start":{"line":16,"column":2},"end":{"line":16,"column":39}},"10":{"start":{"line":17,"column":2},"end":{"line":17,"column":49}},"11":{"start":{"line":18,"column":2},"end":{"line":18,"column":21}},"12":{"start":{"line":20,"column":37},"end":{"line":26,"column":24}},"13":{"start":{"line":21,"column":2},"end":{"line":21,"column":47}},"14":{"start":{"line":22,"column":2},"end":{"line":22,"column":35}},"15":{"start":{"line":23,"column":2},"end":{"line":23,"column":37}},"16":{"start":{"line":24,"column":2},"end":{"line":24,"column":47}},"17":{"start":{"line":25,"column":2},"end":{"line":25,"column":25}},"18":{"start":{"line":27,"column":23},"end":{"line":43,"column":2}},"19":{"start":{"line":45,"column":2},"end":{"line":52,"column":3}},"20":{"start":{"line":47,"column":6},"end":{"line":47,"column":23}},"21":{"start":{"line":49,"column":6},"end":{"line":49,"column":25}},"22":{"start":{"line":51,"column":6},"end":{"line":51,"column":23}},"23":{"start":{"line":55,"column":20},"end":{"line":55,"column":30}},"24":{"start":{"line":56,"column":2},"end":{"line":98,"column":3}},"25":{"start":{"line":57,"column":29},"end":{"line":57,"column":45}},"26":{"start":{"line":58,"column":22},"end":{"line":58,"column":60}},"27":{"start":{"line":59,"column":18},"end":{"line":59,"column":66}},"28":{"start":{"line":60,"column":25},"end":{"line":65,"column":5}},"29":{"start":{"line":66,"column":22},"end":{"line":66,"column":68}},"30":{"start":{"line":67,"column":21},"end":{"line":75,"column":6}},"31":{"start":{"line":76,"column":20},"end":{"line":76,"column":42}},"32":{"start":{"line":77,"column":4},"end":{"line":86,"column":7}},"33":{"start":{"line":88,"column":4},"end":{"line":88,"column":56}},"34":{"start":{"line":89,"column":4},"end":{"line":97,"column":6}},"35":{"start":{"line":101,"column":20},"end":{"line":101,"column":30}},"36":{"start":{"line":102,"column":16},"end":{"line":102,"column":20}},"37":{"start":{"line":103,"column":17},"end":{"line":103,"column":21}},"38":{"start":{"line":104,"column":2},"end":{"line":259,"column":3}},"39":{"start":{"line":105,"column":4},"end":{"line":105,"column":50}},"40":{"start":{"line":106,"column":4},"end":{"line":109,"column":5}},"41":{"start":{"line":107,"column":6},"end":{"line":107,"column":53}},"42":{"start":{"line":108,"column":6},"end":{"line":108,"column":58}},"43":{"start":{"line":110,"column":4},"end":{"line":110,"column":31}},"44":{"start":{"line":111,"column":17},"end":{"line":111,"column":37}},"45":{"start":{"line":112,"column":23},"end":{"line":112,"column":53}},"46":{"start":{"line":113,"column":4},"end":{"line":128,"column":5}},"47":{"start":{"line":114,"column":6},"end":{"line":118,"column":9}},"48":{"start":{"line":119,"column":6},"end":{"line":127,"column":8}},"49":{"start":{"line":129,"column":25},"end":{"line":129,"column":40}},"50":{"start":{"line":130,"column":22},"end":{"line":130,"column":64}},"51":{"start":{"line":132,"column":4},"end":{"line":183,"column":5}},"52":{"start":{"line":133,"column":22},"end":{"line":137,"column":8}},"53":{"start":{"line":138,"column":6},"end":{"line":152,"column":7}},"54":{"start":{"line":139,"column":8},"end":{"line":142,"column":11}},"55":{"start":{"line":143,"column":8},"end":{"line":151,"column":10}},"56":{"start":{"line":153,"column":6},"end":{"line":167,"column":9}},"57":{"start":{"line":169,"column":6},"end":{"line":179,"column":9}},"58":{"start":{"line":180,"column":6},"end":{"line":182,"column":8}},"59":{"start":{"line":184,"column":4},"end":{"line":206,"column":5}},"60":{"start":{"line":185,"column":6},"end":{"line":199,"column":8}},"61":{"start":{"line":186,"column":32},"end":{"line":198,"column":9}},"62":{"start":{"line":201,"column":6},"end":{"line":204,"column":9}},"63":{"start":{"line":205,"column":6},"end":{"line":205,"column":52}},"64":{"start":{"line":207,"column":4},"end":{"line":230,"column":7}},"65":{"start":{"line":213,"column":42},"end":{"line":218,"column":9}},"66":{"start":{"line":221,"column":53},"end":{"line":221,"column":62}},"67":{"start":{"line":222,"column":53},"end":{"line":222,"column":67}},"68":{"start":{"line":223,"column":39},"end":{"line":223,"column":60}},"69":{"start":{"line":232,"column":4},"end":{"line":242,"column":7}},"70":{"start":{"line":243,"column":4},"end":{"line":258,"column":6}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":34},"end":{"line":8,"column":35}},"loc":{"start":{"line":8,"column":51},"end":{"line":19,"column":1}},"line":8},"1":{"name":"(anonymous_1)","decl":{"start":{"line":20,"column":38},"end":{"line":20,"column":39}},"loc":{"start":{"line":20,"column":59},"end":{"line":26,"column":1}},"line":20},"2":{"name":"mapToCortexUserAction","decl":{"start":{"line":44,"column":9},"end":{"line":44,"column":30}},"loc":{"start":{"line":44,"column":39},"end":{"line":53,"column":1}},"line":44},"3":{"name":"GET","decl":{"start":{"line":54,"column":22},"end":{"line":54,"column":25}},"loc":{"start":{"line":54,"column":31},"end":{"line":99,"column":1}},"line":54},"4":{"name":"POST","decl":{"start":{"line":100,"column":22},"end":{"line":100,"column":26}},"loc":{"start":{"line":100,"column":32},"end":{"line":260,"column":1}},"line":100},"5":{"name":"(anonymous_5)","decl":{"start":{"line":186,"column":21},"end":{"line":186,"column":22}},"loc":{"start":{"line":186,"column":32},"end":{"line":198,"column":9}},"line":186},"6":{"name":"(anonymous_6)","decl":{"start":{"line":213,"column":31},"end":{"line":213,"column":32}},"loc":{"start":{"line":213,"column":42},"end":{"line":218,"column":9}},"line":213},"7":{"name":"(anonymous_7)","decl":{"start":{"line":221,"column":46},"end":{"line":221,"column":47}},"loc":{"start":{"line":221,"column":53},"end":{"line":221,"column":62}},"line":221},"8":{"name":"(anonymous_8)","decl":{"start":{"line":222,"column":41},"end":{"line":222,"column":42}},"loc":{"start":{"line":222,"column":53},"end":{"line":222,"column":67}},"line":222},"9":{"name":"(anonymous_9)","decl":{"start":{"line":223,"column":32},"end":{"line":223,"column":33}},"loc":{"start":{"line":223,"column":39},"end":{"line":223,"column":60}},"line":223}},"branchMap":{"0":{"loc":{"start":{"line":19,"column":3},"end":{"line":19,"column":19}},"type":"binary-expr","locations":[{"start":{"line":19,"column":3},"end":{"line":19,"column":13}},{"start":{"line":19,"column":17},"end":{"line":19,"column":19}}],"line":19},"1":{"loc":{"start":{"line":26,"column":3},"end":{"line":26,"column":23}},"type":"binary-expr","locations":[{"start":{"line":26,"column":3},"end":{"line":26,"column":17}},{"start":{"line":26,"column":21},"end":{"line":26,"column":23}}],"line":26},"2":{"loc":{"start":{"line":45,"column":2},"end":{"line":52,"column":3}},"type":"switch","locations":[{"start":{"line":46,"column":4},"end":{"line":47,"column":23}},{"start":{"line":48,"column":4},"end":{"line":49,"column":25}},{"start":{"line":50,"column":4},"end":{"line":51,"column":23}}],"line":45},"3":{"loc":{"start":{"line":58,"column":22},"end":{"line":58,"column":60}},"type":"binary-expr","locations":[{"start":{"line":58,"column":22},"end":{"line":58,"column":51}},{"start":{"line":58,"column":55},"end":{"line":58,"column":60}}],"line":58},"4":{"loc":{"start":{"line":59,"column":27},"end":{"line":59,"column":61}},"type":"binary-expr","locations":[{"start":{"line":59,"column":27},"end":{"line":59,"column":52}},{"start":{"line":59,"column":56},"end":{"line":59,"column":61}}],"line":59},"5":{"loc":{"start":{"line":93,"column":17},"end":{"line":93,"column":73}},"type":"cond-expr","locations":[{"start":{"line":93,"column":42},"end":{"line":93,"column":55}},{"start":{"line":93,"column":58},"end":{"line":93,"column":73}}],"line":93},"6":{"loc":{"start":{"line":106,"column":4},"end":{"line":109,"column":5}},"type":"if","locations":[{"start":{"line":106,"column":4},"end":{"line":109,"column":5}},{"start":{},"end":{}}],"line":106},"7":{"loc":{"start":{"line":113,"column":4},"end":{"line":128,"column":5}},"type":"if","locations":[{"start":{"line":113,"column":4},"end":{"line":128,"column":5}},{"start":{},"end":{}}],"line":113},"8":{"loc":{"start":{"line":138,"column":6},"end":{"line":152,"column":7}},"type":"if","locations":[{"start":{"line":138,"column":6},"end":{"line":152,"column":7}},{"start":{},"end":{}}],"line":138},"9":{"loc":{"start":{"line":173,"column":22},"end":{"line":177,"column":32}},"type":"cond-expr","locations":[{"start":{"line":173,"column":49},"end":{"line":177,"column":9}},{"start":{"line":177,"column":12},"end":{"line":177,"column":32}}],"line":173},"10":{"loc":{"start":{"line":181,"column":38},"end":{"line":181,"column":98}},"type":"cond-expr","locations":[{"start":{"line":181,"column":65},"end":{"line":181,"column":80}},{"start":{"line":181,"column":83},"end":{"line":181,"column":98}}],"line":181},"11":{"loc":{"start":{"line":235,"column":17},"end":{"line":235,"column":79}},"type":"cond-expr","locations":[{"start":{"line":235,"column":42},"end":{"line":235,"column":64}},{"start":{"line":235,"column":67},"end":{"line":235,"column":79}}],"line":235},"12":{"loc":{"start":{"line":236,"column":15},"end":{"line":236,"column":69}},"type":"cond-expr","locations":[{"start":{"line":236,"column":40},"end":{"line":236,"column":53}},{"start":{"line":236,"column":56},"end":{"line":236,"column":69}}],"line":236},"13":{"loc":{"start":{"line":237,"column":13},"end":{"line":237,"column":58}},"type":"cond-expr","locations":[{"start":{"line":237,"column":38},"end":{"line":237,"column":49}},{"start":{"line":237,"column":52},"end":{"line":237,"column":58}}],"line":237},"14":{"loc":{"start":{"line":239,"column":19},"end":{"line":239,"column":52}},"type":"cond-expr","locations":[{"start":{"line":239,"column":40},"end":{"line":239,"column":44}},{"start":{"line":239,"column":47},"end":{"line":239,"column":52}}],"line":239},"15":{"loc":{"start":{"line":240,"column":18},"end":{"line":240,"column":55}},"type":"cond-expr","locations":[{"start":{"line":240,"column":29},"end":{"line":240,"column":50}},{"start":{"line":240,"column":53},"end":{"line":240,"column":55}}],"line":240},"16":{"loc":{"start":{"line":247,"column":17},"end":{"line":247,"column":73}},"type":"cond-expr","locations":[{"start":{"line":247,"column":42},"end":{"line":247,"column":55}},{"start":{"line":247,"column":58},"end":{"line":247,"column":73}}],"line":247},"17":{"loc":{"start":{"line":250,"column":17},"end":{"line":250,"column":62}},"type":"cond-expr","locations":[{"start":{"line":250,"column":42},"end":{"line":250,"column":53}},{"start":{"line":250,"column":56},"end":{"line":250,"column":62}}],"line":250},"18":{"loc":{"start":{"line":252,"column":23},"end":{"line":252,"column":56}},"type":"cond-expr","locations":[{"start":{"line":252,"column":44},"end":{"line":252,"column":48}},{"start":{"line":252,"column":51},"end":{"line":252,"column":56}}],"line":252},"19":{"loc":{"start":{"line":253,"column":22},"end":{"line":253,"column":59}},"type":"cond-expr","locations":[{"start":{"line":253,"column":33},"end":{"line":253,"column":54}},{"start":{"line":253,"column":57},"end":{"line":253,"column":59}}],"line":253}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":2,"20":2,"21":0,"22":0,"23":3,"24":3,"25":3,"26":3,"27":3,"28":3,"29":3,"30":3,"31":2,"32":2,"33":1,"34":1,"35":4,"36":4,"37":4,"38":4,"39":4,"40":4,"41":1,"42":1,"43":3,"44":3,"45":3,"46":3,"47":0,"48":0,"49":3,"50":3,"51":3,"52":3,"53":3,"54":1,"55":1,"56":2,"57":0,"58":0,"59":2,"60":2,"61":2,"62":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"69":2,"70":2},"f":{"0":1,"1":1,"2":2,"3":3,"4":4,"5":2,"6":1,"7":1,"8":1,"9":1},"b":{"0":[1,1],"1":[1,1],"2":[2,0,0],"3":[3,2],"4":[3,2],"5":[1,0],"6":[1,3],"7":[0,3],"8":[1,2],"9":[0,0],"10":[0,0],"11":[2,0],"12":[2,0],"13":[2,0],"14":[1,1],"15":[2,0],"16":[2,0],"17":[2,0],"18":[1,1],"19":[2,0]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/api/cortex/feedback/route.ts"],"sourcesContent":["import { serviceManager } from \"@/lib/cortex/utils/service-manager\";\nimport { prisma } from \"@/lib/shared/database/client\";\nimport logger from \"@/lib/shared/logger\";\nimport JSON5 from \"json5\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { z } from \"zod\";\n// Declare Node.js runtime\nexport const runtime = \"nodejs\";\n\n\nenum SignalType {\n  SEARCH = \"SEARCH\",\n  PERFORMANCE = \"PERFORMANCE\",\n  USER_BEHAVIOR_IMPRESSION = \"USER_BEHAVIOR_IMPRESSION\",\n  USER_BEHAVIOR_VIEW = \"USER_BEHAVIOR_VIEW\",\n  USER_BEHAVIOR_CLICK = \"USER_BEHAVIOR_CLICK\",\n  USER_BEHAVIOR_CONVERSION = \"USER_BEHAVIOR_CONVERSION\",\n  MODEL_PERFORMANCE = \"MODEL_PERFORMANCE\",\n  FEEDBACK = \"FEEDBACK\",\n  SYSTEM_HEALTH = \"SYSTEM_HEALTH\",\n}\n\nenum EngagementType {\n  IMPRESSION = \"IMPRESSION\",\n  VIEW = \"VIEW\",\n  CLICK = \"CLICK\",\n  CONVERSION = \"CONVERSION\",\n}\n\nconst FeedbackSchema = z.object({\n  sessionId: z.string(),\n  feedback: z.array(\n    z.object({\n      queryId: z.string(),\n      rating: z.number().min(0).max(1),\n      metadata: z.object({\n        userAction: z.nativeEnum(SignalType),\n        resultId: z.string(),\n        queryHash: z.string(),\n        customMetadata: z.record(z.unknown()).optional(),\n        timestamp: z.string().datetime(),\n        engagementType: z.nativeEnum(EngagementType).optional(),\n      }),\n    })\n  ),\n});\n\nfunction mapToCortexUserAction(\n  action: SignalType\n): \"clicked\" | \"ignored\" | \"converted\" {\n  switch (action) {\n    case SignalType.USER_BEHAVIOR_CLICK:\n      return \"clicked\";\n    case SignalType.USER_BEHAVIOR_CONVERSION:\n      return \"converted\";\n    default:\n      return \"ignored\";\n  }\n}\n\nexport async function GET(req: NextRequest): Promise<NextResponse> {\n  const startTime = Date.now();\n  try {\n    const { searchParams } = new URL(req.url);\n    const timeframe = searchParams.get(\"timeframe\") || \"24h\";\n    const limit = parseInt(searchParams.get(\"limit\") || \"100\", 10);\n\n    const timeframeMap: Record<string, number> = {\n      \"1h\": 60 * 60 * 1000,\n      \"24h\": 24 * 60 * 60 * 1000,\n      \"7d\": 7 * 24 * 60 * 60 * 1000,\n      \"30d\": 30 * 24 * 60 * 60 * 1000,\n    };\n\n    const startDate = new Date(Date.now() - timeframeMap[timeframe]);\n\n    const feedback = await prisma.feedbackRequest.findMany({\n      where: {\n        timestamp: {\n          gte: startDate,\n        },\n      },\n      orderBy: { timestamp: \"desc\" },\n      take: limit,\n    });\n\n    const latency = Date.now() - startTime;\n\n    return NextResponse.json({\n      success: true,\n      data: feedback,\n      metadata: {\n        generated_at: new Date().toISOString(),\n        timeframe,\n        total_records: feedback.length,\n        took: latency,\n      },\n    });\n  } catch (error) {\n    logger.error(\"Failed to fetch feedback\", { error });\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to fetch feedback\",\n        details: error instanceof Error ? error.message : \"Unknown error\",\n        meta: { took: Date.now() - startTime },\n      },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(req: NextRequest): Promise<NextResponse> {\n  const startTime = Date.now();\n  let rawBody = null;\n  let services = null;\n\n  try {\n    services = await serviceManager.getServices();\n\n    if (!services.feedback) {\n      logger.error(\"Feedback service not available\");\n      throw new Error(\"Feedback service not initialized\");\n    }\n\n    rawBody = await req.text();\n    const body = JSON5.parse(rawBody);\n    const validation = FeedbackSchema.safeParse(body);\n\n    if (!validation.success) {\n      logger.error(\"Invalid feedback request\", {\n        errors: validation.error.format(),\n        received: body,\n        rawBody,\n      });\n      return NextResponse.json(\n        {\n          success: false,\n          error: \"Invalid request format\",\n          details: validation.error.format(),\n          rawInput: rawBody,\n        },\n        { status: 400 }\n      );\n    }\n\n    const { feedback } = validation.data;\n    const timestamp = new Date().toISOString();\n\n    // Create search event with error handling\n    let searchEvent;\n    try {\n      // First, verify the session exists\n      const session = await prisma.session.findUnique({\n        where: {\n          id: validation.data.sessionId,\n        },\n      });\n\n      if (!session) {\n        logger.error(\"Session not found\", {\n          sessionId: validation.data.sessionId,\n          timestamp: new Date().toISOString(),\n        });\n        return NextResponse.json(\n          {\n            success: false,\n            error: \"Invalid session\",\n            details: \"Session not found\",\n            sessionId: validation.data.sessionId,\n          },\n          { status: 404 }\n        );\n      }\n\n      searchEvent = await prisma.searchEvent.create({\n        data: {\n          timestamp: new Date(),\n          filters: {},\n          query: feedback[0].metadata.queryHash,\n          searchType: \"FEEDBACK\",\n          totalHits: 0,\n          took: 0,\n          session: {\n            connect: {\n              id: validation.data.sessionId,\n            },\n          },\n        },\n      });\n    } catch (dbError) {\n      logger.error(\"Failed to create search event\", {\n        error: dbError,\n        sessionId: validation.data.sessionId,\n        queryHash: feedback[0].metadata.queryHash,\n        errorDetails:\n          dbError instanceof Error\n            ? {\n                message: dbError.message,\n                name: dbError.name,\n                stack: dbError.stack,\n              }\n            : \"Unknown error type\",\n        timestamp: new Date().toISOString(),\n      });\n      throw new Error(\n        `Database operation failed: ${dbError instanceof Error ? dbError.message : \"Unknown error\"}`\n      );\n    }\n\n    // Process feedback with error handling\n    try {\n      await services.feedback.recordFeedbackWithOptimization(\n        feedback.map((item) => ({\n          searchId: item.queryId,\n          queryHash: item.metadata.queryHash,\n          resultId: item.metadata.resultId,\n          relevanceScore: Math.round(item.rating * 5),\n          userAction: mapToCortexUserAction(item.metadata.userAction),\n          metadata: {\n            ...item.metadata.customMetadata,\n            originalRating: item.rating,\n            engagementType: item.metadata.engagementType,\n            timestamp: item.metadata.timestamp,\n          },\n        }))[0]\n      );\n    } catch (feedbackError) {\n      logger.error(\"Failed to process feedback\", {\n        error: feedbackError,\n        searchEventId: searchEvent.id,\n      });\n      throw new Error(\"Feedback processing failed\");\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        id: searchEvent.id,\n        timestamp,\n        feedbackCount: feedback.length,\n        feedback: feedback.map((item) => ({\n          queryId: item.queryId,\n          rating: item.rating,\n          action: item.metadata.userAction,\n          timestamp: item.metadata.timestamp,\n        })),\n        metadata: {\n          processedAt: timestamp.toString(),\n          uniqueQueries: new Set(feedback.map((f) => f.queryId)).size,\n          averageRating:\n            feedback.reduce((acc, f) => acc + f.rating, 0) / feedback.length,\n          actions: feedback.map((f) => f.metadata.userAction),\n        },\n      },\n      meta: {\n        took: Date.now() - startTime,\n        timestamp: new Date().toISOString(),\n      },\n    });\n  } catch (error) {\n    logger.error(\"Failed to record feedback\", {\n      error,\n      rawBody,\n      errorType: error instanceof Error ? error.constructor.name : typeof error,\n      message: error instanceof Error ? error.message : String(error),\n      stack: error instanceof Error ? error.stack : undefined,\n      serviceStatus: {\n        available: services?.feedback ? true : false,\n        services: services ? Object.keys(services) : [],\n      },\n    });\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to record feedback\",\n        details: error instanceof Error ? error.message : \"Unknown error\",\n        context: {\n          rawBody,\n          stack: error instanceof Error ? error.stack : undefined,\n          serviceStatus: {\n            available: services?.feedback ? true : false,\n            services: services ? Object.keys(services) : [],\n          },\n        },\n      },\n      { status: 500 }\n    );\n  }\n}\n"],"mappings":"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","names":["SignalType","EngagementType"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"f0ad994b669c0c5c8830653aa813d7bcb44d7442"}}