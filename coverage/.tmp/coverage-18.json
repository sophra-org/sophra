{"/workspaces/sophra/src/app/api/cortex/sessions/route.ts":{"path":"/workspaces/sophra/src/app/api/cortex/sessions/route.ts","statementMap":{"0":{"start":{"line":4,"column":23},"end":{"line":4,"column":31}},"1":{"start":{"line":6,"column":2},"end":{"line":14,"column":4}},"2":{"start":{"line":17,"column":20},"end":{"line":17,"column":30}},"3":{"start":{"line":20,"column":2},"end":{"line":27,"column":3}},"4":{"start":{"line":21,"column":4},"end":{"line":21,"column":28}},"5":{"start":{"line":23,"column":4},"end":{"line":26,"column":6}},"6":{"start":{"line":28,"column":2},"end":{"line":33,"column":3}},"7":{"start":{"line":29,"column":4},"end":{"line":32,"column":6}},"8":{"start":{"line":34,"column":2},"end":{"line":39,"column":3}},"9":{"start":{"line":35,"column":4},"end":{"line":38,"column":6}},"10":{"start":{"line":40,"column":2},"end":{"line":97,"column":3}},"11":{"start":{"line":41,"column":4},"end":{"line":41,"column":50}},"12":{"start":{"line":42,"column":20},"end":{"line":45,"column":6}},"13":{"start":{"line":46,"column":29},"end":{"line":54,"column":5}},"14":{"start":{"line":55,"column":4},"end":{"line":59,"column":6}},"15":{"start":{"line":60,"column":4},"end":{"line":64,"column":6}},"16":{"start":{"line":65,"column":21},"end":{"line":71,"column":5}},"17":{"start":{"line":72,"column":4},"end":{"line":72,"column":56}},"18":{"start":{"line":74,"column":4},"end":{"line":81,"column":7}},"19":{"start":{"line":82,"column":4},"end":{"line":88,"column":5}},"20":{"start":{"line":83,"column":6},"end":{"line":87,"column":9}},"21":{"start":{"line":89,"column":4},"end":{"line":96,"column":6}},"22":{"start":{"line":100,"column":2},"end":{"line":118,"column":3}},"23":{"start":{"line":101,"column":21},"end":{"line":101,"column":55}},"24":{"start":{"line":102,"column":29},"end":{"line":102,"column":45}},"25":{"start":{"line":103,"column":22},"end":{"line":103,"column":44}},"26":{"start":{"line":104,"column":4},"end":{"line":109,"column":5}},"27":{"start":{"line":105,"column":6},"end":{"line":108,"column":8}},"28":{"start":{"line":110,"column":20},"end":{"line":110,"column":65}},"29":{"start":{"line":111,"column":4},"end":{"line":111,"column":63}},"30":{"start":{"line":113,"column":4},"end":{"line":113,"column":58}},"31":{"start":{"line":114,"column":4},"end":{"line":117,"column":6}}},"fnMap":{"0":{"name":"convertPrismaSession","decl":{"start":{"line":5,"column":9},"end":{"line":5,"column":29}},"loc":{"start":{"line":5,"column":45},"end":{"line":15,"column":1}},"line":5},"1":{"name":"POST","decl":{"start":{"line":16,"column":22},"end":{"line":16,"column":26}},"loc":{"start":{"line":16,"column":32},"end":{"line":98,"column":1}},"line":16},"2":{"name":"GET","decl":{"start":{"line":99,"column":22},"end":{"line":99,"column":25}},"loc":{"start":{"line":99,"column":31},"end":{"line":119,"column":1}},"line":99}},"branchMap":{"0":{"loc":{"start":{"line":8,"column":12},"end":{"line":8,"column":40}},"type":"binary-expr","locations":[{"start":{"line":8,"column":12},"end":{"line":8,"column":32}},{"start":{"line":8,"column":36},"end":{"line":8,"column":40}}],"line":8},"1":{"loc":{"start":{"line":13,"column":40},"end":{"line":13,"column":68}},"type":"binary-expr","locations":[{"start":{"line":13,"column":40},"end":{"line":13,"column":62}},{"start":{"line":13,"column":66},"end":{"line":13,"column":68}}],"line":13},"2":{"loc":{"start":{"line":28,"column":2},"end":{"line":33,"column":3}},"type":"if","locations":[{"start":{"line":28,"column":2},"end":{"line":33,"column":3}},{"start":{},"end":{}}],"line":28},"3":{"loc":{"start":{"line":28,"column":6},"end":{"line":28,"column":95}},"type":"binary-expr","locations":[{"start":{"line":28,"column":6},"end":{"line":28,"column":30}},{"start":{"line":28,"column":35},"end":{"line":28,"column":68}},{"start":{"line":28,"column":72},"end":{"line":28,"column":94}}],"line":28},"4":{"loc":{"start":{"line":34,"column":2},"end":{"line":39,"column":3}},"type":"if","locations":[{"start":{"line":34,"column":2},"end":{"line":39,"column":3}},{"start":{},"end":{}}],"line":34},"5":{"loc":{"start":{"line":34,"column":6},"end":{"line":34,"column":63}},"type":"binary-expr","locations":[{"start":{"line":34,"column":6},"end":{"line":34,"column":28}},{"start":{"line":34,"column":32},"end":{"line":34,"column":63}}],"line":34},"6":{"loc":{"start":{"line":51,"column":16},"end":{"line":51,"column":38}},"type":"binary-expr","locations":[{"start":{"line":51,"column":16},"end":{"line":51,"column":32}},{"start":{"line":51,"column":36},"end":{"line":51,"column":38}}],"line":51},"7":{"loc":{"start":{"line":75,"column":13},"end":{"line":79,"column":15}},"type":"cond-expr","locations":[{"start":{"line":75,"column":38},"end":{"line":79,"column":7}},{"start":{"line":79,"column":10},"end":{"line":79,"column":15}}],"line":75},"8":{"loc":{"start":{"line":82,"column":4},"end":{"line":88,"column":5}},"type":"if","locations":[{"start":{"line":82,"column":4},"end":{"line":88,"column":5}},{"start":{},"end":{}}],"line":82},"9":{"loc":{"start":{"line":86,"column":20},"end":{"line":86,"column":67}},"type":"cond-expr","locations":[{"start":{"line":86,"column":45},"end":{"line":86,"column":55}},{"start":{"line":86,"column":58},"end":{"line":86,"column":67}}],"line":86},"10":{"loc":{"start":{"line":93,"column":17},"end":{"line":93,"column":73}},"type":"cond-expr","locations":[{"start":{"line":93,"column":42},"end":{"line":93,"column":55}},{"start":{"line":93,"column":58},"end":{"line":93,"column":73}}],"line":93},"11":{"loc":{"start":{"line":104,"column":4},"end":{"line":109,"column":5}},"type":"if","locations":[{"start":{"line":104,"column":4},"end":{"line":109,"column":5}},{"start":{},"end":{}}],"line":104}},"s":{"0":1,"1":0,"2":3,"3":3,"4":3,"5":0,"6":3,"7":1,"8":2,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":0,"19":0,"20":0,"21":0,"22":3,"23":3,"24":2,"25":2,"26":2,"27":1,"28":1,"29":1,"30":1,"31":1},"f":{"0":0,"1":3,"2":3},"b":{"0":[0,0],"1":[0,0],"2":[1,2],"3":[3,2,1],"4":[1,1],"5":[2,2],"6":[1,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[1,1]},"inputSourceMap":{"version":3,"sources":["/workspaces/sophra/src/app/api/cortex/sessions/route.ts"],"sourcesContent":["import type { Session } from \"@/lib/cortex/types/session\";\nimport { serviceManager } from \"@/lib/cortex/utils/service-manager\";\nimport logger from \"@/lib/shared/logger\";\nimport { NextRequest, NextResponse } from \"next/server\";\n// Declare Node.js runtime\nexport const runtime = \"nodejs\";\n\n\nfunction convertPrismaSession(prismaSession: {\n  id: string;\n  userId: string | null;\n  startedAt: Date;\n  lastActiveAt: Date;\n  metadata: unknown;\n  createdAt: Date;\n  updatedAt: Date;\n}): Session {\n  return {\n    id: prismaSession.id,\n    userId: prismaSession.userId || null,\n    startedAt: prismaSession.startedAt,\n    lastActiveAt: prismaSession.lastActiveAt,\n    createdAt: prismaSession.createdAt,\n    updatedAt: prismaSession.updatedAt,\n    metadata: JSON.parse(JSON.stringify(prismaSession.metadata || {})),\n  };\n}\n\nexport async function POST(req: NextRequest): Promise<NextResponse> {\n  const startTime = Date.now();\n  let services;\n  let body;\n\n  try {\n    body = await req.json();\n  } catch (error) {\n    return NextResponse.json(\n      { success: false, error: \"Invalid JSON body\" },\n      { status: 400 }\n    );\n  }\n\n\n  // Validation checks\n  if (body.metadata !== undefined && (typeof body.metadata !== \"object\" || body.metadata === null)) {\n    return NextResponse.json(\n      { success: false, error: \"Metadata must be an object\" },\n      { status: 400 }\n    );\n  }\n\n  if (body.userId !== undefined && typeof body.userId !== \"string\") {\n    return NextResponse.json(\n      { success: false, error: \"User ID must be a string\" },\n      { status: 400 }\n    );\n  }\n\n  try {\n    // Service initialization and session creation\n    services = await serviceManager.getServices();\n    const session = await services.sessions.createSession({\n      userId: body.userId,\n      metadata: body.metadata,\n    });\n\n    const convertedSession = {\n      id: session.id,\n      userId: session.userId,\n      startedAt: new Date(),\n      lastActiveAt: new Date(),\n      metadata: session.metadata || {},\n      createdAt: session.createdAt,\n      updatedAt: new Date()\n    };\n\n    await services.redis.set(\n      `session:${convertedSession.id}`,\n      JSON.stringify(convertedSession),\n      3600\n    );\n\n    services.metrics.recordLatency(\n      \"session_creation\",\n      \"api\",\n      Date.now() - startTime\n    );\n\n    const response = {\n      success: true,\n      data: {\n        sessionId: session.id,\n        ...convertedSession,\n      }\n    };\n\n    return NextResponse.json(response, { status: 200 });\n  } catch (error: unknown) {\n    logger.error(\"Failed to create session\", {\n      error: error instanceof Error ? {\n        message: error.message,\n        name: error.name,\n        stack: error.stack,\n      } : error,\n      body: req.body,\n    });\n\n    if (services) {\n      services.metrics.incrementSearchError({\n        search_type: \"session\",\n        index: \"sessions\",\n        error_type: error instanceof Error ? error.name : \"unknown\",\n      });\n    }\n\n    return NextResponse.json(\n      {\n        success: false,\n        error: \"Failed to create session\",\n        details: error instanceof Error ? error.message : \"Unknown error\",\n      },\n      { status: 500 }\n    );\n  }\n}\nexport async function GET(req: NextRequest): Promise<NextResponse> {\n  try {\n    const services = await serviceManager.getServices();\n    const { searchParams } = new URL(req.url);\n    const sessionId = searchParams.get(\"id\");\n\n    if (!sessionId) {\n      return NextResponse.json(\n        { success: false, error: \"Session ID required\" },\n        { status: 400 }\n      );\n    }\n\n    const session = await services.sessions.getSession(sessionId);\n    return NextResponse.json({ success: true, data: session });\n  } catch (error) {\n    logger.error(\"Failed to retrieve session\", { error });\n    return NextResponse.json(\n      { success: false, error: \"Failed to retrieve session\" },\n      { status: 500 }\n    );\n  }\n}\n"],"mappings":"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","names":[]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ed97d3dbdd121622cb6d6a9be24b95ce7e0ea38b"}}