services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.0
    container_name: setup
    command: >
      bash -c '
        mkdir -p /certs/{ca,http,transport} &&
        echo "Creating CA..." &&
        bin/elasticsearch-certutil ca --silent --pem -out /certs/ca/ca.zip &&
        unzip /certs/ca/ca.zip -d /certs/ca &&
        mv /certs/ca/ca/* /certs/ca/ &&
        rmdir /certs/ca/ca;
        
        echo "Creating node certificates..." &&
        for NODE in es01 es02 es03; do
          echo "Creating certs for $${NODE}..." &&
          mkdir -p /certs/http/$${NODE} /certs/transport/$${NODE} &&
          bin/elasticsearch-certutil cert --silent --pem -out /certs/http/$${NODE}.zip --name $${NODE} --ca-cert /certs/ca/ca.crt --ca-key /certs/ca/ca.key --dns $${NODE} &&
          unzip /certs/http/$${NODE}.zip -d /certs/http/$${NODE} &&
          mv /certs/http/$${NODE}/$${NODE}/$${NODE}.crt /certs/http/$${NODE}/$${NODE}.crt &&
          mv /certs/http/$${NODE}/$${NODE}/$${NODE}.key /certs/http/$${NODE}/$${NODE}.key &&
          rmdir /certs/http/$${NODE}/$${NODE} &&
          
          bin/elasticsearch-certutil cert --silent --pem -out /certs/transport/$${NODE}.zip --name $${NODE} --ca-cert /certs/ca/ca.crt --ca-key /certs/ca/ca.key --dns $${NODE} &&
          unzip /certs/transport/$${NODE}.zip -d /certs/transport/$${NODE} &&
          mv /certs/transport/$${NODE}/$${NODE}/$${NODE}.crt /certs/transport/$${NODE}/$${NODE}.crt &&
          mv /certs/transport/$${NODE}/$${NODE}/$${NODE}.key /certs/transport/$${NODE}/$${NODE}.key &&
          rmdir /certs/transport/$${NODE}/$${NODE};
        done;
        
        echo "Creating Kibana certificate..." &&
        mkdir -p /certs/kibana &&
        bin/elasticsearch-certutil cert --silent --pem -out /certs/kibana/kibana.zip --name kibana --ca-cert /certs/ca/ca.crt --ca-key /certs/ca/ca.key --dns kibana &&
        unzip /certs/kibana/kibana.zip -d /certs/kibana &&
        mv /certs/kibana/kibana/kibana.crt /certs/kibana/kibana.crt &&
        mv /certs/kibana/kibana/kibana.key /certs/kibana/kibana.key &&
        rmdir /certs/kibana/kibana;
        
        echo "Setting permissions..." &&
        chown -R 1000:0 /certs &&
        chmod -R 755 /certs &&
        echo "Certificate setup completed successfully"
      '
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes:
      - certs:/certs
    healthcheck:
      test: ["CMD-SHELL", "[ -f /certs/ca/ca.crt ] && [ -f /certs/http/es01/es01.crt ] && [ -f /certs/http/es02/es02.crt ] && [ -f /certs/http/es03/es03.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  sophra:
    build:
      context: ..
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      # Node and Next.js
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_APP_ENV=${NEXT_PUBLIC_APP_ENV:-development}
      - NEXT_PUBLIC_API_VERSION=${NEXT_PUBLIC_API_VERSION:-0.2.0}

      # Databases
      - POSTGRESQL_URL=postgresql://sophra:sophra@postgres:5432/sophra
      
      # Redis
      - REDIS_URL=redis://redis:6379

      # Elasticsearch
      - ELASTICSEARCH_NODES=https://es01:9200,https://es02:9200,https://es03:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - ELASTICSEARCH_SSL_CA=/certs/ca/ca.crt
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL}
      - ELASTICSEARCH_INDEX=${ELASTICSEARCH_INDEX:-documents}
      - SOPHRA_ES_API_KEY=${SOPHRA_ES_API_KEY}

      # Redis
      - SOPHRA_REDIS_URL=${SOPHRA_REDIS_URL}

      # OpenAI
      - OPENAI_API_KEY=${OPENAI_API_KEY}

      # New Relic
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
      - NEW_RELIC_APP_NAME=${NEW_RELIC_APP_NAME:-sophra-api-system}

      # Anthropic
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}

      # DEEPSEEK
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}

      # Kibana
      - KIBANA_URL=https://kibana:5601
    volumes:
      - certs:/certs:ro
    depends_on:
      setup:
        condition: service_healthy
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
      kibana:
        condition: service_healthy

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.0
    container_name: es01
    hostname: es01
    depends_on:
      setup:
        condition: service_healthy
    environment:
      - node.name=es01
      - cluster.name=sophra-es-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - xpack.security.enabled=true
      - xpack.security.enrollment.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    volumes:
      - ./elastic/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - es01-data:/usr/share/elasticsearch/data
      - certs:/usr/share/elasticsearch/config/certs:ro
    ports:
      - "9200:9200"
    networks:
      - elastic
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.0
    container_name: es02
    hostname: es02
    depends_on:
      setup:
        condition: service_healthy
    environment:
      - node.name=es02
      - cluster.name=sophra-es-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - xpack.security.enabled=true
      - xpack.security.enrollment.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    volumes:
      - ./elastic/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - es02-data:/usr/share/elasticsearch/data
      - certs:/usr/share/elasticsearch/config/certs:ro
    networks:
      - elastic
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.0
    container_name: es03
    hostname: es03
    depends_on:
      setup:
        condition: service_healthy
    environment:
      - node.name=es03
      - cluster.name=sophra-es-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - xpack.security.enabled=true
      - xpack.security.enrollment.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-changeme}
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    volumes:
      - ./elastic/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - es03-data:/usr/share/elasticsearch/data
      - certs:/usr/share/elasticsearch/config/certs:ro
    networks:
      - elastic
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert /usr/share/elasticsearch/config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    image: docker.elastic.co/kibana/kibana:8.17.0
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=["https://es01:9200","https://es02:9200","https://es03:9200"]
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD:-changeme}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
      - certs:/usr/share/kibana/config/certs:ro
    depends_on:
      setup:
        condition: service_healthy
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    networks:
      - elastic
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=sophra
      - POSTGRES_PASSWORD=sophra
      - POSTGRES_DB=sophra
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sophra"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elastic

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - elastic

networks:
  elastic:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  es01-data:
    driver: local
  es02-data:
    driver: local
  es03-data:
    driver: local
  certs:
    driver: local
