<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="922" failures="5" errors="0" time="28.821">
    <testsuite name="src/types/services.test.ts" timestamp="2025-01-07T17:34:02.795Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0261341">
        <testcase classname="src/types/services.test.ts" name="Services &gt; getUsers &gt; should fetch users successfully" time="0.0066321">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; getUsers &gt; should handle empty users list" time="0.0015926">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; getUsers &gt; should handle network errors" time="0.0049943">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; createUser &gt; should create user successfully" time="0.0020238">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; createUser &gt; should handle validation errors" time="0.001217">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; updateUser &gt; should update user successfully" time="0.0008403">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; updateUser &gt; should handle non-existent user" time="0.001448">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; deleteUser &gt; should delete user successfully" time="0.0011609">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; deleteUser &gt; should handle deletion of non-existent user" time="0.0023604">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/api.admin.middleware.test.ts" timestamp="2025-01-07T17:34:02.800Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0429715">
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should return 401 when JWT token is invalid format" time="0.013739">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should return 403 when user lacks permission for endpoint" time="0.0021225">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should allow access when user is super admin regardless of endpoint" time="0.002707">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should handle string JWT decode result as invalid" time="0.0021028">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should handle invalid tokens gracefully" time="0.0023602">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should update lastUsedAt timestamp on successful validation" time="0.00633">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should handle missing JWT_SECRET" time="0.0112554">
            <system-err>
Error validating admin token: Error: JWT_SECRET is not configured
    at Module.adminMiddleware [90m(D:\sophra\[39msrc\app\api\admin.middleware.ts:37:5[90m)[39m
    at [90mD:\sophra\[39msrc\app\api\api.admin.middleware.test.ts:215:32
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/app/health/health.route.test.ts" timestamp="2025-01-07T17:34:02.802Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0929609">
        <testcase classname="src/app/health/health.route.test.ts" name="Health Check Route Handler &gt; should return healthy status when all services are connected" time="0.0853191">
        </testcase>
        <testcase classname="src/app/health/health.route.test.ts" name="Health Check Route Handler &gt; should return unhealthy status when any service is disconnected" time="0.0024951">
        </testcase>
        <testcase classname="src/app/health/health.route.test.ts" name="Health Check Route Handler &gt; should handle errors during health check" time="0.0020126">
        </testcase>
        <testcase classname="src/app/health/health.route.test.ts" name="Health Check Route Handler &gt; should mask sensitive information in service URLs" time="0.0013889">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/test/next-server.mock.test.ts" timestamp="2025-01-07T17:34:02.803Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.0717012">
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; json &gt; should create JSON response successfully" time="0.03903">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; json &gt; should handle complex data structures" time="0.0152523">
            <system-err>
Promise returned by `expect(actual).resolves.toEqual(expected)` was not awaited. Vitest currently auto-awaits hanging assertions at the end of the test, but this will cause the test to fail in Vitest 3. Please remember to await the assertion.
    at D:/sophra/src/lib/test/next-server.mock.test.ts:49:31

            </system-err>
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; redirect &gt; should create redirect response" time="0.0013201">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; next &gt; should create next response with init options" time="0.0009298">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; rewrite &gt; should create rewrite response" time="0.0011435">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should create request with URL and searchParams" time="0.0016234">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should handle request headers" time="0.0013935">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should handle request body as JSON" time="0.0014275">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should handle request body as text" time="0.0017671">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should handle empty body" time="0.0014463">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; Response Cloning &gt; should clone response with all properties" time="0.0016791">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/admin/permissions.test.ts" timestamp="2025-01-07T17:34:02.805Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.0086125">
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; hasPermission &gt; should return true for valid token with required purpose" time="0.0020382">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; hasPermission &gt; should return false for valid token without required purpose" time="0.0003837">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; hasPermission &gt; should return false for invalid token name format" time="0.0002457">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; hasPermission &gt; should return false for endpoint not in permissions map" time="0.0002203">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; getAccessibleEndpoints &gt; should return all endpoints for a valid token with &apos;api&apos; purpose" time="0.0012075">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; getAccessibleEndpoints &gt; should return empty array for invalid token name format" time="0.0004294">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; getAccessibleEndpoints &gt; should return correct endpoints for a valid token with &apos;monitoring&apos; purpose" time="0.000365">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; isSuperAdmin &gt; should return true for a token with &apos;api&apos; purpose" time="0.0004735">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; isSuperAdmin &gt; should return false for a token without &apos;api&apos; purpose" time="0.0007224">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; isSuperAdmin &gt; should return false for invalid token name format" time="0.0003305">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/api.cortex.types.test.ts" timestamp="2025-01-07T17:34:02.808Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0162115">
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="APIResponse &gt; should create a successful response" time="0.0033904">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="APIResponse &gt; should create an error response" time="0.0017665">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="Document Requests &gt; should validate CreateDocumentRequest structure" time="0.0009465">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="Document Requests &gt; should validate UpdateDocumentRequest structure" time="0.0005553">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="Document Requests &gt; should validate DeleteDocumentRequest structure" time="0.0005367">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="SearchRequest &gt; should validate SearchRequest with minimal properties" time="0.0006075">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="SearchRequest &gt; should validate SearchRequest with all properties" time="0.0023629">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="HealthStatus &gt; should validate HealthStatus structure without error" time="0.0016574">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="HealthStatus &gt; should validate HealthStatus structure with error" time="0.0009497">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/keys/admin.middleware.test.ts" timestamp="2025-01-07T17:34:02.810Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0390763">
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should return 401 when admin token header is missing" time="0.0114122">
        </testcase>
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should return 401 when admin token is invalid" time="0.0024984">
        </testcase>
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should update lastUsedAt and proceed when token is valid" time="0.0082242">
        </testcase>
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should return 500 when database error occurs" time="0.0109535">
            <system-err>
Error validating admin token: Error: Database error
    at [90mD:\sophra\[39msrc\app\api\keys\admin.middleware.test.ts:93:66
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m
    at startTests [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1271:3[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should check for active tokens only" time="0.0025955">
            <system-err>
Error validating admin token: Error: Database error
    at [90mD:\sophra\[39msrc\app\api\keys\admin.middleware.test.ts:93:66
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m
    at startTests [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1271:3[90m)[39m

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/keys/keys.route.test.ts" timestamp="2025-01-07T17:34:02.812Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.1236825">
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; POST /api/keys &gt; should create a new API key with valid input" time="0.1034467">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; POST /api/keys &gt; should handle database errors during creation" time="0.009518">
            <system-err>
Error creating API key: Error: Database error
    at [90mD:\sophra\[39msrc\app\api\keys\keys.route.test.ts:96:63
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; GET /api/keys &gt; should return list of API keys without exposing actual keys" time="0.0016988">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; PUT /api/keys &gt; should update API key with regenerated key" time="0.0019534">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; PUT /api/keys &gt; should reject updates without ID" time="0.001627">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; DELETE /api/keys &gt; should successfully delete an API key" time="0.001344">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; DELETE /api/keys &gt; should handle missing ID parameter" time="0.0007716">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/core/client.test.ts" timestamp="2025-01-07T17:34:02.813Z" hostname="sophra" tests="16" failures="0" errors="0" skipped="0" time="0.0486764">
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should create a client instance with valid config" time="0.0034103">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should throw error if environment is missing" time="0.0029008">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should throw error if ELASTICSEARCH_URL is missing" time="0.0022222">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should throw error if DATABASE_URL is missing" time="0.0019759">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should throw error if both ES API keys are missing" time="0.002814">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; initialize &gt; should initialize all services successfully" time="0.0028198">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; initialize &gt; should initialize without Redis if SOPHRA_REDIS_URL is not set" time="0.0015324">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; initialize &gt; should handle initialization errors and cleanup" time="0.0021633">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; shutdown &gt; should disconnect all services successfully" time="0.0020867">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; shutdown &gt; should handle shutdown errors" time="0.002773">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; healthCheck &gt; should return health status for all services" time="0.0033511">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; healthCheck &gt; should handle service failures" time="0.0065918">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; getElasticClient &gt; should return initialized elastic client" time="0.0024534">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; getElasticClient &gt; should throw error if client is not initialized" time="0.0028858">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; getRedisClient &gt; should return initialized redis client" time="0.0042043">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; getRedisClient &gt; should throw error if client is not initialized" time="0.0018339">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/core/services.test.ts" timestamp="2025-01-07T17:34:02.816Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0135083">
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; constructor &gt; should create service instance with valid config" time="0.0043772">
        </testcase>
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; constructor &gt; should initialize logger and environment" time="0.0019486">
        </testcase>
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; constructor &gt; should accept different environment values" time="0.0012401">
        </testcase>
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; healthCheck &gt; should return health status" time="0.0007761">
        </testcase>
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; disconnect &gt; should call disconnect method if implemented" time="0.0021846">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/core/sync-service.test.ts" timestamp="2025-01-07T17:34:02.817Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.0299644">
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; constructor &gt; should initialize with default searchCacheTTL if not provided" time="0.002541">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; constructor &gt; should use provided searchCacheTTL" time="0.0009008">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; upsertDocument &gt; should create index if it does not exist" time="0.0031705">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; upsertDocument &gt; should store document in Elasticsearch, Postgres, and Redis" time="0.0033917">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; upsertDocument &gt; should handle errors during document upsert" time="0.0042844">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; upsertDocument &gt; should handle Redis cache failure gracefully" time="0.0066024">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; search &gt; should return cached results if available" time="0.0015233">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; search &gt; should fetch from Elasticsearch if cache miss" time="0.0008966">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; search &gt; should handle search errors" time="0.0011065">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; deleteDocument &gt; should delete document from all stores" time="0.0018822">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; deleteDocument &gt; should handle delete errors" time="0.0016119">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/core/validation-service.test.ts" timestamp="2025-01-07T17:34:02.819Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0109488">
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateSearchResults &gt; should validate valid search results" time="0.0027845">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateSearchResults &gt; should invalidate results with missing required fields" time="0.0008022">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateSearchResults &gt; should handle empty results array" time="0.0005155">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateVectorization &gt; should validate correctly vectorized document" time="0.0019328">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateVectorization &gt; should invalidate document without embeddings" time="0.0009115">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateVectorization &gt; should invalidate document with wrong embeddings length" time="0.0009814">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateVectorization &gt; should invalidate document with non-numeric embeddings" time="0.0009153">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/analytics/service.test.ts" timestamp="2025-01-07T17:34:02.820Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.0618474">
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; createSearchEvent &gt; should successfully create a search event" time="0.0140795">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; createSearchEvent &gt; should handle optional fields" time="0.0030356">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; createSearchEvent &gt; should handle database errors" time="0.004867">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; getSearchEvents &gt; should retrieve search events with default parameters" time="0.0045502">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; getSearchEvents &gt; should apply filters correctly" time="0.0081936">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; getSearchEvents &gt; should handle pagination" time="0.0027448">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; generateReport &gt; should generate a complete analytics report" time="0.0048391">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; generateReport &gt; should handle invalid time window" time="0.0019577">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; generateReport &gt; should calculate trends correctly" time="0.0027475">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; time window calculations &gt; should calculate correct time window start" time="0.0040977">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; time window calculations &gt; should default to 24h for invalid time window" time="0.0016604">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; metrics integration &gt; should use provided metrics service" time="0.0016382">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; metrics integration &gt; should create default metrics service if not provided" time="0.003">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/ab-testing/services.test.ts" timestamp="2025-01-07T17:34:02.823Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0175339">
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; healthCheck &gt; should return true when database is healthy" time="0.0028713">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; healthCheck &gt; should return false when database check fails" time="0.0008717">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; createTest &gt; should create a new AB test" time="0.00362">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; createTest &gt; should throw error if variant allocations do not sum to 1" time="0.0021595">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; assignVariant &gt; should assign variant based on allocation" time="0.0024769">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; assignVariant &gt; should return existing assignment if one exists" time="0.0013588">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; trackConversion &gt; should track conversion event" time="0.0015265">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/documents/service.test.ts" timestamp="2025-01-07T17:34:02.824Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.0314923">
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; createDocument &gt; should create a document successfully" time="0.0085494">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; createDocument &gt; should handle document creation errors" time="0.0037409">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; getDocument &gt; should retrieve a document successfully" time="0.0020602">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; getDocument &gt; should handle document not found" time="0.0012187">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; updateDocument &gt; should update a document successfully" time="0.0017813">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; updateDocument &gt; should handle update errors" time="0.001563">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; deleteDocument &gt; should delete a document successfully" time="0.001316">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; deleteDocument &gt; should handle deletion errors" time="0.0011358">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; ensureTable &gt; should create table if it does not exist" time="0.0018817">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; ensureTable &gt; should not create table if it already exists" time="0.002935">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; ensureTable &gt; should handle table creation errors" time="0.0015988">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/feedback/service.test.ts" timestamp="2025-01-07T17:34:02.828Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.0405211">
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should record feedback successfully" time="0.0107641">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should handle feedback recording errors" time="0.0043448">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should validate feedback data format" time="0.0018472">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should handle database connection errors" time="0.0021132">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should handle elasticsearch integration errors" time="0.002369">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should record feedback and trigger optimization" time="0.0032495">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should handle optimization errors" time="0.0030445">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should track A/B test metrics when test data is present" time="0.0026938">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should validate test data format when present" time="0.0045005">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should handle optimization service errors" time="0.0026422">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/client.test.ts" timestamp="2025-01-07T17:34:02.830Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.0522685">
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; constructor &gt; should create client instance with API key when provided" time="0.0063733">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; constructor &gt; should create client instance without auth when no API key provided" time="0.0028209">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; constructor &gt; should use default URL when ELASTICSEARCH_URL is not provided" time="0.0039324">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; constructor &gt; should handle initialization errors" time="0.0052374">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; ping &gt; should return true when ping succeeds" time="0.0022481">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; ping &gt; should return false and log error when ping fails" time="0.0032943">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; createIndex &gt; should create index when it does not exist" time="0.0053989">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; createIndex &gt; should skip creation when index already exists" time="0.0034009">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; createIndex &gt; should handle creation errors" time="0.0046268">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; deleteIndex &gt; should delete index when it exists" time="0.0033554">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; deleteIndex &gt; should skip deletion when index does not exist" time="0.0026076">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; deleteIndex &gt; should handle deletion errors" time="0.0027152">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; getClient &gt; should return the elasticsearch client instance" time="0.0029667">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/core.test.ts" timestamp="2025-01-07T17:34:02.832Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0125144">
        <testcase classname="src/lib/cortex/elasticsearch/core.test.ts" name="Elasticsearch Core &gt; createElasticsearchConfig &gt; should create config with URL only when no API key provided" time="0.0046302">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/core.test.ts" name="Elasticsearch Core &gt; createElasticsearchConfig &gt; should create config with base64 encoded API key when key contains colon" time="0.0017303">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/core.test.ts" name="Elasticsearch Core &gt; createElasticsearchConfig &gt; should create config with raw API key when key does not contain colon" time="0.0017475">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/core.test.ts" name="Elasticsearch Core &gt; createElasticsearchConfig &gt; should throw error when ELASTICSEARCH_URL is missing" time="0.0026006">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/init.test.ts" timestamp="2025-01-07T17:34:02.832Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0231373">
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should create indices that do not exist" time="0.0072138">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should skip creation for indices that already exist" time="0.0045461">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should handle initialization errors" time="0.0045645">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should handle mixed index states" time="0.0023002">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should handle creation errors for specific indices" time="0.0021232">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/mappings.test.ts" timestamp="2025-01-07T17:34:02.833Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0107063">
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define required fields with correct types" time="0.0033282">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define embeddings field with correct vector configuration" time="0.0008103">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define evaluation score fields with correct structure" time="0.0005523">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define metadata field with correct structure" time="0.0003712">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define array fields with correct text and keyword mappings" time="0.0005853">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define count fields with correct type" time="0.0004169">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define year fields with correct type" time="0.0003329">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should include all required fields" time="0.001412">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/query-builders.test.ts" timestamp="2025-01-07T17:34:02.835Z" hostname="sophra" tests="2" failures="0" errors="0" skipped="0" time="0.0053776">
        <testcase classname="src/lib/cortex/elasticsearch/query-builders.test.ts" name="Elasticsearch Query Builders &gt; buildTextQuery &gt; should build basic text query with defaults" time="0.0030226">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/query-builders.test.ts" name="Elasticsearch Query Builders &gt; buildTextQuery &gt; should build text query with custom fields and settings" time="0.0006441">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/services.test.ts" timestamp="2025-01-07T17:34:02.835Z" hostname="sophra" tests="12" failures="0" errors="0" skipped="0" time="0.0543783">
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; error handling &gt; should handle connection errors" time="0.0135788">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; error handling &gt; should handle index creation errors" time="0.0085593">
            <system-out>
Attempting to create index: test-index
Checking if index exists: test-index
Index test-index exists check result (from statusCode): [33mfalse[39m
Creating index test-index with options: { index: [32m&apos;test-index&apos;[39m, body: {} }

            </system-out>
            <system-err>
Failed to create index test-index: Error: Creation failed
    at [90mD:\sophra\[39msrc\lib\cortex\elasticsearch\services.test.ts:150:64
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; index operations &gt; should check if index exists" time="0.0014715">
            <system-out>
Checking if index exists: test-index
Index test-index exists check result (from statusCode): [33mtrue[39m

            </system-out>
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; index operations &gt; should create index with mappings" time="0.0037994">
            <system-out>
Attempting to create index: test-index
Checking if index exists: test-index
Index test-index exists check result (from statusCode): [33mfalse[39m
Creating index test-index with options: { index: [32m&apos;test-index&apos;[39m, body: { mappings: { properties: [36m[Object][39m } } }
Successfully created index: test-index

            </system-out>
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; index operations &gt; should delete index" time="0.0020558">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; document operations &gt; should index document" time="0.0024827">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; document operations &gt; should update document" time="0.0015879">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; document operations &gt; should delete document" time="0.001931">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; search operations &gt; should perform basic search" time="0.0029994">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; search operations &gt; should perform search with aggregations" time="0.0033121">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; health checks &gt; should return cluster health" time="0.0050603">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; health checks &gt; should return node stats" time="0.0029668">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/events/emitter.test.ts" timestamp="2025-01-07T17:34:02.838Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0169565">
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; emit &gt; should emit events to registered listeners" time="0.0055652">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; emit &gt; should return false when no listeners are registered" time="0.0010134">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; emit &gt; should handle multiple event types" time="0.00134">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; emit &gt; should handle events without document data" time="0.0008994">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; on &gt; should register event listeners" time="0.0010921">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; on &gt; should handle multiple listeners for the same event" time="0.0015963">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; on &gt; should maintain separate listeners for different event types" time="0.0018148">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; on &gt; should handle schema update events" time="0.0012487">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/middleware/auth.test.ts" timestamp="2025-01-07T17:34:02.840Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.021864">
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should successfully validate a valid token" time="0.0081957">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle missing token" time="0.0026454">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle missing JWT_SECRET" time="0.0025674">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle invalid tokens" time="0.0017799">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle expired tokens" time="0.001926">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle malformed authorization header" time="0.0021813">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/monitoring/metrics.test.ts" timestamp="2025-01-07T17:34:02.841Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0455785">
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordEngineMetric &gt; should record engine metrics correctly" time="0.012707">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordEngineMetric &gt; should handle errors gracefully" time="0.0066098">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordLatency &gt; should record operation latency" time="0.002521">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; incrementError &gt; should increment error counter" time="0.0029126">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; updateResourceUsage &gt; should update resource metrics" time="0.0030151">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; updateSearchQuality &gt; should update search quality metrics" time="0.003255">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordAlert &gt; should record metric alerts" time="0.0030454">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; updateCacheHitRatio &gt; should update cache hit ratio metrics" time="0.0026306">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordReportDistribution &gt; should record report distribution metrics" time="0.0036948">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/postgres/services.test.ts" timestamp="2025-01-07T17:34:02.843Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0211791">
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; initialize &gt; should initialize successfully" time="0.0065142">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; initialize &gt; should handle initialization errors" time="0.0053497">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; healthCheck &gt; should return true when healthy" time="0.0015926">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; healthCheck &gt; should return false and log error when unhealthy" time="0.0015475">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; disconnect &gt; should disconnect successfully" time="0.0014149">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; disconnect &gt; should handle disconnect when not initialized" time="0.0013755">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/redis/client.test.ts" timestamp="2025-01-07T17:34:02.845Z" hostname="sophra" tests="17" failures="0" errors="0" skipped="0" time="0.0274491">
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; setEx &gt; should set value with expiration" time="0.0060278">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; setEx &gt; should use default TTL when not provided" time="0.000917">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; setEx &gt; should handle Redis errors" time="0.0032791">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; getEx &gt; should get value" time="0.0009997">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; getEx &gt; should handle null values" time="0.0005173">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; getEx &gt; should handle Redis errors" time="0.0011322">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; del &gt; should delete key" time="0.0012312">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; del &gt; should handle Redis errors" time="0.0013838">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; exists &gt; should check if key exists" time="0.0014438">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; exists &gt; should return false for non-existent keys" time="0.0005877">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; exists &gt; should handle Redis errors" time="0.0012297">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; ping &gt; should check connection" time="0.0007368">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; ping &gt; should return false for failed ping" time="0.0005322">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; ping &gt; should handle Redis errors" time="0.0008481">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; disconnect &gt; should close connection" time="0.0007267">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; disconnect &gt; should handle Redis errors" time="0.0008842">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; getClient &gt; should return Redis client" time="0.000603">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/redis/services.test.ts" timestamp="2025-01-07T17:34:02.848Z" hostname="sophra" tests="12" failures="0" errors="0" skipped="0" time="0.3520945">
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; ping &gt; should return true when Redis is available" time="0.0053947">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; ping &gt; should return false when Redis is unavailable" time="0.0021968">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; set &gt; should set cache value with TTL" time="0.0032769">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; set &gt; should handle set errors" time="0.3279362">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; get &gt; should get cached value" time="0.0015915">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; get &gt; should return default value when key not found" time="0.0009214">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; cacheSearchResults &gt; should cache search results with query hash" time="0.0022603">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; getSearchResults &gt; should retrieve cached search results" time="0.0019673">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; getSearchResults &gt; should return null for cache miss" time="0.0010787">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; disconnect &gt; should disconnect Redis client" time="0.0008939">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; healthCheck &gt; should return true when Redis is healthy" time="0.001011">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; healthCheck &gt; should return false when Redis is unhealthy" time="0.0009712">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/sessions/service.test.ts" timestamp="2025-01-07T17:34:02.850Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0268945">
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; createSession &gt; should create a new session" time="0.0066202">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; createSession &gt; should handle session creation errors" time="0.0029358">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; getSession &gt; should retrieve an existing session" time="0.004209">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; getSession &gt; should return null for non-existent session" time="0.0013211">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; validateSession &gt; should validate active session" time="0.0017148">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; validateSession &gt; should invalidate expired session" time="0.001372">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; extendSession &gt; should extend session expiration" time="0.0016766">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; extendSession &gt; should handle extension errors" time="0.0037023">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/reporting/alert-thresholds.test.ts" timestamp="2025-01-07T17:34:02.851Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0167652">
        <testcase classname="src/lib/cortex/reporting/alert-thresholds.test.ts" name="AlertService &gt; checkThresholds &gt; should trigger alert when threshold is exceeded" time="0.0095948">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/alert-thresholds.test.ts" name="AlertService &gt; checkThresholds &gt; should handle multiple thresholds for same metric" time="0.0020119">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/alert-thresholds.test.ts" name="AlertService &gt; checkThresholds &gt; should not trigger alert when threshold is not violated" time="0.0014905">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/alert-thresholds.test.ts" name="AlertService &gt; checkThresholds &gt; should handle different comparison operators" time="0.001441">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/reporting/distribution.test.ts" timestamp="2025-01-07T17:34:02.852Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0174679">
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should distribute report via email" time="0.0065163">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should distribute report via Slack" time="0.0016073">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should store report in specified storage" time="0.0010639">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should handle multiple distribution methods" time="0.0011745">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should handle distribution errors gracefully" time="0.0050639">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/reporting/recommendations.test.ts" timestamp="2025-01-07T17:34:02.853Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0097885">
        <testcase classname="src/lib/cortex/reporting/recommendations.test.ts" name="RecommendationService &gt; generateRecommendations &gt; should generate recommendations based on latency trend" time="0.0050657">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/recommendations.test.ts" name="RecommendationService &gt; generateRecommendations &gt; should generate cache recommendations" time="0.0010681">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/recommendations.test.ts" name="RecommendationService &gt; generateRecommendations &gt; should handle empty metrics" time="0.0009159">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/recommendations.test.ts" name="RecommendationService &gt; generateRecommendations &gt; should handle no recommendations needed" time="0.0008867">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/reporting/service.test.ts" timestamp="2025-01-07T17:34:02.854Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0262146">
        <testcase classname="src/lib/cortex/reporting/service.test.ts" name="ReportingService &gt; generateScheduledReport &gt; should generate scheduled report successfully" time="0.0118172">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/service.test.ts" name="ReportingService &gt; generateScheduledReport &gt; should handle analytics service errors" time="0.0067964">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/service.test.ts" name="ReportingService &gt; checkAlertThresholds &gt; should generate alerts for threshold violations" time="0.0023929">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/service.test.ts" name="ReportingService &gt; generateRecommendations &gt; should generate recommendations for performance issues" time="0.0018072">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/services/vectorization.test.ts" timestamp="2025-01-07T17:34:02.855Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0054881">
        <testcase classname="src/lib/cortex/services/vectorization.test.ts" name="VectorizationService &gt; vectorize &gt; should successfully vectorize valid input" time="0.0019972">
        </testcase>
        <testcase classname="src/lib/cortex/services/vectorization.test.ts" name="VectorizationService &gt; vectorize &gt; should handle invalid input gracefully" time="0.0004335">
        </testcase>
        <testcase classname="src/lib/cortex/services/vectorization.test.ts" name="VectorizationService &gt; processVectors &gt; should process vectors correctly" time="0.0003212">
        </testcase>
        <testcase classname="src/lib/cortex/services/vectorization.test.ts" name="VectorizationService &gt; processVectors &gt; should handle processing errors appropriately" time="0.0003075">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/circuit-breaker.test.ts" timestamp="2025-01-07T17:34:02.856Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0157697">
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; initialization &gt; should initialize with circuit closed" time="0.0044169">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; error handling &gt; should open circuit after reaching failure threshold" time="0.0012037">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; error handling &gt; should reset after timeout period" time="0.0027725">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; success handling &gt; should reset failure count after success" time="0.0006539">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; circuit state transitions &gt; should transition from closed to open on failures" time="0.0006547">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; circuit state transitions &gt; should allow reset after timeout" time="0.0014208">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; circuit state transitions &gt; should maintain open state within timeout period" time="0.0011505">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/rate-limit.test.ts" timestamp="2025-01-07T17:34:02.857Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0273718">
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; rate limiting &gt; should allow requests within rate limit" time="0.0092307">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; rate limiting &gt; should block requests exceeding rate limit" time="0.0029645">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; rate limiting &gt; should replenish tokens after interval" time="0.0016997">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; identifier handling &gt; should track limits separately for different identifiers" time="0.0009178">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; identifier handling &gt; should clean up old identifiers when exceeding uniqueTokenPerInterval" time="0.0017575">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; token replenishment &gt; should handle token replenishment correctly" time="0.0022884">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; concurrent requests &gt; should handle concurrent requests correctly" time="0.0033536">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; concurrent requests &gt; should handle concurrent requests from different clients" time="0.0013902">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/request-queue.test.ts" timestamp="2025-01-07T17:34:02.858Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.6430155">
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; request processing &gt; should process requests concurrently within limit" time="0.2137372">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; request processing &gt; should handle errors in requests" time="0.0024023">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; request processing &gt; should process queued requests after errors" time="0.0008724">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; concurrent processing &gt; should respect concurrent request limit" time="0.2487003">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; concurrent processing &gt; should queue requests when at concurrent limit" time="0.1737826">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; error recovery &gt; should continue processing after failed requests" time="0.0012056">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/service-manager.test.ts" timestamp="2025-01-07T17:34:02.861Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.1325281">
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; getServices &gt; should initialize and return services" time="0.004342">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; getServices &gt; should return cached services on subsequent calls" time="0.0011913">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; service initialization &gt; should initialize Redis client" time="0.0012933">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; service initialization &gt; should initialize all required services" time="0.0015396">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; service caching &gt; should cache initialized services" time="0.0009783">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; service caching &gt; should handle concurrent initialization requests" time="0.1143898">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; error handling &gt; should handle Redis connection errors" time="0.0038506">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; error handling &gt; should handle service initialization errors" time="0.0016649">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/validation.test.ts" timestamp="2025-01-07T17:34:02.862Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0173791">
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should validate valid data" time="0.0063434">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should validate data with optional fields" time="0.0006975">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should reject invalid data with validation errors" time="0.0039506">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should handle malformed data gracefully" time="0.000989">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should handle null and undefined values" time="0.0009695">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should handle empty object" time="0.0014632">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/types/api.types.test.ts" timestamp="2025-01-07T17:34:02.864Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0080854">
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; APIResponse &gt; should validate APIResponse structure" time="0.0025025">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; APIResponse &gt; should work with different data types" time="0.0005992">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; HealthStatus &gt; should validate HealthStatus structure" time="0.000267">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; HealthStatus &gt; should allow service stats with any key" time="0.0011921">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; EnhancedHealthStatus &gt; should validate EnhancedHealthStatus structure" time="0.0002439">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; EnhancedHealthStatus &gt; should validate that EnhancedHealthStatus extends HealthStatus" time="0.0005703">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/types/search.types.test.ts" timestamp="2025-01-07T17:34:02.865Z" hostname="sophra" tests="14" failures="0" errors="0" skipped="0" time="0.0120449">
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; TextQuery &gt; should validate TextQuery structure" time="0.0023329">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; TextQuery &gt; should validate text query with all options" time="0.0005742">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; TextQuery &gt; should validate text query with minimal options" time="0.0003581">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; VectorQuery &gt; should validate VectorQuery structure" time="0.0003685">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; VectorQuery &gt; should validate vector query with all options" time="0.0004094">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; VectorQuery &gt; should validate vector query with minimal options" time="0.0003964">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; AdvancedSearchRequest &gt; should validate AdvancedSearchRequest structure" time="0.0003578">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; AdvancedSearchRequest &gt; should validate text search request" time="0.000334">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; AdvancedSearchRequest &gt; should validate vector search request" time="0.0006702">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; AdvancedSearchRequest &gt; should validate hybrid search request" time="0.000345">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; SearchResult &gt; should validate SearchResult structure" time="0.0001688">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; SearchResult &gt; should validate search result with facets" time="0.0012663">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; CachedSearchResult &gt; should validate CachedSearchResult structure" time="0.0001661">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; CachedSearchResult &gt; should validate cached search result" time="0.0002613">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/types/services.types.test.ts" timestamp="2025-01-07T17:34:02.868Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0079493">
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; should validate Services structure" time="0.0023362">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Engine Service &gt; should validate engine service structure" time="0.0003105">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Sync Service &gt; should validate sync service structure" time="0.0003141">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Documents Service &gt; should validate documents service structure" time="0.0003124">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Health Service &gt; should validate health service structure" time="0.0004554">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Health Service &gt; should validate health check response" time="0.0003923">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Observe Service &gt; should validate observe service structure" time="0.0003924">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/types/session.types.test.ts" timestamp="2025-01-07T17:34:02.869Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0092831">
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Session &gt; should validate Session structure" time="0.0023393">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Session &gt; should allow metadata with any value type" time="0.0005555">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Conversation &gt; should validate Conversation structure" time="0.0003898">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Conversation &gt; should allow optional fields to be undefined" time="0.0004735">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Conversation &gt; should validate conversation with all fields" time="0.0006868">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Message &gt; should validate Message structure" time="0.0003791">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Message &gt; should validate message role values" time="0.0006018">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Message &gt; should validate message with metadata" time="0.0003909">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/clients/openai.test.ts" timestamp="2025-01-07T17:34:02.872Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0330509">
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; createFineTune &gt; should create a fine-tuning job successfully" time="0.0111374">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; createFineTune &gt; should handle file creation errors" time="0.0063026">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; createFineTune &gt; should handle fine-tuning job creation errors" time="0.0047065">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; getFineTuneStatus &gt; should retrieve fine-tuning job status successfully" time="0.0026453">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; getFineTuneStatus &gt; should handle status retrieval errors" time="0.0030011">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; getFineTuneStatus &gt; should handle job status with error" time="0.0021026">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/config/settings.test.ts" timestamp="2025-01-07T17:34:02.873Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.0456642">
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; initialization &gt; should create singleton instance" time="0.004444">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; initialization &gt; should initialize with default config" time="0.0076305">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should load config from file" time="0.005587">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should handle file loading errors" time="0.0038861">
            <system-err>
Error loading config file: Error: File read error

            </system-err>
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should load config from environment variables" time="0.0032777">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should handle environment variable type conversion" time="0.0047078">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should respect configuration priority (env &gt; file &gt; default)" time="0.0043602">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; config validation &gt; should throw on invalid configuration" time="0.0046406">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; config validation &gt; should throw when accessing unloaded configuration" time="0.0020962">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; environment helpers &gt; should correctly identify environments" time="0.0021831">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/config/types.test.ts" timestamp="2025-01-07T17:34:02.875Z" hostname="sophra" tests="16" failures="0" errors="0" skipped="0" time="0.0278332">
        <testcase classname="src/lib/nous/config/types.test.ts" name="ServerConfigSchema &gt; should validate valid server config" time="0.0062506">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ServerConfigSchema &gt; should apply default values" time="0.002827">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ServerConfigSchema &gt; should reject invalid port" time="0.0018534">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should validate valid registry config" time="0.0006638">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should require storagePath" time="0.0010009">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should apply default values" time="0.0009032">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should reject invalid maxVersionsPerEntry" time="0.0004858">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should validate required fields" time="0.000544">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ObserveConfigSchema &gt; should validate valid observe config" time="0.0012635">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ObserveConfigSchema &gt; should apply default values" time="0.0010853">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="LearnConfigSchema &gt; should validate valid learn config" time="0.0007604">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="LearnConfigSchema &gt; should apply default values" time="0.0007808">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ConfigSchema &gt; should validate complete valid config" time="0.0013685">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ConfigSchema &gt; should require environment" time="0.0008623">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ConfigSchema &gt; should validate environment enum values" time="0.0018965">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ConfigSchema &gt; should apply default values" time="0.0011059">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/learn/models.test.ts" timestamp="2025-01-07T17:34:02.878Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.0306259">
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; initialization &gt; should initialize with default values" time="0.005156">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; training &gt; should train on valid features and target" time="0.0038801">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; training &gt; should throw error when no features provided" time="0.0023285">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; prediction &gt; should throw error when predicting without training" time="0.000917">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; prediction &gt; should make predictions after training" time="0.0024316">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; evaluation &gt; should throw error when evaluating without training" time="0.0018903">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; evaluation &gt; should calculate metrics after training" time="0.0034435">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; state management &gt; should save model state" time="0.0035395">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; state management &gt; should load model state" time="0.0012302">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; state management &gt; should throw error when loading non-existent state" time="0.0012682">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/learn/pipeline.test.ts" timestamp="2025-01-07T17:34:02.880Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0357169">
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; calculateCost &gt; should calculate cost for gpt-3.5-turbo" time="0.0028072">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; calculateCost &gt; should calculate cost for gpt-4" time="0.0008764">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; calculateCost &gt; should use default model when not specified" time="0.0012048">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; trainAndDeploy &gt; should register and train a model with default config" time="0.0122776">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; trainAndDeploy &gt; should use provided config when available" time="0.0016451">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; trainAndDeploy &gt; should handle training errors" time="0.0035483">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; OpenAI training &gt; should train OpenAI model successfully" time="0.004027">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; OpenAI training &gt; should handle fine-tuning failure" time="0.0030038">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; custom model training &gt; should handle custom model training process" time="0.00284">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/learn/training.test.ts" timestamp="2025-01-07T17:34:02.881Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0216427">
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; shouldTrain &gt; should return false when not enough events" time="0.0083067">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; shouldTrain &gt; should return false when training interval not reached" time="0.0015512">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; shouldTrain &gt; should return false when event distribution is insufficient" time="0.0016663">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; shouldTrain &gt; should return true when all conditions are met" time="0.0009765">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; event distribution analysis &gt; should require minimum search events" time="0.0015966">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; event distribution analysis &gt; should require minimum user events" time="0.0014078">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; training interval &gt; should respect minimum interval between trainings" time="0.0013578">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; training interval &gt; should allow training after interval has passed" time="0.0006424">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/models/base.test.ts" timestamp="2025-01-07T17:34:02.882Z" hostname="sophra" tests="14" failures="0" errors="0" skipped="0" time="0.0252591">
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelConfigSchema &gt; should validate valid model config" time="0.0050421">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelConfigSchema &gt; should apply default status" time="0.0011004">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelConfigSchema &gt; should reject invalid status" time="0.0018913">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelConfigSchema &gt; should require all mandatory fields" time="0.0012588">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; initialization &gt; should initialize with base model" time="0.001199">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should register new model" time="0.001581">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should prevent duplicate registration" time="0.0022206">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should update existing model" time="0.0017172">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should throw error when updating non-existent model" time="0.001168">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should list all models" time="0.0016265">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should delete model" time="0.0006605">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should return false when deleting non-existent model" time="0.000647">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model retrieval &gt; should return undefined for non-existent model" time="0.0003978">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model retrieval &gt; should retrieve model by id" time="0.0006225">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/monitoring/metrics.test.ts" timestamp="2025-01-07T17:34:02.884Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.0263065">
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; initialization &gt; should initialize with default values" time="0.0033307">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; initialization &gt; should initialize with custom config" time="0.0009577">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; engine metrics &gt; should record engine metric" time="0.0046127">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; engine metrics &gt; should handle engine metric recording errors" time="0.0023852">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; engine metrics &gt; should respect sampling rate" time="0.0018133">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; learning metrics &gt; should record learning metric" time="0.0017291">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; learning metrics &gt; should handle learning metric recording errors" time="0.001984">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; learning metrics &gt; should handle optional fields" time="0.002572">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; logging behavior &gt; should log successful engine metric recording" time="0.0015642">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; logging behavior &gt; should log successful learning metric recording" time="0.0014937">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; logging behavior &gt; should log when skipping metrics due to sampling" time="0.0012492">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/observe/collector.test.ts" timestamp="2025-01-07T17:34:02.886Z" hostname="sophra" tests="15" failures="0" errors="0" skipped="0" time="0.0791478">
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; observer management &gt; should register observer" time="0.0038048">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; observer management &gt; should not register duplicate observer" time="0.001398">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; observer management &gt; should remove observer" time="0.0009558">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; observer management &gt; should handle removing non-registered observer" time="0.0011893">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event collection &gt; should notify observer of event" time="0.0029876">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event collection &gt; should notify multiple observers" time="0.0012768">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event collection &gt; should handle observer errors" time="0.0004881">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event filtering &gt; should filter events by type" time="0.0008979">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event filtering &gt; should handle multiple event types" time="0.0018599">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event validation &gt; should validate event structure" time="0.0013804">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event validation &gt; should validate event timestamp" time="0.0010643">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event validation &gt; should validate event type" time="0.0006846">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event processing &gt; should process events in order" time="0.0027196">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event processing &gt; should handle high event frequency" time="0.0096299">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event processing &gt; should maintain event order with async observers" time="0.0455726">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/observe/coordinator.test.ts" timestamp="2025-01-07T17:34:02.888Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0197941">
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; initialization &gt; should initialize with default processors" time="0.0029043">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; processor registration &gt; should register custom processor" time="0.0025139">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; processor registration &gt; should handle multiple processors" time="0.0007456">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; signal processing &gt; should process single signal" time="0.0009672">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; signal processing &gt; should process batch of signals" time="0.00121">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; signal processing &gt; should skip signals that do not match criteria" time="0.0012114">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; pattern detection &gt; should detect patterns from signals" time="0.0015398">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; pattern detection &gt; should combine patterns from multiple processors" time="0.0020366">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; error handling &gt; should handle processor errors gracefully" time="0.0033374">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/observe/processors.test.ts" timestamp="2025-01-07T17:34:02.890Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.0259244">
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="TimeBasedProcessor &gt; extract_features &gt; should extract features from a signal" time="0.0067059">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="TimeBasedProcessor &gt; extract_features &gt; should handle missing or invalid values" time="0.0013999">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="TimeBasedProcessor &gt; detect_patterns &gt; should detect patterns from multiple signals" time="0.0023905">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="TimeBasedProcessor &gt; detect_patterns &gt; should not detect patterns with insufficient signals" time="0.0009358">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; process_signal &gt; should process search signals" time="0.0015356">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; process_signal &gt; should handle non-search signals" time="0.0009906">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; process_signal &gt; should handle processing errors gracefully" time="0.0045137">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; extract_features &gt; should extract search-specific features" time="0.0010639">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; extract_features &gt; should handle missing metadata" time="0.0010305">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; extract_features &gt; should handle invalid metadata" time="0.0007551">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; detect_patterns &gt; should detect search patterns" time="0.0012642">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/observe/signals.test.ts" timestamp="2025-01-07T17:34:02.892Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0104622">
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="SignalRouter &gt; route &gt; should route signals to matching processors" time="0.0027112">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="SignalRouter &gt; route &gt; should not route signals that don&apos;t match criteria" time="0.0006635">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="SignalRouter &gt; route &gt; should handle custom filter criteria" time="0.0005725">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="SignalRouter &gt; processor registration &gt; should register and unregister processors" time="0.0004788">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; process_batch &gt; should process multiple signals in batch" time="0.0011502">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; process_batch &gt; should prioritize signals based on priority" time="0.0003567">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; process_signal &gt; should process a single signal" time="0.0009229">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; prioritize &gt; should sort signals by priority" time="0.0003789">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; prioritize &gt; should handle signals without priority metadata" time="0.0005083">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/engine/real-time-learner.test.ts" timestamp="2025-01-07T17:34:02.894Z" hostname="sophra" tests="3" failures="0" errors="0" skipped="0" time="0.2596512">
        <testcase classname="src/lib/nous/engine/real-time-learner.test.ts" name="RealTimeLearner &gt; lifecycle &gt; should handle start and stop correctly" time="0.0084639">
        </testcase>
        <testcase classname="src/lib/nous/engine/real-time-learner.test.ts" name="RealTimeLearner &gt; event processing &gt; should process events and handle errors" time="0.2455633">
        </testcase>
        <testcase classname="src/lib/nous/engine/real-time-learner.test.ts" name="RealTimeLearner &gt; pattern analysis &gt; should validate strategies and calculate strength" time="0.0035979">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/engine/service.test.ts" timestamp="2025-01-07T17:34:02.895Z" hostname="sophra" tests="5" failures="5" errors="0" skipped="0" time="0.4676508">
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; initialization &gt; should initialize with default state" time="0.1703584">
            <failure message="
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`." type="PrismaClientInitializationError">
PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:199:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; initialization &gt; should create new state if none exists" time="0.0818778">
            <failure message="promise rejected &quot;PrismaClientInitializationError{ …(5) }&quot; instead of resolving" type="AssertionError">
AssertionError: promise rejected &quot;PrismaClientInitializationError{ …(5) }&quot; instead of resolving
 ❯ src/lib/nous/engine/service.test.ts:216:46

Caused by: Caused by: PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:216:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; operations &gt; should start operation" time="0.0744715">
            <failure message="
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`." type="PrismaClientInitializationError">
PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:256:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; pattern analysis &gt; should analyze patterns from learning events" time="0.0689259">
            <failure message="
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`." type="PrismaClientInitializationError">
PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:268:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; strategy execution &gt; should handle strategy execution errors" time="0.0699937">
            <failure message="
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`." type="PrismaClientInitializationError">
PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:327:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/engine/types.test.ts" timestamp="2025-01-07T17:34:02.901Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.0160398">
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineStatus &gt; should have all required statuses" time="0.0041974">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineOperationType &gt; should have all required operation types" time="0.0010294">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineOperationStatus &gt; should have all required operation statuses" time="0.0009948">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineOptimizationType &gt; should have all required optimization types" time="0.000995">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineRiskLevel &gt; should have all required risk levels" time="0.0009234">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineRiskLevel &gt; should maintain risk level order" time="0.0007476">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; TestMetrics &gt; should validate test metrics structure" time="0.0006774">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; VariantAnalysis &gt; should validate variant analysis structure" time="0.0006368">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; ImpactAnalysis &gt; should validate impact analysis structure" time="0.0010305">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; ImpactAnalysis &gt; should validate impact analysis value ranges" time="0.00067">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/registry/index.test.ts" timestamp="2025-01-07T17:34:02.903Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.0446679">
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model registration &gt; should register a new model" time="0.0131156">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mr2cpz0000nsjbafzsd6jf&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.096Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237095&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mr2cpz0000nsjbafzsd6jf&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.096Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237095&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model registration &gt; should handle registration errors" time="0.0054612">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model retrieval &gt; should retrieve a registered model" time="0.0023692">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mr2cqg0001nsjbdcrq5m82&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.112Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237112&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mr2cqg0001nsjbdcrq5m82&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.112Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237112&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model retrieval &gt; should return null for non-existent model" time="0.0005003">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model updates &gt; should update an existing model" time="0.0035987">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mr2cqj0002nsjb9pxdfvsz&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.115Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237115&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mr2cqj0002nsjb9pxdfvsz&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.115Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237115&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model updates &gt; should return null when updating non-existent model" time="0.0004337">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model updates &gt; should handle update errors" time="0.0021734">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mr2cqn0003nsjb8u1c5oa6&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.120Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237120&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mr2cqn0003nsjb8u1c5oa6&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.120Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237120&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model deletion &gt; should delete an existing model" time="0.0019654">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mr2cqq0004nsjb9q7f8ewk&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.122Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237122&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mr2cqq0004nsjb9q7f8ewk&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.122Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237122&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model deletion &gt; should return false when deleting non-existent model" time="0.0007633">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model deletion &gt; should handle deletion errors" time="0.0009558">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model listing &gt; should list all models when no type is specified" time="0.0044025">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mr2cqu0005nsjbac6tax3k&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.126Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237126&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mr2cqu0005nsjbac6tax3k&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.126Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237126&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version before validation: {
  id: [32m&apos;cm5mr2cqv0006nsjb5jm453cv&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.128Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237127&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mr2cqv0006nsjb5jm453cv&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.128Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237127&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model listing &gt; should filter models by type" time="0.0029619">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mr2cqy0007nsjbheef5mc9&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.130Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237130&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mr2cqy0007nsjbheef5mc9&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.130Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237130&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version before validation: {
  id: [32m&apos;cm5mr2cqz0008nsjb8m6e28tp&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.131Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237131&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mr2cqz0008nsjb8m6e28tp&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.131Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237131&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model listing &gt; should return empty array for non-existent type" time="0.0024701">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mr2cr10009nsjb9vwv1dsn&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.133Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237133&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mr2cr10009nsjb9vwv1dsn&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.133Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237133&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version before validation: {
  id: [32m&apos;cm5mr2cr2000ansjbbhyc7ys4&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.134Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237134&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mr2cr2000ansjbbhyc7ys4&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T17:33:57.134Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736271237134&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/registry/metadata.test.ts" timestamp="2025-01-07T17:34:02.906Z" hostname="sophra" tests="19" failures="0" errors="0" skipped="0" time="0.0300796">
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; schema management &gt; should register schema successfully" time="0.0066454">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; schema management &gt; should throw error when validating with non-existent schema" time="0.0010625">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should validate metadata against schema" time="0.0010773">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should validate metadata with optional fields" time="0.0027985">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should validate metadata with missing optional fields" time="0.0007685">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should fail validation when required fields are missing" time="0.00058">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should fail validation when field types are incorrect" time="0.0016334">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should fail validation when custom validators fail" time="0.0006286">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should fail validation when nested object is invalid" time="0.0010953">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should ignore unknown fields during validation" time="0.0006304">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should store metadata successfully" time="0.000898">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should throw error when storing invalid metadata" time="0.0006649">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should update metadata successfully" time="0.000943">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should fail update with invalid metadata" time="0.0005918">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should delete metadata successfully" time="0.0005505">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should handle deletion of non-existent entry" time="0.0003747">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata listing &gt; should list all metadata entries" time="0.0020074">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata listing &gt; should filter metadata entries" time="0.0008073">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata listing &gt; should return empty object when no entries match filter" time="0.002308">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/registry/store.test.ts" timestamp="2025-01-07T17:34:02.910Z" hostname="sophra" tests="21" failures="0" errors="0" skipped="0" time="0.0234474">
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should register new entry" time="0.0039991">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should prevent duplicate registration" time="0.0021112">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should track versions" time="0.0009543">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should handle multiple versions" time="0.0006574">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should prevent version conflicts" time="0.0007184">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; updates &gt; should update existing entry" time="0.0009793">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; updates &gt; should return undefined when updating non-existent entry" time="0.0005628">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; updates &gt; should preserve unmodified fields" time="0.0006463">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; dependency validation &gt; should validate dependencies during registration" time="0.0012484">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; dependency validation &gt; should prevent circular dependencies" time="0.0008455">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; dependency validation &gt; should validate dependencies during updates" time="0.0005129">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; tag management &gt; should get entries by tag" time="0.0011894">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; tag management &gt; should handle multiple entries with same tag" time="0.0008199">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; tag management &gt; should return empty array for non-existent tag" time="0.0005115">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; deletion &gt; should delete existing entry" time="0.0008394">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; deletion &gt; should return false when deleting non-existent entry" time="0.0002826">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; deletion &gt; should clean up version tracking" time="0.0002608">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; deletion &gt; should clean up tag indices" time="0.0005661">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; listing &gt; should list all entries" time="0.0008018">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; listing &gt; should handle multiple entries" time="0.0007978">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; listing &gt; should return empty array when no entries exist" time="0.0005498">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/registry/version.test.ts" timestamp="2025-01-07T17:34:02.913Z" hostname="sophra" tests="19" failures="0" errors="0" skipped="0" time="0.0260616">
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; toString &gt; should format version correctly" time="0.0023199">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; toString &gt; should handle negative version components" time="0.000404">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; compareTo &gt; should compare major versions" time="0.0008276">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; compareTo &gt; should compare minor versions" time="0.0005905">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; compareTo &gt; should compare patch versions" time="0.000635">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; compareTo &gt; should consider equal versions" time="0.0011985">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version creation &gt; should create new version with defaults" time="0.0011484">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version creation &gt; should create version with specified values" time="0.0010548">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version creation &gt; should prevent duplicate versions" time="0.0023244">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version state transitions &gt; should validate state transitions" time="0.0009477">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version state transitions &gt; should prevent invalid state transitions" time="0.0007888">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version state transitions &gt; should prevent transitions from terminal states" time="0.0007327">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version retrieval &gt; should get version by string" time="0.0010515">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version retrieval &gt; should return undefined for non-existent version" time="0.0005541">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version retrieval &gt; should get latest version excluding drafts" time="0.0010733">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version retrieval &gt; should get latest version including drafts" time="0.0008776">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version listing &gt; should list all versions" time="0.0027898">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version listing &gt; should list versions by state" time="0.0016102">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version listing &gt; should return empty array for non-existent entry" time="0.0007837">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/types/core.test.ts" timestamp="2025-01-07T17:34:02.916Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.0168249">
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; EventType &gt; should have all required event types" time="0.0033939">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; EventType &gt; should not allow invalid event types" time="0.0016031">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Severity &gt; should have all severity levels" time="0.0013827">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Severity &gt; should maintain correct ordering" time="0.0008162">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Event Interface &gt; should create valid event object" time="0.000746">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Event Interface &gt; should allow optional metadata" time="0.0006101">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Event Interface &gt; should enforce required properties" time="0.0007433">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Signal Interface &gt; should create valid signal object" time="0.0007435">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Signal Interface &gt; should enforce strength bounds" time="0.000949">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Metric Interface &gt; should create valid metric object" time="0.0006302">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Metric Interface &gt; should allow any numeric value" time="0.0004498">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; StateTransition Interface &gt; should create valid state transition object" time="0.0004755">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; StateTransition Interface &gt; should handle different value types" time="0.0006287">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/types/events.test.ts" timestamp="2025-01-07T17:34:02.918Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0142202">
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; BaseEvent &gt; should create valid base event" time="0.0030841">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; BaseEvent &gt; should allow optional fields to be undefined" time="0.0007924">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; BaseEvent &gt; should enforce required fields" time="0.0005215">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; ModelEvent &gt; should create valid model event" time="0.0008531">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; ModelEvent &gt; should enforce model event type" time="0.0014135">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; SearchEvent &gt; should create valid search event" time="0.0009147">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; SearchEvent &gt; should enforce search event type" time="0.0007476">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; EventProcessor &gt; should implement event processor interface" time="0.0007844">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; EventProcessor &gt; should process events correctly" time="0.0021269">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/utils/service-manager.test.ts" timestamp="2025-01-07T17:34:02.920Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0159206">
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; initialization &gt; should create singleton instance" time="0.0034784">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; initialization &gt; should throw if not initialized with config" time="0.0021716">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; service access &gt; should get signal coordinator" time="0.0022742">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; service access &gt; should get event collector" time="0.0009463">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; service access &gt; should get prisma client" time="0.0008209">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; service access &gt; should get redis client" time="0.0009465">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; shutdown &gt; should disconnect all services" time="0.0015432">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/utils/signal-response.test.ts" timestamp="2025-01-07T17:34:02.921Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0084203">
        <testcase classname="src/lib/nous/utils/signal-response.test.ts" name="Signal Response &gt; should create successful response" time="0.0045623">
        </testcase>
        <testcase classname="src/lib/nous/utils/signal-response.test.ts" name="Signal Response &gt; should include metadata" time="0.0011033">
        </testcase>
        <testcase classname="src/lib/nous/utils/signal-response.test.ts" name="Signal Response &gt; should handle custom options" time="0.0006997">
        </testcase>
        <testcase classname="src/lib/nous/utils/signal-response.test.ts" name="Signal Response &gt; should use default options" time="0.0003131">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/utils/threading.test.ts" timestamp="2025-01-07T17:34:02.922Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.2294784">
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should execute tasks immediately when capacity available" time="0.0026075">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should queue tasks when at capacity" time="0.1138583">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should handle multiple concurrent tasks" time="0.0011517">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should handle task failures" time="0.0020197">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should process queued tasks after failure" time="0.1065504">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should shutdown gracefully" time="0.0008468">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/database/client.test.ts" timestamp="2025-01-07T17:34:02.923Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.0305375">
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; getInstance &gt; should return the same instance when called multiple times" time="0.0042366">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connect &gt; should establish database connection successfully" time="0.0043682">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connect &gt; should not reconnect if already connected" time="0.0011698">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connect &gt; should handle connection errors" time="0.0039542">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; disconnect &gt; should disconnect successfully when connected" time="0.0014845">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; disconnect &gt; should not disconnect if already disconnected" time="0.0017661">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; disconnect &gt; should handle disconnect errors" time="0.002258">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; healthCheck &gt; should return true when database is healthy" time="0.0014033">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; healthCheck &gt; should return false and log error when health check fails" time="0.0035456">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connection pool management &gt; should manage active connections correctly" time="0.0007784">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connection pool management &gt; should wait and retry when connection pool is full" time="0.0007113">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connection pool management &gt; should not reduce active connections below 0" time="0.0006259">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; experimentConfig &gt; should get and set experiment config correctly" time="0.0009076">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/adaptation-engine.test.ts" timestamp="2025-01-07T17:34:02.925Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0262732">
        <testcase classname="src/lib/shared/engine/adaptation-engine.test.ts" name="AdaptationEngine &gt; Rule Management &gt; should add a rule successfully" time="0.0071467">
        </testcase>
        <testcase classname="src/lib/shared/engine/adaptation-engine.test.ts" name="AdaptationEngine &gt; Rule Management &gt; should detect patterns from events" time="0.0041077">
        </testcase>
        <testcase classname="src/lib/shared/engine/adaptation-engine.test.ts" name="AdaptationEngine &gt; Operation Execution &gt; should execute operation successfully" time="0.0050316">
        </testcase>
        <testcase classname="src/lib/shared/engine/adaptation-engine.test.ts" name="AdaptationEngine &gt; Operation Execution &gt; should handle operation execution errors" time="0.0075245">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/base-engine.test.ts" timestamp="2025-01-07T17:34:02.926Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0253931">
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Processor Management &gt; should register a processor successfully" time="0.0044352">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Processor Management &gt; should register multiple processors" time="0.0020097">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Processor Management &gt; should unregister a processor successfully" time="0.0010651">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Processor Management &gt; should handle unregistering a non-existent processor" time="0.0009521">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Engine Run &gt; should run all processors successfully" time="0.0011723">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Engine Run &gt; should continue processing even if one processor fails" time="0.0104289">
            <system-err>
Error running processor: Error: Process failed
    at [90mD:\sophra\[39msrc\lib\shared\engine\base-engine.test.ts:95:21
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Engine Run &gt; should run successfully with no processors" time="0.0010194">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Engine Run &gt; should run processors in registration order" time="0.0011454">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/learning-engine.test.ts" timestamp="2025-01-07T17:34:02.928Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0176718">
        <testcase classname="src/lib/shared/engine/learning-engine.test.ts" name="LearningEngine &gt; detectPatterns &gt; should create an operation and analyze patterns" time="0.0059528">
        </testcase>
        <testcase classname="src/lib/shared/engine/learning-engine.test.ts" name="LearningEngine &gt; getTimeSeriesData &gt; should delegate to timeBased processor" time="0.0048548">
        </testcase>
        <testcase classname="src/lib/shared/engine/learning-engine.test.ts" name="LearningEngine &gt; analyzeTemporalCorrelations &gt; should delegate to timeBased processor" time="0.0024767">
        </testcase>
        <testcase classname="src/lib/shared/engine/learning-engine.test.ts" name="LearningEngine &gt; findRecurringPatterns &gt; should delegate to timeBased processor" time="0.0019806">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/types/index.test.ts" timestamp="2025-01-07T17:34:02.928Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0123837">
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; Logger Interface &gt; should extend WinstonLogger" time="0.0025367">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; ServiceConfig Interface &gt; should allow valid redis configuration" time="0.0007671">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; ServiceConfig Interface &gt; should allow minimal redis configuration" time="0.0006109">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; ServiceConfig Interface &gt; should allow empty configuration" time="0.0003089">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; NousAdaptationType Enum &gt; should have correct values" time="0.0006261">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; NousAdaptationType Enum &gt; should be immutable" time="0.0018028">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; NousAdaptationType Enum &gt; should have exactly three values" time="0.0026942">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/documents.route.test.ts" timestamp="2025-01-07T17:34:02.930Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.066753">
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should handle valid document creation with embeddings" time="0.0362117">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should handle document with special characters in content" time="0.00398">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should create index if it does not exist" time="0.0068432">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should handle invalid JSON input" time="0.0033761">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should validate required fields" time="0.0044422">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should handle service errors gracefully" time="0.0099394">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/feedback/feedback.route.test.ts" timestamp="2025-01-07T17:34:02.931Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0620847">
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="GET /api/cortex/feedback &gt; should return feedback data with default parameters" time="0.0320586">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="GET /api/cortex/feedback &gt; should handle custom timeframe and limit parameters" time="0.0038796">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="GET /api/cortex/feedback &gt; should handle database errors gracefully" time="0.0013412">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="POST /api/cortex/feedback &gt; should handle missing feedback service" time="0.0106663">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="POST /api/cortex/feedback &gt; should reject invalid session IDs" time="0.0056872">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="POST /api/cortex/feedback &gt; should handle feedback processing errors" time="0.0034809">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="POST /api/cortex/feedback &gt; should successfully process valid feedback" time="0.0028982">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/indices/indices.route.test.ts" timestamp="2025-01-07T17:34:02.932Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0524883">
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; GET /api/cortex/indices &gt; should return formatted indices data" time="0.0360731">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; GET /api/cortex/indices &gt; should handle elasticsearch error response format" time="0.0009369">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; POST /api/cortex/indices &gt; should handle duplicate index creation gracefully" time="0.0045601">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; POST /api/cortex/indices &gt; should return validation error for invalid request body" time="0.0028926">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; DELETE /api/cortex/indices &gt; should return error when index parameter is missing" time="0.0013879">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; DELETE /api/cortex/indices &gt; should successfully delete an index" time="0.002669">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/metrics/metrics.route.test.ts" timestamp="2025-01-07T17:34:02.933Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0539364">
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should return metrics data with correct content type header" time="0.0311569">
        </testcase>
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should handle empty metrics data" time="0.0097833">
        </testcase>
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should handle service errors gracefully" time="0.0071762">
        </testcase>
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should handle missing metrics service" time="0.0015829">
        </testcase>
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should log debug information for valid metrics" time="0.001975">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/search/search.route.test.ts" timestamp="2025-01-07T17:34:02.934Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0647518">
        <testcase classname="src/app/api/cortex/search/search.route.test.ts" name="POST /api/cortex/search &gt; should perform text search successfully" time="0.0383219">
        </testcase>
        <testcase classname="src/app/api/cortex/search/search.route.test.ts" name="POST /api/cortex/search &gt; should perform vector search successfully" time="0.006856">
        </testcase>
        <testcase classname="src/app/api/cortex/search/search.route.test.ts" name="POST /api/cortex/search &gt; should handle faceted search correctly" time="0.0028116">
        </testcase>
        <testcase classname="src/app/api/cortex/search/search.route.test.ts" name="POST /api/cortex/search &gt; should return 500 for invalid vector dimensions" time="0.0146864">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/sessions/sessions.route.test.ts" timestamp="2025-01-07T17:34:02.935Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0412514">
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; POST /api/sessions &gt; should create a new session with valid metadata" time="0.0299157">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; POST /api/sessions &gt; should return 400 for invalid metadata type" time="0.0009669">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; POST /api/sessions &gt; should return 400 for invalid userId type" time="0.001285">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; GET /api/sessions &gt; should retrieve a session by id" time="0.0022429">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; GET /api/sessions &gt; should return 400 when session id is missing" time="0.0013353">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; GET /api/sessions &gt; should handle service errors" time="0.0021679">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/signals/route.test.ts" timestamp="2025-01-07T17:34:02.936Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0604858">
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should fetch signals with default pagination" time="0.0454398">
        </testcase>
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should handle filtering by source and type" time="0.0034777">
        </testcase>
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should handle database errors gracefully" time="0.0008315">
        </testcase>
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should create a new signal with valid data" time="0.0070323">
        </testcase>
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should handle database errors during creation" time="0.001557">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/signals/signals.route.test.ts" timestamp="2025-01-07T17:34:02.937Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0738094">
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should fetch signals with default pagination" time="0.0494381">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should handle filtering by source and type" time="0.0038317">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should handle database errors gracefully" time="0.0010163">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should create a new signal with valid data" time="0.0100525">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should reject invalid signal data" time="0.0039054">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should handle database errors during creation" time="0.0026941">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/adapt/actions/index.test.ts" timestamp="2025-01-07T17:34:02.938Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0175148">
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="NotifyAction &gt; should log notification with context data" time="0.0077872">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="UpdateStateAction &gt; should update system state with new values" time="0.0007382">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="UpdateStateAction &gt; should override existing values" time="0.0005003">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="CompositeAction &gt; should execute all actions in sequence" time="0.0007121">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="CompositeAction &gt; should continue execution if one action fails" time="0.0014582">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should adjust metric value within bounds" time="0.0012434">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should respect minimum value" time="0.0005331">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should respect maximum value" time="0.0004868">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should initialize metric if not present" time="0.0006841">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/adapt/rules/index.test.ts" timestamp="2025-01-07T17:34:02.939Z" hostname="sophra" tests="20" failures="0" errors="0" skipped="0" time="0.0166382">
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should register and retrieve rules" time="0.0031367">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should unregister rules" time="0.0008861">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should execute triggered rules in priority order" time="0.0014529">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should handle rule execution errors" time="0.0031798">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should only execute enabled rules" time="0.0004928">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gt operator correctly" time="0.0005272">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gt operator correctly" time="0.0002413">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lt operator correctly" time="0.000169">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lt operator correctly" time="0.0003712">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gte operator correctly" time="0.0004928">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gte operator correctly" time="0.0002971">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lte operator correctly" time="0.0001847">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lte operator correctly" time="0.0002018">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate eq operator correctly" time="0.000192">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate eq operator correctly" time="0.0001968">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should return false for undefined metrics" time="0.0002765">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should match event type and properties" time="0.0004892">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should not match different event type" time="0.0002502">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should not match when properties differ" time="0.0003166">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should match when no properties specified" time="0.0005139">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/adapt/types/index.test.ts" timestamp="2025-01-07T17:34:02.943Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0125575">
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should validate valid rule context" time="0.0044372">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should validate context without optional metadata" time="0.0007161">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should reject invalid timestamp" time="0.0015265">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should reject non-numeric metrics" time="0.0010819">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should reject missing required fields" time="0.0009505">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RulePriority &gt; should have correct priority values" time="0.0009631">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RulePriority &gt; should maintain priority order" time="0.0005357">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/adapters/metrics-adapter.test.ts" timestamp="2025-01-07T17:34:02.945Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0176632">
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; configuration &gt; should have default sample rate and batch size" time="0.0039377">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get average latency" time="0.0019735">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get throughput" time="0.0013966">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get error rate" time="0.0007876">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get CPU usage" time="0.0009302">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get memory usage" time="0.0010334">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric recording &gt; should record engine metrics" time="0.0029557">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric recording &gt; should record learning metrics" time="0.0013617">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/adapters/redis-adapter.test.ts" timestamp="2025-01-07T17:34:02.946Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.019761">
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; get &gt; should successfully get a value and record metrics" time="0.006484">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; get &gt; should handle null values correctly" time="0.0020922">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; get &gt; should record error metrics when Redis operation fails" time="0.0044428">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; constructor &gt; should initialize with default values when environment variables are not set" time="0.0022827">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; constructor &gt; should initialize with custom environment variables" time="0.0021921">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/base-processor.test.ts" timestamp="2025-01-07T17:34:02.947Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0135852">
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; calculateConfidence &gt; should calculate confidence correctly with valid metrics" time="0.0035431">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; calculateConfidence &gt; should handle empty metrics object" time="0.0008975">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; calculateConfidence &gt; should handle negative metric values" time="0.0010714">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; calculateConfidence &gt; should handle extremely high metric values" time="0.0005135">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; analyze &gt; should analyze events and return patterns" time="0.0035258">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; analyze &gt; should handle empty events array" time="0.0012544">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/feedback-processor.test.ts" timestamp="2025-01-07T17:34:02.948Z" hostname="sophra" tests="3" failures="0" errors="0" skipped="0" time="0.0144679">
        <testcase classname="src/lib/shared/engine/processors/feedback-processor.test.ts" name="FeedbackProcessor &gt; analyze &gt; should analyze user feedback events successfully" time="0.0100761">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/feedback-processor.test.ts" name="FeedbackProcessor &gt; analyze &gt; should handle empty events array" time="0.0009611">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/feedback-processor.test.ts" name="FeedbackProcessor &gt; analyze &gt; should handle events without feedback metadata" time="0.0011458">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/performance-processor.test.ts" timestamp="2025-01-07T17:34:02.949Z" hostname="sophra" tests="3" failures="0" errors="0" skipped="0" time="0.0128938">
        <testcase classname="src/lib/shared/engine/processors/performance-processor.test.ts" name="PerformanceProcessor &gt; analyze &gt; should analyze performance events successfully" time="0.0080873">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/performance-processor.test.ts" name="PerformanceProcessor &gt; analyze &gt; should handle empty events array" time="0.0014418">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/performance-processor.test.ts" name="PerformanceProcessor &gt; analyze &gt; should handle events without performance metadata" time="0.0010801">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/strategy-processor.test.ts" timestamp="2025-01-07T17:34:02.950Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0218698">
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; generateStrategies &gt; should generate strategies for high relevance search pattern" time="0.0084061">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; generateStrategies &gt; should not generate query transformation strategy for slow patterns" time="0.0011898">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; executeStrategy &gt; should execute weight adjustment strategy successfully" time="0.0032648">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; executeStrategy &gt; should execute query transformation strategy successfully" time="0.0010176">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; executeStrategy &gt; should execute index optimization strategy successfully" time="0.001474">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; executeStrategy &gt; should execute cache strategy successfully" time="0.0010693">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; Pattern Analysis &gt; should identify high performance patterns" time="0.000751">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; Pattern Analysis &gt; should identify slow query patterns" time="0.0008893">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; Pattern Analysis &gt; should identify high traffic patterns" time="0.0009256">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/time-based-processor.test.ts" timestamp="2025-01-07T17:34:02.951Z" hostname="sophra" tests="12" failures="0" errors="0" skipped="0" time="0.1154305">
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; analyze &gt; should analyze time-based events" time="0.0864824">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; analyze &gt; should handle empty event list" time="0.0026878">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; getTimeSeriesData &gt; should retrieve time series data" time="0.001473">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; getTimeSeriesData &gt; should validate time range parameters" time="0.0028574">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; analyzeCorrelations &gt; should analyze correlations in time series data" time="0.0008008">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; analyzeCorrelations &gt; should handle empty time series data" time="0.0013471">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; findRecurringPatterns &gt; should find recurring patterns" time="0.0016943">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; findRecurringPatterns &gt; should validate pattern search parameters" time="0.0018207">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; findRecurringPatterns &gt; should handle minimum confidence threshold" time="0.0042002">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; time series analysis &gt; should detect seasonal patterns" time="0.0033302">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; time series analysis &gt; should detect trend patterns" time="0.0025812">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; time series analysis &gt; should detect anomalies" time="0.0016575">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/logger/src/logger.test.ts" timestamp="2025-01-07T17:34:02.953Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0216052">
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; info() should log messages with INFO level" time="0.0062489">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; error() should log messages with ERROR level" time="0.0013114">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; warn() should log messages with WARN level" time="0.0010103">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; debug() should log messages with DEBUG level" time="0.0008867">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; should handle objects and errors" time="0.0018457">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; error handling &gt; should handle invalid log levels gracefully" time="0.0008782">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; error handling &gt; should handle undefined messages" time="0.0009866">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; configuration &gt; should respect log level settings" time="0.0018566">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; configuration &gt; should handle invalid configuration gracefully" time="0.0031339">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/ab-test/assign/assign.route.test.ts" timestamp="2025-01-07T17:34:02.956Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.026509">
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 500 if service initialization fails" time="0.01859">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 400 if request body is invalid" time="0.0027577">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 404 if test is not found by name" time="0.0009732">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 404 if no eligible variant is found" time="0.0006656">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 200 and assign a variant successfully" time="0.0018733">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/analytics/reports/report.route.test.ts" timestamp="2025-01-07T17:34:02.957Z" hostname="sophra" tests="3" failures="0" errors="0" skipped="0" time="0.0175568">
        <testcase classname="src/app/api/cortex/analytics/reports/report.route.test.ts" name="GET analytics report &gt; should return analytics report with default timeWindow" time="0.0142278">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/reports/report.route.test.ts" name="GET analytics report &gt; should use custom timeWindow from query params" time="0.0008075">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/reports/report.route.test.ts" name="GET analytics report &gt; should handle errors and return 500 status" time="0.0013365">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/ab-test/create/create.route.test.ts" timestamp="2025-01-07T17:34:02.957Z" hostname="sophra" tests="2" failures="0" errors="0" skipped="0" time="0.0536154">
        <testcase classname="src/app/api/cortex/ab-test/create/create.route.test.ts" name="POST /api/cortex/ab-test/create &gt; should create an A/B test successfully" time="0.0432057">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/create/create.route.test.ts" name="POST /api/cortex/ab-test/create &gt; should return 500 when abTesting service is not available" time="0.008067">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/analytics/search/search.route.test.ts" timestamp="2025-01-07T17:34:02.958Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.1077306">
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="POST /api/cortex/analytics/search &gt; should successfully create search event" time="0.0905838">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="POST /api/cortex/analytics/search &gt; should handle missing analytics service" time="0.0071176">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="GET /api/cortex/analytics/search &gt; should retrieve search events with custom timeframe" time="0.0039033">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="GET /api/cortex/analytics/search &gt; should handle invalid JSON in facetsUsed" time="0.0013027">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="GET /api/cortex/analytics/search &gt; should handle service error" time="0.0019197">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/bulk/bulk.route.test.ts" timestamp="2025-01-07T17:34:02.959Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0708214">
        <testcase classname="src/app/api/cortex/documents/bulk/bulk.route.test.ts" name="POST /api/cortex/documents/bulk &gt; should successfully process bulk documents with default tableName" time="0.0352884">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/bulk/bulk.route.test.ts" name="POST /api/cortex/documents/bulk &gt; should handle batch processing for large document sets" time="0.0273972">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/bulk/bulk.route.test.ts" name="POST /api/cortex/documents/bulk &gt; should reject invalid document schema" time="0.0037596">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/bulk/bulk.route.test.ts" name="POST /api/cortex/documents/bulk &gt; should handle sync service errors" time="0.0022249">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/engine/health/engine.health.route.test.ts" timestamp="2025-01-07T17:34:02.960Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0585399">
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should return healthy status when engine is operational" time="0.0372963">
        </testcase>
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should handle service timeout correctly" time="0.0053189">
        </testcase>
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should handle missing engine service gracefully" time="0.0016425">
        </testcase>
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should handle service manager failure" time="0.0080861">
        </testcase>
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should include all required metrics in healthy response" time="0.0038099">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/verify/verify.route.test.ts" timestamp="2025-01-07T17:34:02.961Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0595913">
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should return 400 when index parameter is missing" time="0.0431077">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should return 400 when id parameter is missing" time="0.0015548">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should return 404 when index is not found in database" time="0.0016462">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should return document verification details when document exists" time="0.0060558">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should handle non-existent document gracefully" time="0.0020092">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should handle elasticsearch service errors" time="0.0023585">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/[id]/id.route.test.ts" timestamp="2025-01-07T17:34:02.962Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0696397">
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; PUT /api/cortex/documents/[id] &gt; should successfully update a document" time="0.053854">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; PUT /api/cortex/documents/[id] &gt; should handle invalid update fields" time="0.0035599">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; GET /api/cortex/documents/[id] &gt; should retrieve a document successfully" time="0.0038085">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; GET /api/cortex/documents/[id] &gt; should handle non-existent index" time="0.0007532">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; DELETE /api/cortex/documents/[id] &gt; should delete a document successfully" time="0.002213">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; DELETE /api/cortex/documents/[id] &gt; should handle already deleted document gracefully" time="0.0017513">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" timestamp="2025-01-07T17:34:02.963Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0568167">
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; GET /api/nous/ab-testing/experiments &gt; should return experiments with default pagination" time="0.0354493">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; GET /api/nous/ab-testing/experiments &gt; should handle pagination parameters" time="0.0024055">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; GET /api/nous/ab-testing/experiments &gt; should handle status filter" time="0.0019364">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; GET /api/nous/ab-testing/experiments &gt; should handle database errors" time="0.0037397">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; POST /api/nous/ab-testing/experiments &gt; should create a new experiment" time="0.0044365">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; POST /api/nous/ab-testing/experiments &gt; should return 400 for invalid experiment data" time="0.0039997">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; POST /api/nous/ab-testing/experiments &gt; should handle database errors during creation" time="0.00209">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/results/results.route.test.ts" timestamp="2025-01-07T17:34:02.965Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0550657">
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; POST /api/nous/ab-testing/results &gt; should reject invalid request body" time="0.0454199">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; POST /api/nous/ab-testing/results &gt; should handle non-existent experiment" time="0.0009849">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; POST /api/nous/ab-testing/results &gt; should successfully record metrics with metadata" time="0.0022773">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; GET /api/nous/ab-testing/results &gt; should reject request without testId" time="0.0014645">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; should return aggregated metrics" time="0.0014417">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; should handle database errors gracefully" time="0.0007064">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/adapt/apply/apply.route.test.ts" timestamp="2025-01-07T17:34:02.966Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.063944">
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should validate request format and return 400 for invalid input" time="0.0458517">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should handle case when no rules are found" time="0.0029111">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should process valid request with metrics successfully" time="0.0075912">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should handle database errors gracefully" time="0.0021575">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should handle engine evaluation errors" time="0.0021103">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/adapt/rules/rules.route.test.ts" timestamp="2025-01-07T17:34:02.967Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0976559">
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; GET &gt; should return all adaptation rules ordered by priority" time="0.0380314">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; GET &gt; should handle database errors during fetch" time="0.0009149">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; POST &gt; should create multiple adaptation rules successfully" time="0.0484222">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; POST &gt; should reject invalid rule format" time="0.0038424">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; POST &gt; should handle empty rules array" time="0.0016717">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; POST &gt; should handle database transaction errors" time="0.0021055">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/adapt/suggest/suggest.route.test.ts" timestamp="2025-01-07T17:34:02.968Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.108542">
        <testcase classname="src/app/api/nous/adapt/suggest/suggest.route.test.ts" name="Adaptation Suggestion Route Handler &gt; should successfully process valid adaptation suggestion" time="0.0934395">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/suggest/suggest.route.test.ts" name="Adaptation Suggestion Route Handler &gt; should reject invalid payload with missing required fields" time="0.0036829">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/suggest/suggest.route.test.ts" name="Adaptation Suggestion Route Handler &gt; should reject payload with invalid value ranges" time="0.0018577">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/suggest/suggest.route.test.ts" name="Adaptation Suggestion Route Handler &gt; should handle database errors appropriately" time="0.0078194">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/events/events.route.test.ts" timestamp="2025-01-07T17:34:02.969Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0596437">
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should fetch events with default parameters" time="0.0490322">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle filtering by type and date range" time="0.0023376">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle invalid query parameters" time="0.0017554">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle database connection failure" time="0.0007305">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle database query errors gracefully" time="0.0014354">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle empty results" time="0.001382">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/metrics/metrics.route.test.ts" timestamp="2025-01-07T17:34:02.970Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0571367">
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should fetch metrics with valid parameters" time="0.0426083">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle invalid metric types" time="0.0023429">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle invalid timeframe parameter" time="0.0016749">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle invalid interval parameter" time="0.0011255">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle database connection failure" time="0.0018811">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle database query failure" time="0.001928">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle empty results" time="0.0012098">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle multiple metrics and timeframes" time="0.0015264">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/feedback/feedback.route.test.ts" timestamp="2025-01-07T17:34:02.971Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.116851">
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; GET /api/nous/learn/feedback &gt; should fetch feedback requests successfully" time="0.0458868">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; GET /api/nous/learn/feedback &gt; should handle empty results" time="0.0009847">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; GET /api/nous/learn/feedback &gt; should handle database errors gracefully" time="0.0013194">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should create feedback successfully" time="0.0520363">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle invalid feedback data" time="0.0028457">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle missing feedback array" time="0.0019202">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle invalid rating values" time="0.0025666">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle database errors during creation" time="0.0031244">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle malformed JSON in request body" time="0.0023463">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/models/models.route.test.ts" timestamp="2025-01-07T17:34:02.972Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0693899">
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; GET /api/nous/learn/models &gt; should fetch models with their latest versions" time="0.0478997">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; GET /api/nous/learn/models &gt; should handle database errors gracefully" time="0.0081174">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; POST /api/nous/learn/models &gt; should create a new model with valid data" time="0.0050949">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; POST /api/nous/learn/models &gt; should reject invalid model data" time="0.0028048">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; POST /api/nous/learn/models &gt; should handle database errors during creation" time="0.0023236">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" timestamp="2025-01-07T17:34:02.973Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0613288">
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; GET /api/nous/learn/search-patterns &gt; should fetch patterns with default parameters" time="0.0470296">
        </testcase>
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; GET /api/nous/learn/search-patterns &gt; should handle query filtering" time="0.0010751">
        </testcase>
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; GET /api/nous/learn/search-patterns &gt; should handle database errors gracefully" time="0.0012231">
        </testcase>
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; POST /api/nous/learn/search-patterns &gt; should create patterns with valid data" time="0.0072193">
        </testcase>
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; POST /api/nous/learn/search-patterns &gt; should reject invalid pattern data" time="0.0021825">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/signals/observe/observe.route.test.ts" timestamp="2025-01-07T17:34:02.974Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0541774">
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; GET /api/nous/signals/observe &gt; should fetch signal stats without filters" time="0.0385389">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; GET /api/nous/signals/observe &gt; should handle filtering by source and type" time="0.003055">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; GET /api/nous/signals/observe &gt; should handle database errors gracefully" time="0.0007847">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; POST /api/nous/signals/observe &gt; should fetch detailed signal stats with valid query" time="0.0048015">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; POST /api/nous/signals/observe &gt; should reject invalid query format" time="0.0034048">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; POST /api/nous/signals/observe &gt; should handle database errors gracefully" time="0.0009289">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/signals/process/process.route.test.ts" timestamp="2025-01-07T17:34:02.976Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0593576">
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; GET /api/nous/signals/process &gt; should fetch pending signals with default parameters" time="0.0340948">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; GET /api/nous/signals/process &gt; should handle specific status filtering" time="0.001828">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; GET /api/nous/signals/process &gt; should handle database errors gracefully" time="0.0011444">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; POST /api/nous/signals/process &gt; should update signal processing status with valid data" time="0.0057178">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; POST /api/nous/signals/process &gt; should reject invalid update format" time="0.0029611">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; POST /api/nous/signals/process &gt; should handle processing errors gracefully" time="0.0066551">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; POST /api/nous/signals/process &gt; should handle complex metadata updates" time="0.0046757">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" timestamp="2025-01-07T17:34:02.978Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0462763">
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; GET /api/documents/[id]/vectorize &gt; should return 400 when indexId is missing" time="0.0288965">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; GET /api/documents/[id]/vectorize &gt; should return 404 when index is not found" time="0.0019067">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; GET /api/documents/[id]/vectorize &gt; should handle successful vectorization" time="0.0041718">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; PUT /api/documents/[id]/vectorize &gt; should handle missing required parameters" time="0.0016429">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; PUT /api/documents/[id]/vectorize &gt; should handle successful document update" time="0.0055563">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; PUT /api/documents/[id]/vectorize &gt; should handle invalid JSON input" time="0.0014756">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" timestamp="2025-01-07T17:34:02.979Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0245578">
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should return 404 if session is not found" time="0.0177075">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should return 500 if service initialization fails" time="0.0010182">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should calculate metrics correctly with search events" time="0.0026388">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should handle empty search events correctly" time="0.0008531">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should calculate click-through rate correctly" time="0.0008977">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" timestamp="2025-01-07T17:34:02.981Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0516308">
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should return 400 when request body is invalid" time="0.0381028">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should return 404 when experiment is not found" time="0.0035365">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should return 400 when experiment is already active" time="0.0016406">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should successfully activate an experiment" time="0.0050545">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should return 500 when database operation fails" time="0.0011345">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" timestamp="2025-01-07T17:34:02.982Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0467296">
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should return 400 when request body is invalid" time="0.030799">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should return 404 when experiment is not found" time="0.0042232">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should return 400 when experiment is not active" time="0.0021215">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should successfully apply adaptations" time="0.0030275">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should handle case when no adaptations are needed" time="0.0015051">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should handle database errors" time="0.0027294">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" timestamp="2025-01-07T17:34:02.983Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0572553">
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should return 400 when request body is invalid" time="0.0408317">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should return 404 when experiment is not found" time="0.0057084">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should return 400 when experiment is already inactive" time="0.0018129">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should successfully deactivate an experiment" time="0.0017827">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should return 500 when database operation fails" time="0.0038658">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" timestamp="2025-01-07T17:34:02.984Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0553898">
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should fetch patterns with default parameters" time="0.036338">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle custom timeframe and limit" time="0.0042521">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle invalid timeframe parameter" time="0.0019667">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle invalid limit parameter" time="0.0009556">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle limit out of range" time="0.0012179">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle database errors gracefully" time="0.0056825">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should calculate confidence and metrics correctly" time="0.0019463">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle empty results" time="0.0010019">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/models/sync/sync.route.test.ts" timestamp="2025-01-07T17:34:02.985Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0423414">
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; GET /api/nous/learn/models/sync &gt; should fetch model states with metrics" time="0.0249131">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; GET /api/nous/learn/models/sync &gt; should handle database errors gracefully" time="0.0008576">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; POST /api/nous/learn/models/sync &gt; should sync model state with valid data" time="0.0077505">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; POST /api/nous/learn/models/sync &gt; should reject invalid sync data" time="0.0015707">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; POST /api/nous/learn/models/sync &gt; should handle database errors during sync" time="0.0055856">
        </testcase>
    </testsuite>
</testsuites>
