<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="924" failures="7" errors="0" time="31.084">
    <testsuite name="src/types/services.test.ts" timestamp="2025-01-07T18:51:34.810Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.029296">
        <testcase classname="src/types/services.test.ts" name="Services &gt; getUsers &gt; should fetch users successfully" time="0.0083641">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; getUsers &gt; should handle empty users list" time="0.0016783">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; getUsers &gt; should handle network errors" time="0.0044426">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; createUser &gt; should create user successfully" time="0.0022302">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; createUser &gt; should handle validation errors" time="0.0017974">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; updateUser &gt; should update user successfully" time="0.0010248">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; updateUser &gt; should handle non-existent user" time="0.0017162">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; deleteUser &gt; should delete user successfully" time="0.0011882">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; deleteUser &gt; should handle deletion of non-existent user" time="0.0026153">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/api.admin.middleware.test.ts" timestamp="2025-01-07T18:51:34.818Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0532544">
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should return 401 when JWT token is invalid format" time="0.017459">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should return 403 when user lacks permission for endpoint" time="0.002768">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should allow access when user is super admin regardless of endpoint" time="0.0031677">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should handle string JWT decode result as invalid" time="0.0023658">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should handle invalid tokens gracefully" time="0.0026086">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should update lastUsedAt timestamp on successful validation" time="0.0070204">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should handle missing JWT_SECRET" time="0.014794">
            <system-err>
Error validating admin token: Error: JWT_SECRET is not configured
    at Module.adminMiddleware [90m(D:\sophra\[39msrc\app\api\admin.middleware.ts:37:5[90m)[39m
    at [90mD:\sophra\[39msrc\app\api\api.admin.middleware.test.ts:215:32
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/app/health/health.route.test.ts" timestamp="2025-01-07T18:51:34.820Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.1194731">
        <testcase classname="src/app/health/health.route.test.ts" name="Health Check Route Handler &gt; should return healthy status when all services are connected" time="0.1082345">
        </testcase>
        <testcase classname="src/app/health/health.route.test.ts" name="Health Check Route Handler &gt; should return unhealthy status when any service is disconnected" time="0.002753">
        </testcase>
        <testcase classname="src/app/health/health.route.test.ts" name="Health Check Route Handler &gt; should handle errors during health check" time="0.0032256">
        </testcase>
        <testcase classname="src/app/health/health.route.test.ts" name="Health Check Route Handler &gt; should mask sensitive information in service URLs" time="0.0025154">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/test/next-server.mock.test.ts" timestamp="2025-01-07T18:51:34.822Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.0881401">
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; json &gt; should create JSON response successfully" time="0.0477403">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; json &gt; should handle complex data structures" time="0.020022">
            <system-err>
Promise returned by `expect(actual).resolves.toEqual(expected)` was not awaited. Vitest currently auto-awaits hanging assertions at the end of the test, but this will cause the test to fail in Vitest 3. Please remember to await the assertion.
    at D:/sophra/src/lib/test/next-server.mock.test.ts:49:31

            </system-err>
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; redirect &gt; should create redirect response" time="0.0013685">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; next &gt; should create next response with init options" time="0.0010955">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; rewrite &gt; should create rewrite response" time="0.0013065">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should create request with URL and searchParams" time="0.0017207">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should handle request headers" time="0.00264">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should handle request body as JSON" time="0.0017071">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should handle request body as text" time="0.001865">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should handle empty body" time="0.0017194">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; Response Cloning &gt; should clone response with all properties" time="0.0017527">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/admin/permissions.test.ts" timestamp="2025-01-07T18:51:34.824Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.0167128">
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; hasPermission &gt; should return true for valid token with required purpose" time="0.0040412">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; hasPermission &gt; should return false for valid token without required purpose" time="0.0007326">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; hasPermission &gt; should return false for invalid token name format" time="0.0006467">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; hasPermission &gt; should return false for endpoint not in permissions map" time="0.0004824">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; getAccessibleEndpoints &gt; should return all endpoints for a valid token with &apos;api&apos; purpose" time="0.0022766">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; getAccessibleEndpoints &gt; should return empty array for invalid token name format" time="0.0008424">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; getAccessibleEndpoints &gt; should return correct endpoints for a valid token with &apos;monitoring&apos; purpose" time="0.0010396">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; isSuperAdmin &gt; should return true for a token with &apos;api&apos; purpose" time="0.0007937">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; isSuperAdmin &gt; should return false for a token without &apos;api&apos; purpose" time="0.0010892">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; isSuperAdmin &gt; should return false for invalid token name format" time="0.0004996">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/api.cortex.types.test.ts" timestamp="2025-01-07T18:51:34.826Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.018267">
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="APIResponse &gt; should create a successful response" time="0.0036428">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="APIResponse &gt; should create an error response" time="0.0021423">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="Document Requests &gt; should validate CreateDocumentRequest structure" time="0.0010688">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="Document Requests &gt; should validate UpdateDocumentRequest structure" time="0.0006481">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="Document Requests &gt; should validate DeleteDocumentRequest structure" time="0.0005967">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="SearchRequest &gt; should validate SearchRequest with minimal properties" time="0.000582">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="SearchRequest &gt; should validate SearchRequest with all properties" time="0.0020727">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="HealthStatus &gt; should validate HealthStatus structure without error" time="0.0029461">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="HealthStatus &gt; should validate HealthStatus structure with error" time="0.0009306">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/keys/admin.middleware.test.ts" timestamp="2025-01-07T18:51:34.828Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0400131">
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should return 401 when admin token header is missing" time="0.0121827">
        </testcase>
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should return 401 when admin token is invalid" time="0.0024517">
        </testcase>
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should update lastUsedAt and proceed when token is valid" time="0.0087413">
        </testcase>
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should return 500 when database error occurs" time="0.0112193">
            <system-err>
Error validating admin token: Error: Database error
    at [90mD:\sophra\[39msrc\app\api\keys\admin.middleware.test.ts:93:66
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m
    at startTests [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1271:3[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should check for active tokens only" time="0.0024902">
            <system-err>
Error validating admin token: Error: Database error
    at [90mD:\sophra\[39msrc\app\api\keys\admin.middleware.test.ts:93:66
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m
    at startTests [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1271:3[90m)[39m

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/keys/keys.route.test.ts" timestamp="2025-01-07T18:51:34.833Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.1398427">
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; POST /api/keys &gt; should create a new API key with valid input" time="0.1125433">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; POST /api/keys &gt; should handle database errors during creation" time="0.0126624">
            <system-err>
Error creating API key: Error: Database error
    at [90mD:\sophra\[39msrc\app\api\keys\keys.route.test.ts:96:63
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; GET /api/keys &gt; should return list of API keys without exposing actual keys" time="0.0023384">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; PUT /api/keys &gt; should update API key with regenerated key" time="0.003227">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; PUT /api/keys &gt; should reject updates without ID" time="0.0023534">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; DELETE /api/keys &gt; should successfully delete an API key" time="0.002024">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; DELETE /api/keys &gt; should handle missing ID parameter" time="0.0010089">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/ab-testing/services.test.ts" timestamp="2025-01-07T18:51:34.835Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0239223">
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; healthCheck &gt; should return true when database is healthy" time="0.0046747">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; healthCheck &gt; should return false when database check fails" time="0.0010264">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; createTest &gt; should create a new AB test" time="0.0052835">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; createTest &gt; should throw error if variant allocations do not sum to 1" time="0.0030523">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; assignVariant &gt; should assign variant based on allocation" time="0.0031237">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; assignVariant &gt; should return existing assignment if one exists" time="0.0014464">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; trackConversion &gt; should track conversion event" time="0.0015873">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/analytics/service.test.ts" timestamp="2025-01-07T18:51:34.837Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.0622592">
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; createSearchEvent &gt; should successfully create a search event" time="0.0142691">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; createSearchEvent &gt; should handle optional fields" time="0.0035396">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; createSearchEvent &gt; should handle database errors" time="0.0052154">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; getSearchEvents &gt; should retrieve search events with default parameters" time="0.0053734">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; getSearchEvents &gt; should apply filters correctly" time="0.0070533">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; getSearchEvents &gt; should handle pagination" time="0.0028399">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; generateReport &gt; should generate a complete analytics report" time="0.0046511">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; generateReport &gt; should handle invalid time window" time="0.0021921">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; generateReport &gt; should calculate trends correctly" time="0.0027201">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; time window calculations &gt; should calculate correct time window start" time="0.0038702">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; time window calculations &gt; should default to 24h for invalid time window" time="0.001813">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; metrics integration &gt; should use provided metrics service" time="0.001949">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; metrics integration &gt; should create default metrics service if not provided" time="0.0026183">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/core/client.test.ts" timestamp="2025-01-07T18:51:34.840Z" hostname="sophra" tests="16" failures="0" errors="0" skipped="0" time="0.0849056">
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should create a client instance with valid config" time="0.0055764">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should throw error if environment is missing" time="0.0053144">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should throw error if ELASTICSEARCH_URL is missing" time="0.0033046">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should throw error if DATABASE_URL is missing" time="0.0029633">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should throw error if both ES API keys are missing" time="0.0053738">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; initialize &gt; should initialize all services successfully" time="0.0050376">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; initialize &gt; should initialize without Redis if SOPHRA_REDIS_URL is not set" time="0.0034679">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; initialize &gt; should handle initialization errors and cleanup" time="0.0061967">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; shutdown &gt; should disconnect all services successfully" time="0.0050383">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; shutdown &gt; should handle shutdown errors" time="0.0043841">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; healthCheck &gt; should return health status for all services" time="0.0046408">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; healthCheck &gt; should handle service failures" time="0.0072098">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; getElasticClient &gt; should return initialized elastic client" time="0.0054038">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; getElasticClient &gt; should throw error if client is not initialized" time="0.0035202">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; getRedisClient &gt; should return initialized redis client" time="0.0054754">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; getRedisClient &gt; should throw error if client is not initialized" time="0.0057758">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/core/services.test.ts" timestamp="2025-01-07T18:51:34.843Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0138329">
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; constructor &gt; should create service instance with valid config" time="0.0054203">
        </testcase>
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; constructor &gt; should initialize logger and environment" time="0.0015273">
        </testcase>
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; constructor &gt; should accept different environment values" time="0.0010348">
        </testcase>
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; healthCheck &gt; should return health status" time="0.000789">
        </testcase>
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; disconnect &gt; should call disconnect method if implemented" time="0.0018752">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/core/sync-service.test.ts" timestamp="2025-01-07T18:51:34.844Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.0305628">
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; constructor &gt; should initialize with default searchCacheTTL if not provided" time="0.0024326">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; constructor &gt; should use provided searchCacheTTL" time="0.0008438">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; upsertDocument &gt; should create index if it does not exist" time="0.0033536">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; upsertDocument &gt; should store document in Elasticsearch, Postgres, and Redis" time="0.0015848">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; upsertDocument &gt; should handle errors during document upsert" time="0.003324">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; upsertDocument &gt; should handle Redis cache failure gracefully" time="0.0041721">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; search &gt; should return cached results if available" time="0.0035146">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; search &gt; should fetch from Elasticsearch if cache miss" time="0.0014553">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; search &gt; should handle search errors" time="0.0021411">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; deleteDocument &gt; should delete document from all stores" time="0.0032393">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; deleteDocument &gt; should handle delete errors" time="0.0022764">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/core/validation-service.test.ts" timestamp="2025-01-07T18:51:34.847Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0165355">
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateSearchResults &gt; should validate valid search results" time="0.0051206">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateSearchResults &gt; should invalidate results with missing required fields" time="0.0016114">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateSearchResults &gt; should handle empty results array" time="0.0011054">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateVectorization &gt; should validate correctly vectorized document" time="0.0019819">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateVectorization &gt; should invalidate document without embeddings" time="0.0010186">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateVectorization &gt; should invalidate document with wrong embeddings length" time="0.0011651">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateVectorization &gt; should invalidate document with non-numeric embeddings" time="0.001137">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/documents/service.test.ts" timestamp="2025-01-07T18:51:34.850Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.0363118">
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; createDocument &gt; should create a document successfully" time="0.0118124">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; createDocument &gt; should handle document creation errors" time="0.0041597">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; getDocument &gt; should retrieve a document successfully" time="0.0022864">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; getDocument &gt; should handle document not found" time="0.0015791">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; updateDocument &gt; should update a document successfully" time="0.0015059">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; updateDocument &gt; should handle update errors" time="0.0010582">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; deleteDocument &gt; should delete a document successfully" time="0.001045">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; deleteDocument &gt; should handle deletion errors" time="0.001173">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; ensureTable &gt; should create table if it does not exist" time="0.001405">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; ensureTable &gt; should not create table if it already exists" time="0.0037794">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; ensureTable &gt; should handle table creation errors" time="0.0021155">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/client.test.ts" timestamp="2025-01-07T18:51:34.853Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.045747">
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; constructor &gt; should create client instance with API key when provided" time="0.008721">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; constructor &gt; should create client instance without auth when no API key provided" time="0.0031697">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; constructor &gt; should use default URL when ELASTICSEARCH_URL is not provided" time="0.0032801">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; constructor &gt; should handle initialization errors" time="0.0029544">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; ping &gt; should return true when ping succeeds" time="0.0019313">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; ping &gt; should return false and log error when ping fails" time="0.0027005">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; createIndex &gt; should create index when it does not exist" time="0.0037571">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; createIndex &gt; should skip creation when index already exists" time="0.0033494">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; createIndex &gt; should handle creation errors" time="0.0032139">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; deleteIndex &gt; should delete index when it exists" time="0.0022368">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; deleteIndex &gt; should skip deletion when index does not exist" time="0.0021045">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; deleteIndex &gt; should handle deletion errors" time="0.0024337">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; getClient &gt; should return the elasticsearch client instance" time="0.0022039">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/core.test.ts" timestamp="2025-01-07T18:51:34.856Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0191619">
        <testcase classname="src/lib/cortex/elasticsearch/core.test.ts" name="Elasticsearch Core &gt; createElasticsearchConfig &gt; should create config with URL only when no API key provided" time="0.0069768">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/core.test.ts" name="Elasticsearch Core &gt; createElasticsearchConfig &gt; should create config with base64 encoded API key when key contains colon" time="0.0025391">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/core.test.ts" name="Elasticsearch Core &gt; createElasticsearchConfig &gt; should create config with raw API key when key does not contain colon" time="0.0025971">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/core.test.ts" name="Elasticsearch Core &gt; createElasticsearchConfig &gt; should throw error when ELASTICSEARCH_URL is missing" time="0.0035945">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/init.test.ts" timestamp="2025-01-07T18:51:34.858Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0332683">
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should create indices that do not exist" time="0.011962">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should skip creation for indices that already exist" time="0.0054774">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should handle initialization errors" time="0.0065102">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should handle mixed index states" time="0.0034283">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should handle creation errors for specific indices" time="0.0024381">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/mappings.test.ts" timestamp="2025-01-07T18:51:34.859Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0166109">
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define required fields with correct types" time="0.0055526">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define embeddings field with correct vector configuration" time="0.0012609">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define evaluation score fields with correct structure" time="0.0007837">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define metadata field with correct structure" time="0.0006118">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define array fields with correct text and keyword mappings" time="0.0008483">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define count fields with correct type" time="0.0008727">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define year fields with correct type" time="0.0005972">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should include all required fields" time="0.0018442">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/query-builders.test.ts" timestamp="2025-01-07T18:51:34.861Z" hostname="sophra" tests="2" failures="0" errors="0" skipped="0" time="0.0067341">
        <testcase classname="src/lib/cortex/elasticsearch/query-builders.test.ts" name="Elasticsearch Query Builders &gt; buildTextQuery &gt; should build basic text query with defaults" time="0.003921">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/query-builders.test.ts" name="Elasticsearch Query Builders &gt; buildTextQuery &gt; should build text query with custom fields and settings" time="0.0006554">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/services.test.ts" timestamp="2025-01-07T18:51:34.862Z" hostname="sophra" tests="12" failures="0" errors="0" skipped="0" time="0.0573351">
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; error handling &gt; should handle connection errors" time="0.0096375">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; error handling &gt; should handle index creation errors" time="0.0075628">
            <system-out>
Attempting to create index: test-index
Checking if index exists: test-index
Index test-index exists check result (from statusCode): [33mfalse[39m
Creating index test-index with options: { index: [32m&apos;test-index&apos;[39m, body: {} }

            </system-out>
            <system-err>
Failed to create index test-index: Error: Creation failed
    at [90mD:\sophra\[39msrc\lib\cortex\elasticsearch\services.test.ts:150:64
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; index operations &gt; should check if index exists" time="0.0014784">
            <system-out>
Checking if index exists: test-index
Index test-index exists check result (from statusCode): [33mtrue[39m

            </system-out>
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; index operations &gt; should create index with mappings" time="0.0052858">
            <system-out>
Attempting to create index: test-index
Checking if index exists: test-index
Index test-index exists check result (from statusCode): [33mfalse[39m
Creating index test-index with options: { index: [32m&apos;test-index&apos;[39m, body: { mappings: { properties: [36m[Object][39m } } }
Successfully created index: test-index

            </system-out>
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; index operations &gt; should delete index" time="0.0030448">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; document operations &gt; should index document" time="0.0033863">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; document operations &gt; should update document" time="0.0027605">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; document operations &gt; should delete document" time="0.0054577">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; search operations &gt; should perform basic search" time="0.0040823">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; search operations &gt; should perform search with aggregations" time="0.0038703">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; health checks &gt; should return cluster health" time="0.0034659">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; health checks &gt; should return node stats" time="0.0036038">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/feedback/service.test.ts" timestamp="2025-01-07T18:51:34.867Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.0756158">
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should record feedback successfully" time="0.0198307">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should handle feedback recording errors" time="0.0124229">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should validate feedback data format" time="0.0031817">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should handle database connection errors" time="0.0042176">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should handle elasticsearch integration errors" time="0.0048512">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should record feedback and trigger optimization" time="0.0040195">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should handle optimization errors" time="0.0039829">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should track A/B test metrics when test data is present" time="0.0034049">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should validate test data format when present" time="0.0067387">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should handle optimization service errors" time="0.0060619">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/events/emitter.test.ts" timestamp="2025-01-07T18:51:34.869Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0325905">
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; emit &gt; should emit events to registered listeners" time="0.0106324">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; emit &gt; should return false when no listeners are registered" time="0.0021404">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; emit &gt; should handle multiple event types" time="0.0025601">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; emit &gt; should handle events without document data" time="0.0014567">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; on &gt; should register event listeners" time="0.0023744">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; on &gt; should handle multiple listeners for the same event" time="0.0026117">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; on &gt; should maintain separate listeners for different event types" time="0.0040336">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; on &gt; should handle schema update events" time="0.0026122">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/middleware/auth.test.ts" timestamp="2025-01-07T18:51:34.871Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0248813">
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should successfully validate a valid token" time="0.0079063">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle missing token" time="0.0034029">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle missing JWT_SECRET" time="0.0028625">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle invalid tokens" time="0.0020709">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle expired tokens" time="0.0028594">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle malformed authorization header" time="0.0017823">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/monitoring/metrics.test.ts" timestamp="2025-01-07T18:51:34.873Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0477575">
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordEngineMetric &gt; should record engine metrics correctly" time="0.0146968">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordEngineMetric &gt; should handle errors gracefully" time="0.0062765">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordLatency &gt; should record operation latency" time="0.0029258">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; incrementError &gt; should increment error counter" time="0.0027584">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; updateResourceUsage &gt; should update resource metrics" time="0.0025827">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; updateSearchQuality &gt; should update search quality metrics" time="0.0033554">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordAlert &gt; should record metric alerts" time="0.0036174">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; updateCacheHitRatio &gt; should update cache hit ratio metrics" time="0.0026596">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordReportDistribution &gt; should record report distribution metrics" time="0.0036057">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/postgres/services.test.ts" timestamp="2025-01-07T18:51:34.875Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0248871">
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; initialize &gt; should initialize successfully" time="0.0075575">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; initialize &gt; should handle initialization errors" time="0.0062132">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; healthCheck &gt; should return true when healthy" time="0.0017179">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; healthCheck &gt; should return false and log error when unhealthy" time="0.0020101">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; disconnect &gt; should disconnect successfully" time="0.0015988">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; disconnect &gt; should handle disconnect when not initialized" time="0.0016257">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/reporting/alert-thresholds.test.ts" timestamp="2025-01-07T18:51:34.876Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.022412">
        <testcase classname="src/lib/cortex/reporting/alert-thresholds.test.ts" name="AlertService &gt; checkThresholds &gt; should trigger alert when threshold is exceeded" time="0.0130223">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/alert-thresholds.test.ts" name="AlertService &gt; checkThresholds &gt; should handle multiple thresholds for same metric" time="0.002314">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/alert-thresholds.test.ts" name="AlertService &gt; checkThresholds &gt; should not trigger alert when threshold is not violated" time="0.002043">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/alert-thresholds.test.ts" name="AlertService &gt; checkThresholds &gt; should handle different comparison operators" time="0.0017817">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/reporting/distribution.test.ts" timestamp="2025-01-07T18:51:34.877Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0277221">
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should distribute report via email" time="0.0106646">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should distribute report via Slack" time="0.0021862">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should store report in specified storage" time="0.0016095">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should handle multiple distribution methods" time="0.0020174">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should handle distribution errors gracefully" time="0.0076598">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/reporting/recommendations.test.ts" timestamp="2025-01-07T18:51:34.879Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0169806">
        <testcase classname="src/lib/cortex/reporting/recommendations.test.ts" name="RecommendationService &gt; generateRecommendations &gt; should generate recommendations based on latency trend" time="0.0088785">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/recommendations.test.ts" name="RecommendationService &gt; generateRecommendations &gt; should generate cache recommendations" time="0.002065">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/recommendations.test.ts" name="RecommendationService &gt; generateRecommendations &gt; should handle empty metrics" time="0.0015931">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/recommendations.test.ts" name="RecommendationService &gt; generateRecommendations &gt; should handle no recommendations needed" time="0.0014637">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/reporting/service.test.ts" timestamp="2025-01-07T18:51:34.881Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.028431">
        <testcase classname="src/lib/cortex/reporting/service.test.ts" name="ReportingService &gt; generateScheduledReport &gt; should generate scheduled report successfully" time="0.0108539">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/service.test.ts" name="ReportingService &gt; generateScheduledReport &gt; should handle analytics service errors" time="0.007365">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/service.test.ts" name="ReportingService &gt; checkAlertThresholds &gt; should generate alerts for threshold violations" time="0.0026184">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/service.test.ts" name="ReportingService &gt; generateRecommendations &gt; should generate recommendations for performance issues" time="0.0025045">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/redis/client.test.ts" timestamp="2025-01-07T18:51:34.883Z" hostname="sophra" tests="17" failures="0" errors="0" skipped="0" time="0.0265558">
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; setEx &gt; should set value with expiration" time="0.0064124">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; setEx &gt; should use default TTL when not provided" time="0.0010506">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; setEx &gt; should handle Redis errors" time="0.0035015">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; getEx &gt; should get value" time="0.0014127">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; getEx &gt; should handle null values" time="0.0006501">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; getEx &gt; should handle Redis errors" time="0.0008157">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; del &gt; should delete key" time="0.0008782">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; del &gt; should handle Redis errors" time="0.0009081">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; exists &gt; should check if key exists" time="0.0009372">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; exists &gt; should return false for non-existent keys" time="0.0003894">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; exists &gt; should handle Redis errors" time="0.0010697">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; ping &gt; should check connection" time="0.0005587">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; ping &gt; should return false for failed ping" time="0.0003292">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; ping &gt; should handle Redis errors" time="0.0006844">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; disconnect &gt; should close connection" time="0.0008262">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; disconnect &gt; should handle Redis errors" time="0.0007026">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; getClient &gt; should return Redis client" time="0.0005236">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/redis/services.test.ts" timestamp="2025-01-07T18:51:34.886Z" hostname="sophra" tests="12" failures="0" errors="0" skipped="0" time="0.3857875">
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; ping &gt; should return true when Redis is available" time="0.0081626">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; ping &gt; should return false when Redis is unavailable" time="0.002462">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; set &gt; should set cache value with TTL" time="0.0043145">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; set &gt; should handle set errors" time="0.335804">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; get &gt; should get cached value" time="0.0048382">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; get &gt; should return default value when key not found" time="0.0025172">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; cacheSearchResults &gt; should cache search results with query hash" time="0.0057127">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; getSearchResults &gt; should retrieve cached search results" time="0.005063">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; getSearchResults &gt; should return null for cache miss" time="0.0037603">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; disconnect &gt; should disconnect Redis client" time="0.0028278">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; healthCheck &gt; should return true when Redis is healthy" time="0.003095">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; healthCheck &gt; should return false when Redis is unhealthy" time="0.0024897">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/services/vectorization.test.ts" timestamp="2025-01-07T18:51:34.888Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0058377">
        <testcase classname="src/lib/cortex/services/vectorization.test.ts" name="VectorizationService &gt; vectorize &gt; should successfully vectorize valid input" time="0.0019953">
        </testcase>
        <testcase classname="src/lib/cortex/services/vectorization.test.ts" name="VectorizationService &gt; vectorize &gt; should handle invalid input gracefully" time="0.0003995">
        </testcase>
        <testcase classname="src/lib/cortex/services/vectorization.test.ts" name="VectorizationService &gt; processVectors &gt; should process vectors correctly" time="0.0003786">
        </testcase>
        <testcase classname="src/lib/cortex/services/vectorization.test.ts" name="VectorizationService &gt; processVectors &gt; should handle processing errors appropriately" time="0.0005592">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/sessions/service.test.ts" timestamp="2025-01-07T18:51:34.889Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0387961">
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; createSession &gt; should create a new session" time="0.011903">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; createSession &gt; should handle session creation errors" time="0.0044719">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; getSession &gt; should retrieve an existing session" time="0.0043484">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; getSession &gt; should return null for non-existent session" time="0.0015084">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; validateSession &gt; should validate active session" time="0.0016144">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; validateSession &gt; should invalidate expired session" time="0.0033621">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; extendSession &gt; should extend session expiration" time="0.004168">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; extendSession &gt; should handle extension errors" time="0.0021259">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/types/api.types.test.ts" timestamp="2025-01-07T18:51:34.891Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.00967">
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; APIResponse &gt; should validate APIResponse structure" time="0.0020529">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; APIResponse &gt; should work with different data types" time="0.0004129">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; HealthStatus &gt; should validate HealthStatus structure" time="0.000273">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; HealthStatus &gt; should allow service stats with any key" time="0.0024453">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; EnhancedHealthStatus &gt; should validate EnhancedHealthStatus structure" time="0.0005545">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; EnhancedHealthStatus &gt; should validate that EnhancedHealthStatus extends HealthStatus" time="0.0008713">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/types/search.types.test.ts" timestamp="2025-01-07T18:51:34.892Z" hostname="sophra" tests="14" failures="0" errors="0" skipped="0" time="0.0079423">
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; TextQuery &gt; should validate TextQuery structure" time="0.001149">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; TextQuery &gt; should validate text query with all options" time="0.000258">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; TextQuery &gt; should validate text query with minimal options" time="0.0001669">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; VectorQuery &gt; should validate VectorQuery structure" time="0.0002061">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; VectorQuery &gt; should validate vector query with all options" time="0.0001933">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; VectorQuery &gt; should validate vector query with minimal options" time="0.0002214">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; AdvancedSearchRequest &gt; should validate AdvancedSearchRequest structure" time="0.0002122">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; AdvancedSearchRequest &gt; should validate text search request" time="0.000201">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; AdvancedSearchRequest &gt; should validate vector search request" time="0.0003841">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; AdvancedSearchRequest &gt; should validate hybrid search request" time="0.0002051">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; SearchResult &gt; should validate SearchResult structure" time="0.00014">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; SearchResult &gt; should validate search result with facets" time="0.0016534">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; CachedSearchResult &gt; should validate CachedSearchResult structure" time="0.0001743">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; CachedSearchResult &gt; should validate cached search result" time="0.0003872">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/types/services.types.test.ts" timestamp="2025-01-07T18:51:34.895Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0068927">
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; should validate Services structure" time="0.0018872">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Engine Service &gt; should validate engine service structure" time="0.0002874">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Sync Service &gt; should validate sync service structure" time="0.0002224">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Documents Service &gt; should validate documents service structure" time="0.0002222">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Health Service &gt; should validate health service structure" time="0.0003899">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Health Service &gt; should validate health check response" time="0.0002909">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Observe Service &gt; should validate observe service structure" time="0.0003189">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/types/session.types.test.ts" timestamp="2025-01-07T18:51:34.897Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0107338">
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Session &gt; should validate Session structure" time="0.0025767">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Session &gt; should allow metadata with any value type" time="0.0007204">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Conversation &gt; should validate Conversation structure" time="0.0003593">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Conversation &gt; should allow optional fields to be undefined" time="0.0004898">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Conversation &gt; should validate conversation with all fields" time="0.0006552">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Message &gt; should validate Message structure" time="0.0004977">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Message &gt; should validate message role values" time="0.0006676">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Message &gt; should validate message with metadata" time="0.0005596">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/circuit-breaker.test.ts" timestamp="2025-01-07T18:51:34.899Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0262496">
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; initialization &gt; should initialize with circuit closed" time="0.0056579">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; error handling &gt; should open circuit after reaching failure threshold" time="0.0017473">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; error handling &gt; should reset after timeout period" time="0.0046844">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; success handling &gt; should reset failure count after success" time="0.0015444">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; circuit state transitions &gt; should transition from closed to open on failures" time="0.0012775">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; circuit state transitions &gt; should allow reset after timeout" time="0.0031825">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; circuit state transitions &gt; should maintain open state within timeout period" time="0.0029982">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/rate-limit.test.ts" timestamp="2025-01-07T18:51:34.900Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0344399">
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; rate limiting &gt; should allow requests within rate limit" time="0.0106345">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; rate limiting &gt; should block requests exceeding rate limit" time="0.0050237">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; rate limiting &gt; should replenish tokens after interval" time="0.0030932">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; identifier handling &gt; should track limits separately for different identifiers" time="0.0013607">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; identifier handling &gt; should clean up old identifiers when exceeding uniqueTokenPerInterval" time="0.0018249">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; token replenishment &gt; should handle token replenishment correctly" time="0.0025366">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; concurrent requests &gt; should handle concurrent requests correctly" time="0.0037459">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; concurrent requests &gt; should handle concurrent requests from different clients" time="0.0019286">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/request-queue.test.ts" timestamp="2025-01-07T18:51:34.902Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.6624665">
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; request processing &gt; should process requests concurrently within limit" time="0.2191425">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; request processing &gt; should handle errors in requests" time="0.0044805">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; request processing &gt; should process queued requests after errors" time="0.0010734">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; concurrent processing &gt; should respect concurrent request limit" time="0.2518417">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; concurrent processing &gt; should queue requests when at concurrent limit" time="0.1713272">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; error recovery &gt; should continue processing after failed requests" time="0.0021132">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/service-manager.test.ts" timestamp="2025-01-07T18:51:34.903Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.1431206">
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; getServices &gt; should initialize and return services" time="0.0066652">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; getServices &gt; should return cached services on subsequent calls" time="0.002098">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; service initialization &gt; should initialize Redis client" time="0.0017496">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; service initialization &gt; should initialize all required services" time="0.0018879">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; service caching &gt; should cache initialized services" time="0.0017419">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; service caching &gt; should handle concurrent initialization requests" time="0.1167597">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; error handling &gt; should handle Redis connection errors" time="0.0054009">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; error handling &gt; should handle service initialization errors" time="0.0027793">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/validation.test.ts" timestamp="2025-01-07T18:51:34.905Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0227557">
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should validate valid data" time="0.0079043">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should validate data with optional fields" time="0.0013518">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should reject invalid data with validation errors" time="0.0065481">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should handle malformed data gracefully" time="0.0009956">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should handle null and undefined values" time="0.0011361">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should handle empty object" time="0.0014621">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/clients/openai.test.ts" timestamp="2025-01-07T18:51:34.906Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.025801">
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; createFineTune &gt; should create a fine-tuning job successfully" time="0.0088633">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; createFineTune &gt; should handle file creation errors" time="0.0056686">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; createFineTune &gt; should handle fine-tuning job creation errors" time="0.0024841">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; getFineTuneStatus &gt; should retrieve fine-tuning job status successfully" time="0.0024778">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; getFineTuneStatus &gt; should handle status retrieval errors" time="0.0019688">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; getFineTuneStatus &gt; should handle job status with error" time="0.0015766">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/config/settings.test.ts" timestamp="2025-01-07T18:51:34.908Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.055615">
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; initialization &gt; should create singleton instance" time="0.0038611">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; initialization &gt; should initialize with default config" time="0.0079548">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should load config from file" time="0.0064526">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should handle file loading errors" time="0.0058812">
            <system-err>
Error loading config file: Error: File read error

            </system-err>
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should load config from environment variables" time="0.0041527">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should handle environment variable type conversion" time="0.0066837">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should respect configuration priority (env &gt; file &gt; default)" time="0.0044746">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; config validation &gt; should throw on invalid configuration" time="0.0068189">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; config validation &gt; should throw when accessing unloaded configuration" time="0.0029933">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; environment helpers &gt; should correctly identify environments" time="0.0027035">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/config/types.test.ts" timestamp="2025-01-07T18:51:34.909Z" hostname="sophra" tests="16" failures="0" errors="0" skipped="0" time="0.0331603">
        <testcase classname="src/lib/nous/config/types.test.ts" name="ServerConfigSchema &gt; should validate valid server config" time="0.0061066">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ServerConfigSchema &gt; should apply default values" time="0.0027871">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ServerConfigSchema &gt; should reject invalid port" time="0.0020114">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should validate valid registry config" time="0.0010273">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should require storagePath" time="0.0011238">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should apply default values" time="0.0018306">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should reject invalid maxVersionsPerEntry" time="0.001105">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should validate required fields" time="0.0011798">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ObserveConfigSchema &gt; should validate valid observe config" time="0.001737">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ObserveConfigSchema &gt; should apply default values" time="0.0012641">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="LearnConfigSchema &gt; should validate valid learn config" time="0.000727">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="LearnConfigSchema &gt; should apply default values" time="0.0007596">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ConfigSchema &gt; should validate complete valid config" time="0.0015932">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ConfigSchema &gt; should require environment" time="0.0011584">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ConfigSchema &gt; should validate environment enum values" time="0.0028494">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ConfigSchema &gt; should apply default values" time="0.0016746">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/engine/real-time-learner.test.ts" timestamp="2025-01-07T18:51:34.913Z" hostname="sophra" tests="3" failures="0" errors="0" skipped="0" time="0.2573058">
        <testcase classname="src/lib/nous/engine/real-time-learner.test.ts" name="RealTimeLearner &gt; lifecycle &gt; should handle start and stop correctly" time="0.0129059">
        </testcase>
        <testcase classname="src/lib/nous/engine/real-time-learner.test.ts" name="RealTimeLearner &gt; event processing &gt; should process events and handle errors" time="0.237272">
        </testcase>
        <testcase classname="src/lib/nous/engine/real-time-learner.test.ts" name="RealTimeLearner &gt; pattern analysis &gt; should validate strategies and calculate strength" time="0.0034784">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/engine/service.test.ts" timestamp="2025-01-07T18:51:34.914Z" hostname="sophra" tests="7" failures="7" errors="0" skipped="0" time="0.7629484">
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; initialization &gt; should initialize with default state" time="0.1527077">
            <failure message="
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`." type="PrismaClientInitializationError">
PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:317:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; initialization &gt; should create new state if none exists" time="0.117202">
            <failure message="promise rejected &quot;PrismaClientInitializationError{ …(5) }&quot; instead of resolving" type="AssertionError">
AssertionError: promise rejected &quot;PrismaClientInitializationError{ …(5) }&quot; instead of resolving
 ❯ src/lib/nous/engine/service.test.ts:334:46

Caused by: Caused by: PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:334:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; operations &gt; should handle operation errors" time="0.1394886">
            <failure message="expected [Function] to throw error including &apos;Operation failed&apos; but got &apos;\nInvalid `prisma.engineState.update(…&apos;" type="AssertionError">
AssertionError: expected [Function] to throw error including &apos;Operation failed&apos; but got &apos;\nInvalid `prisma.engineState.update(…&apos;

- Expected
+ Received

- Operation failed
+
+ Invalid `prisma.engineState.update()` invocation in
+ D:\sophra\src\lib\nous\engine\service.ts:230:53
+
+   227 }
+   228 
+   229 try {
+ → 230   const updatedState = await prisma.engineState.update(
+ Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.
+
+ Please make sure to provide valid database credentials for the database server at `localhost`.

 ❯ src/lib/nous/engine/service.test.ts:371:7
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; operations &gt; should start operation" time="0.1009873">
            <failure message="
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`." type="PrismaClientInitializationError">
PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:392:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; pattern analysis &gt; should analyze patterns from learning events" time="0.0848141">
            <failure message="
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`." type="PrismaClientInitializationError">
PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:404:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; strategy execution &gt; should execute strategy with low risk" time="0.0820404">
            <failure message="
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`." type="PrismaClientInitializationError">
PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:465:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; strategy execution &gt; should handle strategy execution errors" time="0.0828578">
            <failure message="
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`." type="PrismaClientInitializationError">
PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:465:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/engine/types.test.ts" timestamp="2025-01-07T18:51:34.926Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.0219794">
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineStatus &gt; should have all required statuses" time="0.0050064">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineOperationType &gt; should have all required operation types" time="0.0013637">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineOperationStatus &gt; should have all required operation statuses" time="0.0012359">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineOptimizationType &gt; should have all required optimization types" time="0.001556">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineRiskLevel &gt; should have all required risk levels" time="0.0022964">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineRiskLevel &gt; should maintain risk level order" time="0.0013748">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; TestMetrics &gt; should validate test metrics structure" time="0.0009509">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; VariantAnalysis &gt; should validate variant analysis structure" time="0.0005402">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; ImpactAnalysis &gt; should validate impact analysis structure" time="0.0009311">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; ImpactAnalysis &gt; should validate impact analysis value ranges" time="0.0009791">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/learn/models.test.ts" timestamp="2025-01-07T18:51:34.928Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.0376342">
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; initialization &gt; should initialize with default values" time="0.0058423">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; training &gt; should train on valid features and target" time="0.0051865">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; training &gt; should throw error when no features provided" time="0.0038828">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; prediction &gt; should throw error when predicting without training" time="0.0014381">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; prediction &gt; should make predictions after training" time="0.0031745">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; evaluation &gt; should throw error when evaluating without training" time="0.0020831">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; evaluation &gt; should calculate metrics after training" time="0.0049957">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; state management &gt; should save model state" time="0.0018554">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; state management &gt; should load model state" time="0.0017329">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; state management &gt; should throw error when loading non-existent state" time="0.0014025">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/learn/pipeline.test.ts" timestamp="2025-01-07T18:51:34.930Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0312576">
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; calculateCost &gt; should calculate cost for gpt-3.5-turbo" time="0.0040367">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; calculateCost &gt; should calculate cost for gpt-4" time="0.0007712">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; calculateCost &gt; should use default model when not specified" time="0.000604">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; trainAndDeploy &gt; should register and train a model with default config" time="0.0091164">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; trainAndDeploy &gt; should use provided config when available" time="0.0019359">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; trainAndDeploy &gt; should handle training errors" time="0.0032931">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; OpenAI training &gt; should train OpenAI model successfully" time="0.0029011">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; OpenAI training &gt; should handle fine-tuning failure" time="0.0029719">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; custom model training &gt; should handle custom model training process" time="0.0031253">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/learn/training.test.ts" timestamp="2025-01-07T18:51:34.932Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0206812">
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; shouldTrain &gt; should return false when not enough events" time="0.0091777">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; shouldTrain &gt; should return false when training interval not reached" time="0.0014223">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; shouldTrain &gt; should return false when event distribution is insufficient" time="0.0013823">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; shouldTrain &gt; should return true when all conditions are met" time="0.0008402">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; event distribution analysis &gt; should require minimum search events" time="0.0010199">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; event distribution analysis &gt; should require minimum user events" time="0.0011244">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; training interval &gt; should respect minimum interval between trainings" time="0.001139">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; training interval &gt; should allow training after interval has passed" time="0.0006461">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/models/base.test.ts" timestamp="2025-01-07T18:51:34.934Z" hostname="sophra" tests="14" failures="0" errors="0" skipped="0" time="0.029996">
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelConfigSchema &gt; should validate valid model config" time="0.0073283">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelConfigSchema &gt; should apply default status" time="0.0014081">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelConfigSchema &gt; should reject invalid status" time="0.0022511">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelConfigSchema &gt; should require all mandatory fields" time="0.0012638">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; initialization &gt; should initialize with base model" time="0.0012793">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should register new model" time="0.00151">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should prevent duplicate registration" time="0.0021578">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should update existing model" time="0.0015191">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should throw error when updating non-existent model" time="0.0011899">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should list all models" time="0.0029724">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should delete model" time="0.0008511">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should return false when deleting non-existent model" time="0.000639">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model retrieval &gt; should return undefined for non-existent model" time="0.0005358">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model retrieval &gt; should retrieve model by id" time="0.0004891">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/monitoring/metrics.test.ts" timestamp="2025-01-07T18:51:34.937Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.0289194">
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; initialization &gt; should initialize with default values" time="0.0036201">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; initialization &gt; should initialize with custom config" time="0.0007159">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; engine metrics &gt; should record engine metric" time="0.0045282">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; engine metrics &gt; should handle engine metric recording errors" time="0.0032502">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; engine metrics &gt; should respect sampling rate" time="0.0022406">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; learning metrics &gt; should record learning metric" time="0.0020047">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; learning metrics &gt; should handle learning metric recording errors" time="0.0027436">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; learning metrics &gt; should handle optional fields" time="0.0016836">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; logging behavior &gt; should log successful engine metric recording" time="0.0017388">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; logging behavior &gt; should log successful learning metric recording" time="0.0015497">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; logging behavior &gt; should log when skipping metrics due to sampling" time="0.0019412">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/observe/collector.test.ts" timestamp="2025-01-07T18:51:34.939Z" hostname="sophra" tests="15" failures="0" errors="0" skipped="0" time="0.0938817">
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; observer management &gt; should register observer" time="0.0066516">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; observer management &gt; should not register duplicate observer" time="0.002417">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; observer management &gt; should remove observer" time="0.0013669">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; observer management &gt; should handle removing non-registered observer" time="0.001792">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event collection &gt; should notify observer of event" time="0.003812">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event collection &gt; should notify multiple observers" time="0.0014085">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event collection &gt; should handle observer errors" time="0.0006714">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event filtering &gt; should filter events by type" time="0.0013822">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event filtering &gt; should handle multiple event types" time="0.0019338">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event validation &gt; should validate event structure" time="0.0014815">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event validation &gt; should validate event timestamp" time="0.0026011">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event validation &gt; should validate event type" time="0.0008527">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event processing &gt; should process events in order" time="0.0027621">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event processing &gt; should handle high event frequency" time="0.0081251">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event processing &gt; should maintain event order with async observers" time="0.0519003">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/observe/coordinator.test.ts" timestamp="2025-01-07T18:51:34.942Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0303283">
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; initialization &gt; should initialize with default processors" time="0.0054564">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; processor registration &gt; should register custom processor" time="0.0051871">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; processor registration &gt; should handle multiple processors" time="0.0015102">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; signal processing &gt; should process single signal" time="0.0013801">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; signal processing &gt; should process batch of signals" time="0.002439">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; signal processing &gt; should skip signals that do not match criteria" time="0.0014549">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; pattern detection &gt; should detect patterns from signals" time="0.0017106">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; pattern detection &gt; should combine patterns from multiple processors" time="0.0021588">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; error handling &gt; should handle processor errors gracefully" time="0.0037037">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/observe/processors.test.ts" timestamp="2025-01-07T18:51:34.944Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.0341637">
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="TimeBasedProcessor &gt; extract_features &gt; should extract features from a signal" time="0.0089716">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="TimeBasedProcessor &gt; extract_features &gt; should handle missing or invalid values" time="0.0022749">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="TimeBasedProcessor &gt; detect_patterns &gt; should detect patterns from multiple signals" time="0.0031652">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="TimeBasedProcessor &gt; detect_patterns &gt; should not detect patterns with insufficient signals" time="0.0013253">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; process_signal &gt; should process search signals" time="0.0025512">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; process_signal &gt; should handle non-search signals" time="0.0013846">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; process_signal &gt; should handle processing errors gracefully" time="0.0045639">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; extract_features &gt; should extract search-specific features" time="0.001128">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; extract_features &gt; should handle missing metadata" time="0.00143">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; extract_features &gt; should handle invalid metadata" time="0.0011264">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; detect_patterns &gt; should detect search patterns" time="0.0016918">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/observe/signals.test.ts" timestamp="2025-01-07T18:51:34.946Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0108802">
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="SignalRouter &gt; route &gt; should route signals to matching processors" time="0.0026461">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="SignalRouter &gt; route &gt; should not route signals that don&apos;t match criteria" time="0.0005377">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="SignalRouter &gt; route &gt; should handle custom filter criteria" time="0.0005102">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="SignalRouter &gt; processor registration &gt; should register and unregister processors" time="0.0005795">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; process_batch &gt; should process multiple signals in batch" time="0.001478">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; process_batch &gt; should prioritize signals based on priority" time="0.0005055">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; process_signal &gt; should process a single signal" time="0.0010151">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; prioritize &gt; should sort signals by priority" time="0.0005378">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; prioritize &gt; should handle signals without priority metadata" time="0.0008139">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/registry/index.test.ts" timestamp="2025-01-07T18:51:34.948Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.0784315">
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model registration &gt; should register a new model" time="0.0189691">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mtu1fo00006kjb5x6tbtm0&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.069Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888068&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mtu1fo00006kjb5x6tbtm0&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.069Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888068&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model registration &gt; should handle registration errors" time="0.0083196">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model retrieval &gt; should retrieve a registered model" time="0.0037423">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mtu1ge00016kjb31ewbwd2&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.094Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888094&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mtu1ge00016kjb31ewbwd2&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.094Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888094&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model retrieval &gt; should return null for non-existent model" time="0.001072">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model updates &gt; should update an existing model" time="0.0054389">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mtu1gj00026kjb52vm25as&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.099Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888099&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mtu1gj00026kjb52vm25as&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.099Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888099&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model updates &gt; should return null when updating non-existent model" time="0.0006485">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model updates &gt; should handle update errors" time="0.0130432">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mtu1gp00036kjb4a5k0l5k&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.105Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888105&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mtu1gp00036kjb4a5k0l5k&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.105Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888105&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model deletion &gt; should delete an existing model" time="0.0077389">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mtu1h300046kjb5q4fg0f7&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.124Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888124&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mtu1h300046kjb5q4fg0f7&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.124Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888124&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model deletion &gt; should return false when deleting non-existent model" time="0.0009692">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model deletion &gt; should handle deletion errors" time="0.0015655">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model listing &gt; should list all models when no type is specified" time="0.0043362">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mtu1he00056kjb5zcgb85c&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.130Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888130&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mtu1he00056kjb5zcgb85c&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.130Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888130&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version before validation: {
  id: [32m&apos;cm5mtu1hg00066kjbfgcdfrvq&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.132Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888132&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mtu1hg00066kjbfgcdfrvq&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.132Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888132&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model listing &gt; should filter models by type" time="0.0038549">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mtu1hi00076kjb7ekb1a1f&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.134Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888134&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mtu1hi00076kjb7ekb1a1f&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.134Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888134&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version before validation: {
  id: [32m&apos;cm5mtu1hj00086kjb63xg8lwl&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.136Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888136&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mtu1hj00086kjb63xg8lwl&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.136Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888136&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model listing &gt; should return empty array for non-existent type" time="0.0030677">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mtu1hm00096kjb7sggbnjd&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.139Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888138&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mtu1hm00096kjb7sggbnjd&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.139Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888138&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version before validation: {
  id: [32m&apos;cm5mtu1ho000a6kjbe5hr06uw&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.140Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888140&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mtu1ho000a6kjbe5hr06uw&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T18:51:28.140Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736275888140&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/registry/metadata.test.ts" timestamp="2025-01-07T18:51:34.952Z" hostname="sophra" tests="19" failures="0" errors="0" skipped="0" time="0.0390632">
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; schema management &gt; should register schema successfully" time="0.0093326">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; schema management &gt; should throw error when validating with non-existent schema" time="0.0010703">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should validate metadata against schema" time="0.0013173">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should validate metadata with optional fields" time="0.0038417">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should validate metadata with missing optional fields" time="0.0012545">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should fail validation when required fields are missing" time="0.0009611">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should fail validation when field types are incorrect" time="0.002078">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should fail validation when custom validators fail" time="0.0006467">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should fail validation when nested object is invalid" time="0.0011757">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should ignore unknown fields during validation" time="0.0008866">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should store metadata successfully" time="0.0013034">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should throw error when storing invalid metadata" time="0.0009672">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should update metadata successfully" time="0.001317">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should fail update with invalid metadata" time="0.0007844">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should delete metadata successfully" time="0.0007773">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should handle deletion of non-existent entry" time="0.0005716">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata listing &gt; should list all metadata entries" time="0.0023899">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata listing &gt; should filter metadata entries" time="0.0006817">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata listing &gt; should return empty object when no entries match filter" time="0.0010176">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/registry/store.test.ts" timestamp="2025-01-07T18:51:34.957Z" hostname="sophra" tests="21" failures="0" errors="0" skipped="0" time="0.0339869">
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should register new entry" time="0.0054567">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should prevent duplicate registration" time="0.0024882">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should track versions" time="0.0012219">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should handle multiple versions" time="0.0010845">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should prevent version conflicts" time="0.0012437">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; updates &gt; should update existing entry" time="0.0016287">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; updates &gt; should return undefined when updating non-existent entry" time="0.0010278">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; updates &gt; should preserve unmodified fields" time="0.0011768">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; dependency validation &gt; should validate dependencies during registration" time="0.0018727">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; dependency validation &gt; should prevent circular dependencies" time="0.0013314">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; dependency validation &gt; should validate dependencies during updates" time="0.0008933">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; tag management &gt; should get entries by tag" time="0.0019455">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; tag management &gt; should handle multiple entries with same tag" time="0.0011485">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; tag management &gt; should return empty array for non-existent tag" time="0.0006361">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; deletion &gt; should delete existing entry" time="0.00111">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; deletion &gt; should return false when deleting non-existent entry" time="0.000448">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; deletion &gt; should clean up version tracking" time="0.000501">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; deletion &gt; should clean up tag indices" time="0.0007858">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; listing &gt; should list all entries" time="0.0010555">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; listing &gt; should handle multiple entries" time="0.0011256">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; listing &gt; should return empty array when no entries exist" time="0.0005901">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/registry/version.test.ts" timestamp="2025-01-07T18:51:34.961Z" hostname="sophra" tests="19" failures="0" errors="0" skipped="0" time="0.0266498">
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; toString &gt; should format version correctly" time="0.0030531">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; toString &gt; should handle negative version components" time="0.0005771">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; compareTo &gt; should compare major versions" time="0.0008604">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; compareTo &gt; should compare minor versions" time="0.0006956">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; compareTo &gt; should compare patch versions" time="0.0004885">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; compareTo &gt; should consider equal versions" time="0.000506">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version creation &gt; should create new version with defaults" time="0.0009209">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version creation &gt; should create version with specified values" time="0.0008291">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version creation &gt; should prevent duplicate versions" time="0.0021889">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version state transitions &gt; should validate state transitions" time="0.0013495">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version state transitions &gt; should prevent invalid state transitions" time="0.0010354">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version state transitions &gt; should prevent transitions from terminal states" time="0.000877">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version retrieval &gt; should get version by string" time="0.0014901">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version retrieval &gt; should return undefined for non-existent version" time="0.0006032">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version retrieval &gt; should get latest version excluding drafts" time="0.0011058">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version retrieval &gt; should get latest version including drafts" time="0.0007065">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version listing &gt; should list all versions" time="0.0022658">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version listing &gt; should list versions by state" time="0.000962">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version listing &gt; should return empty array for non-existent entry" time="0.000911">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/types/core.test.ts" timestamp="2025-01-07T18:51:34.964Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.0236749">
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; EventType &gt; should have all required event types" time="0.0070278">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; EventType &gt; should not allow invalid event types" time="0.0022513">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Severity &gt; should have all severity levels" time="0.0014119">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Severity &gt; should maintain correct ordering" time="0.0009172">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Event Interface &gt; should create valid event object" time="0.00083">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Event Interface &gt; should allow optional metadata" time="0.0008675">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Event Interface &gt; should enforce required properties" time="0.000869">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Signal Interface &gt; should create valid signal object" time="0.0009546">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Signal Interface &gt; should enforce strength bounds" time="0.0012812">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Metric Interface &gt; should create valid metric object" time="0.0005525">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Metric Interface &gt; should allow any numeric value" time="0.0004931">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; StateTransition Interface &gt; should create valid state transition object" time="0.0005081">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; StateTransition Interface &gt; should handle different value types" time="0.0008073">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/types/events.test.ts" timestamp="2025-01-07T18:51:34.967Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0217444">
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; BaseEvent &gt; should create valid base event" time="0.0055532">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; BaseEvent &gt; should allow optional fields to be undefined" time="0.0011115">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; BaseEvent &gt; should enforce required fields" time="0.000843">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; ModelEvent &gt; should create valid model event" time="0.0013144">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; ModelEvent &gt; should enforce model event type" time="0.0020965">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; SearchEvent &gt; should create valid search event" time="0.0010149">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; SearchEvent &gt; should enforce search event type" time="0.0007719">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; EventProcessor &gt; should implement event processor interface" time="0.0007477">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; EventProcessor &gt; should process events correctly" time="0.0028885">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/utils/service-manager.test.ts" timestamp="2025-01-07T18:51:34.969Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0163579">
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; initialization &gt; should create singleton instance" time="0.0037487">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; initialization &gt; should throw if not initialized with config" time="0.0023249">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; service access &gt; should get signal coordinator" time="0.002395">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; service access &gt; should get event collector" time="0.0009952">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; service access &gt; should get prisma client" time="0.0008143">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; service access &gt; should get redis client" time="0.0009817">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; shutdown &gt; should disconnect all services" time="0.0016793">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/utils/signal-response.test.ts" timestamp="2025-01-07T18:51:34.972Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0140128">
        <testcase classname="src/lib/nous/utils/signal-response.test.ts" name="Signal Response &gt; should create successful response" time="0.0076136">
        </testcase>
        <testcase classname="src/lib/nous/utils/signal-response.test.ts" name="Signal Response &gt; should include metadata" time="0.0012998">
        </testcase>
        <testcase classname="src/lib/nous/utils/signal-response.test.ts" name="Signal Response &gt; should handle custom options" time="0.001105">
        </testcase>
        <testcase classname="src/lib/nous/utils/signal-response.test.ts" name="Signal Response &gt; should use default options" time="0.0008575">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/utils/threading.test.ts" timestamp="2025-01-07T18:51:34.973Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.2227076">
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should execute tasks immediately when capacity available" time="0.0040107">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should queue tasks when at capacity" time="0.1053834">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should handle multiple concurrent tasks" time="0.0011377">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should handle task failures" time="0.0025458">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should process queued tasks after failure" time="0.1050583">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should shutdown gracefully" time="0.0011708">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/database/client.test.ts" timestamp="2025-01-07T18:51:34.976Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.0352242">
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; getInstance &gt; should return the same instance when called multiple times" time="0.0059816">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connect &gt; should establish database connection successfully" time="0.0047855">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connect &gt; should not reconnect if already connected" time="0.0013092">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connect &gt; should handle connection errors" time="0.004001">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; disconnect &gt; should disconnect successfully when connected" time="0.0014519">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; disconnect &gt; should not disconnect if already disconnected" time="0.0015116">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; disconnect &gt; should handle disconnect errors" time="0.0022374">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; healthCheck &gt; should return true when database is healthy" time="0.001695">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; healthCheck &gt; should return false and log error when health check fails" time="0.0037271">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connection pool management &gt; should manage active connections correctly" time="0.0011703">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connection pool management &gt; should wait and retry when connection pool is full" time="0.0010256">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connection pool management &gt; should not reduce active connections below 0" time="0.0009436">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; experimentConfig &gt; should get and set experiment config correctly" time="0.0011118">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/adaptation-engine.test.ts" timestamp="2025-01-07T18:51:34.981Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.1588319">
        <testcase classname="src/lib/shared/engine/adaptation-engine.test.ts" name="AdaptationEngine &gt; Rule Management &gt; should add a rule successfully" time="0.0192243">
        </testcase>
        <testcase classname="src/lib/shared/engine/adaptation-engine.test.ts" name="AdaptationEngine &gt; Rule Management &gt; should detect patterns from events" time="0.0676668">
        </testcase>
        <testcase classname="src/lib/shared/engine/adaptation-engine.test.ts" name="AdaptationEngine &gt; Operation Execution &gt; should execute operation successfully" time="0.0560452">
        </testcase>
        <testcase classname="src/lib/shared/engine/adaptation-engine.test.ts" name="AdaptationEngine &gt; Operation Execution &gt; should handle operation execution errors" time="0.0127166">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/base-engine.test.ts" timestamp="2025-01-07T18:51:34.983Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0377304">
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Processor Management &gt; should register a processor successfully" time="0.0077972">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Processor Management &gt; should register multiple processors" time="0.0040379">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Processor Management &gt; should unregister a processor successfully" time="0.0019666">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Processor Management &gt; should handle unregistering a non-existent processor" time="0.0013235">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Engine Run &gt; should run all processors successfully" time="0.0018359">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Engine Run &gt; should continue processing even if one processor fails" time="0.0136466">
            <system-err>
Error running processor: Error: Process failed
    at [90mD:\sophra\[39msrc\lib\shared\engine\base-engine.test.ts:95:21
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Engine Run &gt; should run successfully with no processors" time="0.0015223">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Engine Run &gt; should run processors in registration order" time="0.0018226">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/learning-engine.test.ts" timestamp="2025-01-07T18:51:34.986Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.023826">
        <testcase classname="src/lib/shared/engine/learning-engine.test.ts" name="LearningEngine &gt; detectPatterns &gt; should create an operation and analyze patterns" time="0.0083827">
        </testcase>
        <testcase classname="src/lib/shared/engine/learning-engine.test.ts" name="LearningEngine &gt; getTimeSeriesData &gt; should delegate to timeBased processor" time="0.006543">
        </testcase>
        <testcase classname="src/lib/shared/engine/learning-engine.test.ts" name="LearningEngine &gt; analyzeTemporalCorrelations &gt; should delegate to timeBased processor" time="0.0033641">
        </testcase>
        <testcase classname="src/lib/shared/engine/learning-engine.test.ts" name="LearningEngine &gt; findRecurringPatterns &gt; should delegate to timeBased processor" time="0.0021796">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/types/index.test.ts" timestamp="2025-01-07T18:51:34.988Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0181781">
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; Logger Interface &gt; should extend WinstonLogger" time="0.0042334">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; ServiceConfig Interface &gt; should allow valid redis configuration" time="0.0009405">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; ServiceConfig Interface &gt; should allow minimal redis configuration" time="0.0007825">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; ServiceConfig Interface &gt; should allow empty configuration" time="0.0008934">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; NousAdaptationType Enum &gt; should have correct values" time="0.0008939">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; NousAdaptationType Enum &gt; should be immutable" time="0.0027982">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; NousAdaptationType Enum &gt; should have exactly three values" time="0.0034583">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/documents.route.test.ts" timestamp="2025-01-07T18:51:34.991Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0795748">
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should handle valid document creation with embeddings" time="0.0452159">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should handle document with special characters in content" time="0.0032886">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should create index if it does not exist" time="0.0061538">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should handle invalid JSON input" time="0.0022312">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should validate required fields" time="0.0050587">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should handle service errors gracefully" time="0.0148004">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/feedback/feedback.route.test.ts" timestamp="2025-01-07T18:51:34.994Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0924527">
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="GET /api/cortex/feedback &gt; should return feedback data with default parameters" time="0.04688">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="GET /api/cortex/feedback &gt; should handle custom timeframe and limit parameters" time="0.0063724">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="GET /api/cortex/feedback &gt; should handle database errors gracefully" time="0.0029262">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="POST /api/cortex/feedback &gt; should handle missing feedback service" time="0.0159686">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="POST /api/cortex/feedback &gt; should reject invalid session IDs" time="0.0093078">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="POST /api/cortex/feedback &gt; should handle feedback processing errors" time="0.0042232">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="POST /api/cortex/feedback &gt; should successfully process valid feedback" time="0.0032078">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/indices/indices.route.test.ts" timestamp="2025-01-07T18:51:34.996Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.068424">
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; GET /api/cortex/indices &gt; should return formatted indices data" time="0.0507024">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; GET /api/cortex/indices &gt; should handle elasticsearch error response format" time="0.001357">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; POST /api/cortex/indices &gt; should handle duplicate index creation gracefully" time="0.0048167">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; POST /api/cortex/indices &gt; should return validation error for invalid request body" time="0.0032692">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; DELETE /api/cortex/indices &gt; should return error when index parameter is missing" time="0.0015823">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; DELETE /api/cortex/indices &gt; should successfully delete an index" time="0.0031132">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/metrics/metrics.route.test.ts" timestamp="2025-01-07T18:51:34.999Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0829558">
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should return metrics data with correct content type header" time="0.0472584">
        </testcase>
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should handle empty metrics data" time="0.0157774">
        </testcase>
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should handle service errors gracefully" time="0.0116782">
        </testcase>
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should handle missing metrics service" time="0.0028569">
        </testcase>
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should log debug information for valid metrics" time="0.0021641">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/search/search.route.test.ts" timestamp="2025-01-07T18:51:35.001Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0852164">
        <testcase classname="src/app/api/cortex/search/search.route.test.ts" name="POST /api/cortex/search &gt; should perform text search successfully" time="0.0532658">
        </testcase>
        <testcase classname="src/app/api/cortex/search/search.route.test.ts" name="POST /api/cortex/search &gt; should perform vector search successfully" time="0.0076493">
        </testcase>
        <testcase classname="src/app/api/cortex/search/search.route.test.ts" name="POST /api/cortex/search &gt; should handle faceted search correctly" time="0.0036763">
        </testcase>
        <testcase classname="src/app/api/cortex/search/search.route.test.ts" name="POST /api/cortex/search &gt; should return 500 for invalid vector dimensions" time="0.0180728">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/sessions/sessions.route.test.ts" timestamp="2025-01-07T18:51:35.002Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0513813">
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; POST /api/sessions &gt; should create a new session with valid metadata" time="0.0385081">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; POST /api/sessions &gt; should return 400 for invalid metadata type" time="0.0014993">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; POST /api/sessions &gt; should return 400 for invalid userId type" time="0.001332">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; GET /api/sessions &gt; should retrieve a session by id" time="0.0022829">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; GET /api/sessions &gt; should return 400 when session id is missing" time="0.0015319">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; GET /api/sessions &gt; should handle service errors" time="0.0023717">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/signals/route.test.ts" timestamp="2025-01-07T18:51:35.004Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0906591">
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should fetch signals with default pagination" time="0.0659445">
        </testcase>
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should handle filtering by source and type" time="0.0062756">
        </testcase>
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should handle database errors gracefully" time="0.002059">
        </testcase>
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should create a new signal with valid data" time="0.0102877">
        </testcase>
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should handle database errors during creation" time="0.0023265">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/signals/signals.route.test.ts" timestamp="2025-01-07T18:51:35.006Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0978101">
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should fetch signals with default pagination" time="0.0605904">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should handle filtering by source and type" time="0.0055632">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should handle database errors gracefully" time="0.0017999">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should create a new signal with valid data" time="0.0169398">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should reject invalid signal data" time="0.0052574">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should handle database errors during creation" time="0.0041043">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/adapt/actions/index.test.ts" timestamp="2025-01-07T18:51:35.008Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0245359">
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="NotifyAction &gt; should log notification with context data" time="0.0109593">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="UpdateStateAction &gt; should update system state with new values" time="0.001217">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="UpdateStateAction &gt; should override existing values" time="0.0009506">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="CompositeAction &gt; should execute all actions in sequence" time="0.0012384">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="CompositeAction &gt; should continue execution if one action fails" time="0.0024427">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should adjust metric value within bounds" time="0.0019451">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should respect minimum value" time="0.0005643">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should respect maximum value" time="0.0005664">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should initialize metric if not present" time="0.0008066">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/adapt/rules/index.test.ts" timestamp="2025-01-07T18:51:35.011Z" hostname="sophra" tests="20" failures="0" errors="0" skipped="0" time="0.0187285">
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should register and retrieve rules" time="0.0036994">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should unregister rules" time="0.0009898">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should execute triggered rules in priority order" time="0.0019766">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should handle rule execution errors" time="0.004296">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should only execute enabled rules" time="0.0005443">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gt operator correctly" time="0.0007223">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gt operator correctly" time="0.000274">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lt operator correctly" time="0.0001994">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lt operator correctly" time="0.0003538">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gte operator correctly" time="0.0004357">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gte operator correctly" time="0.0002495">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lte operator correctly" time="0.0002372">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lte operator correctly" time="0.0002027">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate eq operator correctly" time="0.0002201">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate eq operator correctly" time="0.0001919">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should return false for undefined metrics" time="0.0002389">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should match event type and properties" time="0.0004995">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should not match different event type" time="0.0003024">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should not match when properties differ" time="0.0002201">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should match when no properties specified" time="0.0002474">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/adapt/types/index.test.ts" timestamp="2025-01-07T18:51:35.015Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0202196">
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should validate valid rule context" time="0.0081155">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should validate context without optional metadata" time="0.0011488">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should reject invalid timestamp" time="0.002088">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should reject non-numeric metrics" time="0.0014843">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should reject missing required fields" time="0.001219">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RulePriority &gt; should have correct priority values" time="0.0010572">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RulePriority &gt; should maintain priority order" time="0.000717">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/adapters/metrics-adapter.test.ts" timestamp="2025-01-07T18:51:35.017Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0228621">
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; configuration &gt; should have default sample rate and batch size" time="0.0047672">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get average latency" time="0.0020406">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get throughput" time="0.0015156">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get error rate" time="0.0012445">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get CPU usage" time="0.0014401">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get memory usage" time="0.0014979">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric recording &gt; should record engine metrics" time="0.004752">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric recording &gt; should record learning metrics" time="0.0019163">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/adapters/redis-adapter.test.ts" timestamp="2025-01-07T18:51:35.019Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0283926">
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; get &gt; should successfully get a value and record metrics" time="0.0100522">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; get &gt; should handle null values correctly" time="0.0028202">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; get &gt; should record error metrics when Redis operation fails" time="0.0062197">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; constructor &gt; should initialize with default values when environment variables are not set" time="0.002407">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; constructor &gt; should initialize with custom environment variables" time="0.003111">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/base-processor.test.ts" timestamp="2025-01-07T18:51:35.021Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0205826">
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; calculateConfidence &gt; should calculate confidence correctly with valid metrics" time="0.0058316">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; calculateConfidence &gt; should handle empty metrics object" time="0.0015329">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; calculateConfidence &gt; should handle negative metric values" time="0.0015347">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; calculateConfidence &gt; should handle extremely high metric values" time="0.0009176">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; analyze &gt; should analyze events and return patterns" time="0.005921">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; analyze &gt; should handle empty events array" time="0.0013324">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/feedback-processor.test.ts" timestamp="2025-01-07T18:51:35.022Z" hostname="sophra" tests="3" failures="0" errors="0" skipped="0" time="0.021755">
        <testcase classname="src/lib/shared/engine/processors/feedback-processor.test.ts" name="FeedbackProcessor &gt; analyze &gt; should analyze user feedback events successfully" time="0.0139709">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/feedback-processor.test.ts" name="FeedbackProcessor &gt; analyze &gt; should handle empty events array" time="0.0018203">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/feedback-processor.test.ts" name="FeedbackProcessor &gt; analyze &gt; should handle events without feedback metadata" time="0.001976">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/performance-processor.test.ts" timestamp="2025-01-07T18:51:35.023Z" hostname="sophra" tests="3" failures="0" errors="0" skipped="0" time="0.0169881">
        <testcase classname="src/lib/shared/engine/processors/performance-processor.test.ts" name="PerformanceProcessor &gt; analyze &gt; should analyze performance events successfully" time="0.0105175">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/performance-processor.test.ts" name="PerformanceProcessor &gt; analyze &gt; should handle empty events array" time="0.0019725">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/performance-processor.test.ts" name="PerformanceProcessor &gt; analyze &gt; should handle events without performance metadata" time="0.0015268">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/strategy-processor.test.ts" timestamp="2025-01-07T18:51:35.024Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.033327">
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; generateStrategies &gt; should generate strategies for high relevance search pattern" time="0.0105189">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; generateStrategies &gt; should not generate query transformation strategy for slow patterns" time="0.0021763">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; executeStrategy &gt; should execute weight adjustment strategy successfully" time="0.0055628">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; executeStrategy &gt; should execute query transformation strategy successfully" time="0.0027664">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; executeStrategy &gt; should execute index optimization strategy successfully" time="0.0023732">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; executeStrategy &gt; should execute cache strategy successfully" time="0.0016356">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; Pattern Analysis &gt; should identify high performance patterns" time="0.001222">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; Pattern Analysis &gt; should identify slow query patterns" time="0.0011176">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; Pattern Analysis &gt; should identify high traffic patterns" time="0.0016005">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/time-based-processor.test.ts" timestamp="2025-01-07T18:51:35.026Z" hostname="sophra" tests="12" failures="0" errors="0" skipped="0" time="0.2023183">
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; analyze &gt; should analyze time-based events" time="0.1650238">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; analyze &gt; should handle empty event list" time="0.0034997">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; getTimeSeriesData &gt; should retrieve time series data" time="0.0023749">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; getTimeSeriesData &gt; should validate time range parameters" time="0.0068422">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; analyzeCorrelations &gt; should analyze correlations in time series data" time="0.001222">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; analyzeCorrelations &gt; should handle empty time series data" time="0.0013569">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; findRecurringPatterns &gt; should find recurring patterns" time="0.0027794">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; findRecurringPatterns &gt; should validate pattern search parameters" time="0.0033151">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; findRecurringPatterns &gt; should handle minimum confidence threshold" time="0.0016971">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; time series analysis &gt; should detect seasonal patterns" time="0.0047684">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; time series analysis &gt; should detect trend patterns" time="0.0015427">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; time series analysis &gt; should detect anomalies" time="0.001315">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/logger/src/logger.test.ts" timestamp="2025-01-07T18:51:35.028Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0287679">
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; info() should log messages with INFO level" time="0.0081326">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; error() should log messages with ERROR level" time="0.0022208">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; warn() should log messages with WARN level" time="0.0012931">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; debug() should log messages with DEBUG level" time="0.0012001">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; should handle objects and errors" time="0.0022903">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; error handling &gt; should handle invalid log levels gracefully" time="0.0011555">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; error handling &gt; should handle undefined messages" time="0.0015084">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; configuration &gt; should respect log level settings" time="0.0017039">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; configuration &gt; should handle invalid configuration gracefully" time="0.0018456">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/ab-test/assign/assign.route.test.ts" timestamp="2025-01-07T18:51:35.030Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0254148">
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 500 if service initialization fails" time="0.0163249">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 400 if request body is invalid" time="0.0031343">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 404 if test is not found by name" time="0.0010904">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 404 if no eligible variant is found" time="0.0005998">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 200 and assign a variant successfully" time="0.0029164">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/ab-test/create/create.route.test.ts" timestamp="2025-01-07T18:51:35.031Z" hostname="sophra" tests="2" failures="0" errors="0" skipped="0" time="0.086355">
        <testcase classname="src/app/api/cortex/ab-test/create/create.route.test.ts" name="POST /api/cortex/ab-test/create &gt; should create an A/B test successfully" time="0.0607267">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/create/create.route.test.ts" name="POST /api/cortex/ab-test/create &gt; should return 500 when abTesting service is not available" time="0.0226759">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/analytics/reports/report.route.test.ts" timestamp="2025-01-07T18:51:35.032Z" hostname="sophra" tests="3" failures="0" errors="0" skipped="0" time="0.021048">
        <testcase classname="src/app/api/cortex/analytics/reports/report.route.test.ts" name="GET analytics report &gt; should return analytics report with default timeWindow" time="0.0168659">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/reports/report.route.test.ts" name="GET analytics report &gt; should use custom timeWindow from query params" time="0.0012747">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/reports/report.route.test.ts" name="GET analytics report &gt; should handle errors and return 500 status" time="0.001706">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/analytics/search/search.route.test.ts" timestamp="2025-01-07T18:51:35.033Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.1162071">
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="POST /api/cortex/analytics/search &gt; should successfully create search event" time="0.0939537">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="POST /api/cortex/analytics/search &gt; should handle missing analytics service" time="0.0077746">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="GET /api/cortex/analytics/search &gt; should retrieve search events with custom timeframe" time="0.0054871">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="GET /api/cortex/analytics/search &gt; should handle invalid JSON in facetsUsed" time="0.0020704">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="GET /api/cortex/analytics/search &gt; should handle service error" time="0.0033375">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/bulk/bulk.route.test.ts" timestamp="2025-01-07T18:51:35.034Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.1048421">
        <testcase classname="src/app/api/cortex/documents/bulk/bulk.route.test.ts" name="POST /api/cortex/documents/bulk &gt; should successfully process bulk documents with default tableName" time="0.0598334">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/bulk/bulk.route.test.ts" name="POST /api/cortex/documents/bulk &gt; should handle batch processing for large document sets" time="0.0348817">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/bulk/bulk.route.test.ts" name="POST /api/cortex/documents/bulk &gt; should reject invalid document schema" time="0.0045119">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/bulk/bulk.route.test.ts" name="POST /api/cortex/documents/bulk &gt; should handle sync service errors" time="0.0028365">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/verify/verify.route.test.ts" timestamp="2025-01-07T18:51:35.036Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0675533">
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should return 400 when index parameter is missing" time="0.0476139">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should return 400 when id parameter is missing" time="0.0015884">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should return 404 when index is not found in database" time="0.00192">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should return document verification details when document exists" time="0.0054956">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should handle non-existent document gracefully" time="0.0044818">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should handle elasticsearch service errors" time="0.0036526">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/[id]/id.route.test.ts" timestamp="2025-01-07T18:51:35.038Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0685162">
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; PUT /api/cortex/documents/[id] &gt; should successfully update a document" time="0.0539776">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; PUT /api/cortex/documents/[id] &gt; should handle invalid update fields" time="0.0028591">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; GET /api/cortex/documents/[id] &gt; should retrieve a document successfully" time="0.0049206">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; GET /api/cortex/documents/[id] &gt; should handle non-existent index" time="0.0008524">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; DELETE /api/cortex/documents/[id] &gt; should delete a document successfully" time="0.00175">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; DELETE /api/cortex/documents/[id] &gt; should handle already deleted document gracefully" time="0.001256">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/engine/health/engine.health.route.test.ts" timestamp="2025-01-07T18:51:35.040Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0677548">
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should return healthy status when engine is operational" time="0.046146">
        </testcase>
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should handle service timeout correctly" time="0.0042634">
        </testcase>
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should handle missing engine service gracefully" time="0.0019343">
        </testcase>
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should handle service manager failure" time="0.0094367">
        </testcase>
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should include all required metrics in healthy response" time="0.0037071">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" timestamp="2025-01-07T18:51:35.041Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0455633">
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; GET /api/nous/ab-testing/experiments &gt; should return experiments with default pagination" time="0.0299396">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; GET /api/nous/ab-testing/experiments &gt; should handle pagination parameters" time="0.0015313">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; GET /api/nous/ab-testing/experiments &gt; should handle status filter" time="0.001238">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; GET /api/nous/ab-testing/experiments &gt; should handle database errors" time="0.0020211">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; POST /api/nous/ab-testing/experiments &gt; should create a new experiment" time="0.0033119">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; POST /api/nous/ab-testing/experiments &gt; should return 400 for invalid experiment data" time="0.0018347">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; POST /api/nous/ab-testing/experiments &gt; should handle database errors during creation" time="0.0028651">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/results/results.route.test.ts" timestamp="2025-01-07T18:51:35.042Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0671464">
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; POST /api/nous/ab-testing/results &gt; should reject invalid request body" time="0.0514304">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; POST /api/nous/ab-testing/results &gt; should handle non-existent experiment" time="0.0020421">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; POST /api/nous/ab-testing/results &gt; should successfully record metrics with metadata" time="0.0048656">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; GET /api/nous/ab-testing/results &gt; should reject request without testId" time="0.0015041">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; should return aggregated metrics" time="0.0023758">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; should handle database errors gracefully" time="0.0012748">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/adapt/apply/apply.route.test.ts" timestamp="2025-01-07T18:51:35.043Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0678493">
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should validate request format and return 400 for invalid input" time="0.0511354">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should handle case when no rules are found" time="0.0028854">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should process valid request with metrics successfully" time="0.0067935">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should handle database errors gracefully" time="0.0018769">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should handle engine evaluation errors" time="0.002231">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/adapt/rules/rules.route.test.ts" timestamp="2025-01-07T18:51:35.045Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.1134479">
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; GET &gt; should return all adaptation rules ordered by priority" time="0.0499579">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; GET &gt; should handle database errors during fetch" time="0.0014871">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; POST &gt; should create multiple adaptation rules successfully" time="0.050731">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; POST &gt; should reject invalid rule format" time="0.0030453">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; POST &gt; should handle empty rules array" time="0.0016959">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; POST &gt; should handle database transaction errors" time="0.0024997">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/adapt/suggest/suggest.route.test.ts" timestamp="2025-01-07T18:51:35.046Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.1306679">
        <testcase classname="src/app/api/nous/adapt/suggest/suggest.route.test.ts" name="Adaptation Suggestion Route Handler &gt; should successfully process valid adaptation suggestion" time="0.0985592">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/suggest/suggest.route.test.ts" name="Adaptation Suggestion Route Handler &gt; should reject invalid payload with missing required fields" time="0.0120453">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/suggest/suggest.route.test.ts" name="Adaptation Suggestion Route Handler &gt; should reject payload with invalid value ranges" time="0.0065189">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/suggest/suggest.route.test.ts" name="Adaptation Suggestion Route Handler &gt; should handle database errors appropriately" time="0.0085863">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/events/events.route.test.ts" timestamp="2025-01-07T18:51:35.048Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0817458">
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should fetch events with default parameters" time="0.0628489">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle filtering by type and date range" time="0.0027887">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle invalid query parameters" time="0.0033532">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle database connection failure" time="0.0018158">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle database query errors gracefully" time="0.0032249">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle empty results" time="0.0018547">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/feedback/feedback.route.test.ts" timestamp="2025-01-07T18:51:35.049Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0871512">
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; GET /api/nous/learn/feedback &gt; should fetch feedback requests successfully" time="0.0321736">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; GET /api/nous/learn/feedback &gt; should handle empty results" time="0.0006088">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; GET /api/nous/learn/feedback &gt; should handle database errors gracefully" time="0.000932">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should create feedback successfully" time="0.0404051">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle invalid feedback data" time="0.0035687">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle missing feedback array" time="0.0015659">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle invalid rating values" time="0.0024623">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle database errors during creation" time="0.0019383">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle malformed JSON in request body" time="0.0014322">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/metrics/metrics.route.test.ts" timestamp="2025-01-07T18:51:35.052Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0700171">
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should fetch metrics with valid parameters" time="0.0457197">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle invalid metric types" time="0.0032844">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle invalid timeframe parameter" time="0.002694">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle invalid interval parameter" time="0.0017405">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle database connection failure" time="0.0054977">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle database query failure" time="0.0037528">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle empty results" time="0.0016577">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle multiple metrics and timeframes" time="0.003421">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/models/models.route.test.ts" timestamp="2025-01-07T18:51:35.055Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0750187">
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; GET /api/nous/learn/models &gt; should fetch models with their latest versions" time="0.0549598">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; GET /api/nous/learn/models &gt; should handle database errors gracefully" time="0.008139">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; POST /api/nous/learn/models &gt; should create a new model with valid data" time="0.004631">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; POST /api/nous/learn/models &gt; should reject invalid model data" time="0.0024038">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; POST /api/nous/learn/models &gt; should handle database errors during creation" time="0.001967">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" timestamp="2025-01-07T18:51:35.059Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0702468">
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; GET /api/nous/learn/search-patterns &gt; should fetch patterns with default parameters" time="0.0502394">
        </testcase>
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; GET /api/nous/learn/search-patterns &gt; should handle query filtering" time="0.0017547">
        </testcase>
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; GET /api/nous/learn/search-patterns &gt; should handle database errors gracefully" time="0.0016761">
        </testcase>
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; POST /api/nous/learn/search-patterns &gt; should create patterns with valid data" time="0.0089643">
        </testcase>
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; POST /api/nous/learn/search-patterns &gt; should reject invalid pattern data" time="0.0041268">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/signals/observe/observe.route.test.ts" timestamp="2025-01-07T18:51:35.060Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0494751">
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; GET /api/nous/signals/observe &gt; should fetch signal stats without filters" time="0.0336898">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; GET /api/nous/signals/observe &gt; should handle filtering by source and type" time="0.0034019">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; GET /api/nous/signals/observe &gt; should handle database errors gracefully" time="0.0008271">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; POST /api/nous/signals/observe &gt; should fetch detailed signal stats with valid query" time="0.0049965">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; POST /api/nous/signals/observe &gt; should reject invalid query format" time="0.0022642">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; POST /api/nous/signals/observe &gt; should handle database errors gracefully" time="0.0011405">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/signals/process/process.route.test.ts" timestamp="2025-01-07T18:51:35.062Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0885935">
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; GET /api/nous/signals/process &gt; should fetch pending signals with default parameters" time="0.0501617">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; GET /api/nous/signals/process &gt; should handle specific status filtering" time="0.0021588">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; GET /api/nous/signals/process &gt; should handle database errors gracefully" time="0.0013116">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; POST /api/nous/signals/process &gt; should update signal processing status with valid data" time="0.0071095">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; POST /api/nous/signals/process &gt; should reject invalid update format" time="0.0048623">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; POST /api/nous/signals/process &gt; should handle processing errors gracefully" time="0.0144117">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; POST /api/nous/signals/process &gt; should handle complex metadata updates" time="0.0054951">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" timestamp="2025-01-07T18:51:35.066Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0622387">
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; GET /api/documents/[id]/vectorize &gt; should return 400 when indexId is missing" time="0.0337515">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; GET /api/documents/[id]/vectorize &gt; should return 404 when index is not found" time="0.0046939">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; GET /api/documents/[id]/vectorize &gt; should handle successful vectorization" time="0.0064311">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; PUT /api/documents/[id]/vectorize &gt; should handle missing required parameters" time="0.0023937">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; PUT /api/documents/[id]/vectorize &gt; should handle successful document update" time="0.0086219">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; PUT /api/documents/[id]/vectorize &gt; should handle invalid JSON input" time="0.0029508">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" timestamp="2025-01-07T18:51:35.067Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0226489">
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should return 404 if session is not found" time="0.0155847">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should return 500 if service initialization fails" time="0.0011166">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should calculate metrics correctly with search events" time="0.0027186">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should handle empty search events correctly" time="0.0009402">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should calculate click-through rate correctly" time="0.000877">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" timestamp="2025-01-07T18:51:35.069Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0642279">
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should return 400 when request body is invalid" time="0.0471571">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should return 404 when experiment is not found" time="0.0021614">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should return 400 when experiment is already active" time="0.0043443">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should successfully activate an experiment" time="0.0058259">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should return 500 when database operation fails" time="0.001895">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" timestamp="2025-01-07T18:51:35.071Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0621693">
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should return 400 when request body is invalid" time="0.0407316">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should return 404 when experiment is not found" time="0.0054741">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should return 400 when experiment is not active" time="0.002376">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should successfully apply adaptations" time="0.0041391">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should handle case when no adaptations are needed" time="0.0023622">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should handle database errors" time="0.0043057">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" timestamp="2025-01-07T18:51:35.073Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.061873">
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should return 400 when request body is invalid" time="0.041118">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should return 404 when experiment is not found" time="0.0052482">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should return 400 when experiment is already inactive" time="0.0063285">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should successfully deactivate an experiment" time="0.0019592">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should return 500 when database operation fails" time="0.0043695">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" timestamp="2025-01-07T18:51:35.075Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0834937">
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should fetch patterns with default parameters" time="0.0520483">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle custom timeframe and limit" time="0.0053461">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle invalid timeframe parameter" time="0.003119">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle invalid limit parameter" time="0.0018565">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle limit out of range" time="0.0021077">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle database errors gracefully" time="0.0093011">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should calculate confidence and metrics correctly" time="0.0031275">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle empty results" time="0.0027159">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/models/sync/sync.route.test.ts" timestamp="2025-01-07T18:51:35.077Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0929803">
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; GET /api/nous/learn/models/sync &gt; should fetch model states with metrics" time="0.0469075">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; GET /api/nous/learn/models/sync &gt; should handle database errors gracefully" time="0.0012204">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; POST /api/nous/learn/models/sync &gt; should sync model state with valid data" time="0.0139684">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; POST /api/nous/learn/models/sync &gt; should reject invalid sync data" time="0.0111657">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; POST /api/nous/learn/models/sync &gt; should handle database errors during sync" time="0.016518">
        </testcase>
    </testsuite>
</testsuites>
