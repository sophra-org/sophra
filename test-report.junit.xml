<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="51" failures="0" errors="0" time="4.95">
    <testsuite name="src/lib/nous/adapt/actions/actions.additional.test.ts" timestamp="2025-01-09T16:20:39.940Z" hostname="sophra" tests="15" failures="0" errors="0" skipped="0" time="0.0315174">
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; NotifyAction &gt; should log notification with context data" time="0.009996">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; NotifyAction &gt; should handle different severity levels" time="0.0030824">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; NotifyAction &gt; should handle missing optional channels" time="0.0011768">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; UpdateStateAction &gt; should update system state with provided updates" time="0.0009119">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; UpdateStateAction &gt; should handle empty updates" time="0.0014207">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; UpdateStateAction &gt; should handle nested state updates" time="0.000682">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; CompositeAction &gt; should execute all actions in sequence" time="0.0017536">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; CompositeAction &gt; should continue execution after action failure" time="0.0020863">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; CompositeAction &gt; should handle empty action list" time="0.0017139">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; ThresholdAdjustmentAction &gt; should adjust metric value within bounds" time="0.0022605">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; ThresholdAdjustmentAction &gt; should respect minimum value" time="0.0006185">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; ThresholdAdjustmentAction &gt; should respect maximum value" time="0.0006954">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; ThresholdAdjustmentAction &gt; should handle non-existent metrics" time="0.0008716">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; ThresholdAdjustmentAction &gt; should handle negative adjustments" time="0.0004947">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/actions.additional.test.ts" name="Actions Additional Tests &gt; ThresholdAdjustmentAction &gt; should handle zero adjustments" time="0.0010246">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/adapt/actions/index.test.ts" timestamp="2025-01-09T16:20:39.948Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0194577">
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="NotifyAction &gt; should log notification with context data" time="0.0089763">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="UpdateStateAction &gt; should update system state with new values" time="0.0013486">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="UpdateStateAction &gt; should override existing values" time="0.0005476">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="CompositeAction &gt; should execute all actions in sequence" time="0.0008151">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="CompositeAction &gt; should continue execution if one action fails" time="0.0016433">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should adjust metric value within bounds" time="0.0022149">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should respect minimum value" time="0.0003465">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should respect maximum value" time="0.0002659">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should initialize metric if not present" time="0.0007013">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/adapt/rules/index.test.ts" timestamp="2025-01-09T16:20:39.951Z" hostname="sophra" tests="20" failures="0" errors="0" skipped="0" time="0.0299008">
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should register and retrieve rules" time="0.0036348">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should unregister rules" time="0.0012623">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should execute triggered rules in priority order" time="0.0017923">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should handle rule execution errors" time="0.0048915">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should only execute enabled rules" time="0.0007776">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gt operator correctly" time="0.0007177">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gt operator correctly" time="0.0003176">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lt operator correctly" time="0.0002785">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lt operator correctly" time="0.0006495">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gte operator correctly" time="0.0007879">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gte operator correctly" time="0.0010954">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lte operator correctly" time="0.0005522">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lte operator correctly" time="0.0018921">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate eq operator correctly" time="0.0008924">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate eq operator correctly" time="0.0013273">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should return false for undefined metrics" time="0.0008249">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should match event type and properties" time="0.0013212">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should not match different event type" time="0.0005519">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should not match when properties differ" time="0.0008038">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should match when no properties specified" time="0.0025118">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/adapt/types/index.test.ts" timestamp="2025-01-09T16:20:39.956Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0157402">
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should validate valid rule context" time="0.0052583">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should validate context without optional metadata" time="0.0015475">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should reject invalid timestamp" time="0.00141">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should reject non-numeric metrics" time="0.0010028">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should reject missing required fields" time="0.0009253">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RulePriority &gt; should have correct priority values" time="0.0023721">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RulePriority &gt; should maintain priority order" time="0.0007026">
        </testcase>
    </testsuite>
</testsuites>
