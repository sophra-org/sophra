<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="924" failures="7" errors="0" time="29.931">
    <testsuite name="src/types/services.test.ts" timestamp="2025-01-07T19:39:53.879Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0299706">
        <testcase classname="src/types/services.test.ts" name="Services &gt; getUsers &gt; should fetch users successfully" time="0.0083065">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; getUsers &gt; should handle empty users list" time="0.0012679">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; getUsers &gt; should handle network errors" time="0.0041813">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; createUser &gt; should create user successfully" time="0.0023992">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; createUser &gt; should handle validation errors" time="0.0018705">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; updateUser &gt; should update user successfully" time="0.0012782">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; updateUser &gt; should handle non-existent user" time="0.0019762">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; deleteUser &gt; should delete user successfully" time="0.0012455">
        </testcase>
        <testcase classname="src/types/services.test.ts" name="Services &gt; deleteUser &gt; should handle deletion of non-existent user" time="0.0025102">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/api.admin.middleware.test.ts" timestamp="2025-01-07T19:39:53.886Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0484909">
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should return 401 when JWT token is invalid format" time="0.0155637">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should return 403 when user lacks permission for endpoint" time="0.0025881">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should allow access when user is super admin regardless of endpoint" time="0.0027347">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should handle string JWT decode result as invalid" time="0.0022083">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should handle invalid tokens gracefully" time="0.0022687">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should update lastUsedAt timestamp on successful validation" time="0.0062299">
        </testcase>
        <testcase classname="src/app/api/api.admin.middleware.test.ts" name="Admin Middleware Additional Tests &gt; should handle missing JWT_SECRET" time="0.0140675">
            <system-err>
Error validating admin token: Error: JWT_SECRET is not configured
    at Module.adminMiddleware [90m(D:\sophra\[39msrc\app\api\admin.middleware.ts:37:5[90m)[39m
    at [90mD:\sophra\[39msrc\app\api\api.admin.middleware.test.ts:215:32
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/app/health/health.route.test.ts" timestamp="2025-01-07T19:39:53.888Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.1145962">
        <testcase classname="src/app/health/health.route.test.ts" name="Health Check Route Handler &gt; should return healthy status when all services are connected" time="0.1046735">
        </testcase>
        <testcase classname="src/app/health/health.route.test.ts" name="Health Check Route Handler &gt; should return unhealthy status when any service is disconnected" time="0.0023775">
        </testcase>
        <testcase classname="src/app/health/health.route.test.ts" name="Health Check Route Handler &gt; should handle errors during health check" time="0.0021132">
        </testcase>
        <testcase classname="src/app/health/health.route.test.ts" name="Health Check Route Handler &gt; should mask sensitive information in service URLs" time="0.0021071">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/test/next-server.mock.test.ts" timestamp="2025-01-07T19:39:53.889Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.0895481">
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; json &gt; should create JSON response successfully" time="0.0471985">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; json &gt; should handle complex data structures" time="0.0227488">
            <system-err>
Promise returned by `expect(actual).resolves.toEqual(expected)` was not awaited. Vitest currently auto-awaits hanging assertions at the end of the test, but this will cause the test to fail in Vitest 3. Please remember to await the assertion.
    at D:/sophra/src/lib/test/next-server.mock.test.ts:49:31

            </system-err>
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; redirect &gt; should create redirect response" time="0.0017157">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; next &gt; should create next response with init options" time="0.0010901">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextResponse &gt; rewrite &gt; should create rewrite response" time="0.0011239">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should create request with URL and searchParams" time="0.0015885">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should handle request headers" time="0.0016602">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should handle request body as JSON" time="0.0018398">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should handle request body as text" time="0.0019684">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; NextRequest &gt; should handle empty body" time="0.0017008">
        </testcase>
        <testcase classname="src/lib/test/next-server.mock.test.ts" name="NextServer Mock &gt; Response Cloning &gt; should clone response with all properties" time="0.0017485">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/admin/permissions.test.ts" timestamp="2025-01-07T19:39:53.892Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.0158535">
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; hasPermission &gt; should return true for valid token with required purpose" time="0.0034852">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; hasPermission &gt; should return false for valid token without required purpose" time="0.0006843">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; hasPermission &gt; should return false for invalid token name format" time="0.0005883">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; hasPermission &gt; should return false for endpoint not in permissions map" time="0.0006647">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; getAccessibleEndpoints &gt; should return all endpoints for a valid token with &apos;api&apos; purpose" time="0.0024282">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; getAccessibleEndpoints &gt; should return empty array for invalid token name format" time="0.0007844">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; getAccessibleEndpoints &gt; should return correct endpoints for a valid token with &apos;monitoring&apos; purpose" time="0.0006134">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; isSuperAdmin &gt; should return true for a token with &apos;api&apos; purpose" time="0.0007604">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; isSuperAdmin &gt; should return false for a token without &apos;api&apos; purpose" time="0.0010068">
        </testcase>
        <testcase classname="src/app/api/admin/permissions.test.ts" name="permissions &gt; isSuperAdmin &gt; should return false for invalid token name format" time="0.0005616">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/keys/admin.middleware.test.ts" timestamp="2025-01-07T19:39:53.894Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0413726">
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should return 401 when admin token header is missing" time="0.0115282">
        </testcase>
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should return 401 when admin token is invalid" time="0.0024828">
        </testcase>
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should update lastUsedAt and proceed when token is valid" time="0.0080805">
        </testcase>
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should return 500 when database error occurs" time="0.0118485">
            <system-err>
Error validating admin token: Error: Database error
    at [90mD:\sophra\[39msrc\app\api\keys\admin.middleware.test.ts:93:66
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m
    at startTests [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1271:3[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/app/api/keys/admin.middleware.test.ts" name="Admin Middleware &gt; should check for active tokens only" time="0.002921">
            <system-err>
Error validating admin token: Error: Database error
    at [90mD:\sophra\[39msrc\app\api\keys\admin.middleware.test.ts:93:66
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m
    at startTests [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1271:3[90m)[39m

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/keys/keys.route.test.ts" timestamp="2025-01-07T19:39:53.896Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.129489">
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; POST /api/keys &gt; should create a new API key with valid input" time="0.1029927">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; POST /api/keys &gt; should handle database errors during creation" time="0.0120518">
            <system-err>
Error creating API key: Error: Database error
    at [90mD:\sophra\[39msrc\app\api\keys\keys.route.test.ts:96:63
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; GET /api/keys &gt; should return list of API keys without exposing actual keys" time="0.0022018">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; PUT /api/keys &gt; should update API key with regenerated key" time="0.0027506">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; PUT /api/keys &gt; should reject updates without ID" time="0.0020272">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; DELETE /api/keys &gt; should successfully delete an API key" time="0.0020308">
        </testcase>
        <testcase classname="src/app/api/keys/keys.route.test.ts" name="API Keys Route Handlers &gt; DELETE /api/keys &gt; should handle missing ID parameter" time="0.0012793">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/api.cortex.types.test.ts" timestamp="2025-01-07T19:39:53.898Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0217543">
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="APIResponse &gt; should create a successful response" time="0.0037223">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="APIResponse &gt; should create an error response" time="0.0019375">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="Document Requests &gt; should validate CreateDocumentRequest structure" time="0.0015295">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="Document Requests &gt; should validate UpdateDocumentRequest structure" time="0.0009305">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="Document Requests &gt; should validate DeleteDocumentRequest structure" time="0.0008111">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="SearchRequest &gt; should validate SearchRequest with minimal properties" time="0.0007835">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="SearchRequest &gt; should validate SearchRequest with all properties" time="0.0028159">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="HealthStatus &gt; should validate HealthStatus structure without error" time="0.0042468">
        </testcase>
        <testcase classname="src/app/api/cortex/api.cortex.types.test.ts" name="HealthStatus &gt; should validate HealthStatus structure with error" time="0.0011073">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/config/settings.test.ts" timestamp="2025-01-07T19:39:53.901Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.0444983">
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; initialization &gt; should create singleton instance" time="0.0048047">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; initialization &gt; should initialize with default config" time="0.007366">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should load config from file" time="0.0041866">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should handle file loading errors" time="0.0035605">
            <system-err>
Error loading config file: Error: File read error

            </system-err>
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should load config from environment variables" time="0.0034667">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should handle environment variable type conversion" time="0.0034238">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; configuration loading &gt; should respect configuration priority (env &gt; file &gt; default)" time="0.0048249">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; config validation &gt; should throw on invalid configuration" time="0.004486">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; config validation &gt; should throw when accessing unloaded configuration" time="0.0023937">
        </testcase>
        <testcase classname="src/lib/nous/config/settings.test.ts" name="Settings &gt; environment helpers &gt; should correctly identify environments" time="0.0024642">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/config/types.test.ts" timestamp="2025-01-07T19:39:53.904Z" hostname="sophra" tests="16" failures="0" errors="0" skipped="0" time="0.0348262">
        <testcase classname="src/lib/nous/config/types.test.ts" name="ServerConfigSchema &gt; should validate valid server config" time="0.0083053">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ServerConfigSchema &gt; should apply default values" time="0.00318">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ServerConfigSchema &gt; should reject invalid port" time="0.0023991">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should validate valid registry config" time="0.001169">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should require storagePath" time="0.0014155">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should apply default values" time="0.0018065">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should reject invalid maxVersionsPerEntry" time="0.0007065">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="RegistryConfigSchema &gt; should validate required fields" time="0.0007726">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ObserveConfigSchema &gt; should validate valid observe config" time="0.0013131">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ObserveConfigSchema &gt; should apply default values" time="0.0013466">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="LearnConfigSchema &gt; should validate valid learn config" time="0.0007221">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="LearnConfigSchema &gt; should apply default values" time="0.0008774">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ConfigSchema &gt; should validate complete valid config" time="0.0017702">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ConfigSchema &gt; should require environment" time="0.0011025">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ConfigSchema &gt; should validate environment enum values" time="0.0017443">
        </testcase>
        <testcase classname="src/lib/nous/config/types.test.ts" name="ConfigSchema &gt; should apply default values" time="0.0012639">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/clients/openai.test.ts" timestamp="2025-01-07T19:39:53.907Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0285419">
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; createFineTune &gt; should create a fine-tuning job successfully" time="0.0102499">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; createFineTune &gt; should handle file creation errors" time="0.0062831">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; createFineTune &gt; should handle fine-tuning job creation errors" time="0.0025474">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; getFineTuneStatus &gt; should retrieve fine-tuning job status successfully" time="0.0021772">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; getFineTuneStatus &gt; should handle status retrieval errors" time="0.001851">
        </testcase>
        <testcase classname="src/lib/nous/clients/openai.test.ts" name="OpenAIClient &gt; getFineTuneStatus &gt; should handle job status with error" time="0.0016528">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/engine/real-time-learner.test.ts" timestamp="2025-01-07T19:39:53.909Z" hostname="sophra" tests="3" failures="0" errors="0" skipped="0" time="0.2049794">
        <testcase classname="src/lib/nous/engine/real-time-learner.test.ts" name="RealTimeLearner &gt; lifecycle &gt; should handle start and stop correctly" time="0.0117372">
        </testcase>
        <testcase classname="src/lib/nous/engine/real-time-learner.test.ts" name="RealTimeLearner &gt; event processing &gt; should process events and handle errors" time="0.186821">
        </testcase>
        <testcase classname="src/lib/nous/engine/real-time-learner.test.ts" name="RealTimeLearner &gt; pattern analysis &gt; should validate strategies and calculate strength" time="0.0033322">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/engine/service.test.ts" timestamp="2025-01-07T19:39:53.910Z" hostname="sophra" tests="7" failures="7" errors="0" skipped="0" time="0.9148593">
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; initialization &gt; should initialize with default state" time="0.167034">
            <failure message="
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`." type="PrismaClientInitializationError">
PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:317:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; initialization &gt; should create new state if none exists" time="0.1494822">
            <failure message="promise rejected &quot;PrismaClientInitializationError{ …(5) }&quot; instead of resolving" type="AssertionError">
AssertionError: promise rejected &quot;PrismaClientInitializationError{ …(5) }&quot; instead of resolving
 ❯ src/lib/nous/engine/service.test.ts:334:46

Caused by: Caused by: PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:334:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; operations &gt; should handle operation errors" time="0.1333624">
            <failure message="expected [Function] to throw error including &apos;Operation failed&apos; but got &apos;\nInvalid `prisma.engineState.update(…&apos;" type="AssertionError">
AssertionError: expected [Function] to throw error including &apos;Operation failed&apos; but got &apos;\nInvalid `prisma.engineState.update(…&apos;

- Expected
+ Received

- Operation failed
+
+ Invalid `prisma.engineState.update()` invocation in
+ D:\sophra\src\lib\nous\engine\service.ts:230:53
+
+   227 }
+   228 
+   229 try {
+ → 230   const updatedState = await prisma.engineState.update(
+ Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.
+
+ Please make sure to provide valid database credentials for the database server at `localhost`.

 ❯ src/lib/nous/engine/service.test.ts:371:7
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; operations &gt; should start operation" time="0.2084691">
            <failure message="
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`." type="PrismaClientInitializationError">
PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:392:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; pattern analysis &gt; should analyze patterns from learning events" time="0.0954311">
            <failure message="
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`." type="PrismaClientInitializationError">
PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:404:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; strategy execution &gt; should execute strategy with low risk" time="0.0812848">
            <failure message="
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`." type="PrismaClientInitializationError">
PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:465:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
        <testcase classname="src/lib/nous/engine/service.test.ts" name="EngineService &gt; strategy execution &gt; should handle strategy execution errors" time="0.0770065">
            <failure message="
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`." type="PrismaClientInitializationError">
PrismaClientInitializationError: 
Invalid `prisma.engineState.findFirst()` invocation:


Authentication failed against database server at `localhost`, the provided database credentials for `user` are not valid.

Please make sure to provide valid database credentials for the database server at `localhost`.
 ❯ qn.handleRequestError node_modules/@prisma/client/runtime/library.js:121:7615
 ❯ qn.handleAndLogRequestError node_modules/@prisma/client/runtime/library.js:121:6640
 ❯ qn.request node_modules/@prisma/client/runtime/library.js:121:6347
 ❯ l node_modules/@prisma/client/runtime/library.js:130:9616
 ❯ EngineService.getOrCreateEngineState src/lib/nous/engine/service.ts:189:11
 ❯ EngineService.initialize src/lib/nous/engine/service.ts:176:26
 ❯ src/lib/nous/engine/service.test.ts:465:7

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Serialized Error: { clientVersion: &apos;6.1.0&apos;, errorCode: undefined }
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/engine/types.test.ts" timestamp="2025-01-07T19:39:53.921Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.0150219">
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineStatus &gt; should have all required statuses" time="0.0040513">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineOperationType &gt; should have all required operation types" time="0.0008197">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineOperationStatus &gt; should have all required operation statuses" time="0.0008247">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineOptimizationType &gt; should have all required optimization types" time="0.0011829">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineRiskLevel &gt; should have all required risk levels" time="0.0010275">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; EngineRiskLevel &gt; should maintain risk level order" time="0.0009115">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; TestMetrics &gt; should validate test metrics structure" time="0.0008532">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; VariantAnalysis &gt; should validate variant analysis structure" time="0.0004593">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; ImpactAnalysis &gt; should validate impact analysis structure" time="0.0006863">
        </testcase>
        <testcase classname="src/lib/nous/engine/types.test.ts" name="Engine Types &gt; ImpactAnalysis &gt; should validate impact analysis value ranges" time="0.0006718">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/learn/models.test.ts" timestamp="2025-01-07T19:39:53.923Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.0344726">
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; initialization &gt; should initialize with default values" time="0.0063643">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; training &gt; should train on valid features and target" time="0.00528">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; training &gt; should throw error when no features provided" time="0.0028258">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; prediction &gt; should throw error when predicting without training" time="0.0012053">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; prediction &gt; should make predictions after training" time="0.0028417">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; evaluation &gt; should throw error when evaluating without training" time="0.0014486">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; evaluation &gt; should calculate metrics after training" time="0.0028256">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; state management &gt; should save model state" time="0.0038365">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; state management &gt; should load model state" time="0.0016107">
        </testcase>
        <testcase classname="src/lib/nous/learn/models.test.ts" name="SearchOptimizationModel &gt; state management &gt; should throw error when loading non-existent state" time="0.0011133">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/learn/pipeline.test.ts" timestamp="2025-01-07T19:39:53.925Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0403746">
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; calculateCost &gt; should calculate cost for gpt-3.5-turbo" time="0.0045294">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; calculateCost &gt; should calculate cost for gpt-4" time="0.0010186">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; calculateCost &gt; should use default model when not specified" time="0.0007794">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; trainAndDeploy &gt; should register and train a model with default config" time="0.0133689">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; trainAndDeploy &gt; should use provided config when available" time="0.0020591">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; trainAndDeploy &gt; should handle training errors" time="0.0033469">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; OpenAI training &gt; should train OpenAI model successfully" time="0.0049845">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; OpenAI training &gt; should handle fine-tuning failure" time="0.004287">
        </testcase>
        <testcase classname="src/lib/nous/learn/pipeline.test.ts" name="LearningPipeline &gt; custom model training &gt; should handle custom model training process" time="0.0025057">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/learn/training.test.ts" timestamp="2025-01-07T19:39:53.927Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.021783">
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; shouldTrain &gt; should return false when not enough events" time="0.0088907">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; shouldTrain &gt; should return false when training interval not reached" time="0.001411">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; shouldTrain &gt; should return false when event distribution is insufficient" time="0.0017194">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; shouldTrain &gt; should return true when all conditions are met" time="0.0008055">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; event distribution analysis &gt; should require minimum search events" time="0.0011231">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; event distribution analysis &gt; should require minimum user events" time="0.0013626">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; training interval &gt; should respect minimum interval between trainings" time="0.001189">
        </testcase>
        <testcase classname="src/lib/nous/learn/training.test.ts" name="TrainingScheduler &gt; training interval &gt; should allow training after interval has passed" time="0.0008723">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/models/base.test.ts" timestamp="2025-01-07T19:39:53.929Z" hostname="sophra" tests="14" failures="0" errors="0" skipped="0" time="0.0258727">
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelConfigSchema &gt; should validate valid model config" time="0.0064978">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelConfigSchema &gt; should apply default status" time="0.0011843">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelConfigSchema &gt; should reject invalid status" time="0.0017745">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelConfigSchema &gt; should require all mandatory fields" time="0.0009052">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; initialization &gt; should initialize with base model" time="0.0009006">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should register new model" time="0.0012655">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should prevent duplicate registration" time="0.0021785">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should update existing model" time="0.0014064">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should throw error when updating non-existent model" time="0.0011671">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should list all models" time="0.0021578">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should delete model" time="0.0007547">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model management &gt; should return false when deleting non-existent model" time="0.0007049">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model retrieval &gt; should return undefined for non-existent model" time="0.0005275">
        </testcase>
        <testcase classname="src/lib/nous/models/base.test.ts" name="ModelRegistry &gt; model retrieval &gt; should retrieve model by id" time="0.0006631">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/monitoring/metrics.test.ts" timestamp="2025-01-07T19:39:53.932Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.0281258">
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; initialization &gt; should initialize with default values" time="0.0040057">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; initialization &gt; should initialize with custom config" time="0.0008551">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; engine metrics &gt; should record engine metric" time="0.0041452">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; engine metrics &gt; should handle engine metric recording errors" time="0.0033267">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; engine metrics &gt; should respect sampling rate" time="0.0027109">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; learning metrics &gt; should record learning metric" time="0.0030356">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; learning metrics &gt; should handle learning metric recording errors" time="0.0015096">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; learning metrics &gt; should handle optional fields" time="0.0015674">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; logging behavior &gt; should log successful engine metric recording" time="0.0013063">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; logging behavior &gt; should log successful learning metric recording" time="0.001468">
        </testcase>
        <testcase classname="src/lib/nous/monitoring/metrics.test.ts" name="MetricsService &gt; logging behavior &gt; should log when skipping metrics due to sampling" time="0.0010985">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/observe/collector.test.ts" timestamp="2025-01-07T19:39:53.934Z" hostname="sophra" tests="15" failures="0" errors="0" skipped="0" time="0.1141126">
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; observer management &gt; should register observer" time="0.0047009">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; observer management &gt; should not register duplicate observer" time="0.0017476">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; observer management &gt; should remove observer" time="0.0008866">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; observer management &gt; should handle removing non-registered observer" time="0.0014629">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event collection &gt; should notify observer of event" time="0.0044606">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event collection &gt; should notify multiple observers" time="0.0015486">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event collection &gt; should handle observer errors" time="0.0007193">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event filtering &gt; should filter events by type" time="0.0012244">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event filtering &gt; should handle multiple event types" time="0.0024288">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event validation &gt; should validate event structure" time="0.0020982">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event validation &gt; should validate event timestamp" time="0.0025903">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event validation &gt; should validate event type" time="0.0009706">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event processing &gt; should process events in order" time="0.0028988">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event processing &gt; should handle high event frequency" time="0.00938">
        </testcase>
        <testcase classname="src/lib/nous/observe/collector.test.ts" name="EventCollector &gt; event processing &gt; should maintain event order with async observers" time="0.0730136">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/observe/coordinator.test.ts" timestamp="2025-01-07T19:39:53.937Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.029887">
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; initialization &gt; should initialize with default processors" time="0.0049367">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; processor registration &gt; should register custom processor" time="0.0040438">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; processor registration &gt; should handle multiple processors" time="0.0011758">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; signal processing &gt; should process single signal" time="0.0012716">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; signal processing &gt; should process batch of signals" time="0.0022328">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; signal processing &gt; should skip signals that do not match criteria" time="0.0013519">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; pattern detection &gt; should detect patterns from signals" time="0.0022209">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; pattern detection &gt; should combine patterns from multiple processors" time="0.002285">
        </testcase>
        <testcase classname="src/lib/nous/observe/coordinator.test.ts" name="SignalCoordinator &gt; error handling &gt; should handle processor errors gracefully" time="0.0050254">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/observe/processors.test.ts" timestamp="2025-01-07T19:39:53.939Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.0335745">
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="TimeBasedProcessor &gt; extract_features &gt; should extract features from a signal" time="0.0084961">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="TimeBasedProcessor &gt; extract_features &gt; should handle missing or invalid values" time="0.0023239">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="TimeBasedProcessor &gt; detect_patterns &gt; should detect patterns from multiple signals" time="0.0030637">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="TimeBasedProcessor &gt; detect_patterns &gt; should not detect patterns with insufficient signals" time="0.0013144">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; process_signal &gt; should process search signals" time="0.0025918">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; process_signal &gt; should handle non-search signals" time="0.0012698">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; process_signal &gt; should handle processing errors gracefully" time="0.0047122">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; extract_features &gt; should extract search-specific features" time="0.0012352">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; extract_features &gt; should handle missing metadata" time="0.0013626">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; extract_features &gt; should handle invalid metadata" time="0.001154">
        </testcase>
        <testcase classname="src/lib/nous/observe/processors.test.ts" name="SearchSignalProcessor &gt; detect_patterns &gt; should detect search patterns" time="0.0014879">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/observe/signals.test.ts" timestamp="2025-01-07T19:39:53.941Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0136889">
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="SignalRouter &gt; route &gt; should route signals to matching processors" time="0.0045578">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="SignalRouter &gt; route &gt; should not route signals that don&apos;t match criteria" time="0.000702">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="SignalRouter &gt; route &gt; should handle custom filter criteria" time="0.0005081">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="SignalRouter &gt; processor registration &gt; should register and unregister processors" time="0.0005691">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; process_batch &gt; should process multiple signals in batch" time="0.0014776">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; process_batch &gt; should prioritize signals based on priority" time="0.000425">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; process_signal &gt; should process a single signal" time="0.0010319">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; prioritize &gt; should sort signals by priority" time="0.0005637">
        </testcase>
        <testcase classname="src/lib/nous/observe/signals.test.ts" name="BaseSignalProcessor &gt; prioritize &gt; should handle signals without priority metadata" time="0.0007838">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/registry/index.test.ts" timestamp="2025-01-07T19:39:53.943Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.0604823">
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model registration &gt; should register a new model" time="0.0160824">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mvk78t00005kjba4fy67ec&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.270Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788269&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mvk78t00005kjba4fy67ec&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.270Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788269&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model registration &gt; should handle registration errors" time="0.0085051">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model retrieval &gt; should retrieve a registered model" time="0.0024382">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mvk79g00015kjbbytu0jh3&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.292Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788292&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mvk79g00015kjbbytu0jh3&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.292Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788292&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model retrieval &gt; should return null for non-existent model" time="0.0006171">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model updates &gt; should update an existing model" time="0.0046116">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mvk79k00025kjbgwwagtcb&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.296Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788296&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mvk79k00025kjbgwwagtcb&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.296Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788296&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model updates &gt; should return null when updating non-existent model" time="0.0005408">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model updates &gt; should handle update errors" time="0.0034737">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mvk79p00035kjb2j1medx8&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.301Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788301&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mvk79p00035kjb2j1medx8&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.301Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788301&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model deletion &gt; should delete an existing model" time="0.0033252">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mvk79t00045kjb0qjy5inf&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.305Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788305&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mvk79t00045kjb0qjy5inf&apos;[39m,
  configId: [32m&apos;test-config&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.305Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788305&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model deletion &gt; should return false when deleting non-existent model" time="0.0009643">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model deletion &gt; should handle deletion errors" time="0.0017787">
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model listing &gt; should list all models when no type is specified" time="0.0053287">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mvk79z00055kjb293ogu4k&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.312Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788312&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mvk79z00055kjb293ogu4k&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.312Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788312&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version before validation: {
  id: [32m&apos;cm5mvk7a100065kjbh0qzb2jz&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.314Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788313&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mvk7a100065kjbh0qzb2jz&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.314Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788313&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model listing &gt; should filter models by type" time="0.0044761">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mvk7a500075kjb9rtjage6&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.317Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788317&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mvk7a500075kjb9rtjage6&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.317Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788317&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version before validation: {
  id: [32m&apos;cm5mvk7a600085kjbe74sce4m&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.318Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788318&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mvk7a600085kjbe74sce4m&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.318Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788318&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
        <testcase classname="src/lib/nous/registry/index.test.ts" name="Registry &gt; model listing &gt; should return empty array for non-existent type" time="0.0034223">
            <system-out>
Model version before validation: {
  id: [32m&apos;cm5mvk7a900095kjb1pt437up&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.321Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788321&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mvk7a900095kjb1pt437up&apos;[39m,
  configId: [32m&apos;config1&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.321Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788321&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version before validation: {
  id: [32m&apos;cm5mvk7ab000a5kjbaqnc5iom&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.323Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788323&apos;[39m,
  parentVersion: [1mnull[22m
}
Model version after validation: {
  id: [32m&apos;cm5mvk7ab000a5kjbaqnc5iom&apos;[39m,
  configId: [32m&apos;config2&apos;[39m,
  createdAt: [35m2025-01-07T19:39:48.323Z[39m,
  metrics: {},
  artifactPath: [32m&apos;models/model_1736278788323&apos;[39m,
  parentVersion: [1mnull[22m
}

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/registry/metadata.test.ts" timestamp="2025-01-07T19:39:53.949Z" hostname="sophra" tests="19" failures="0" errors="0" skipped="0" time="0.0345738">
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; schema management &gt; should register schema successfully" time="0.0088743">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; schema management &gt; should throw error when validating with non-existent schema" time="0.0010453">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should validate metadata against schema" time="0.0012305">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should validate metadata with optional fields" time="0.0036024">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should validate metadata with missing optional fields" time="0.000976">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should fail validation when required fields are missing" time="0.0006353">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should fail validation when field types are incorrect" time="0.0017856">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should fail validation when custom validators fail" time="0.000742">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should fail validation when nested object is invalid" time="0.0013318">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata validation &gt; should ignore unknown fields during validation" time="0.0006751">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should store metadata successfully" time="0.0010229">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should throw error when storing invalid metadata" time="0.0007376">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should update metadata successfully" time="0.0010553">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should fail update with invalid metadata" time="0.0008287">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should delete metadata successfully" time="0.0008144">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata storage operations &gt; should handle deletion of non-existent entry" time="0.0004444">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata listing &gt; should list all metadata entries" time="0.002096">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata listing &gt; should filter metadata entries" time="0.0009684">
        </testcase>
        <testcase classname="src/lib/nous/registry/metadata.test.ts" name="MetadataManager &gt; metadata listing &gt; should return empty object when no entries match filter" time="0.0009167">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/registry/store.test.ts" timestamp="2025-01-07T19:39:53.953Z" hostname="sophra" tests="21" failures="0" errors="0" skipped="0" time="0.0354316">
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should register new entry" time="0.005245">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should prevent duplicate registration" time="0.0023537">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should track versions" time="0.0011203">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should handle multiple versions" time="0.0011355">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; registration &gt; should prevent version conflicts" time="0.0010839">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; updates &gt; should update existing entry" time="0.0016252">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; updates &gt; should return undefined when updating non-existent entry" time="0.0010139">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; updates &gt; should preserve unmodified fields" time="0.0012232">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; dependency validation &gt; should validate dependencies during registration" time="0.0020147">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; dependency validation &gt; should prevent circular dependencies" time="0.0013037">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; dependency validation &gt; should validate dependencies during updates" time="0.0007961">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; tag management &gt; should get entries by tag" time="0.0019091">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; tag management &gt; should handle multiple entries with same tag" time="0.0012688">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; tag management &gt; should return empty array for non-existent tag" time="0.0008159">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; deletion &gt; should delete existing entry" time="0.0014136">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; deletion &gt; should return false when deleting non-existent entry" time="0.0004384">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; deletion &gt; should clean up version tracking" time="0.0003909">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; deletion &gt; should clean up tag indices" time="0.0007662">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; listing &gt; should list all entries" time="0.0010498">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; listing &gt; should handle multiple entries" time="0.0010616">
        </testcase>
        <testcase classname="src/lib/nous/registry/store.test.ts" name="RegistryStore &gt; listing &gt; should return empty array when no entries exist" time="0.0021461">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/registry/version.test.ts" timestamp="2025-01-07T19:39:53.956Z" hostname="sophra" tests="19" failures="0" errors="0" skipped="0" time="0.0317836">
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; toString &gt; should format version correctly" time="0.0045589">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; toString &gt; should handle negative version components" time="0.0006294">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; compareTo &gt; should compare major versions" time="0.0013196">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; compareTo &gt; should compare minor versions" time="0.0010853">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; compareTo &gt; should compare patch versions" time="0.0006498">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="Version &gt; compareTo &gt; should consider equal versions" time="0.000814">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version creation &gt; should create new version with defaults" time="0.0015126">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version creation &gt; should create version with specified values" time="0.0011996">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version creation &gt; should prevent duplicate versions" time="0.0026291">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version state transitions &gt; should validate state transitions" time="0.00183">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version state transitions &gt; should prevent invalid state transitions" time="0.000863">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version state transitions &gt; should prevent transitions from terminal states" time="0.0010664">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version retrieval &gt; should get version by string" time="0.0015213">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version retrieval &gt; should return undefined for non-existent version" time="0.0005524">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version retrieval &gt; should get latest version excluding drafts" time="0.0009723">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version retrieval &gt; should get latest version including drafts" time="0.0005276">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version listing &gt; should list all versions" time="0.0021013">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version listing &gt; should list versions by state" time="0.0009655">
        </testcase>
        <testcase classname="src/lib/nous/registry/version.test.ts" name="VersionManager &gt; version listing &gt; should return empty array for non-existent entry" time="0.0008128">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/types/core.test.ts" timestamp="2025-01-07T19:39:53.959Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.0212603">
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; EventType &gt; should have all required event types" time="0.0049515">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; EventType &gt; should not allow invalid event types" time="0.0021003">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Severity &gt; should have all severity levels" time="0.0012246">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Severity &gt; should maintain correct ordering" time="0.0007053">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Event Interface &gt; should create valid event object" time="0.000723">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Event Interface &gt; should allow optional metadata" time="0.0007774">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Event Interface &gt; should enforce required properties" time="0.0007322">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Signal Interface &gt; should create valid signal object" time="0.0009278">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Signal Interface &gt; should enforce strength bounds" time="0.0013224">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Metric Interface &gt; should create valid metric object" time="0.0008654">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; Metric Interface &gt; should allow any numeric value" time="0.0008571">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; StateTransition Interface &gt; should create valid state transition object" time="0.0007827">
        </testcase>
        <testcase classname="src/lib/nous/types/core.test.ts" name="Core Types &gt; StateTransition Interface &gt; should handle different value types" time="0.0008302">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/types/events.test.ts" timestamp="2025-01-07T19:39:53.962Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0208659">
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; BaseEvent &gt; should create valid base event" time="0.0051365">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; BaseEvent &gt; should allow optional fields to be undefined" time="0.0011646">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; BaseEvent &gt; should enforce required fields" time="0.0006875">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; ModelEvent &gt; should create valid model event" time="0.0009911">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; ModelEvent &gt; should enforce model event type" time="0.00178">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; SearchEvent &gt; should create valid search event" time="0.0011489">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; SearchEvent &gt; should enforce search event type" time="0.0008784">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; EventProcessor &gt; should implement event processor interface" time="0.0014519">
        </testcase>
        <testcase classname="src/lib/nous/types/events.test.ts" name="Event Types &gt; EventProcessor &gt; should process events correctly" time="0.0034531">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/utils/service-manager.test.ts" timestamp="2025-01-07T19:39:53.964Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0165698">
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; initialization &gt; should create singleton instance" time="0.0040656">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; initialization &gt; should throw if not initialized with config" time="0.002394">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; service access &gt; should get signal coordinator" time="0.0021307">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; service access &gt; should get event collector" time="0.0010359">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; service access &gt; should get prisma client" time="0.0007697">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; service access &gt; should get redis client" time="0.0010095">
        </testcase>
        <testcase classname="src/lib/nous/utils/service-manager.test.ts" name="ServiceManager &gt; shutdown &gt; should disconnect all services" time="0.0016476">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/utils/signal-response.test.ts" timestamp="2025-01-07T19:39:53.965Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0137838">
        <testcase classname="src/lib/nous/utils/signal-response.test.ts" name="Signal Response &gt; should create successful response" time="0.0077602">
        </testcase>
        <testcase classname="src/lib/nous/utils/signal-response.test.ts" name="Signal Response &gt; should include metadata" time="0.0012332">
        </testcase>
        <testcase classname="src/lib/nous/utils/signal-response.test.ts" name="Signal Response &gt; should handle custom options" time="0.0010753">
        </testcase>
        <testcase classname="src/lib/nous/utils/signal-response.test.ts" name="Signal Response &gt; should use default options" time="0.0007612">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/utils/threading.test.ts" timestamp="2025-01-07T19:39:53.966Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.2295797">
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should execute tasks immediately when capacity available" time="0.0034347">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should queue tasks when at capacity" time="0.1149047">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should handle multiple concurrent tasks" time="0.0010968">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should handle task failures" time="0.0031623">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should process queued tasks after failure" time="0.1027308">
        </testcase>
        <testcase classname="src/lib/nous/utils/threading.test.ts" name="ThreadPool &gt; should shutdown gracefully" time="0.0010325">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/ab-testing/services.test.ts" timestamp="2025-01-07T19:39:53.967Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0244648">
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; healthCheck &gt; should return true when database is healthy" time="0.0039952">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; healthCheck &gt; should return false when database check fails" time="0.0009368">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; createTest &gt; should create a new AB test" time="0.0057292">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; createTest &gt; should throw error if variant allocations do not sum to 1" time="0.0038317">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; assignVariant &gt; should assign variant based on allocation" time="0.0033432">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; assignVariant &gt; should return existing assignment if one exists" time="0.0015263">
        </testcase>
        <testcase classname="src/lib/cortex/ab-testing/services.test.ts" name="ABTestingService &gt; trackConversion &gt; should track conversion event" time="0.0016253">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/analytics/service.test.ts" timestamp="2025-01-07T19:39:53.969Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.1078164">
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; createSearchEvent &gt; should successfully create a search event" time="0.0213531">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; createSearchEvent &gt; should handle optional fields" time="0.0054051">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; createSearchEvent &gt; should handle database errors" time="0.0110937">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; getSearchEvents &gt; should retrieve search events with default parameters" time="0.0068095">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; getSearchEvents &gt; should apply filters correctly" time="0.0204904">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; getSearchEvents &gt; should handle pagination" time="0.004673">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; generateReport &gt; should generate a complete analytics report" time="0.0067451">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; generateReport &gt; should handle invalid time window" time="0.0041779">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; generateReport &gt; should calculate trends correctly" time="0.0043995">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; time window calculations &gt; should calculate correct time window start" time="0.0058448">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; time window calculations &gt; should default to 24h for invalid time window" time="0.002358">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; metrics integration &gt; should use provided metrics service" time="0.0032415">
        </testcase>
        <testcase classname="src/lib/cortex/analytics/service.test.ts" name="AnalyticsService &gt; metrics integration &gt; should create default metrics service if not provided" time="0.0049168">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/core/client.test.ts" timestamp="2025-01-07T19:39:53.971Z" hostname="sophra" tests="16" failures="0" errors="0" skipped="0" time="0.0814926">
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should create a client instance with valid config" time="0.0058697">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should throw error if environment is missing" time="0.0050503">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should throw error if ELASTICSEARCH_URL is missing" time="0.0032788">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should throw error if DATABASE_URL is missing" time="0.0036572">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; constructor &gt; should throw error if both ES API keys are missing" time="0.0047976">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; initialize &gt; should initialize all services successfully" time="0.0038428">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; initialize &gt; should initialize without Redis if SOPHRA_REDIS_URL is not set" time="0.0023916">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; initialize &gt; should handle initialization errors and cleanup" time="0.0046981">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; shutdown &gt; should disconnect all services successfully" time="0.0051703">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; shutdown &gt; should handle shutdown errors" time="0.0038075">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; healthCheck &gt; should return health status for all services" time="0.0047421">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; healthCheck &gt; should handle service failures" time="0.0077943">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; getElasticClient &gt; should return initialized elastic client" time="0.004345">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; getElasticClient &gt; should throw error if client is not initialized" time="0.0036832">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; getRedisClient &gt; should return initialized redis client" time="0.0058108">
        </testcase>
        <testcase classname="src/lib/cortex/core/client.test.ts" name="SophraClient &gt; getRedisClient &gt; should throw error if client is not initialized" time="0.006792">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/core/services.test.ts" timestamp="2025-01-07T19:39:53.974Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0141057">
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; constructor &gt; should create service instance with valid config" time="0.0053819">
        </testcase>
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; constructor &gt; should initialize logger and environment" time="0.0018995">
        </testcase>
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; constructor &gt; should accept different environment values" time="0.0009494">
        </testcase>
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; healthCheck &gt; should return health status" time="0.0008353">
        </testcase>
        <testcase classname="src/lib/cortex/core/services.test.ts" name="BaseService &gt; disconnect &gt; should call disconnect method if implemented" time="0.0016372">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/core/sync-service.test.ts" timestamp="2025-01-07T19:39:53.975Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.02863">
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; constructor &gt; should initialize with default searchCacheTTL if not provided" time="0.0029618">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; constructor &gt; should use provided searchCacheTTL" time="0.0008844">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; upsertDocument &gt; should create index if it does not exist" time="0.0030174">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; upsertDocument &gt; should store document in Elasticsearch, Postgres, and Redis" time="0.0015691">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; upsertDocument &gt; should handle errors during document upsert" time="0.0039003">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; upsertDocument &gt; should handle Redis cache failure gracefully" time="0.0038046">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; search &gt; should return cached results if available" time="0.0030501">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; search &gt; should fetch from Elasticsearch if cache miss" time="0.0012595">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; search &gt; should handle search errors" time="0.0019766">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; deleteDocument &gt; should delete document from all stores" time="0.0022177">
        </testcase>
        <testcase classname="src/lib/cortex/core/sync-service.test.ts" name="DataSyncService &gt; deleteDocument &gt; should handle delete errors" time="0.0018466">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/core/validation-service.test.ts" timestamp="2025-01-07T19:39:53.977Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0161303">
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateSearchResults &gt; should validate valid search results" time="0.0052416">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateSearchResults &gt; should invalidate results with missing required fields" time="0.0016273">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateSearchResults &gt; should handle empty results array" time="0.0011636">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateVectorization &gt; should validate correctly vectorized document" time="0.0018369">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateVectorization &gt; should invalidate document without embeddings" time="0.0007412">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateVectorization &gt; should invalidate document with wrong embeddings length" time="0.0010864">
        </testcase>
        <testcase classname="src/lib/cortex/core/validation-service.test.ts" name="ValidationService &gt; validateVectorization &gt; should invalidate document with non-numeric embeddings" time="0.0010194">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/documents/service.test.ts" timestamp="2025-01-07T19:39:53.979Z" hostname="sophra" tests="11" failures="0" errors="0" skipped="0" time="0.0327987">
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; createDocument &gt; should create a document successfully" time="0.0105841">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; createDocument &gt; should handle document creation errors" time="0.0029426">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; getDocument &gt; should retrieve a document successfully" time="0.0018756">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; getDocument &gt; should handle document not found" time="0.0011149">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; updateDocument &gt; should update a document successfully" time="0.0023449">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; updateDocument &gt; should handle update errors" time="0.001512">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; deleteDocument &gt; should delete a document successfully" time="0.0014056">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; deleteDocument &gt; should handle deletion errors" time="0.0012241">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; ensureTable &gt; should create table if it does not exist" time="0.001973">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; ensureTable &gt; should not create table if it already exists" time="0.0013906">
        </testcase>
        <testcase classname="src/lib/cortex/documents/service.test.ts" name="ElasticsearchDocumentService &gt; ensureTable &gt; should handle table creation errors" time="0.0027047">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/client.test.ts" timestamp="2025-01-07T19:39:53.981Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.0494879">
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; constructor &gt; should create client instance with API key when provided" time="0.0089">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; constructor &gt; should create client instance without auth when no API key provided" time="0.0036086">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; constructor &gt; should use default URL when ELASTICSEARCH_URL is not provided" time="0.0049761">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; constructor &gt; should handle initialization errors" time="0.0035985">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; ping &gt; should return true when ping succeeds" time="0.0033993">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; ping &gt; should return false and log error when ping fails" time="0.0023202">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; createIndex &gt; should create index when it does not exist" time="0.0030261">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; createIndex &gt; should skip creation when index already exists" time="0.0022093">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; createIndex &gt; should handle creation errors" time="0.003591">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; deleteIndex &gt; should delete index when it exists" time="0.004188">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; deleteIndex &gt; should skip deletion when index does not exist" time="0.0029513">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; deleteIndex &gt; should handle deletion errors" time="0.0022077">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/client.test.ts" name="ElasticClient &gt; getClient &gt; should return the elasticsearch client instance" time="0.0014364">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/core.test.ts" timestamp="2025-01-07T19:39:53.983Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0189863">
        <testcase classname="src/lib/cortex/elasticsearch/core.test.ts" name="Elasticsearch Core &gt; createElasticsearchConfig &gt; should create config with URL only when no API key provided" time="0.0069449">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/core.test.ts" name="Elasticsearch Core &gt; createElasticsearchConfig &gt; should create config with base64 encoded API key when key contains colon" time="0.0026941">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/core.test.ts" name="Elasticsearch Core &gt; createElasticsearchConfig &gt; should create config with raw API key when key does not contain colon" time="0.0023651">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/core.test.ts" name="Elasticsearch Core &gt; createElasticsearchConfig &gt; should throw error when ELASTICSEARCH_URL is missing" time="0.0038255">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/init.test.ts" timestamp="2025-01-07T19:39:53.984Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0294354">
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should create indices that do not exist" time="0.0105046">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should skip creation for indices that already exist" time="0.0049498">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should handle initialization errors" time="0.0059402">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should handle mixed index states" time="0.0023724">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/init.test.ts" name="Elasticsearch Initialization &gt; initializeIndices &gt; should handle creation errors for specific indices" time="0.0024083">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/mappings.test.ts" timestamp="2025-01-07T19:39:53.985Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0157305">
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define required fields with correct types" time="0.0046133">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define embeddings field with correct vector configuration" time="0.0012119">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define evaluation score fields with correct structure" time="0.0012098">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define metadata field with correct structure" time="0.000882">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define array fields with correct text and keyword mappings" time="0.0010445">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define count fields with correct type" time="0.0008594">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should define year fields with correct type" time="0.0006504">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/mappings.test.ts" name="Elasticsearch Mappings &gt; BaseMapping &gt; should include all required fields" time="0.0017115">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/query-builders.test.ts" timestamp="2025-01-07T19:39:53.987Z" hostname="sophra" tests="2" failures="0" errors="0" skipped="0" time="0.0084946">
        <testcase classname="src/lib/cortex/elasticsearch/query-builders.test.ts" name="Elasticsearch Query Builders &gt; buildTextQuery &gt; should build basic text query with defaults" time="0.0042698">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/query-builders.test.ts" name="Elasticsearch Query Builders &gt; buildTextQuery &gt; should build text query with custom fields and settings" time="0.0009949">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/elasticsearch/services.test.ts" timestamp="2025-01-07T19:39:53.988Z" hostname="sophra" tests="12" failures="0" errors="0" skipped="0" time="0.080792">
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; error handling &gt; should handle connection errors" time="0.0207857">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; error handling &gt; should handle index creation errors" time="0.0110669">
            <system-out>
Attempting to create index: test-index
Checking if index exists: test-index
Index test-index exists check result (from statusCode): [33mfalse[39m
Creating index test-index with options: { index: [32m&apos;test-index&apos;[39m, body: {} }

            </system-out>
            <system-err>
Failed to create index test-index: Error: Creation failed
    at [90mD:\sophra\[39msrc\lib\cortex\elasticsearch\services.test.ts:150:64
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; index operations &gt; should check if index exists" time="0.0021416">
            <system-out>
Checking if index exists: test-index
Index test-index exists check result (from statusCode): [33mtrue[39m

            </system-out>
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; index operations &gt; should create index with mappings" time="0.0062402">
            <system-out>
Attempting to create index: test-index
Checking if index exists: test-index
Index test-index exists check result (from statusCode): [33mfalse[39m
Creating index test-index with options: { index: [32m&apos;test-index&apos;[39m, body: { mappings: { properties: [36m[Object][39m } } }
Successfully created index: test-index

            </system-out>
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; index operations &gt; should delete index" time="0.0031689">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; document operations &gt; should index document" time="0.0030274">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; document operations &gt; should update document" time="0.0023745">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; document operations &gt; should delete document" time="0.0023109">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; search operations &gt; should perform basic search" time="0.0040074">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; search operations &gt; should perform search with aggregations" time="0.0033116">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; health checks &gt; should return cluster health" time="0.0060965">
        </testcase>
        <testcase classname="src/lib/cortex/elasticsearch/services.test.ts" name="ElasticsearchService &gt; health checks &gt; should return node stats" time="0.0113647">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/events/emitter.test.ts" timestamp="2025-01-07T19:39:53.990Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0223532">
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; emit &gt; should emit events to registered listeners" time="0.0080126">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; emit &gt; should return false when no listeners are registered" time="0.0012656">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; emit &gt; should handle multiple event types" time="0.0015179">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; emit &gt; should handle events without document data" time="0.0011484">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; on &gt; should register event listeners" time="0.0014816">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; on &gt; should handle multiple listeners for the same event" time="0.0019686">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; on &gt; should maintain separate listeners for different event types" time="0.0022732">
        </testcase>
        <testcase classname="src/lib/cortex/events/emitter.test.ts" name="EventEmitter &gt; on &gt; should handle schema update events" time="0.0013939">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/feedback/service.test.ts" timestamp="2025-01-07T19:39:53.992Z" hostname="sophra" tests="10" failures="0" errors="0" skipped="0" time="0.0604382">
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should record feedback successfully" time="0.0159859">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should handle feedback recording errors" time="0.0095124">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should validate feedback data format" time="0.005056">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should handle database connection errors" time="0.0038464">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedback &gt; should handle elasticsearch integration errors" time="0.003207">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should record feedback and trigger optimization" time="0.0036274">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should handle optimization errors" time="0.0034036">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should track A/B test metrics when test data is present" time="0.0034374">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should validate test data format when present" time="0.0055427">
        </testcase>
        <testcase classname="src/lib/cortex/feedback/service.test.ts" name="FeedbackService &gt; recordFeedbackWithOptimization &gt; should handle optimization service errors" time="0.0031978">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/middleware/auth.test.ts" timestamp="2025-01-07T19:39:53.994Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0232911">
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should successfully validate a valid token" time="0.0074364">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle missing token" time="0.0034678">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle missing JWT_SECRET" time="0.0026105">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle invalid tokens" time="0.0022552">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle expired tokens" time="0.002345">
        </testcase>
        <testcase classname="src/lib/cortex/middleware/auth.test.ts" name="Auth Middleware &gt; validateToken &gt; should handle malformed authorization header" time="0.0020709">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/monitoring/metrics.test.ts" timestamp="2025-01-07T19:39:53.995Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0461735">
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordEngineMetric &gt; should record engine metrics correctly" time="0.0129022">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordEngineMetric &gt; should handle errors gracefully" time="0.0048275">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordLatency &gt; should record operation latency" time="0.0033469">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; incrementError &gt; should increment error counter" time="0.0031268">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; updateResourceUsage &gt; should update resource metrics" time="0.0030451">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; updateSearchQuality &gt; should update search quality metrics" time="0.0032313">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordAlert &gt; should record metric alerts" time="0.0030622">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; updateCacheHitRatio &gt; should update cache hit ratio metrics" time="0.0027055">
        </testcase>
        <testcase classname="src/lib/cortex/monitoring/metrics.test.ts" name="MetricsService &gt; recordReportDistribution &gt; should record report distribution metrics" time="0.0050714">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/postgres/services.test.ts" timestamp="2025-01-07T19:39:53.997Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0328338">
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; initialize &gt; should initialize successfully" time="0.007583">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; initialize &gt; should handle initialization errors" time="0.0139082">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; healthCheck &gt; should return true when healthy" time="0.0023599">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; healthCheck &gt; should return false and log error when unhealthy" time="0.0015602">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; disconnect &gt; should disconnect successfully" time="0.0022585">
        </testcase>
        <testcase classname="src/lib/cortex/postgres/services.test.ts" name="PostgresDataService &gt; disconnect &gt; should handle disconnect when not initialized" time="0.001141">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/redis/client.test.ts" timestamp="2025-01-07T19:39:53.998Z" hostname="sophra" tests="17" failures="0" errors="0" skipped="0" time="0.0321379">
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; setEx &gt; should set value with expiration" time="0.0066975">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; setEx &gt; should use default TTL when not provided" time="0.0010193">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; setEx &gt; should handle Redis errors" time="0.0042839">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; getEx &gt; should get value" time="0.0014518">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; getEx &gt; should handle null values" time="0.0008691">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; getEx &gt; should handle Redis errors" time="0.0012755">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; del &gt; should delete key" time="0.0011322">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; del &gt; should handle Redis errors" time="0.0013853">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; exists &gt; should check if key exists" time="0.0010997">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; exists &gt; should return false for non-existent keys" time="0.000539">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; exists &gt; should handle Redis errors" time="0.0014821">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; ping &gt; should check connection" time="0.0010847">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; ping &gt; should return false for failed ping" time="0.0006139">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; ping &gt; should handle Redis errors" time="0.0011365">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; disconnect &gt; should close connection" time="0.0010712">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; disconnect &gt; should handle Redis errors" time="0.0008946">
        </testcase>
        <testcase classname="src/lib/cortex/redis/client.test.ts" name="RedisClient &gt; getClient &gt; should return Redis client" time="0.0007381">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/redis/services.test.ts" timestamp="2025-01-07T19:39:54.001Z" hostname="sophra" tests="12" failures="0" errors="0" skipped="0" time="0.3925086">
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; ping &gt; should return true when Redis is available" time="0.0073626">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; ping &gt; should return false when Redis is unavailable" time="0.0023028">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; set &gt; should set cache value with TTL" time="0.0038299">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; set &gt; should handle set errors" time="0.331673">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; get &gt; should get cached value" time="0.0041802">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; get &gt; should return default value when key not found" time="0.006778">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; cacheSearchResults &gt; should cache search results with query hash" time="0.0081587">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; getSearchResults &gt; should retrieve cached search results" time="0.0052112">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; getSearchResults &gt; should return null for cache miss" time="0.0061062">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; disconnect &gt; should disconnect Redis client" time="0.0035101">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; healthCheck &gt; should return true when Redis is healthy" time="0.0049231">
        </testcase>
        <testcase classname="src/lib/cortex/redis/services.test.ts" name="RedisCacheService &gt; healthCheck &gt; should return false when Redis is unhealthy" time="0.0036811">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/reporting/alert-thresholds.test.ts" timestamp="2025-01-07T19:39:54.003Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0227356">
        <testcase classname="src/lib/cortex/reporting/alert-thresholds.test.ts" name="AlertService &gt; checkThresholds &gt; should trigger alert when threshold is exceeded" time="0.0135028">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/alert-thresholds.test.ts" name="AlertService &gt; checkThresholds &gt; should handle multiple thresholds for same metric" time="0.0023974">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/alert-thresholds.test.ts" name="AlertService &gt; checkThresholds &gt; should not trigger alert when threshold is not violated" time="0.002061">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/alert-thresholds.test.ts" name="AlertService &gt; checkThresholds &gt; should handle different comparison operators" time="0.0011972">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/reporting/distribution.test.ts" timestamp="2025-01-07T19:39:54.004Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.022431">
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should distribute report via email" time="0.007938">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should distribute report via Slack" time="0.0014874">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should store report in specified storage" time="0.0011868">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should handle multiple distribution methods" time="0.0019167">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/distribution.test.ts" name="ReportDistributionService &gt; distributeReport &gt; should handle distribution errors gracefully" time="0.0069493">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/reporting/recommendations.test.ts" timestamp="2025-01-07T19:39:54.005Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.016795">
        <testcase classname="src/lib/cortex/reporting/recommendations.test.ts" name="RecommendationService &gt; generateRecommendations &gt; should generate recommendations based on latency trend" time="0.008647">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/recommendations.test.ts" name="RecommendationService &gt; generateRecommendations &gt; should generate cache recommendations" time="0.0019817">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/recommendations.test.ts" name="RecommendationService &gt; generateRecommendations &gt; should handle empty metrics" time="0.001687">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/recommendations.test.ts" name="RecommendationService &gt; generateRecommendations &gt; should handle no recommendations needed" time="0.0014454">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/reporting/service.test.ts" timestamp="2025-01-07T19:39:54.006Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0270307">
        <testcase classname="src/lib/cortex/reporting/service.test.ts" name="ReportingService &gt; generateScheduledReport &gt; should generate scheduled report successfully" time="0.0111343">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/service.test.ts" name="ReportingService &gt; generateScheduledReport &gt; should handle analytics service errors" time="0.0076374">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/service.test.ts" name="ReportingService &gt; checkAlertThresholds &gt; should generate alerts for threshold violations" time="0.002335">
        </testcase>
        <testcase classname="src/lib/cortex/reporting/service.test.ts" name="ReportingService &gt; generateRecommendations &gt; should generate recommendations for performance issues" time="0.0020869">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/services/vectorization.test.ts" timestamp="2025-01-07T19:39:54.007Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0067261">
        <testcase classname="src/lib/cortex/services/vectorization.test.ts" name="VectorizationService &gt; vectorize &gt; should successfully vectorize valid input" time="0.0023057">
        </testcase>
        <testcase classname="src/lib/cortex/services/vectorization.test.ts" name="VectorizationService &gt; vectorize &gt; should handle invalid input gracefully" time="0.0006018">
        </testcase>
        <testcase classname="src/lib/cortex/services/vectorization.test.ts" name="VectorizationService &gt; processVectors &gt; should process vectors correctly" time="0.0003619">
        </testcase>
        <testcase classname="src/lib/cortex/services/vectorization.test.ts" name="VectorizationService &gt; processVectors &gt; should handle processing errors appropriately" time="0.0004196">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/sessions/service.test.ts" timestamp="2025-01-07T19:39:54.008Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0388777">
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; createSession &gt; should create a new session" time="0.012267">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; createSession &gt; should handle session creation errors" time="0.0051238">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; getSession &gt; should retrieve an existing session" time="0.0041562">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; getSession &gt; should return null for non-existent session" time="0.0017126">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; validateSession &gt; should validate active session" time="0.0018263">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; validateSession &gt; should invalidate expired session" time="0.0022517">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; extendSession &gt; should extend session expiration" time="0.0021808">
        </testcase>
        <testcase classname="src/lib/cortex/sessions/service.test.ts" name="SessionService &gt; extendSession &gt; should handle extension errors" time="0.002815">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/types/api.types.test.ts" timestamp="2025-01-07T19:39:54.010Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0159064">
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; APIResponse &gt; should validate APIResponse structure" time="0.0035527">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; APIResponse &gt; should work with different data types" time="0.001055">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; HealthStatus &gt; should validate HealthStatus structure" time="0.0005009">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; HealthStatus &gt; should allow service stats with any key" time="0.0036506">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; EnhancedHealthStatus &gt; should validate EnhancedHealthStatus structure" time="0.000488">
        </testcase>
        <testcase classname="src/lib/cortex/types/api.types.test.ts" name="API Types &gt; EnhancedHealthStatus &gt; should validate that EnhancedHealthStatus extends HealthStatus" time="0.0013486">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/types/search.types.test.ts" timestamp="2025-01-07T19:39:54.012Z" hostname="sophra" tests="14" failures="0" errors="0" skipped="0" time="0.008098">
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; TextQuery &gt; should validate TextQuery structure" time="0.0012186">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; TextQuery &gt; should validate text query with all options" time="0.0002826">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; TextQuery &gt; should validate text query with minimal options" time="0.0002053">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; VectorQuery &gt; should validate VectorQuery structure" time="0.0002213">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; VectorQuery &gt; should validate vector query with all options" time="0.0002109">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; VectorQuery &gt; should validate vector query with minimal options" time="0.0002554">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; AdvancedSearchRequest &gt; should validate AdvancedSearchRequest structure" time="0.0002418">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; AdvancedSearchRequest &gt; should validate text search request" time="0.0002199">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; AdvancedSearchRequest &gt; should validate vector search request" time="0.0004752">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; AdvancedSearchRequest &gt; should validate hybrid search request" time="0.0003055">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; SearchResult &gt; should validate SearchResult structure" time="0.0001406">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; SearchResult &gt; should validate search result with facets" time="0.0012721">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; CachedSearchResult &gt; should validate CachedSearchResult structure" time="0.0001866">
        </testcase>
        <testcase classname="src/lib/cortex/types/search.types.test.ts" name="Search Types &gt; CachedSearchResult &gt; should validate cached search result" time="0.0002821">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/types/services.types.test.ts" timestamp="2025-01-07T19:39:54.021Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0113247">
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; should validate Services structure" time="0.0038663">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Engine Service &gt; should validate engine service structure" time="0.000435">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Sync Service &gt; should validate sync service structure" time="0.0003259">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Documents Service &gt; should validate documents service structure" time="0.0003306">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Health Service &gt; should validate health service structure" time="0.0005819">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Health Service &gt; should validate health check response" time="0.0005452">
        </testcase>
        <testcase classname="src/lib/cortex/types/services.types.test.ts" name="Services Types &gt; Services &gt; Observe Service &gt; should validate observe service structure" time="0.0004489">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/types/session.types.test.ts" timestamp="2025-01-07T19:39:54.023Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0095843">
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Session &gt; should validate Session structure" time="0.0022731">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Session &gt; should allow metadata with any value type" time="0.0005217">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Conversation &gt; should validate Conversation structure" time="0.0003544">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Conversation &gt; should allow optional fields to be undefined" time="0.0003903">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Conversation &gt; should validate conversation with all fields" time="0.0005409">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Message &gt; should validate Message structure" time="0.0004375">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Message &gt; should validate message role values" time="0.0006164">
        </testcase>
        <testcase classname="src/lib/cortex/types/session.types.test.ts" name="Session Types &gt; Message &gt; should validate message with metadata" time="0.0005604">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/circuit-breaker.test.ts" timestamp="2025-01-07T19:39:54.024Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.021067">
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; initialization &gt; should initialize with circuit closed" time="0.0052138">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; error handling &gt; should open circuit after reaching failure threshold" time="0.0016081">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; error handling &gt; should reset after timeout period" time="0.0043661">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; success handling &gt; should reset failure count after success" time="0.0011716">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; circuit state transitions &gt; should transition from closed to open on failures" time="0.0009257">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; circuit state transitions &gt; should allow reset after timeout" time="0.0021738">
        </testcase>
        <testcase classname="src/lib/cortex/utils/circuit-breaker.test.ts" name="CircuitBreaker &gt; circuit state transitions &gt; should maintain open state within timeout period" time="0.0016337">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/rate-limit.test.ts" timestamp="2025-01-07T19:39:54.026Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0330637">
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; rate limiting &gt; should allow requests within rate limit" time="0.0098742">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; rate limiting &gt; should block requests exceeding rate limit" time="0.005371">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; rate limiting &gt; should replenish tokens after interval" time="0.0026187">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; identifier handling &gt; should track limits separately for different identifiers" time="0.0014467">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; identifier handling &gt; should clean up old identifiers when exceeding uniqueTokenPerInterval" time="0.0019189">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; token replenishment &gt; should handle token replenishment correctly" time="0.0024985">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; concurrent requests &gt; should handle concurrent requests correctly" time="0.003392">
        </testcase>
        <testcase classname="src/lib/cortex/utils/rate-limit.test.ts" name="Rate Limiter &gt; concurrent requests &gt; should handle concurrent requests from different clients" time="0.0020481">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/request-queue.test.ts" timestamp="2025-01-07T19:39:54.028Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.6506153">
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; request processing &gt; should process requests concurrently within limit" time="0.2198713">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; request processing &gt; should handle errors in requests" time="0.013107">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; request processing &gt; should process queued requests after errors" time="0.0027887">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; concurrent processing &gt; should respect concurrent request limit" time="0.23976">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; concurrent processing &gt; should queue requests when at concurrent limit" time="0.1708128">
        </testcase>
        <testcase classname="src/lib/cortex/utils/request-queue.test.ts" name="RequestQueue &gt; error recovery &gt; should continue processing after failed requests" time="0.0010339">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/service-manager.test.ts" timestamp="2025-01-07T19:39:54.029Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.1384908">
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; getServices &gt; should initialize and return services" time="0.0060468">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; getServices &gt; should return cached services on subsequent calls" time="0.0017564">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; service initialization &gt; should initialize Redis client" time="0.0015432">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; service initialization &gt; should initialize all required services" time="0.0017653">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; service caching &gt; should cache initialized services" time="0.0015273">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; service caching &gt; should handle concurrent initialization requests" time="0.1153618">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; error handling &gt; should handle Redis connection errors" time="0.0048069">
        </testcase>
        <testcase classname="src/lib/cortex/utils/service-manager.test.ts" name="ServiceManager &gt; error handling &gt; should handle service initialization errors" time="0.0021797">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/cortex/utils/validation.test.ts" timestamp="2025-01-07T19:39:54.031Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0245205">
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should validate valid data" time="0.007983">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should validate data with optional fields" time="0.0011097">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should reject invalid data with validation errors" time="0.0070541">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should handle malformed data gracefully" time="0.0015972">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should handle null and undefined values" time="0.0016661">
        </testcase>
        <testcase classname="src/lib/cortex/utils/validation.test.ts" name="Validation Utils &gt; validateRequest &gt; should handle empty object" time="0.001596">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/database/client.test.ts" timestamp="2025-01-07T19:39:54.033Z" hostname="sophra" tests="13" failures="0" errors="0" skipped="0" time="0.0342709">
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; getInstance &gt; should return the same instance when called multiple times" time="0.0046885">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connect &gt; should establish database connection successfully" time="0.0041415">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connect &gt; should not reconnect if already connected" time="0.001061">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connect &gt; should handle connection errors" time="0.0042313">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; disconnect &gt; should disconnect successfully when connected" time="0.0014628">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; disconnect &gt; should not disconnect if already disconnected" time="0.0018666">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; disconnect &gt; should handle disconnect errors" time="0.0023517">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; healthCheck &gt; should return true when database is healthy" time="0.0017206">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; healthCheck &gt; should return false and log error when health check fails" time="0.0038291">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connection pool management &gt; should manage active connections correctly" time="0.0011736">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connection pool management &gt; should wait and retry when connection pool is full" time="0.000937">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; connection pool management &gt; should not reduce active connections below 0" time="0.0011282">
        </testcase>
        <testcase classname="src/lib/shared/database/client.test.ts" name="EnhancedPrismaClient &gt; experimentConfig &gt; should get and set experiment config correctly" time="0.0018431">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/adaptation-engine.test.ts" timestamp="2025-01-07T19:39:54.035Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0340983">
        <testcase classname="src/lib/shared/engine/adaptation-engine.test.ts" name="AdaptationEngine &gt; Rule Management &gt; should add a rule successfully" time="0.0117309">
        </testcase>
        <testcase classname="src/lib/shared/engine/adaptation-engine.test.ts" name="AdaptationEngine &gt; Rule Management &gt; should detect patterns from events" time="0.0061158">
        </testcase>
        <testcase classname="src/lib/shared/engine/adaptation-engine.test.ts" name="AdaptationEngine &gt; Operation Execution &gt; should execute operation successfully" time="0.0070283">
        </testcase>
        <testcase classname="src/lib/shared/engine/adaptation-engine.test.ts" name="AdaptationEngine &gt; Operation Execution &gt; should handle operation execution errors" time="0.0057787">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/base-engine.test.ts" timestamp="2025-01-07T19:39:54.036Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.036719">
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Processor Management &gt; should register a processor successfully" time="0.007368">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Processor Management &gt; should register multiple processors" time="0.0034151">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Processor Management &gt; should unregister a processor successfully" time="0.0020375">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Processor Management &gt; should handle unregistering a non-existent processor" time="0.0014846">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Engine Run &gt; should run all processors successfully" time="0.0020727">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Engine Run &gt; should continue processing even if one processor fails" time="0.0137547">
            <system-err>
Error running processor: Error: Process failed
    at [90mD:\sophra\[39msrc\lib\shared\engine\base-engine.test.ts:95:21
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:146:14
    at [90mfile:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:533:11
    at runWithTimeout [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:39:7[90m)[39m
    at runTest [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1056:17[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runSuite [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1205:15[90m)[39m
    at runFiles [90m(file:///D:/sophra/[39mnode_modules/[4m@vitest[24m/runner/dist/index.js:1262:5[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Engine Run &gt; should run successfully with no processors" time="0.0011429">
        </testcase>
        <testcase classname="src/lib/shared/engine/base-engine.test.ts" name="BaseEngine &gt; Engine Run &gt; should run processors in registration order" time="0.0014257">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/learning-engine.test.ts" timestamp="2025-01-07T19:39:54.038Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.0267114">
        <testcase classname="src/lib/shared/engine/learning-engine.test.ts" name="LearningEngine &gt; detectPatterns &gt; should create an operation and analyze patterns" time="0.007881">
        </testcase>
        <testcase classname="src/lib/shared/engine/learning-engine.test.ts" name="LearningEngine &gt; getTimeSeriesData &gt; should delegate to timeBased processor" time="0.0070754">
        </testcase>
        <testcase classname="src/lib/shared/engine/learning-engine.test.ts" name="LearningEngine &gt; analyzeTemporalCorrelations &gt; should delegate to timeBased processor" time="0.0036957">
        </testcase>
        <testcase classname="src/lib/shared/engine/learning-engine.test.ts" name="LearningEngine &gt; findRecurringPatterns &gt; should delegate to timeBased processor" time="0.0038866">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/types/index.test.ts" timestamp="2025-01-07T19:39:54.039Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0159956">
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; Logger Interface &gt; should extend WinstonLogger" time="0.0034222">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; ServiceConfig Interface &gt; should allow valid redis configuration" time="0.0009921">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; ServiceConfig Interface &gt; should allow minimal redis configuration" time="0.000761">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; ServiceConfig Interface &gt; should allow empty configuration" time="0.0004857">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; NousAdaptationType Enum &gt; should have correct values" time="0.0008659">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; NousAdaptationType Enum &gt; should be immutable" time="0.0023862">
        </testcase>
        <testcase classname="src/lib/shared/types/index.test.ts" name="Types &gt; NousAdaptationType Enum &gt; should have exactly three values" time="0.0029591">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/documents.route.test.ts" timestamp="2025-01-07T19:39:54.040Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0712885">
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should handle valid document creation with embeddings" time="0.0413041">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should handle document with special characters in content" time="0.0040253">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should create index if it does not exist" time="0.0061792">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should handle invalid JSON input" time="0.0024195">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should validate required fields" time="0.0045417">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/documents.route.test.ts" name="Documents API POST Route &gt; should handle service errors gracefully" time="0.0101584">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/feedback/feedback.route.test.ts" timestamp="2025-01-07T19:39:54.042Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0759117">
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="GET /api/cortex/feedback &gt; should return feedback data with default parameters" time="0.0397577">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="GET /api/cortex/feedback &gt; should handle custom timeframe and limit parameters" time="0.0046093">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="GET /api/cortex/feedback &gt; should handle database errors gracefully" time="0.0017369">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="POST /api/cortex/feedback &gt; should handle missing feedback service" time="0.0107213">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="POST /api/cortex/feedback &gt; should reject invalid session IDs" time="0.0090035">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="POST /api/cortex/feedback &gt; should handle feedback processing errors" time="0.0039313">
        </testcase>
        <testcase classname="src/app/api/cortex/feedback/feedback.route.test.ts" name="POST /api/cortex/feedback &gt; should successfully process valid feedback" time="0.0031316">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/indices/indices.route.test.ts" timestamp="2025-01-07T19:39:54.043Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0739128">
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; GET /api/cortex/indices &gt; should return formatted indices data" time="0.0516684">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; GET /api/cortex/indices &gt; should handle elasticsearch error response format" time="0.0017685">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; POST /api/cortex/indices &gt; should handle duplicate index creation gracefully" time="0.0073691">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; POST /api/cortex/indices &gt; should return validation error for invalid request body" time="0.0038728">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; DELETE /api/cortex/indices &gt; should return error when index parameter is missing" time="0.0019103">
        </testcase>
        <testcase classname="src/app/api/cortex/indices/indices.route.test.ts" name="Indices API Routes &gt; DELETE /api/cortex/indices &gt; should successfully delete an index" time="0.0035055">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/metrics/metrics.route.test.ts" timestamp="2025-01-07T19:39:54.044Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0733323">
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should return metrics data with correct content type header" time="0.0482868">
        </testcase>
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should handle empty metrics data" time="0.0117816">
        </testcase>
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should handle service errors gracefully" time="0.0067515">
        </testcase>
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should handle missing metrics service" time="0.0014952">
        </testcase>
        <testcase classname="src/app/api/cortex/metrics/metrics.route.test.ts" name="GET /api/cortex/metrics &gt; should log debug information for valid metrics" time="0.0019695">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/search/search.route.test.ts" timestamp="2025-01-07T19:39:54.046Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.1002329">
        <testcase classname="src/app/api/cortex/search/search.route.test.ts" name="POST /api/cortex/search &gt; should perform text search successfully" time="0.0570145">
        </testcase>
        <testcase classname="src/app/api/cortex/search/search.route.test.ts" name="POST /api/cortex/search &gt; should perform vector search successfully" time="0.0201122">
        </testcase>
        <testcase classname="src/app/api/cortex/search/search.route.test.ts" name="POST /api/cortex/search &gt; should handle faceted search correctly" time="0.0039933">
        </testcase>
        <testcase classname="src/app/api/cortex/search/search.route.test.ts" name="POST /api/cortex/search &gt; should return 500 for invalid vector dimensions" time="0.0157053">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/sessions/sessions.route.test.ts" timestamp="2025-01-07T19:39:54.047Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0446991">
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; POST /api/sessions &gt; should create a new session with valid metadata" time="0.0320532">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; POST /api/sessions &gt; should return 400 for invalid metadata type" time="0.0014561">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; POST /api/sessions &gt; should return 400 for invalid userId type" time="0.0021951">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; GET /api/sessions &gt; should retrieve a session by id" time="0.0023652">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; GET /api/sessions &gt; should return 400 when session id is missing" time="0.0012003">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/sessions.route.test.ts" name="Sessions API &gt; GET /api/sessions &gt; should handle service errors" time="0.0021406">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/signals/route.test.ts" timestamp="2025-01-07T19:39:54.048Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0958311">
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should fetch signals with default pagination" time="0.0665523">
        </testcase>
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should handle filtering by source and type" time="0.0075117">
        </testcase>
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should handle database errors gracefully" time="0.0017512">
        </testcase>
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should create a new signal with valid data" time="0.0130385">
        </testcase>
        <testcase classname="src/app/api/nous/signals/route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should handle database errors during creation" time="0.0027215">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/signals/signals.route.test.ts" timestamp="2025-01-07T19:39:54.049Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0995487">
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should fetch signals with default pagination" time="0.0617947">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should handle filtering by source and type" time="0.0065539">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; GET /api/nous/signals &gt; should handle database errors gracefully" time="0.0018004">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should create a new signal with valid data" time="0.0173572">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should reject invalid signal data" time="0.00488">
        </testcase>
        <testcase classname="src/app/api/nous/signals/signals.route.test.ts" name="Signals Route Handler &gt; POST /api/nous/signals &gt; should handle database errors during creation" time="0.003846">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/adapt/actions/index.test.ts" timestamp="2025-01-07T19:39:54.050Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0242003">
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="NotifyAction &gt; should log notification with context data" time="0.0112185">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="UpdateStateAction &gt; should update system state with new values" time="0.001476">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="UpdateStateAction &gt; should override existing values" time="0.0008031">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="CompositeAction &gt; should execute all actions in sequence" time="0.0010166">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="CompositeAction &gt; should continue execution if one action fails" time="0.001877">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should adjust metric value within bounds" time="0.0019224">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should respect minimum value" time="0.0006461">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should respect maximum value" time="0.0006031">
        </testcase>
        <testcase classname="src/lib/nous/adapt/actions/index.test.ts" name="ThresholdAdjustmentAction &gt; should initialize metric if not present" time="0.0007819">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/adapt/rules/index.test.ts" timestamp="2025-01-07T19:39:54.051Z" hostname="sophra" tests="20" failures="0" errors="0" skipped="0" time="0.0319495">
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should register and retrieve rules" time="0.0043602">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should unregister rules" time="0.0011294">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should execute triggered rules in priority order" time="0.0027575">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should handle rule execution errors" time="0.0057025">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="RuleRegistry &gt; should only execute enabled rules" time="0.001126">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gt operator correctly" time="0.0012855">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gt operator correctly" time="0.0004894">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lt operator correctly" time="0.0003656">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lt operator correctly" time="0.0007775">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gte operator correctly" time="0.0006067">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate gte operator correctly" time="0.0004095">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lte operator correctly" time="0.0003051">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate lte operator correctly" time="0.0004626">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate eq operator correctly" time="0.0003695">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should evaluate eq operator correctly" time="0.0003985">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="ThresholdCondition &gt; should return false for undefined metrics" time="0.0004793">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should match event type and properties" time="0.0008464">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should not match different event type" time="0.0008549">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should not match when properties differ" time="0.0010948">
        </testcase>
        <testcase classname="src/lib/nous/adapt/rules/index.test.ts" name="EventCondition &gt; should match when no properties specified" time="0.0006463">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/nous/adapt/types/index.test.ts" timestamp="2025-01-07T19:39:54.055Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0156041">
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should validate valid rule context" time="0.0062824">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should validate context without optional metadata" time="0.0010784">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should reject invalid timestamp" time="0.0018463">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should reject non-numeric metrics" time="0.0011107">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RuleContextSchema &gt; should reject missing required fields" time="0.0009891">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RulePriority &gt; should have correct priority values" time="0.0007924">
        </testcase>
        <testcase classname="src/lib/nous/adapt/types/index.test.ts" name="RulePriority &gt; should maintain priority order" time="0.000556">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/adapters/metrics-adapter.test.ts" timestamp="2025-01-07T19:39:54.057Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0247516">
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; configuration &gt; should have default sample rate and batch size" time="0.0060454">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get average latency" time="0.0027728">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get throughput" time="0.0020244">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get error rate" time="0.0017758">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get CPU usage" time="0.001895">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric retrieval &gt; should get memory usage" time="0.0019454">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric recording &gt; should record engine metrics" time="0.0029161">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/metrics-adapter.test.ts" name="MetricsAdapter &gt; metric recording &gt; should record learning metrics" time="0.0015591">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/adapters/redis-adapter.test.ts" timestamp="2025-01-07T19:39:54.058Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0326079">
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; get &gt; should successfully get a value and record metrics" time="0.011621">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; get &gt; should handle null values correctly" time="0.0026486">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; get &gt; should record error metrics when Redis operation fails" time="0.0066088">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; constructor &gt; should initialize with default values when environment variables are not set" time="0.0027142">
        </testcase>
        <testcase classname="src/lib/shared/engine/adapters/redis-adapter.test.ts" name="RedisAdapter &gt; constructor &gt; should initialize with custom environment variables" time="0.0037694">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/base-processor.test.ts" timestamp="2025-01-07T19:39:54.059Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0231392">
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; calculateConfidence &gt; should calculate confidence correctly with valid metrics" time="0.0076175">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; calculateConfidence &gt; should handle empty metrics object" time="0.0016507">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; calculateConfidence &gt; should handle negative metric values" time="0.0018675">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; calculateConfidence &gt; should handle extremely high metric values" time="0.0008221">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; analyze &gt; should analyze events and return patterns" time="0.0054125">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/base-processor.test.ts" name="BaseProcessor &gt; analyze &gt; should handle empty events array" time="0.0013161">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/feedback-processor.test.ts" timestamp="2025-01-07T19:39:54.061Z" hostname="sophra" tests="3" failures="0" errors="0" skipped="0" time="0.0198254">
        <testcase classname="src/lib/shared/engine/processors/feedback-processor.test.ts" name="FeedbackProcessor &gt; analyze &gt; should analyze user feedback events successfully" time="0.013386">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/feedback-processor.test.ts" name="FeedbackProcessor &gt; analyze &gt; should handle empty events array" time="0.0018475">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/feedback-processor.test.ts" name="FeedbackProcessor &gt; analyze &gt; should handle events without feedback metadata" time="0.0018204">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/performance-processor.test.ts" timestamp="2025-01-07T19:39:54.061Z" hostname="sophra" tests="3" failures="0" errors="0" skipped="0" time="0.016771">
        <testcase classname="src/lib/shared/engine/processors/performance-processor.test.ts" name="PerformanceProcessor &gt; analyze &gt; should analyze performance events successfully" time="0.0105525">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/performance-processor.test.ts" name="PerformanceProcessor &gt; analyze &gt; should handle empty events array" time="0.001874">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/performance-processor.test.ts" name="PerformanceProcessor &gt; analyze &gt; should handle events without performance metadata" time="0.0014705">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/strategy-processor.test.ts" timestamp="2025-01-07T19:39:54.062Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0303611">
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; generateStrategies &gt; should generate strategies for high relevance search pattern" time="0.00933">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; generateStrategies &gt; should not generate query transformation strategy for slow patterns" time="0.0018607">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; executeStrategy &gt; should execute weight adjustment strategy successfully" time="0.0064018">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; executeStrategy &gt; should execute query transformation strategy successfully" time="0.0022884">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; executeStrategy &gt; should execute index optimization strategy successfully" time="0.0018043">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; executeStrategy &gt; should execute cache strategy successfully" time="0.0016688">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; Pattern Analysis &gt; should identify high performance patterns" time="0.0014363">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; Pattern Analysis &gt; should identify slow query patterns" time="0.0008674">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/strategy-processor.test.ts" name="StrategyProcessor &gt; Pattern Analysis &gt; should identify high traffic patterns" time="0.0012246">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/engine/processors/time-based-processor.test.ts" timestamp="2025-01-07T19:39:54.064Z" hostname="sophra" tests="12" failures="0" errors="0" skipped="0" time="0.1660528">
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; analyze &gt; should analyze time-based events" time="0.1279393">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; analyze &gt; should handle empty event list" time="0.0027979">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; getTimeSeriesData &gt; should retrieve time series data" time="0.0026225">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; getTimeSeriesData &gt; should validate time range parameters" time="0.0094852">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; analyzeCorrelations &gt; should analyze correlations in time series data" time="0.0047601">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; analyzeCorrelations &gt; should handle empty time series data" time="0.0016424">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; findRecurringPatterns &gt; should find recurring patterns" time="0.0015288">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; findRecurringPatterns &gt; should validate pattern search parameters" time="0.0019133">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; findRecurringPatterns &gt; should handle minimum confidence threshold" time="0.0019329">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; time series analysis &gt; should detect seasonal patterns" time="0.0043206">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; time series analysis &gt; should detect trend patterns" time="0.0017273">
        </testcase>
        <testcase classname="src/lib/shared/engine/processors/time-based-processor.test.ts" name="TimeBasedProcessor &gt; time series analysis &gt; should detect anomalies" time="0.0012173">
        </testcase>
    </testsuite>
    <testsuite name="src/lib/shared/logger/src/logger.test.ts" timestamp="2025-01-07T19:39:54.066Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0271331">
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; info() should log messages with INFO level" time="0.00817">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; error() should log messages with ERROR level" time="0.0021695">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; warn() should log messages with WARN level" time="0.0015649">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; debug() should log messages with DEBUG level" time="0.001297">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; log methods &gt; should handle objects and errors" time="0.0025203">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; error handling &gt; should handle invalid log levels gracefully" time="0.0013277">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; error handling &gt; should handle undefined messages" time="0.0018795">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; configuration &gt; should respect log level settings" time="0.0019207">
        </testcase>
        <testcase classname="src/lib/shared/logger/src/logger.test.ts" name="Logger &gt; configuration &gt; should handle invalid configuration gracefully" time="0.0024563">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/ab-test/assign/assign.route.test.ts" timestamp="2025-01-07T19:39:54.068Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0258953">
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 500 if service initialization fails" time="0.0160425">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 400 if request body is invalid" time="0.0027797">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 404 if test is not found by name" time="0.001272">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 404 if no eligible variant is found" time="0.0010125">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/assign/assign.route.test.ts" name="POST /api/cortex/ab-test/assign &gt; should return 200 and assign a variant successfully" time="0.0034381">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/ab-test/create/create.route.test.ts" timestamp="2025-01-07T19:39:54.069Z" hostname="sophra" tests="2" failures="0" errors="0" skipped="0" time="0.0736366">
        <testcase classname="src/app/api/cortex/ab-test/create/create.route.test.ts" name="POST /api/cortex/ab-test/create &gt; should create an A/B test successfully" time="0.0603904">
        </testcase>
        <testcase classname="src/app/api/cortex/ab-test/create/create.route.test.ts" name="POST /api/cortex/ab-test/create &gt; should return 500 when abTesting service is not available" time="0.0104576">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/analytics/reports/report.route.test.ts" timestamp="2025-01-07T19:39:54.070Z" hostname="sophra" tests="3" failures="0" errors="0" skipped="0" time="0.0184441">
        <testcase classname="src/app/api/cortex/analytics/reports/report.route.test.ts" name="GET analytics report &gt; should return analytics report with default timeWindow" time="0.0146246">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/reports/report.route.test.ts" name="GET analytics report &gt; should use custom timeWindow from query params" time="0.0010294">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/reports/report.route.test.ts" name="GET analytics report &gt; should handle errors and return 500 status" time="0.0016489">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/analytics/search/search.route.test.ts" timestamp="2025-01-07T19:39:54.071Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.1012477">
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="POST /api/cortex/analytics/search &gt; should successfully create search event" time="0.0835174">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="POST /api/cortex/analytics/search &gt; should handle missing analytics service" time="0.0057444">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="GET /api/cortex/analytics/search &gt; should retrieve search events with custom timeframe" time="0.0046252">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="GET /api/cortex/analytics/search &gt; should handle invalid JSON in facetsUsed" time="0.0020049">
        </testcase>
        <testcase classname="src/app/api/cortex/analytics/search/search.route.test.ts" name="GET /api/cortex/analytics/search &gt; should handle service error" time="0.0021408">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/bulk/bulk.route.test.ts" timestamp="2025-01-07T19:39:54.072Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.093948">
        <testcase classname="src/app/api/cortex/documents/bulk/bulk.route.test.ts" name="POST /api/cortex/documents/bulk &gt; should successfully process bulk documents with default tableName" time="0.0505675">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/bulk/bulk.route.test.ts" name="POST /api/cortex/documents/bulk &gt; should handle batch processing for large document sets" time="0.0330531">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/bulk/bulk.route.test.ts" name="POST /api/cortex/documents/bulk &gt; should reject invalid document schema" time="0.0044338">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/bulk/bulk.route.test.ts" name="POST /api/cortex/documents/bulk &gt; should handle sync service errors" time="0.0028898">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/verify/verify.route.test.ts" timestamp="2025-01-07T19:39:54.073Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0679018">
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should return 400 when index parameter is missing" time="0.0490257">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should return 400 when id parameter is missing" time="0.0015385">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should return 404 when index is not found in database" time="0.0016027">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should return document verification details when document exists" time="0.0075709">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should handle non-existent document gracefully" time="0.0019402">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/verify/verify.route.test.ts" name="Document Verification API Route &gt; should handle elasticsearch service errors" time="0.0031672">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/[id]/id.route.test.ts" timestamp="2025-01-07T19:39:54.074Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0639801">
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; PUT /api/cortex/documents/[id] &gt; should successfully update a document" time="0.045699">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; PUT /api/cortex/documents/[id] &gt; should handle invalid update fields" time="0.0035089">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; GET /api/cortex/documents/[id] &gt; should retrieve a document successfully" time="0.0051352">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; GET /api/cortex/documents/[id] &gt; should handle non-existent index" time="0.0005952">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; DELETE /api/cortex/documents/[id] &gt; should delete a document successfully" time="0.0014812">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/id.route.test.ts" name="Document API Routes &gt; DELETE /api/cortex/documents/[id] &gt; should handle already deleted document gracefully" time="0.0009785">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/engine/health/engine.health.route.test.ts" timestamp="2025-01-07T19:39:54.075Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0796241">
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should return healthy status when engine is operational" time="0.0500304">
        </testcase>
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should handle service timeout correctly" time="0.0065729">
        </testcase>
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should handle missing engine service gracefully" time="0.0021594">
        </testcase>
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should handle service manager failure" time="0.0110853">
        </testcase>
        <testcase classname="src/app/api/cortex/engine/health/engine.health.route.test.ts" name="GET /api/cortex/engine/health &gt; should include all required metrics in healthy response" time="0.00629">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" timestamp="2025-01-07T19:39:54.077Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0425691">
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; GET /api/nous/ab-testing/experiments &gt; should return experiments with default pagination" time="0.0288641">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; GET /api/nous/ab-testing/experiments &gt; should handle pagination parameters" time="0.0014232">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; GET /api/nous/ab-testing/experiments &gt; should handle status filter" time="0.0012676">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; GET /api/nous/ab-testing/experiments &gt; should handle database errors" time="0.0019787">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; POST /api/nous/ab-testing/experiments &gt; should create a new experiment" time="0.0032243">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; POST /api/nous/ab-testing/experiments &gt; should return 400 for invalid experiment data" time="0.0013232">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/experiments.route.test.ts" name="Experiments Route Handler &gt; POST /api/nous/ab-testing/experiments &gt; should handle database errors during creation" time="0.0015882">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/results/results.route.test.ts" timestamp="2025-01-07T19:39:54.078Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0960268">
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; POST /api/nous/ab-testing/results &gt; should reject invalid request body" time="0.0525377">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; POST /api/nous/ab-testing/results &gt; should handle non-existent experiment" time="0.0020076">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; POST /api/nous/ab-testing/results &gt; should successfully record metrics with metadata" time="0.0156059">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; GET /api/nous/ab-testing/results &gt; should reject request without testId" time="0.001789">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; should return aggregated metrics" time="0.002874">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/results/results.route.test.ts" name="AB Testing Results API &gt; should handle database errors gracefully" time="0.0137206">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/adapt/apply/apply.route.test.ts" timestamp="2025-01-07T19:39:54.079Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0718578">
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should validate request format and return 400 for invalid input" time="0.0544423">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should handle case when no rules are found" time="0.0038465">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should process valid request with metrics successfully" time="0.0069424">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should handle database errors gracefully" time="0.0017435">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/apply/apply.route.test.ts" name="Adaptation Apply Route Handler &gt; should handle engine evaluation errors" time="0.0019464">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/adapt/rules/rules.route.test.ts" timestamp="2025-01-07T19:39:54.080Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0980581">
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; GET &gt; should return all adaptation rules ordered by priority" time="0.0440097">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; GET &gt; should handle database errors during fetch" time="0.001329">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; POST &gt; should create multiple adaptation rules successfully" time="0.0438948">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; POST &gt; should reject invalid rule format" time="0.0031904">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; POST &gt; should handle empty rules array" time="0.0014885">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/rules/rules.route.test.ts" name="Adaptation Rules API &gt; POST &gt; should handle database transaction errors" time="0.001769">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/adapt/suggest/suggest.route.test.ts" timestamp="2025-01-07T19:39:54.081Z" hostname="sophra" tests="4" failures="0" errors="0" skipped="0" time="0.1114242">
        <testcase classname="src/app/api/nous/adapt/suggest/suggest.route.test.ts" name="Adaptation Suggestion Route Handler &gt; should successfully process valid adaptation suggestion" time="0.0948349">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/suggest/suggest.route.test.ts" name="Adaptation Suggestion Route Handler &gt; should reject invalid payload with missing required fields" time="0.0047803">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/suggest/suggest.route.test.ts" name="Adaptation Suggestion Route Handler &gt; should reject payload with invalid value ranges" time="0.0017958">
        </testcase>
        <testcase classname="src/app/api/nous/adapt/suggest/suggest.route.test.ts" name="Adaptation Suggestion Route Handler &gt; should handle database errors appropriately" time="0.0067708">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/events/events.route.test.ts" timestamp="2025-01-07T19:39:54.082Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0688746">
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should fetch events with default parameters" time="0.0551798">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle filtering by type and date range" time="0.0025526">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle invalid query parameters" time="0.0028578">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle database connection failure" time="0.0012962">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle database query errors gracefully" time="0.0018748">
        </testcase>
        <testcase classname="src/app/api/nous/learn/events/events.route.test.ts" name="Learning Events Route Handler &gt; GET /api/nous/learn/events &gt; should handle empty results" time="0.0016124">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/feedback/feedback.route.test.ts" timestamp="2025-01-07T19:39:54.083Z" hostname="sophra" tests="9" failures="0" errors="0" skipped="0" time="0.0915513">
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; GET /api/nous/learn/feedback &gt; should fetch feedback requests successfully" time="0.0362261">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; GET /api/nous/learn/feedback &gt; should handle empty results" time="0.0007261">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; GET /api/nous/learn/feedback &gt; should handle database errors gracefully" time="0.0010138">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should create feedback successfully" time="0.04286">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle invalid feedback data" time="0.0027386">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle missing feedback array" time="0.0012305">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle invalid rating values" time="0.0017274">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle database errors during creation" time="0.0014204">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/feedback.route.test.ts" name="Feedback Route Handler &gt; POST /api/nous/learn/feedback &gt; should handle malformed JSON in request body" time="0.0015503">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/metrics/metrics.route.test.ts" timestamp="2025-01-07T19:39:54.085Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.0707761">
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should fetch metrics with valid parameters" time="0.0494146">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle invalid metric types" time="0.0031889">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle invalid timeframe parameter" time="0.0024816">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle invalid interval parameter" time="0.0016722">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle database connection failure" time="0.0026345">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle database query failure" time="0.0019611">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle empty results" time="0.003814">
        </testcase>
        <testcase classname="src/app/api/nous/learn/metrics/metrics.route.test.ts" name="Learning Metrics Route Handler &gt; GET /api/nous/learn/metrics &gt; should handle multiple metrics and timeframes" time="0.0022718">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/models/models.route.test.ts" timestamp="2025-01-07T19:39:54.087Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.063963">
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; GET /api/nous/learn/models &gt; should fetch models with their latest versions" time="0.0461716">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; GET /api/nous/learn/models &gt; should handle database errors gracefully" time="0.0077119">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; POST /api/nous/learn/models &gt; should create a new model with valid data" time="0.0031832">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; POST /api/nous/learn/models &gt; should reject invalid model data" time="0.0027381">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/models.route.test.ts" name="Models Route Handler &gt; POST /api/nous/learn/models &gt; should handle database errors during creation" time="0.0012329">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" timestamp="2025-01-07T19:39:54.088Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0769832">
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; GET /api/nous/learn/search-patterns &gt; should fetch patterns with default parameters" time="0.0496647">
        </testcase>
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; GET /api/nous/learn/search-patterns &gt; should handle query filtering" time="0.001626">
        </testcase>
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; GET /api/nous/learn/search-patterns &gt; should handle database errors gracefully" time="0.0016576">
        </testcase>
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; POST /api/nous/learn/search-patterns &gt; should create patterns with valid data" time="0.0108525">
        </testcase>
        <testcase classname="src/app/api/nous/learn/search-patterns/search-patterns.route.test.ts" name="Search Patterns Route Handler &gt; POST /api/nous/learn/search-patterns &gt; should reject invalid pattern data" time="0.0097366">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/signals/observe/observe.route.test.ts" timestamp="2025-01-07T19:39:54.089Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0521181">
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; GET /api/nous/signals/observe &gt; should fetch signal stats without filters" time="0.0331235">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; GET /api/nous/signals/observe &gt; should handle filtering by source and type" time="0.004501">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; GET /api/nous/signals/observe &gt; should handle database errors gracefully" time="0.0012871">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; POST /api/nous/signals/observe &gt; should fetch detailed signal stats with valid query" time="0.0066617">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; POST /api/nous/signals/observe &gt; should reject invalid query format" time="0.0024966">
        </testcase>
        <testcase classname="src/app/api/nous/signals/observe/observe.route.test.ts" name="Signals Observe Route Handler &gt; POST /api/nous/signals/observe &gt; should handle database errors gracefully" time="0.0007994">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/signals/process/process.route.test.ts" timestamp="2025-01-07T19:39:54.090Z" hostname="sophra" tests="7" failures="0" errors="0" skipped="0" time="0.0848308">
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; GET /api/nous/signals/process &gt; should fetch pending signals with default parameters" time="0.0468625">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; GET /api/nous/signals/process &gt; should handle specific status filtering" time="0.0027226">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; GET /api/nous/signals/process &gt; should handle database errors gracefully" time="0.0012655">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; POST /api/nous/signals/process &gt; should update signal processing status with valid data" time="0.0076068">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; POST /api/nous/signals/process &gt; should reject invalid update format" time="0.0072305">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; POST /api/nous/signals/process &gt; should handle processing errors gracefully" time="0.0099031">
        </testcase>
        <testcase classname="src/app/api/nous/signals/process/process.route.test.ts" name="Signals Process Route Handler &gt; POST /api/nous/signals/process &gt; should handle complex metadata updates" time="0.0059456">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" timestamp="2025-01-07T19:39:54.091Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0783367">
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; GET /api/documents/[id]/vectorize &gt; should return 400 when indexId is missing" time="0.0366002">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; GET /api/documents/[id]/vectorize &gt; should return 404 when index is not found" time="0.0023385">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; GET /api/documents/[id]/vectorize &gt; should handle successful vectorization" time="0.0124962">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; PUT /api/documents/[id]/vectorize &gt; should handle missing required parameters" time="0.0027576">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; PUT /api/documents/[id]/vectorize &gt; should handle successful document update" time="0.0144892">
        </testcase>
        <testcase classname="src/app/api/cortex/documents/[id]/vectorize/vectorize.route.test.ts" name="Document vectorization endpoints &gt; PUT /api/documents/[id]/vectorize &gt; should handle invalid JSON input" time="0.0056247">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" timestamp="2025-01-07T19:39:54.093Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0244687">
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should return 404 if session is not found" time="0.0170704">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should return 500 if service initialization fails" time="0.0010579">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should calculate metrics correctly with search events" time="0.0025018">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should handle empty search events correctly" time="0.0009538">
        </testcase>
        <testcase classname="src/app/api/cortex/sessions/[sessionId]/analytics/id.analytics.route.test.ts" name="GET /api/cortex/sessions/[sessionId]/analytics &gt; should calculate click-through rate correctly" time="0.0012518">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" timestamp="2025-01-07T19:39:54.094Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0694457">
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should return 400 when request body is invalid" time="0.0543256">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should return 404 when experiment is not found" time="0.0022243">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should return 400 when experiment is already active" time="0.0015756">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should successfully activate an experiment" time="0.0064651">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/activate/activate.route.test.ts" name="Activate Experiment Route Handler &gt; should return 500 when database operation fails" time="0.0018158">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" timestamp="2025-01-07T19:39:54.096Z" hostname="sophra" tests="6" failures="0" errors="0" skipped="0" time="0.0738505">
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should return 400 when request body is invalid" time="0.0433008">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should return 404 when experiment is not found" time="0.0055171">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should return 400 when experiment is not active" time="0.0023539">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should successfully apply adaptations" time="0.0038136">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should handle case when no adaptations are needed" time="0.003549">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/apply/apply.route.test.ts" name="Apply Adaptation Route Handler &gt; should handle database errors" time="0.0119872">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" timestamp="2025-01-07T19:39:54.097Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.0654204">
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should return 400 when request body is invalid" time="0.0499452">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should return 404 when experiment is not found" time="0.0045705">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should return 400 when experiment is already inactive" time="0.0035636">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should successfully deactivate an experiment" time="0.0015889">
        </testcase>
        <testcase classname="src/app/api/nous/ab-testing/experiments/deactivate/deactivate.route.test.ts" name="Deactivate Experiment Route Handler &gt; should return 500 when database operation fails" time="0.0032206">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" timestamp="2025-01-07T19:39:54.098Z" hostname="sophra" tests="8" failures="0" errors="0" skipped="0" time="0.079802">
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should fetch patterns with default parameters" time="0.0488709">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle custom timeframe and limit" time="0.006501">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle invalid timeframe parameter" time="0.0027418">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle invalid limit parameter" time="0.0012371">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle limit out of range" time="0.0019458">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle database errors gracefully" time="0.0109513">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should calculate confidence and metrics correctly" time="0.0027948">
        </testcase>
        <testcase classname="src/app/api/nous/learn/feedback/patterns/patterns.route.test.ts" name="Feedback Patterns Route Handler &gt; GET /api/nous/learn/feedback/patterns &gt; should handle empty results" time="0.0013797">
        </testcase>
    </testsuite>
    <testsuite name="src/app/api/nous/learn/models/sync/sync.route.test.ts" timestamp="2025-01-07T19:39:54.099Z" hostname="sophra" tests="5" failures="0" errors="0" skipped="0" time="0.085616">
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; GET /api/nous/learn/models/sync &gt; should fetch model states with metrics" time="0.0464384">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; GET /api/nous/learn/models/sync &gt; should handle database errors gracefully" time="0.0013003">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; POST /api/nous/learn/models/sync &gt; should sync model state with valid data" time="0.0177095">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; POST /api/nous/learn/models/sync &gt; should reject invalid sync data" time="0.0047132">
        </testcase>
        <testcase classname="src/app/api/nous/learn/models/sync/sync.route.test.ts" name="Model Sync Route Handler &gt; POST /api/nous/learn/models/sync &gt; should handle database errors during sync" time="0.0102632">
        </testcase>
    </testsuite>
</testsuites>
