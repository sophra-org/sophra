import { z } from 'zod';
import { Prisma } from '@prisma/client';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | 'JsonNull' | 'DbNull' | Prisma.NullTypes.DbNull | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === 'DbNull') return Prisma.DbNull;
  if (v === 'JsonNull') return Prisma.JsonNull;
  return v;
};

export const JsonValueSchema: z.ZodType<Prisma.JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.literal(null),
    z.record(z.lazy(() => JsonValueSchema.optional())),
    z.array(z.lazy(() => JsonValueSchema)),
  ])
);

export type JsonValueType = z.infer<typeof JsonValueSchema>;

export const NullableJsonValue = z
  .union([JsonValueSchema, z.literal('DbNull'), z.literal('JsonNull')])
  .nullable()
  .transform((v) => transformJsonNull(v));

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),
    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
  ])
);

export type InputJsonValueType = z.infer<typeof InputJsonValueSchema>;


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const DocumentScalarFieldEnumSchema = z.enum(['id','data','created_at','updated_at']);

export const MigrationScalarFieldEnumSchema = z.enum(['id','name','version','applied_at']);

export const SearchAnalyticsScalarFieldEnumSchema = z.enum(['id','query','searchType','totalHits','took','timestamp','facetsUsed','sessionId','resultIds','page','pageSize','filters']);

export const SessionScalarFieldEnumSchema = z.enum(['id','userId','startedAt','lastActiveAt','metadata','data','expiresAt','createdAt','updatedAt']);

export const ConversationScalarFieldEnumSchema = z.enum(['id','sessionId','title','context','createdAt','updatedAt']);

export const MessageScalarFieldEnumSchema = z.enum(['id','conversationId','role','content','timestamp','metadata']);

export const ABTestScalarFieldEnumSchema = z.enum(['id','name','description','startDate','endDate','status','configuration','createdAt','updatedAt']);

export const ABTestAssignmentScalarFieldEnumSchema = z.enum(['id','testId','sessionId','variantId','timestamp']);

export const ABTestMetricScalarFieldEnumSchema = z.enum(['id','testId','variantId','eventType','value','timestamp','sessionId']);

export const SearchFeedbackScalarFieldEnumSchema = z.enum(['id','searchId','queryHash','resultId','relevanceScore','userAction','timestamp','metadata']);

export const BaseEventScalarFieldEnumSchema = z.enum(['id','type','timestamp','data','source','priority','processed','metadata','correlationId','searchEventid']);

export const ModelEventScalarFieldEnumSchema = z.enum(['id','baseEventId','modelId','version','parameters','metrics','results']);

export const ProcessedSignalScalarFieldEnumSchema = z.enum(['id','signalId','originalSignalId','processingTime','transformations','confidence','processed','processingMetadata']);

export const SignalBatchScalarFieldEnumSchema = z.enum(['id','batchId','startTime','endTime','metadata','priority','sourceSystem','signalIds']);

export const SignalPatternScalarFieldEnumSchema = z.enum(['id','patternId','signalIds','confidence','patternType','frequency','impactScore','relatedPatterns']);

export const AdaptationRuleScalarFieldEnumSchema = z.enum(['id','name','description','type','conditions','actions','priority','enabled','lastTriggered']);

export const ModelConfigScalarFieldEnumSchema = z.enum(['id','type','hyperparameters','features','trainingParams']);

export const ModelVersionScalarFieldEnumSchema = z.enum(['id','configId','createdAt','metrics','artifactPath','parentVersion']);

export const LearningRequestScalarFieldEnumSchema = z.enum(['id','patterns','timestamp']);

export const FeedbackRequestScalarFieldEnumSchema = z.enum(['id','feedback','timestamp']);

export const ModelMetricsScalarFieldEnumSchema = z.enum(['id','modelVersionId','accuracy','precision','recall','f1Score','latencyMs','loss','validationMetrics','customMetrics','timestamp']);

export const ModelStateScalarFieldEnumSchema = z.enum(['id','versionId','weights','bias','scaler','featureNames','isTrained','createdAt','updatedAt','modelType','hyperparameters','currentEpoch','trainingProgress','lastTrainingError']);

export const SearchEventScalarFieldEnumSchema = z.enum(['id','sessionId','query','searchType','totalHits','took','timestamp','facetsUsed','resultIds','page','pageSize','filters']);

export const ABTestMetricsScalarFieldEnumSchema = z.enum(['id','testId','variantId','queryHash','metrics','timestamp']);

export const SignalScalarFieldEnumSchema = z.enum(['id','type','source','value','priority','retries','timestamp','processed','processedAt','metadata','error','manual','createdAt','updatedAt','strength']);

export const AnalyticsMetricsScalarFieldEnumSchema = z.enum(['id','totalSearches','averageLatency','successRate','errorRate','cacheHitRate','queryCount','uniqueUsers','avgResultsPerQuery','clickThroughRate','conversionRate','avgRelevanceScore','p95Latency','p99Latency','resourceUtilization','searchTypes','timeWindow','timestamp','sessionId']);

export const AnalyticsTrendScalarFieldEnumSchema = z.enum(['id','metric','current','change','trend','timestamp']);

export const PerformanceInsightScalarFieldEnumSchema = z.enum(['id','type','severity','message','metric','currentValue','recommendedValue','action','timestamp']);

export const AnalyticsReportScalarFieldEnumSchema = z.enum(['id','timeWindow','generatedAt','metrics','trends','insights','popularQueries','timestamp']);

export const AdaptationSuggestionScalarFieldEnumSchema = z.enum(['id','queryHash','patterns','confidence','status','metadata','createdAt','updatedAt']);

export const LearningMetricScalarFieldEnumSchema = z.enum(['id','type','value','timestamp','interval','sessionId','modelId','metadata','timeframe','aggregated','count','createdAt','updatedAt']);

export const LearningEventScalarFieldEnumSchema = z.enum(['id','type','status','priority','timestamp','processedAt','metadata','correlationId','sessionId','userId','clientId','environment','version','tags','error','retryCount','createdAt','updatedAt']);

export const LearningPatternScalarFieldEnumSchema = z.enum(['id','type','confidence','features','metadata','eventId','createdAt','updatedAt']);

export const EngineStateScalarFieldEnumSchema = z.enum(['id','status','currentPhase','confidence','lastActive','metadata','createdAt','updatedAt']);

export const EngineOperationScalarFieldEnumSchema = z.enum(['id','type','status','startTime','endTime','metrics','metadata','error','createdAt','updatedAt']);

export const EngineMetricScalarFieldEnumSchema = z.enum(['id','type','value','confidence','timestamp','metadata','operationId']);

export const EngineLearningResultScalarFieldEnumSchema = z.enum(['id','patterns','confidence','metadata','performance','validatedAt','abTestMetrics','operationId']);

export const EngineOptimizationStrategyScalarFieldEnumSchema = z.enum(['id','type','priority','confidence','impact','metadata','createdAt','updatedAt','learningResultId']);

export const EngineConfidenceScoreScalarFieldEnumSchema = z.enum(['id','value','factors','metadata','createdAt','updatedAt']);

export const SearchWeightsScalarFieldEnumSchema = z.enum(['id','titleWeight','contentWeight','tagWeight','active','metadata','createdAt','updatedAt']);

export const SearchConfigScalarFieldEnumSchema = z.enum(['id','key','value','createdAt','updatedAt']);

export const ExperimentConfigScalarFieldEnumSchema = z.enum(['id','key','value','status','createdAt','updatedAt']);

export const EngineRecommendationScalarFieldEnumSchema = z.enum(['id','type','priority','confidence','impact','metadata','learningResultId','createdAt','updatedAt']);

export const IndexScalarFieldEnumSchema = z.enum(['id','name','status','settings','mappings','created_at','updated_at','deleted_at','doc_count','size_bytes','health']);

export const UserScalarFieldEnumSchema = z.enum(['id','name','email','password','emailVerified','image','createdAt','updatedAt']);

export const AccountScalarFieldEnumSchema = z.enum(['id','userId','type','provider','providerAccountId','refresh_token','access_token','expires_at','token_type','scope','id_token','session_state']);

export const AuthSessionScalarFieldEnumSchema = z.enum(['id','sessionToken','userId','expires']);

export const VerificationTokenScalarFieldEnumSchema = z.enum(['identifier','token','expires']);

export const ApiKeyScalarFieldEnumSchema = z.enum(['id','key','clientId','name','description','isActive','expiresAt','createdAt','updatedAt','lastUsedAt','allowedIps','rateLimit','usageCount']);

export const AdminTokenScalarFieldEnumSchema = z.enum(['id','token','name','description','isActive','createdAt','updatedAt','lastUsedAt']);

export const SessionToSignalScalarFieldEnumSchema = z.enum(['A','B']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const JsonNullValueInputSchema = z.enum(['JsonNull',]).transform((value) => (value === 'JsonNull' ? Prisma.JsonNull : value));

export const NullableJsonNullValueInputSchema = z.enum(['DbNull','JsonNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.DbNull : value);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]).transform((value) => value === 'JsonNull' ? Prisma.JsonNull : value === 'DbNull' ? Prisma.JsonNull : value === 'AnyNull' ? Prisma.AnyNull : value);

export const NullsOrderSchema = z.enum(['first','last']);

export const EventTypeSchema = z.enum(['SYSTEM','USER','STATE_CHANGE','SEARCH','MODEL','FEEDBACK','ADAPTATION','LEARNING']);

export type EventTypeType = `${z.infer<typeof EventTypeSchema>}`

export const SignalTypeSchema = z.enum(['SEARCH','PERFORMANCE','USER_BEHAVIOR_IMPRESSION','USER_BEHAVIOR_VIEW','USER_BEHAVIOR_CLICK','USER_BEHAVIOR_CONVERSION','MODEL_PERFORMANCE','FEEDBACK','SYSTEM_HEALTH','SESSION']);

export type SignalTypeType = `${z.infer<typeof SignalTypeSchema>}`

export const EngagementTypeSchema = z.enum(['IMPRESSION','VIEW','CLICK','CONVERSION']);

export type EngagementTypeType = `${z.infer<typeof EngagementTypeSchema>}`

export const SeveritySchema = z.enum(['INFO','WARNING','ERROR','CRITICAL']);

export type SeverityType = `${z.infer<typeof SeveritySchema>}`

export const ModelTypeSchema = z.enum(['SEARCH_RANKER','PATTERN_DETECTOR','QUERY_OPTIMIZER','FEEDBACK_ANALYZER','OPENAI_FINE_TUNED']);

export type ModelTypeType = `${z.infer<typeof ModelTypeSchema>}`

export const RulePrioritySchema = z.enum(['CRITICAL','HIGH','MEDIUM','LOW']);

export type RulePriorityType = `${z.infer<typeof RulePrioritySchema>}`

export const ExperimentStatusSchema = z.enum(['PENDING','ACTIVE','COMPLETED','STOPPED','FAILED']);

export type ExperimentStatusType = `${z.infer<typeof ExperimentStatusSchema>}`

export const MetricTypeSchema = z.enum(['FEEDBACK_SCORE','ENGAGEMENT_RATE','RELEVANCE_SCORE','CLICK_THROUGH','CONVERSION_RATE','SEARCH_LATENCY','MODEL_ACCURACY','ADAPTATION_SUCCESS','CACHE_EFFICIENCY','CACHE_HIT_RATE','REDIS_GET','REDIS_SET','REDIS_DELETE','REDIS_EXISTS','REDIS_ERROR','ERROR_RATE','THROUGHPUT','CPU_USAGE','MEMORY_USAGE']);

export type MetricTypeType = `${z.infer<typeof MetricTypeSchema>}`

export const LearningEventTypeSchema = z.enum(['SEARCH_PATTERN','USER_FEEDBACK','MODEL_UPDATE','ADAPTATION_RULE','SIGNAL_DETECTED','METRIC_THRESHOLD','SYSTEM_STATE','EXPERIMENT_RESULT','PATTERN_DETECTION','STRATEGY_GENERATION','FEEDBACK_ANALYSIS','MODEL_TRAINING','SYSTEM_ADAPTATION']);

export type LearningEventTypeType = `${z.infer<typeof LearningEventTypeSchema>}`

export const LearningEventStatusSchema = z.enum(['PENDING','PROCESSING','COMPLETED','FAILED','IGNORED']);

export type LearningEventStatusType = `${z.infer<typeof LearningEventStatusSchema>}`

export const LearningEventPrioritySchema = z.enum(['CRITICAL','HIGH','MEDIUM','LOW']);

export type LearningEventPriorityType = `${z.infer<typeof LearningEventPrioritySchema>}`

export const EngineOptimizationTypeSchema = z.enum(['WEIGHT_ADJUSTMENT','QUERY_TRANSFORMATION','INDEX_OPTIMIZATION','CACHE_STRATEGY']);

export type EngineOptimizationTypeType = `${z.infer<typeof EngineOptimizationTypeSchema>}`

export const EngineRiskLevelSchema = z.enum(['LOW','MEDIUM','HIGH']);

export type EngineRiskLevelType = `${z.infer<typeof EngineRiskLevelSchema>}`

export const EngineOperationTypeSchema = z.enum(['PATTERN_DETECTION','STRATEGY_EXECUTION','RULE_EVALUATION','ADAPTATION','LEARNING_CYCLE']);

export type EngineOperationTypeType = `${z.infer<typeof EngineOperationTypeSchema>}`

export const EngineOperationStatusSchema = z.enum(['PENDING','RUNNING','COMPLETED','FAILED']);

export type EngineOperationStatusType = `${z.infer<typeof EngineOperationStatusSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// DOCUMENT SCHEMA
/////////////////////////////////////////

export const DocumentSchema = z.object({
  id: z.string().cuid(),
  data: JsonValueSchema,
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
})

export type Document = z.infer<typeof DocumentSchema>

/////////////////////////////////////////
// MIGRATION SCHEMA
/////////////////////////////////////////

export const MigrationSchema = z.object({
  id: z.number().int(),
  name: z.string(),
  version: z.number().int(),
  applied_at: z.coerce.date(),
})

export type Migration = z.infer<typeof MigrationSchema>

/////////////////////////////////////////
// SEARCH ANALYTICS SCHEMA
/////////////////////////////////////////

export const SearchAnalyticsSchema = z.object({
  id: z.string().cuid(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date(),
  facetsUsed: JsonValueSchema.nullable(),
  sessionId: z.string().nullable(),
  resultIds: JsonValueSchema.nullable(),
  page: z.number().int(),
  pageSize: z.number().int(),
  filters: JsonValueSchema.nullable(),
})

export type SearchAnalytics = z.infer<typeof SearchAnalyticsSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string().cuid(),
  userId: z.string().nullable(),
  startedAt: z.coerce.date(),
  lastActiveAt: z.coerce.date(),
  metadata: JsonValueSchema.nullable(),
  data: JsonValueSchema.nullable(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// CONVERSATION SCHEMA
/////////////////////////////////////////

export const ConversationSchema = z.object({
  id: z.string().cuid(),
  sessionId: z.string(),
  title: z.string().nullable(),
  context: JsonValueSchema.nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Conversation = z.infer<typeof ConversationSchema>

/////////////////////////////////////////
// MESSAGE SCHEMA
/////////////////////////////////////////

export const MessageSchema = z.object({
  id: z.string().cuid(),
  conversationId: z.string(),
  role: z.string(),
  content: z.string(),
  timestamp: z.coerce.date(),
  metadata: JsonValueSchema.nullable(),
})

export type Message = z.infer<typeof MessageSchema>

/////////////////////////////////////////
// AB TEST SCHEMA
/////////////////////////////////////////

export const ABTestSchema = z.object({
  status: ExperimentStatusSchema,
  id: z.string().cuid(),
  name: z.string(),
  description: z.string().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  configuration: JsonValueSchema,
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ABTest = z.infer<typeof ABTestSchema>

/////////////////////////////////////////
// AB TEST ASSIGNMENT SCHEMA
/////////////////////////////////////////

export const ABTestAssignmentSchema = z.object({
  id: z.string().cuid(),
  testId: z.string(),
  sessionId: z.string(),
  variantId: z.string(),
  timestamp: z.coerce.date(),
})

export type ABTestAssignment = z.infer<typeof ABTestAssignmentSchema>

/////////////////////////////////////////
// AB TEST METRIC SCHEMA
/////////////////////////////////////////

export const ABTestMetricSchema = z.object({
  id: z.string().cuid(),
  testId: z.string(),
  variantId: z.string(),
  eventType: z.string(),
  value: z.number(),
  timestamp: z.coerce.date(),
  sessionId: z.string(),
})

export type ABTestMetric = z.infer<typeof ABTestMetricSchema>

/////////////////////////////////////////
// SEARCH FEEDBACK SCHEMA
/////////////////////////////////////////

export const SearchFeedbackSchema = z.object({
  id: z.string().cuid(),
  searchId: z.string(),
  queryHash: z.string(),
  resultId: z.string(),
  relevanceScore: z.number(),
  userAction: z.string(),
  timestamp: z.coerce.date(),
  metadata: JsonValueSchema.nullable(),
})

export type SearchFeedback = z.infer<typeof SearchFeedbackSchema>

/////////////////////////////////////////
// BASE EVENT SCHEMA
/////////////////////////////////////////

export const BaseEventSchema = z.object({
  type: EventTypeSchema,
  id: z.string().cuid(),
  timestamp: z.coerce.date(),
  data: JsonValueSchema,
  source: z.string(),
  priority: z.number().int().nullable(),
  processed: z.boolean().nullable(),
  metadata: JsonValueSchema.nullable(),
  correlationId: z.string().nullable(),
  searchEventid: z.string().nullable(),
})

export type BaseEvent = z.infer<typeof BaseEventSchema>

/////////////////////////////////////////
// MODEL EVENT SCHEMA
/////////////////////////////////////////

export const ModelEventSchema = z.object({
  id: z.string().cuid(),
  baseEventId: z.string(),
  modelId: z.string(),
  version: z.string(),
  parameters: JsonValueSchema,
  metrics: JsonValueSchema,
  results: JsonValueSchema,
})

export type ModelEvent = z.infer<typeof ModelEventSchema>

/////////////////////////////////////////
// PROCESSED SIGNAL SCHEMA
/////////////////////////////////////////

export const ProcessedSignalSchema = z.object({
  id: z.string().cuid(),
  signalId: z.string(),
  originalSignalId: z.string(),
  processingTime: z.number(),
  transformations: z.string().array(),
  confidence: z.number(),
  processed: z.boolean(),
  processingMetadata: JsonValueSchema.nullable(),
})

export type ProcessedSignal = z.infer<typeof ProcessedSignalSchema>

/////////////////////////////////////////
// SIGNAL BATCH SCHEMA
/////////////////////////////////////////

export const SignalBatchSchema = z.object({
  id: z.string().cuid(),
  batchId: z.string(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  metadata: JsonValueSchema,
  priority: z.number().int().nullable(),
  sourceSystem: z.string().nullable(),
  signalIds: z.string().array(),
})

export type SignalBatch = z.infer<typeof SignalBatchSchema>

/////////////////////////////////////////
// SIGNAL PATTERN SCHEMA
/////////////////////////////////////////

export const SignalPatternSchema = z.object({
  id: z.string().cuid(),
  patternId: z.string(),
  signalIds: z.string().array(),
  confidence: z.number(),
  patternType: z.string(),
  frequency: z.number().nullable(),
  impactScore: z.number().nullable(),
  relatedPatterns: z.string().array(),
})

export type SignalPattern = z.infer<typeof SignalPatternSchema>

/////////////////////////////////////////
// ADAPTATION RULE SCHEMA
/////////////////////////////////////////

export const AdaptationRuleSchema = z.object({
  priority: RulePrioritySchema,
  id: z.string().cuid(),
  name: z.string(),
  description: z.string(),
  type: z.string(),
  conditions: JsonValueSchema,
  actions: JsonValueSchema,
  enabled: z.boolean(),
  lastTriggered: z.coerce.date().nullable(),
})

export type AdaptationRule = z.infer<typeof AdaptationRuleSchema>

/////////////////////////////////////////
// MODEL CONFIG SCHEMA
/////////////////////////////////////////

export const ModelConfigSchema = z.object({
  type: ModelTypeSchema,
  id: z.string().cuid(),
  hyperparameters: JsonValueSchema,
  features: z.string().array(),
  trainingParams: JsonValueSchema.nullable(),
})

export type ModelConfig = z.infer<typeof ModelConfigSchema>

/////////////////////////////////////////
// MODEL VERSION SCHEMA
/////////////////////////////////////////

export const ModelVersionSchema = z.object({
  id: z.string().cuid(),
  configId: z.string(),
  createdAt: z.coerce.date(),
  metrics: JsonValueSchema,
  artifactPath: z.string(),
  parentVersion: z.string().nullable(),
})

export type ModelVersion = z.infer<typeof ModelVersionSchema>

/////////////////////////////////////////
// LEARNING REQUEST SCHEMA
/////////////////////////////////////////

export const LearningRequestSchema = z.object({
  id: z.string().cuid(),
  patterns: JsonValueSchema,
  timestamp: z.coerce.date(),
})

export type LearningRequest = z.infer<typeof LearningRequestSchema>

/////////////////////////////////////////
// FEEDBACK REQUEST SCHEMA
/////////////////////////////////////////

export const FeedbackRequestSchema = z.object({
  id: z.string().cuid(),
  feedback: JsonValueSchema,
  timestamp: z.coerce.date(),
})

export type FeedbackRequest = z.infer<typeof FeedbackRequestSchema>

/////////////////////////////////////////
// MODEL METRICS SCHEMA
/////////////////////////////////////////

export const ModelMetricsSchema = z.object({
  id: z.string().cuid(),
  modelVersionId: z.string(),
  accuracy: z.number(),
  precision: z.number(),
  recall: z.number(),
  f1Score: z.number(),
  latencyMs: z.number(),
  loss: z.number(),
  validationMetrics: JsonValueSchema,
  customMetrics: JsonValueSchema.nullable(),
  timestamp: z.coerce.date(),
})

export type ModelMetrics = z.infer<typeof ModelMetricsSchema>

/////////////////////////////////////////
// MODEL STATE SCHEMA
/////////////////////////////////////////

export const ModelStateSchema = z.object({
  modelType: ModelTypeSchema,
  id: z.string().cuid(),
  versionId: z.string(),
  weights: z.number().array(),
  bias: z.number(),
  scaler: JsonValueSchema,
  featureNames: z.string().array(),
  isTrained: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  hyperparameters: JsonValueSchema.nullable(),
  currentEpoch: z.number().int(),
  trainingProgress: z.number(),
  lastTrainingError: z.string().nullable(),
})

export type ModelState = z.infer<typeof ModelStateSchema>

/////////////////////////////////////////
// SEARCH EVENT SCHEMA
/////////////////////////////////////////

export const SearchEventSchema = z.object({
  id: z.string().cuid(),
  sessionId: z.string(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date(),
  facetsUsed: JsonValueSchema.nullable(),
  resultIds: JsonValueSchema.nullable(),
  page: z.number().int(),
  pageSize: z.number().int(),
  filters: JsonValueSchema.nullable(),
})

export type SearchEvent = z.infer<typeof SearchEventSchema>

/////////////////////////////////////////
// AB TEST METRICS SCHEMA
/////////////////////////////////////////

export const ABTestMetricsSchema = z.object({
  id: z.string().cuid(),
  testId: z.string(),
  variantId: z.string(),
  queryHash: z.string(),
  metrics: JsonValueSchema,
  timestamp: z.coerce.date(),
})

export type ABTestMetrics = z.infer<typeof ABTestMetricsSchema>

/////////////////////////////////////////
// SIGNAL SCHEMA
/////////////////////////////////////////

export const SignalSchema = z.object({
  type: SignalTypeSchema,
  id: z.string().cuid(),
  source: z.string(),
  value: JsonValueSchema,
  priority: z.number().int().nullable(),
  retries: z.number().int().nullable(),
  timestamp: z.coerce.date(),
  processed: z.boolean(),
  processedAt: z.coerce.date().nullable(),
  metadata: JsonValueSchema.nullable(),
  error: z.string().nullable(),
  manual: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  strength: z.number(),
})

export type Signal = z.infer<typeof SignalSchema>

/////////////////////////////////////////
// ANALYTICS METRICS SCHEMA
/////////////////////////////////////////

export const AnalyticsMetricsSchema = z.object({
  id: z.string().cuid(),
  totalSearches: z.number().int(),
  averageLatency: z.number(),
  successRate: z.number(),
  errorRate: z.number(),
  cacheHitRate: z.number(),
  queryCount: z.number().int(),
  uniqueUsers: z.number().int(),
  avgResultsPerQuery: z.number(),
  clickThroughRate: z.number(),
  conversionRate: z.number(),
  avgRelevanceScore: z.number(),
  p95Latency: z.number(),
  p99Latency: z.number(),
  resourceUtilization: JsonValueSchema,
  searchTypes: JsonValueSchema,
  timeWindow: z.string().nullable(),
  timestamp: z.coerce.date(),
  sessionId: z.string().nullable(),
})

export type AnalyticsMetrics = z.infer<typeof AnalyticsMetricsSchema>

/////////////////////////////////////////
// ANALYTICS TREND SCHEMA
/////////////////////////////////////////

export const AnalyticsTrendSchema = z.object({
  id: z.string().cuid(),
  metric: z.string(),
  current: z.number(),
  change: z.number(),
  trend: z.string(),
  timestamp: z.coerce.date(),
})

export type AnalyticsTrend = z.infer<typeof AnalyticsTrendSchema>

/////////////////////////////////////////
// PERFORMANCE INSIGHT SCHEMA
/////////////////////////////////////////

export const PerformanceInsightSchema = z.object({
  id: z.string().cuid(),
  type: z.string(),
  severity: z.string(),
  message: z.string(),
  metric: z.string(),
  currentValue: z.number(),
  recommendedValue: z.number().nullable(),
  action: z.string(),
  timestamp: z.coerce.date(),
})

export type PerformanceInsight = z.infer<typeof PerformanceInsightSchema>

/////////////////////////////////////////
// ANALYTICS REPORT SCHEMA
/////////////////////////////////////////

export const AnalyticsReportSchema = z.object({
  id: z.string().cuid(),
  timeWindow: z.string(),
  generatedAt: z.coerce.date(),
  metrics: JsonValueSchema,
  trends: JsonValueSchema,
  insights: JsonValueSchema,
  popularQueries: JsonValueSchema,
  timestamp: z.coerce.date(),
})

export type AnalyticsReport = z.infer<typeof AnalyticsReportSchema>

/////////////////////////////////////////
// ADAPTATION SUGGESTION SCHEMA
/////////////////////////////////////////

export const AdaptationSuggestionSchema = z.object({
  id: z.string().cuid(),
  queryHash: z.string(),
  patterns: JsonValueSchema,
  confidence: z.number(),
  status: z.string(),
  metadata: JsonValueSchema,
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type AdaptationSuggestion = z.infer<typeof AdaptationSuggestionSchema>

/////////////////////////////////////////
// LEARNING METRIC SCHEMA
/////////////////////////////////////////

export const LearningMetricSchema = z.object({
  type: MetricTypeSchema,
  id: z.string().cuid(),
  value: z.number(),
  timestamp: z.coerce.date(),
  interval: z.string(),
  sessionId: z.string().nullable(),
  modelId: z.string().nullable(),
  metadata: JsonValueSchema.nullable(),
  timeframe: z.string(),
  aggregated: z.boolean(),
  count: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type LearningMetric = z.infer<typeof LearningMetricSchema>

/////////////////////////////////////////
// LEARNING EVENT SCHEMA
/////////////////////////////////////////

export const LearningEventSchema = z.object({
  type: LearningEventTypeSchema,
  status: LearningEventStatusSchema,
  priority: LearningEventPrioritySchema,
  id: z.string().cuid(),
  timestamp: z.coerce.date(),
  processedAt: z.coerce.date().nullable(),
  metadata: JsonValueSchema.nullable(),
  correlationId: z.string().nullable(),
  sessionId: z.string().nullable(),
  userId: z.string().nullable(),
  clientId: z.string().nullable(),
  environment: z.string().nullable(),
  version: z.string().nullable(),
  tags: z.string().array(),
  error: z.string().nullable(),
  retryCount: z.number().int(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type LearningEvent = z.infer<typeof LearningEventSchema>

/////////////////////////////////////////
// LEARNING PATTERN SCHEMA
/////////////////////////////////////////

export const LearningPatternSchema = z.object({
  id: z.string().cuid(),
  type: z.string(),
  confidence: z.number(),
  features: JsonValueSchema,
  metadata: JsonValueSchema.nullable(),
  eventId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type LearningPattern = z.infer<typeof LearningPatternSchema>

/////////////////////////////////////////
// ENGINE STATE SCHEMA
/////////////////////////////////////////

export const EngineStateSchema = z.object({
  id: z.string().cuid(),
  status: z.string(),
  currentPhase: z.string().nullable(),
  confidence: z.number(),
  lastActive: z.coerce.date(),
  metadata: JsonValueSchema.nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type EngineState = z.infer<typeof EngineStateSchema>

/////////////////////////////////////////
// ENGINE OPERATION SCHEMA
/////////////////////////////////////////

export const EngineOperationSchema = z.object({
  id: z.string().cuid(),
  type: z.string(),
  status: z.string(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date().nullable(),
  metrics: JsonValueSchema.nullable(),
  metadata: JsonValueSchema.nullable(),
  error: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type EngineOperation = z.infer<typeof EngineOperationSchema>

/////////////////////////////////////////
// ENGINE METRIC SCHEMA
/////////////////////////////////////////

export const EngineMetricSchema = z.object({
  type: MetricTypeSchema,
  id: z.string().cuid(),
  value: z.number(),
  confidence: z.number(),
  timestamp: z.coerce.date(),
  metadata: JsonValueSchema.nullable(),
  operationId: z.string().nullable(),
})

export type EngineMetric = z.infer<typeof EngineMetricSchema>

/////////////////////////////////////////
// ENGINE LEARNING RESULT SCHEMA
/////////////////////////////////////////

export const EngineLearningResultSchema = z.object({
  id: z.string().cuid(),
  patterns: JsonValueSchema,
  confidence: z.number(),
  metadata: JsonValueSchema,
  performance: JsonValueSchema.nullable(),
  validatedAt: z.coerce.date().nullable(),
  abTestMetrics: JsonValueSchema.nullable(),
  operationId: z.string(),
})

export type EngineLearningResult = z.infer<typeof EngineLearningResultSchema>

/////////////////////////////////////////
// ENGINE OPTIMIZATION STRATEGY SCHEMA
/////////////////////////////////////////

export const EngineOptimizationStrategySchema = z.object({
  type: EngineOptimizationTypeSchema,
  id: z.string().cuid(),
  priority: z.number(),
  confidence: z.number(),
  impact: z.number(),
  metadata: JsonValueSchema,
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  learningResultId: z.string(),
})

export type EngineOptimizationStrategy = z.infer<typeof EngineOptimizationStrategySchema>

/////////////////////////////////////////
// ENGINE CONFIDENCE SCORE SCHEMA
/////////////////////////////////////////

export const EngineConfidenceScoreSchema = z.object({
  id: z.string().cuid(),
  value: z.number(),
  factors: JsonValueSchema,
  metadata: JsonValueSchema,
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type EngineConfidenceScore = z.infer<typeof EngineConfidenceScoreSchema>

/////////////////////////////////////////
// SEARCH WEIGHTS SCHEMA
/////////////////////////////////////////

export const SearchWeightsSchema = z.object({
  id: z.string().cuid(),
  titleWeight: z.number(),
  contentWeight: z.number(),
  tagWeight: z.number(),
  active: z.boolean(),
  metadata: JsonValueSchema.nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type SearchWeights = z.infer<typeof SearchWeightsSchema>

/////////////////////////////////////////
// SEARCH CONFIG SCHEMA
/////////////////////////////////////////

export const SearchConfigSchema = z.object({
  id: z.string().cuid(),
  key: z.string(),
  value: JsonValueSchema,
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type SearchConfig = z.infer<typeof SearchConfigSchema>

/////////////////////////////////////////
// EXPERIMENT CONFIG SCHEMA
/////////////////////////////////////////

export const ExperimentConfigSchema = z.object({
  id: z.string().cuid(),
  key: z.string(),
  value: JsonValueSchema,
  status: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type ExperimentConfig = z.infer<typeof ExperimentConfigSchema>

/////////////////////////////////////////
// ENGINE RECOMMENDATION SCHEMA
/////////////////////////////////////////

export const EngineRecommendationSchema = z.object({
  type: EngineOptimizationTypeSchema,
  id: z.string().cuid(),
  priority: z.number(),
  confidence: z.number(),
  impact: z.number(),
  metadata: JsonValueSchema,
  learningResultId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type EngineRecommendation = z.infer<typeof EngineRecommendationSchema>

/////////////////////////////////////////
// INDEX SCHEMA
/////////////////////////////////////////

export const IndexSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  status: z.string(),
  settings: JsonValueSchema.nullable(),
  mappings: JsonValueSchema.nullable(),
  created_at: z.coerce.date(),
  updated_at: z.coerce.date(),
  deleted_at: z.coerce.date().nullable(),
  doc_count: z.number().int(),
  size_bytes: z.number().int(),
  health: z.string(),
})

export type Index = z.infer<typeof IndexSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  id: z.string().cuid(),
  name: z.string().nullable(),
  email: z.string(),
  password: z.string(),
  emailVerified: z.coerce.date().nullable(),
  image: z.string().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// ACCOUNT SCHEMA
/////////////////////////////////////////

export const AccountSchema = z.object({
  id: z.string().cuid(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().nullable(),
  access_token: z.string().nullable(),
  expires_at: z.number().int().nullable(),
  token_type: z.string().nullable(),
  scope: z.string().nullable(),
  id_token: z.string().nullable(),
  session_state: z.string().nullable(),
})

export type Account = z.infer<typeof AccountSchema>

/////////////////////////////////////////
// AUTH SESSION SCHEMA
/////////////////////////////////////////

export const AuthSessionSchema = z.object({
  id: z.string().cuid(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.coerce.date(),
})

export type AuthSession = z.infer<typeof AuthSessionSchema>

/////////////////////////////////////////
// VERIFICATION TOKEN SCHEMA
/////////////////////////////////////////

export const VerificationTokenSchema = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.coerce.date(),
})

export type VerificationToken = z.infer<typeof VerificationTokenSchema>

/////////////////////////////////////////
// API KEY SCHEMA
/////////////////////////////////////////

export const ApiKeySchema = z.object({
  id: z.string().cuid(),
  key: z.string(),
  clientId: z.string(),
  name: z.string(),
  description: z.string().nullable(),
  isActive: z.boolean(),
  expiresAt: z.coerce.date().nullable(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  lastUsedAt: z.coerce.date().nullable(),
  allowedIps: z.string().array(),
  rateLimit: z.number().int().nullable(),
  usageCount: z.number().int(),
})

export type ApiKey = z.infer<typeof ApiKeySchema>

/////////////////////////////////////////
// ADMIN TOKEN SCHEMA
/////////////////////////////////////////

export const AdminTokenSchema = z.object({
  id: z.string().cuid(),
  token: z.string(),
  name: z.string(),
  description: z.string().nullable(),
  isActive: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  lastUsedAt: z.coerce.date().nullable(),
})

export type AdminToken = z.infer<typeof AdminTokenSchema>

/////////////////////////////////////////
// SESSION TO SIGNAL SCHEMA
/////////////////////////////////////////

export const SessionToSignalSchema = z.object({
  A: z.string(),
  B: z.string(),
})

export type SessionToSignal = z.infer<typeof SessionToSignalSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// DOCUMENT
//------------------------------------------------------

export const DocumentSelectSchema: z.ZodType<Prisma.DocumentSelect> = z.object({
  id: z.boolean().optional(),
  data: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
}).strict()

// MIGRATION
//------------------------------------------------------

export const MigrationSelectSchema: z.ZodType<Prisma.MigrationSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  version: z.boolean().optional(),
  applied_at: z.boolean().optional(),
}).strict()

// SEARCH ANALYTICS
//------------------------------------------------------

export const SearchAnalyticsSelectSchema: z.ZodType<Prisma.SearchAnalyticsSelect> = z.object({
  id: z.boolean().optional(),
  query: z.boolean().optional(),
  searchType: z.boolean().optional(),
  totalHits: z.boolean().optional(),
  took: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  facetsUsed: z.boolean().optional(),
  sessionId: z.boolean().optional(),
  resultIds: z.boolean().optional(),
  page: z.boolean().optional(),
  pageSize: z.boolean().optional(),
  filters: z.boolean().optional(),
}).strict()

// SESSION
//------------------------------------------------------

export const SessionIncludeSchema: z.ZodType<Prisma.SessionInclude> = z.object({
  abAssignments: z.union([z.boolean(),z.lazy(() => ABTestAssignmentFindManyArgsSchema)]).optional(),
  abMetrics: z.union([z.boolean(),z.lazy(() => ABTestMetricFindManyArgsSchema)]).optional(),
  analyticsMetrics: z.union([z.boolean(),z.lazy(() => AnalyticsMetricsFindManyArgsSchema)]).optional(),
  conversations: z.union([z.boolean(),z.lazy(() => ConversationFindManyArgsSchema)]).optional(),
  learningMetrics: z.union([z.boolean(),z.lazy(() => LearningMetricFindManyArgsSchema)]).optional(),
  searchEvents: z.union([z.boolean(),z.lazy(() => SearchEventFindManyArgsSchema)]).optional(),
  SessionToSignal: z.union([z.boolean(),z.lazy(() => SessionToSignalFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SessionCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SessionArgsSchema: z.ZodType<Prisma.SessionDefaultArgs> = z.object({
  select: z.lazy(() => SessionSelectSchema).optional(),
  include: z.lazy(() => SessionIncludeSchema).optional(),
}).strict();

export const SessionCountOutputTypeArgsSchema: z.ZodType<Prisma.SessionCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SessionCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SessionCountOutputTypeSelectSchema: z.ZodType<Prisma.SessionCountOutputTypeSelect> = z.object({
  abAssignments: z.boolean().optional(),
  abMetrics: z.boolean().optional(),
  analyticsMetrics: z.boolean().optional(),
  conversations: z.boolean().optional(),
  learningMetrics: z.boolean().optional(),
  searchEvents: z.boolean().optional(),
  SessionToSignal: z.boolean().optional(),
}).strict();

export const SessionSelectSchema: z.ZodType<Prisma.SessionSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  startedAt: z.boolean().optional(),
  lastActiveAt: z.boolean().optional(),
  metadata: z.boolean().optional(),
  data: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  abAssignments: z.union([z.boolean(),z.lazy(() => ABTestAssignmentFindManyArgsSchema)]).optional(),
  abMetrics: z.union([z.boolean(),z.lazy(() => ABTestMetricFindManyArgsSchema)]).optional(),
  analyticsMetrics: z.union([z.boolean(),z.lazy(() => AnalyticsMetricsFindManyArgsSchema)]).optional(),
  conversations: z.union([z.boolean(),z.lazy(() => ConversationFindManyArgsSchema)]).optional(),
  learningMetrics: z.union([z.boolean(),z.lazy(() => LearningMetricFindManyArgsSchema)]).optional(),
  searchEvents: z.union([z.boolean(),z.lazy(() => SearchEventFindManyArgsSchema)]).optional(),
  SessionToSignal: z.union([z.boolean(),z.lazy(() => SessionToSignalFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SessionCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CONVERSATION
//------------------------------------------------------

export const ConversationIncludeSchema: z.ZodType<Prisma.ConversationInclude> = z.object({
  session: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
  messages: z.union([z.boolean(),z.lazy(() => MessageFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ConversationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ConversationArgsSchema: z.ZodType<Prisma.ConversationDefaultArgs> = z.object({
  select: z.lazy(() => ConversationSelectSchema).optional(),
  include: z.lazy(() => ConversationIncludeSchema).optional(),
}).strict();

export const ConversationCountOutputTypeArgsSchema: z.ZodType<Prisma.ConversationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ConversationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ConversationCountOutputTypeSelectSchema: z.ZodType<Prisma.ConversationCountOutputTypeSelect> = z.object({
  messages: z.boolean().optional(),
}).strict();

export const ConversationSelectSchema: z.ZodType<Prisma.ConversationSelect> = z.object({
  id: z.boolean().optional(),
  sessionId: z.boolean().optional(),
  title: z.boolean().optional(),
  context: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  session: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
  messages: z.union([z.boolean(),z.lazy(() => MessageFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ConversationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MESSAGE
//------------------------------------------------------

export const MessageIncludeSchema: z.ZodType<Prisma.MessageInclude> = z.object({
  conversation: z.union([z.boolean(),z.lazy(() => ConversationArgsSchema)]).optional(),
}).strict()

export const MessageArgsSchema: z.ZodType<Prisma.MessageDefaultArgs> = z.object({
  select: z.lazy(() => MessageSelectSchema).optional(),
  include: z.lazy(() => MessageIncludeSchema).optional(),
}).strict();

export const MessageSelectSchema: z.ZodType<Prisma.MessageSelect> = z.object({
  id: z.boolean().optional(),
  conversationId: z.boolean().optional(),
  role: z.boolean().optional(),
  content: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  metadata: z.boolean().optional(),
  conversation: z.union([z.boolean(),z.lazy(() => ConversationArgsSchema)]).optional(),
}).strict()

// AB TEST
//------------------------------------------------------

export const ABTestIncludeSchema: z.ZodType<Prisma.ABTestInclude> = z.object({
  assignments: z.union([z.boolean(),z.lazy(() => ABTestAssignmentFindManyArgsSchema)]).optional(),
  metrics: z.union([z.boolean(),z.lazy(() => ABTestMetricFindManyArgsSchema)]).optional(),
  ABTestMetrics: z.union([z.boolean(),z.lazy(() => ABTestMetricsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ABTestCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ABTestArgsSchema: z.ZodType<Prisma.ABTestDefaultArgs> = z.object({
  select: z.lazy(() => ABTestSelectSchema).optional(),
  include: z.lazy(() => ABTestIncludeSchema).optional(),
}).strict();

export const ABTestCountOutputTypeArgsSchema: z.ZodType<Prisma.ABTestCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ABTestCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ABTestCountOutputTypeSelectSchema: z.ZodType<Prisma.ABTestCountOutputTypeSelect> = z.object({
  assignments: z.boolean().optional(),
  metrics: z.boolean().optional(),
  ABTestMetrics: z.boolean().optional(),
}).strict();

export const ABTestSelectSchema: z.ZodType<Prisma.ABTestSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  startDate: z.boolean().optional(),
  endDate: z.boolean().optional(),
  status: z.boolean().optional(),
  configuration: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  assignments: z.union([z.boolean(),z.lazy(() => ABTestAssignmentFindManyArgsSchema)]).optional(),
  metrics: z.union([z.boolean(),z.lazy(() => ABTestMetricFindManyArgsSchema)]).optional(),
  ABTestMetrics: z.union([z.boolean(),z.lazy(() => ABTestMetricsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ABTestCountOutputTypeArgsSchema)]).optional(),
}).strict()

// AB TEST ASSIGNMENT
//------------------------------------------------------

export const ABTestAssignmentIncludeSchema: z.ZodType<Prisma.ABTestAssignmentInclude> = z.object({
  session: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
  test: z.union([z.boolean(),z.lazy(() => ABTestArgsSchema)]).optional(),
}).strict()

export const ABTestAssignmentArgsSchema: z.ZodType<Prisma.ABTestAssignmentDefaultArgs> = z.object({
  select: z.lazy(() => ABTestAssignmentSelectSchema).optional(),
  include: z.lazy(() => ABTestAssignmentIncludeSchema).optional(),
}).strict();

export const ABTestAssignmentSelectSchema: z.ZodType<Prisma.ABTestAssignmentSelect> = z.object({
  id: z.boolean().optional(),
  testId: z.boolean().optional(),
  sessionId: z.boolean().optional(),
  variantId: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  session: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
  test: z.union([z.boolean(),z.lazy(() => ABTestArgsSchema)]).optional(),
}).strict()

// AB TEST METRIC
//------------------------------------------------------

export const ABTestMetricIncludeSchema: z.ZodType<Prisma.ABTestMetricInclude> = z.object({
  session: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
  test: z.union([z.boolean(),z.lazy(() => ABTestArgsSchema)]).optional(),
}).strict()

export const ABTestMetricArgsSchema: z.ZodType<Prisma.ABTestMetricDefaultArgs> = z.object({
  select: z.lazy(() => ABTestMetricSelectSchema).optional(),
  include: z.lazy(() => ABTestMetricIncludeSchema).optional(),
}).strict();

export const ABTestMetricSelectSchema: z.ZodType<Prisma.ABTestMetricSelect> = z.object({
  id: z.boolean().optional(),
  testId: z.boolean().optional(),
  variantId: z.boolean().optional(),
  eventType: z.boolean().optional(),
  value: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  sessionId: z.boolean().optional(),
  session: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
  test: z.union([z.boolean(),z.lazy(() => ABTestArgsSchema)]).optional(),
}).strict()

// SEARCH FEEDBACK
//------------------------------------------------------

export const SearchFeedbackIncludeSchema: z.ZodType<Prisma.SearchFeedbackInclude> = z.object({
  SearchEvent: z.union([z.boolean(),z.lazy(() => SearchEventFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SearchFeedbackCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SearchFeedbackArgsSchema: z.ZodType<Prisma.SearchFeedbackDefaultArgs> = z.object({
  select: z.lazy(() => SearchFeedbackSelectSchema).optional(),
  include: z.lazy(() => SearchFeedbackIncludeSchema).optional(),
}).strict();

export const SearchFeedbackCountOutputTypeArgsSchema: z.ZodType<Prisma.SearchFeedbackCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SearchFeedbackCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SearchFeedbackCountOutputTypeSelectSchema: z.ZodType<Prisma.SearchFeedbackCountOutputTypeSelect> = z.object({
  SearchEvent: z.boolean().optional(),
}).strict();

export const SearchFeedbackSelectSchema: z.ZodType<Prisma.SearchFeedbackSelect> = z.object({
  id: z.boolean().optional(),
  searchId: z.boolean().optional(),
  queryHash: z.boolean().optional(),
  resultId: z.boolean().optional(),
  relevanceScore: z.boolean().optional(),
  userAction: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  metadata: z.boolean().optional(),
  SearchEvent: z.union([z.boolean(),z.lazy(() => SearchEventFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SearchFeedbackCountOutputTypeArgsSchema)]).optional(),
}).strict()

// BASE EVENT
//------------------------------------------------------

export const BaseEventIncludeSchema: z.ZodType<Prisma.BaseEventInclude> = z.object({
  searchEvent: z.union([z.boolean(),z.lazy(() => SearchEventArgsSchema)]).optional(),
  modelEvent: z.union([z.boolean(),z.lazy(() => ModelEventArgsSchema)]).optional(),
}).strict()

export const BaseEventArgsSchema: z.ZodType<Prisma.BaseEventDefaultArgs> = z.object({
  select: z.lazy(() => BaseEventSelectSchema).optional(),
  include: z.lazy(() => BaseEventIncludeSchema).optional(),
}).strict();

export const BaseEventSelectSchema: z.ZodType<Prisma.BaseEventSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  data: z.boolean().optional(),
  source: z.boolean().optional(),
  priority: z.boolean().optional(),
  processed: z.boolean().optional(),
  metadata: z.boolean().optional(),
  correlationId: z.boolean().optional(),
  searchEventid: z.boolean().optional(),
  searchEvent: z.union([z.boolean(),z.lazy(() => SearchEventArgsSchema)]).optional(),
  modelEvent: z.union([z.boolean(),z.lazy(() => ModelEventArgsSchema)]).optional(),
}).strict()

// MODEL EVENT
//------------------------------------------------------

export const ModelEventIncludeSchema: z.ZodType<Prisma.ModelEventInclude> = z.object({
  baseEvent: z.union([z.boolean(),z.lazy(() => BaseEventArgsSchema)]).optional(),
}).strict()

export const ModelEventArgsSchema: z.ZodType<Prisma.ModelEventDefaultArgs> = z.object({
  select: z.lazy(() => ModelEventSelectSchema).optional(),
  include: z.lazy(() => ModelEventIncludeSchema).optional(),
}).strict();

export const ModelEventSelectSchema: z.ZodType<Prisma.ModelEventSelect> = z.object({
  id: z.boolean().optional(),
  baseEventId: z.boolean().optional(),
  modelId: z.boolean().optional(),
  version: z.boolean().optional(),
  parameters: z.boolean().optional(),
  metrics: z.boolean().optional(),
  results: z.boolean().optional(),
  baseEvent: z.union([z.boolean(),z.lazy(() => BaseEventArgsSchema)]).optional(),
}).strict()

// PROCESSED SIGNAL
//------------------------------------------------------

export const ProcessedSignalIncludeSchema: z.ZodType<Prisma.ProcessedSignalInclude> = z.object({
  signal: z.union([z.boolean(),z.lazy(() => SignalArgsSchema)]).optional(),
}).strict()

export const ProcessedSignalArgsSchema: z.ZodType<Prisma.ProcessedSignalDefaultArgs> = z.object({
  select: z.lazy(() => ProcessedSignalSelectSchema).optional(),
  include: z.lazy(() => ProcessedSignalIncludeSchema).optional(),
}).strict();

export const ProcessedSignalSelectSchema: z.ZodType<Prisma.ProcessedSignalSelect> = z.object({
  id: z.boolean().optional(),
  signalId: z.boolean().optional(),
  originalSignalId: z.boolean().optional(),
  processingTime: z.boolean().optional(),
  transformations: z.boolean().optional(),
  confidence: z.boolean().optional(),
  processed: z.boolean().optional(),
  processingMetadata: z.boolean().optional(),
  signal: z.union([z.boolean(),z.lazy(() => SignalArgsSchema)]).optional(),
}).strict()

// SIGNAL BATCH
//------------------------------------------------------

export const SignalBatchSelectSchema: z.ZodType<Prisma.SignalBatchSelect> = z.object({
  id: z.boolean().optional(),
  batchId: z.boolean().optional(),
  startTime: z.boolean().optional(),
  endTime: z.boolean().optional(),
  metadata: z.boolean().optional(),
  priority: z.boolean().optional(),
  sourceSystem: z.boolean().optional(),
  signalIds: z.boolean().optional(),
}).strict()

// SIGNAL PATTERN
//------------------------------------------------------

export const SignalPatternSelectSchema: z.ZodType<Prisma.SignalPatternSelect> = z.object({
  id: z.boolean().optional(),
  patternId: z.boolean().optional(),
  signalIds: z.boolean().optional(),
  confidence: z.boolean().optional(),
  patternType: z.boolean().optional(),
  frequency: z.boolean().optional(),
  impactScore: z.boolean().optional(),
  relatedPatterns: z.boolean().optional(),
}).strict()

// ADAPTATION RULE
//------------------------------------------------------

export const AdaptationRuleSelectSchema: z.ZodType<Prisma.AdaptationRuleSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  type: z.boolean().optional(),
  conditions: z.boolean().optional(),
  actions: z.boolean().optional(),
  priority: z.boolean().optional(),
  enabled: z.boolean().optional(),
  lastTriggered: z.boolean().optional(),
}).strict()

// MODEL CONFIG
//------------------------------------------------------

export const ModelConfigIncludeSchema: z.ZodType<Prisma.ModelConfigInclude> = z.object({
  metrics: z.union([z.boolean(),z.lazy(() => LearningMetricFindManyArgsSchema)]).optional(),
  modelVersions: z.union([z.boolean(),z.lazy(() => ModelVersionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ModelConfigCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ModelConfigArgsSchema: z.ZodType<Prisma.ModelConfigDefaultArgs> = z.object({
  select: z.lazy(() => ModelConfigSelectSchema).optional(),
  include: z.lazy(() => ModelConfigIncludeSchema).optional(),
}).strict();

export const ModelConfigCountOutputTypeArgsSchema: z.ZodType<Prisma.ModelConfigCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ModelConfigCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ModelConfigCountOutputTypeSelectSchema: z.ZodType<Prisma.ModelConfigCountOutputTypeSelect> = z.object({
  metrics: z.boolean().optional(),
  modelVersions: z.boolean().optional(),
}).strict();

export const ModelConfigSelectSchema: z.ZodType<Prisma.ModelConfigSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  hyperparameters: z.boolean().optional(),
  features: z.boolean().optional(),
  trainingParams: z.boolean().optional(),
  metrics: z.union([z.boolean(),z.lazy(() => LearningMetricFindManyArgsSchema)]).optional(),
  modelVersions: z.union([z.boolean(),z.lazy(() => ModelVersionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ModelConfigCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MODEL VERSION
//------------------------------------------------------

export const ModelVersionIncludeSchema: z.ZodType<Prisma.ModelVersionInclude> = z.object({
  config: z.union([z.boolean(),z.lazy(() => ModelConfigArgsSchema)]).optional(),
}).strict()

export const ModelVersionArgsSchema: z.ZodType<Prisma.ModelVersionDefaultArgs> = z.object({
  select: z.lazy(() => ModelVersionSelectSchema).optional(),
  include: z.lazy(() => ModelVersionIncludeSchema).optional(),
}).strict();

export const ModelVersionSelectSchema: z.ZodType<Prisma.ModelVersionSelect> = z.object({
  id: z.boolean().optional(),
  configId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  metrics: z.boolean().optional(),
  artifactPath: z.boolean().optional(),
  parentVersion: z.boolean().optional(),
  config: z.union([z.boolean(),z.lazy(() => ModelConfigArgsSchema)]).optional(),
}).strict()

// LEARNING REQUEST
//------------------------------------------------------

export const LearningRequestSelectSchema: z.ZodType<Prisma.LearningRequestSelect> = z.object({
  id: z.boolean().optional(),
  patterns: z.boolean().optional(),
  timestamp: z.boolean().optional(),
}).strict()

// FEEDBACK REQUEST
//------------------------------------------------------

export const FeedbackRequestSelectSchema: z.ZodType<Prisma.FeedbackRequestSelect> = z.object({
  id: z.boolean().optional(),
  feedback: z.boolean().optional(),
  timestamp: z.boolean().optional(),
}).strict()

// MODEL METRICS
//------------------------------------------------------

export const ModelMetricsIncludeSchema: z.ZodType<Prisma.ModelMetricsInclude> = z.object({
  ModelState: z.union([z.boolean(),z.lazy(() => ModelStateFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ModelMetricsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ModelMetricsArgsSchema: z.ZodType<Prisma.ModelMetricsDefaultArgs> = z.object({
  select: z.lazy(() => ModelMetricsSelectSchema).optional(),
  include: z.lazy(() => ModelMetricsIncludeSchema).optional(),
}).strict();

export const ModelMetricsCountOutputTypeArgsSchema: z.ZodType<Prisma.ModelMetricsCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ModelMetricsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ModelMetricsCountOutputTypeSelectSchema: z.ZodType<Prisma.ModelMetricsCountOutputTypeSelect> = z.object({
  ModelState: z.boolean().optional(),
}).strict();

export const ModelMetricsSelectSchema: z.ZodType<Prisma.ModelMetricsSelect> = z.object({
  id: z.boolean().optional(),
  modelVersionId: z.boolean().optional(),
  accuracy: z.boolean().optional(),
  precision: z.boolean().optional(),
  recall: z.boolean().optional(),
  f1Score: z.boolean().optional(),
  latencyMs: z.boolean().optional(),
  loss: z.boolean().optional(),
  validationMetrics: z.boolean().optional(),
  customMetrics: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  ModelState: z.union([z.boolean(),z.lazy(() => ModelStateFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ModelMetricsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MODEL STATE
//------------------------------------------------------

export const ModelStateIncludeSchema: z.ZodType<Prisma.ModelStateInclude> = z.object({
  metrics: z.union([z.boolean(),z.lazy(() => ModelMetricsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ModelStateCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ModelStateArgsSchema: z.ZodType<Prisma.ModelStateDefaultArgs> = z.object({
  select: z.lazy(() => ModelStateSelectSchema).optional(),
  include: z.lazy(() => ModelStateIncludeSchema).optional(),
}).strict();

export const ModelStateCountOutputTypeArgsSchema: z.ZodType<Prisma.ModelStateCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => ModelStateCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ModelStateCountOutputTypeSelectSchema: z.ZodType<Prisma.ModelStateCountOutputTypeSelect> = z.object({
  metrics: z.boolean().optional(),
}).strict();

export const ModelStateSelectSchema: z.ZodType<Prisma.ModelStateSelect> = z.object({
  id: z.boolean().optional(),
  versionId: z.boolean().optional(),
  weights: z.boolean().optional(),
  bias: z.boolean().optional(),
  scaler: z.boolean().optional(),
  featureNames: z.boolean().optional(),
  isTrained: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  modelType: z.boolean().optional(),
  hyperparameters: z.boolean().optional(),
  currentEpoch: z.boolean().optional(),
  trainingProgress: z.boolean().optional(),
  lastTrainingError: z.boolean().optional(),
  metrics: z.union([z.boolean(),z.lazy(() => ModelMetricsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ModelStateCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SEARCH EVENT
//------------------------------------------------------

export const SearchEventIncludeSchema: z.ZodType<Prisma.SearchEventInclude> = z.object({
  BaseEvent: z.union([z.boolean(),z.lazy(() => BaseEventFindManyArgsSchema)]).optional(),
  session: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
  feedback: z.union([z.boolean(),z.lazy(() => SearchFeedbackFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SearchEventCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SearchEventArgsSchema: z.ZodType<Prisma.SearchEventDefaultArgs> = z.object({
  select: z.lazy(() => SearchEventSelectSchema).optional(),
  include: z.lazy(() => SearchEventIncludeSchema).optional(),
}).strict();

export const SearchEventCountOutputTypeArgsSchema: z.ZodType<Prisma.SearchEventCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SearchEventCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SearchEventCountOutputTypeSelectSchema: z.ZodType<Prisma.SearchEventCountOutputTypeSelect> = z.object({
  BaseEvent: z.boolean().optional(),
  feedback: z.boolean().optional(),
}).strict();

export const SearchEventSelectSchema: z.ZodType<Prisma.SearchEventSelect> = z.object({
  id: z.boolean().optional(),
  sessionId: z.boolean().optional(),
  query: z.boolean().optional(),
  searchType: z.boolean().optional(),
  totalHits: z.boolean().optional(),
  took: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  facetsUsed: z.boolean().optional(),
  resultIds: z.boolean().optional(),
  page: z.boolean().optional(),
  pageSize: z.boolean().optional(),
  filters: z.boolean().optional(),
  BaseEvent: z.union([z.boolean(),z.lazy(() => BaseEventFindManyArgsSchema)]).optional(),
  session: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
  feedback: z.union([z.boolean(),z.lazy(() => SearchFeedbackFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SearchEventCountOutputTypeArgsSchema)]).optional(),
}).strict()

// AB TEST METRICS
//------------------------------------------------------

export const ABTestMetricsIncludeSchema: z.ZodType<Prisma.ABTestMetricsInclude> = z.object({
  test: z.union([z.boolean(),z.lazy(() => ABTestArgsSchema)]).optional(),
}).strict()

export const ABTestMetricsArgsSchema: z.ZodType<Prisma.ABTestMetricsDefaultArgs> = z.object({
  select: z.lazy(() => ABTestMetricsSelectSchema).optional(),
  include: z.lazy(() => ABTestMetricsIncludeSchema).optional(),
}).strict();

export const ABTestMetricsSelectSchema: z.ZodType<Prisma.ABTestMetricsSelect> = z.object({
  id: z.boolean().optional(),
  testId: z.boolean().optional(),
  variantId: z.boolean().optional(),
  queryHash: z.boolean().optional(),
  metrics: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  test: z.union([z.boolean(),z.lazy(() => ABTestArgsSchema)]).optional(),
}).strict()

// SIGNAL
//------------------------------------------------------

export const SignalIncludeSchema: z.ZodType<Prisma.SignalInclude> = z.object({
  ProcessedSignal: z.union([z.boolean(),z.lazy(() => ProcessedSignalFindManyArgsSchema)]).optional(),
  SessionToSignal: z.union([z.boolean(),z.lazy(() => SessionToSignalFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SignalCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SignalArgsSchema: z.ZodType<Prisma.SignalDefaultArgs> = z.object({
  select: z.lazy(() => SignalSelectSchema).optional(),
  include: z.lazy(() => SignalIncludeSchema).optional(),
}).strict();

export const SignalCountOutputTypeArgsSchema: z.ZodType<Prisma.SignalCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => SignalCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SignalCountOutputTypeSelectSchema: z.ZodType<Prisma.SignalCountOutputTypeSelect> = z.object({
  ProcessedSignal: z.boolean().optional(),
  SessionToSignal: z.boolean().optional(),
}).strict();

export const SignalSelectSchema: z.ZodType<Prisma.SignalSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  source: z.boolean().optional(),
  value: z.boolean().optional(),
  priority: z.boolean().optional(),
  retries: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  processed: z.boolean().optional(),
  processedAt: z.boolean().optional(),
  metadata: z.boolean().optional(),
  error: z.boolean().optional(),
  manual: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  strength: z.boolean().optional(),
  ProcessedSignal: z.union([z.boolean(),z.lazy(() => ProcessedSignalFindManyArgsSchema)]).optional(),
  SessionToSignal: z.union([z.boolean(),z.lazy(() => SessionToSignalFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SignalCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ANALYTICS METRICS
//------------------------------------------------------

export const AnalyticsMetricsIncludeSchema: z.ZodType<Prisma.AnalyticsMetricsInclude> = z.object({
  session: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
}).strict()

export const AnalyticsMetricsArgsSchema: z.ZodType<Prisma.AnalyticsMetricsDefaultArgs> = z.object({
  select: z.lazy(() => AnalyticsMetricsSelectSchema).optional(),
  include: z.lazy(() => AnalyticsMetricsIncludeSchema).optional(),
}).strict();

export const AnalyticsMetricsSelectSchema: z.ZodType<Prisma.AnalyticsMetricsSelect> = z.object({
  id: z.boolean().optional(),
  totalSearches: z.boolean().optional(),
  averageLatency: z.boolean().optional(),
  successRate: z.boolean().optional(),
  errorRate: z.boolean().optional(),
  cacheHitRate: z.boolean().optional(),
  queryCount: z.boolean().optional(),
  uniqueUsers: z.boolean().optional(),
  avgResultsPerQuery: z.boolean().optional(),
  clickThroughRate: z.boolean().optional(),
  conversionRate: z.boolean().optional(),
  avgRelevanceScore: z.boolean().optional(),
  p95Latency: z.boolean().optional(),
  p99Latency: z.boolean().optional(),
  resourceUtilization: z.boolean().optional(),
  searchTypes: z.boolean().optional(),
  timeWindow: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  sessionId: z.boolean().optional(),
  session: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
}).strict()

// ANALYTICS TREND
//------------------------------------------------------

export const AnalyticsTrendSelectSchema: z.ZodType<Prisma.AnalyticsTrendSelect> = z.object({
  id: z.boolean().optional(),
  metric: z.boolean().optional(),
  current: z.boolean().optional(),
  change: z.boolean().optional(),
  trend: z.boolean().optional(),
  timestamp: z.boolean().optional(),
}).strict()

// PERFORMANCE INSIGHT
//------------------------------------------------------

export const PerformanceInsightSelectSchema: z.ZodType<Prisma.PerformanceInsightSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  severity: z.boolean().optional(),
  message: z.boolean().optional(),
  metric: z.boolean().optional(),
  currentValue: z.boolean().optional(),
  recommendedValue: z.boolean().optional(),
  action: z.boolean().optional(),
  timestamp: z.boolean().optional(),
}).strict()

// ANALYTICS REPORT
//------------------------------------------------------

export const AnalyticsReportSelectSchema: z.ZodType<Prisma.AnalyticsReportSelect> = z.object({
  id: z.boolean().optional(),
  timeWindow: z.boolean().optional(),
  generatedAt: z.boolean().optional(),
  metrics: z.boolean().optional(),
  trends: z.boolean().optional(),
  insights: z.boolean().optional(),
  popularQueries: z.boolean().optional(),
  timestamp: z.boolean().optional(),
}).strict()

// ADAPTATION SUGGESTION
//------------------------------------------------------

export const AdaptationSuggestionSelectSchema: z.ZodType<Prisma.AdaptationSuggestionSelect> = z.object({
  id: z.boolean().optional(),
  queryHash: z.boolean().optional(),
  patterns: z.boolean().optional(),
  confidence: z.boolean().optional(),
  status: z.boolean().optional(),
  metadata: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// LEARNING METRIC
//------------------------------------------------------

export const LearningMetricIncludeSchema: z.ZodType<Prisma.LearningMetricInclude> = z.object({
  model: z.union([z.boolean(),z.lazy(() => ModelConfigArgsSchema)]).optional(),
  session: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
}).strict()

export const LearningMetricArgsSchema: z.ZodType<Prisma.LearningMetricDefaultArgs> = z.object({
  select: z.lazy(() => LearningMetricSelectSchema).optional(),
  include: z.lazy(() => LearningMetricIncludeSchema).optional(),
}).strict();

export const LearningMetricSelectSchema: z.ZodType<Prisma.LearningMetricSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  value: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  interval: z.boolean().optional(),
  sessionId: z.boolean().optional(),
  modelId: z.boolean().optional(),
  metadata: z.boolean().optional(),
  timeframe: z.boolean().optional(),
  aggregated: z.boolean().optional(),
  count: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  model: z.union([z.boolean(),z.lazy(() => ModelConfigArgsSchema)]).optional(),
  session: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
}).strict()

// LEARNING EVENT
//------------------------------------------------------

export const LearningEventIncludeSchema: z.ZodType<Prisma.LearningEventInclude> = z.object({
  patterns: z.union([z.boolean(),z.lazy(() => LearningPatternFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LearningEventCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const LearningEventArgsSchema: z.ZodType<Prisma.LearningEventDefaultArgs> = z.object({
  select: z.lazy(() => LearningEventSelectSchema).optional(),
  include: z.lazy(() => LearningEventIncludeSchema).optional(),
}).strict();

export const LearningEventCountOutputTypeArgsSchema: z.ZodType<Prisma.LearningEventCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => LearningEventCountOutputTypeSelectSchema).nullish(),
}).strict();

export const LearningEventCountOutputTypeSelectSchema: z.ZodType<Prisma.LearningEventCountOutputTypeSelect> = z.object({
  patterns: z.boolean().optional(),
}).strict();

export const LearningEventSelectSchema: z.ZodType<Prisma.LearningEventSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  status: z.boolean().optional(),
  priority: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  processedAt: z.boolean().optional(),
  metadata: z.boolean().optional(),
  correlationId: z.boolean().optional(),
  sessionId: z.boolean().optional(),
  userId: z.boolean().optional(),
  clientId: z.boolean().optional(),
  environment: z.boolean().optional(),
  version: z.boolean().optional(),
  tags: z.boolean().optional(),
  error: z.boolean().optional(),
  retryCount: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  patterns: z.union([z.boolean(),z.lazy(() => LearningPatternFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => LearningEventCountOutputTypeArgsSchema)]).optional(),
}).strict()

// LEARNING PATTERN
//------------------------------------------------------

export const LearningPatternIncludeSchema: z.ZodType<Prisma.LearningPatternInclude> = z.object({
  event: z.union([z.boolean(),z.lazy(() => LearningEventArgsSchema)]).optional(),
}).strict()

export const LearningPatternArgsSchema: z.ZodType<Prisma.LearningPatternDefaultArgs> = z.object({
  select: z.lazy(() => LearningPatternSelectSchema).optional(),
  include: z.lazy(() => LearningPatternIncludeSchema).optional(),
}).strict();

export const LearningPatternSelectSchema: z.ZodType<Prisma.LearningPatternSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  confidence: z.boolean().optional(),
  features: z.boolean().optional(),
  metadata: z.boolean().optional(),
  eventId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  event: z.union([z.boolean(),z.lazy(() => LearningEventArgsSchema)]).optional(),
}).strict()

// ENGINE STATE
//------------------------------------------------------

export const EngineStateSelectSchema: z.ZodType<Prisma.EngineStateSelect> = z.object({
  id: z.boolean().optional(),
  status: z.boolean().optional(),
  currentPhase: z.boolean().optional(),
  confidence: z.boolean().optional(),
  lastActive: z.boolean().optional(),
  metadata: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// ENGINE OPERATION
//------------------------------------------------------

export const EngineOperationIncludeSchema: z.ZodType<Prisma.EngineOperationInclude> = z.object({
  EngineLearningResult: z.union([z.boolean(),z.lazy(() => EngineLearningResultFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EngineOperationCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const EngineOperationArgsSchema: z.ZodType<Prisma.EngineOperationDefaultArgs> = z.object({
  select: z.lazy(() => EngineOperationSelectSchema).optional(),
  include: z.lazy(() => EngineOperationIncludeSchema).optional(),
}).strict();

export const EngineOperationCountOutputTypeArgsSchema: z.ZodType<Prisma.EngineOperationCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => EngineOperationCountOutputTypeSelectSchema).nullish(),
}).strict();

export const EngineOperationCountOutputTypeSelectSchema: z.ZodType<Prisma.EngineOperationCountOutputTypeSelect> = z.object({
  EngineLearningResult: z.boolean().optional(),
}).strict();

export const EngineOperationSelectSchema: z.ZodType<Prisma.EngineOperationSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  status: z.boolean().optional(),
  startTime: z.boolean().optional(),
  endTime: z.boolean().optional(),
  metrics: z.boolean().optional(),
  metadata: z.boolean().optional(),
  error: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  EngineLearningResult: z.union([z.boolean(),z.lazy(() => EngineLearningResultFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EngineOperationCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ENGINE METRIC
//------------------------------------------------------

export const EngineMetricSelectSchema: z.ZodType<Prisma.EngineMetricSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  value: z.boolean().optional(),
  confidence: z.boolean().optional(),
  timestamp: z.boolean().optional(),
  metadata: z.boolean().optional(),
  operationId: z.boolean().optional(),
}).strict()

// ENGINE LEARNING RESULT
//------------------------------------------------------

export const EngineLearningResultIncludeSchema: z.ZodType<Prisma.EngineLearningResultInclude> = z.object({
  operation: z.union([z.boolean(),z.lazy(() => EngineOperationArgsSchema)]).optional(),
  EngineOptimizationStrategy: z.union([z.boolean(),z.lazy(() => EngineOptimizationStrategyFindManyArgsSchema)]).optional(),
  recommendations: z.union([z.boolean(),z.lazy(() => EngineRecommendationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EngineLearningResultCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const EngineLearningResultArgsSchema: z.ZodType<Prisma.EngineLearningResultDefaultArgs> = z.object({
  select: z.lazy(() => EngineLearningResultSelectSchema).optional(),
  include: z.lazy(() => EngineLearningResultIncludeSchema).optional(),
}).strict();

export const EngineLearningResultCountOutputTypeArgsSchema: z.ZodType<Prisma.EngineLearningResultCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => EngineLearningResultCountOutputTypeSelectSchema).nullish(),
}).strict();

export const EngineLearningResultCountOutputTypeSelectSchema: z.ZodType<Prisma.EngineLearningResultCountOutputTypeSelect> = z.object({
  EngineOptimizationStrategy: z.boolean().optional(),
  recommendations: z.boolean().optional(),
}).strict();

export const EngineLearningResultSelectSchema: z.ZodType<Prisma.EngineLearningResultSelect> = z.object({
  id: z.boolean().optional(),
  patterns: z.boolean().optional(),
  confidence: z.boolean().optional(),
  metadata: z.boolean().optional(),
  performance: z.boolean().optional(),
  validatedAt: z.boolean().optional(),
  abTestMetrics: z.boolean().optional(),
  operationId: z.boolean().optional(),
  operation: z.union([z.boolean(),z.lazy(() => EngineOperationArgsSchema)]).optional(),
  EngineOptimizationStrategy: z.union([z.boolean(),z.lazy(() => EngineOptimizationStrategyFindManyArgsSchema)]).optional(),
  recommendations: z.union([z.boolean(),z.lazy(() => EngineRecommendationFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => EngineLearningResultCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ENGINE OPTIMIZATION STRATEGY
//------------------------------------------------------

export const EngineOptimizationStrategyIncludeSchema: z.ZodType<Prisma.EngineOptimizationStrategyInclude> = z.object({
  learningResult: z.union([z.boolean(),z.lazy(() => EngineLearningResultArgsSchema)]).optional(),
}).strict()

export const EngineOptimizationStrategyArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyDefaultArgs> = z.object({
  select: z.lazy(() => EngineOptimizationStrategySelectSchema).optional(),
  include: z.lazy(() => EngineOptimizationStrategyIncludeSchema).optional(),
}).strict();

export const EngineOptimizationStrategySelectSchema: z.ZodType<Prisma.EngineOptimizationStrategySelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  priority: z.boolean().optional(),
  confidence: z.boolean().optional(),
  impact: z.boolean().optional(),
  metadata: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  learningResultId: z.boolean().optional(),
  learningResult: z.union([z.boolean(),z.lazy(() => EngineLearningResultArgsSchema)]).optional(),
}).strict()

// ENGINE CONFIDENCE SCORE
//------------------------------------------------------

export const EngineConfidenceScoreSelectSchema: z.ZodType<Prisma.EngineConfidenceScoreSelect> = z.object({
  id: z.boolean().optional(),
  value: z.boolean().optional(),
  factors: z.boolean().optional(),
  metadata: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// SEARCH WEIGHTS
//------------------------------------------------------

export const SearchWeightsSelectSchema: z.ZodType<Prisma.SearchWeightsSelect> = z.object({
  id: z.boolean().optional(),
  titleWeight: z.boolean().optional(),
  contentWeight: z.boolean().optional(),
  tagWeight: z.boolean().optional(),
  active: z.boolean().optional(),
  metadata: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// SEARCH CONFIG
//------------------------------------------------------

export const SearchConfigSelectSchema: z.ZodType<Prisma.SearchConfigSelect> = z.object({
  id: z.boolean().optional(),
  key: z.boolean().optional(),
  value: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// EXPERIMENT CONFIG
//------------------------------------------------------

export const ExperimentConfigSelectSchema: z.ZodType<Prisma.ExperimentConfigSelect> = z.object({
  id: z.boolean().optional(),
  key: z.boolean().optional(),
  value: z.boolean().optional(),
  status: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
}).strict()

// ENGINE RECOMMENDATION
//------------------------------------------------------

export const EngineRecommendationIncludeSchema: z.ZodType<Prisma.EngineRecommendationInclude> = z.object({
  learningResult: z.union([z.boolean(),z.lazy(() => EngineLearningResultArgsSchema)]).optional(),
}).strict()

export const EngineRecommendationArgsSchema: z.ZodType<Prisma.EngineRecommendationDefaultArgs> = z.object({
  select: z.lazy(() => EngineRecommendationSelectSchema).optional(),
  include: z.lazy(() => EngineRecommendationIncludeSchema).optional(),
}).strict();

export const EngineRecommendationSelectSchema: z.ZodType<Prisma.EngineRecommendationSelect> = z.object({
  id: z.boolean().optional(),
  type: z.boolean().optional(),
  priority: z.boolean().optional(),
  confidence: z.boolean().optional(),
  impact: z.boolean().optional(),
  metadata: z.boolean().optional(),
  learningResultId: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  learningResult: z.union([z.boolean(),z.lazy(() => EngineLearningResultArgsSchema)]).optional(),
}).strict()

// INDEX
//------------------------------------------------------

export const IndexSelectSchema: z.ZodType<Prisma.IndexSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  status: z.boolean().optional(),
  settings: z.boolean().optional(),
  mappings: z.boolean().optional(),
  created_at: z.boolean().optional(),
  updated_at: z.boolean().optional(),
  deleted_at: z.boolean().optional(),
  doc_count: z.boolean().optional(),
  size_bytes: z.boolean().optional(),
  health: z.boolean().optional(),
}).strict()

// USER
//------------------------------------------------------

export const UserIncludeSchema: z.ZodType<Prisma.UserInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => AuthSessionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UserArgsSchema: z.ZodType<Prisma.UserDefaultArgs> = z.object({
  select: z.lazy(() => UserSelectSchema).optional(),
  include: z.lazy(() => UserIncludeSchema).optional(),
}).strict();

export const UserCountOutputTypeArgsSchema: z.ZodType<Prisma.UserCountOutputTypeDefaultArgs> = z.object({
  select: z.lazy(() => UserCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UserCountOutputTypeSelectSchema: z.ZodType<Prisma.UserCountOutputTypeSelect> = z.object({
  accounts: z.boolean().optional(),
  sessions: z.boolean().optional(),
}).strict();

export const UserSelectSchema: z.ZodType<Prisma.UserSelect> = z.object({
  id: z.boolean().optional(),
  name: z.boolean().optional(),
  email: z.boolean().optional(),
  password: z.boolean().optional(),
  emailVerified: z.boolean().optional(),
  image: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountFindManyArgsSchema)]).optional(),
  sessions: z.union([z.boolean(),z.lazy(() => AuthSessionFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UserCountOutputTypeArgsSchema)]).optional(),
}).strict()

// ACCOUNT
//------------------------------------------------------

export const AccountIncludeSchema: z.ZodType<Prisma.AccountInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const AccountArgsSchema: z.ZodType<Prisma.AccountDefaultArgs> = z.object({
  select: z.lazy(() => AccountSelectSchema).optional(),
  include: z.lazy(() => AccountIncludeSchema).optional(),
}).strict();

export const AccountSelectSchema: z.ZodType<Prisma.AccountSelect> = z.object({
  id: z.boolean().optional(),
  userId: z.boolean().optional(),
  type: z.boolean().optional(),
  provider: z.boolean().optional(),
  providerAccountId: z.boolean().optional(),
  refresh_token: z.boolean().optional(),
  access_token: z.boolean().optional(),
  expires_at: z.boolean().optional(),
  token_type: z.boolean().optional(),
  scope: z.boolean().optional(),
  id_token: z.boolean().optional(),
  session_state: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// AUTH SESSION
//------------------------------------------------------

export const AuthSessionIncludeSchema: z.ZodType<Prisma.AuthSessionInclude> = z.object({
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

export const AuthSessionArgsSchema: z.ZodType<Prisma.AuthSessionDefaultArgs> = z.object({
  select: z.lazy(() => AuthSessionSelectSchema).optional(),
  include: z.lazy(() => AuthSessionIncludeSchema).optional(),
}).strict();

export const AuthSessionSelectSchema: z.ZodType<Prisma.AuthSessionSelect> = z.object({
  id: z.boolean().optional(),
  sessionToken: z.boolean().optional(),
  userId: z.boolean().optional(),
  expires: z.boolean().optional(),
  user: z.union([z.boolean(),z.lazy(() => UserArgsSchema)]).optional(),
}).strict()

// VERIFICATION TOKEN
//------------------------------------------------------

export const VerificationTokenSelectSchema: z.ZodType<Prisma.VerificationTokenSelect> = z.object({
  identifier: z.boolean().optional(),
  token: z.boolean().optional(),
  expires: z.boolean().optional(),
}).strict()

// API KEY
//------------------------------------------------------

export const ApiKeySelectSchema: z.ZodType<Prisma.ApiKeySelect> = z.object({
  id: z.boolean().optional(),
  key: z.boolean().optional(),
  clientId: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  isActive: z.boolean().optional(),
  expiresAt: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  lastUsedAt: z.boolean().optional(),
  allowedIps: z.boolean().optional(),
  rateLimit: z.boolean().optional(),
  usageCount: z.boolean().optional(),
}).strict()

// ADMIN TOKEN
//------------------------------------------------------

export const AdminTokenSelectSchema: z.ZodType<Prisma.AdminTokenSelect> = z.object({
  id: z.boolean().optional(),
  token: z.boolean().optional(),
  name: z.boolean().optional(),
  description: z.boolean().optional(),
  isActive: z.boolean().optional(),
  createdAt: z.boolean().optional(),
  updatedAt: z.boolean().optional(),
  lastUsedAt: z.boolean().optional(),
}).strict()

// SESSION TO SIGNAL
//------------------------------------------------------

export const SessionToSignalIncludeSchema: z.ZodType<Prisma.SessionToSignalInclude> = z.object({
  sessions: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
  Signal: z.union([z.boolean(),z.lazy(() => SignalArgsSchema)]).optional(),
}).strict()

export const SessionToSignalArgsSchema: z.ZodType<Prisma.SessionToSignalDefaultArgs> = z.object({
  select: z.lazy(() => SessionToSignalSelectSchema).optional(),
  include: z.lazy(() => SessionToSignalIncludeSchema).optional(),
}).strict();

export const SessionToSignalSelectSchema: z.ZodType<Prisma.SessionToSignalSelect> = z.object({
  A: z.boolean().optional(),
  B: z.boolean().optional(),
  sessions: z.union([z.boolean(),z.lazy(() => SessionArgsSchema)]).optional(),
  Signal: z.union([z.boolean(),z.lazy(() => SignalArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const DocumentWhereInputSchema: z.ZodType<Prisma.DocumentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => DocumentWhereInputSchema),z.lazy(() => DocumentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentWhereInputSchema),z.lazy(() => DocumentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const DocumentOrderByWithRelationInputSchema: z.ZodType<Prisma.DocumentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentWhereUniqueInputSchema: z.ZodType<Prisma.DocumentWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => DocumentWhereInputSchema),z.lazy(() => DocumentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentWhereInputSchema),z.lazy(() => DocumentWhereInputSchema).array() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const DocumentOrderByWithAggregationInputSchema: z.ZodType<Prisma.DocumentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => DocumentCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => DocumentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => DocumentMinOrderByAggregateInputSchema).optional()
}).strict();

export const DocumentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.DocumentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => DocumentScalarWhereWithAggregatesInputSchema),z.lazy(() => DocumentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => DocumentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => DocumentScalarWhereWithAggregatesInputSchema),z.lazy(() => DocumentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  data: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MigrationWhereInputSchema: z.ZodType<Prisma.MigrationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MigrationWhereInputSchema),z.lazy(() => MigrationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MigrationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MigrationWhereInputSchema),z.lazy(() => MigrationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  version: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  applied_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MigrationOrderByWithRelationInputSchema: z.ZodType<Prisma.MigrationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  applied_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MigrationWhereUniqueInputSchema: z.ZodType<Prisma.MigrationWhereUniqueInput> = z.union([
  z.object({
    id: z.number().int(),
    version: z.number().int()
  }),
  z.object({
    id: z.number().int(),
  }),
  z.object({
    version: z.number().int(),
  }),
])
.and(z.object({
  id: z.number().int().optional(),
  version: z.number().int().optional(),
  AND: z.union([ z.lazy(() => MigrationWhereInputSchema),z.lazy(() => MigrationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MigrationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MigrationWhereInputSchema),z.lazy(() => MigrationWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  applied_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const MigrationOrderByWithAggregationInputSchema: z.ZodType<Prisma.MigrationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  applied_at: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MigrationCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => MigrationAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MigrationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MigrationMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => MigrationSumOrderByAggregateInputSchema).optional()
}).strict();

export const MigrationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MigrationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MigrationScalarWhereWithAggregatesInputSchema),z.lazy(() => MigrationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MigrationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MigrationScalarWhereWithAggregatesInputSchema),z.lazy(() => MigrationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  version: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  applied_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SearchAnalyticsWhereInputSchema: z.ZodType<Prisma.SearchAnalyticsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SearchAnalyticsWhereInputSchema),z.lazy(() => SearchAnalyticsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchAnalyticsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchAnalyticsWhereInputSchema),z.lazy(() => SearchAnalyticsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  query: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  searchType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  totalHits: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  took: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  facetsUsed: z.lazy(() => JsonNullableFilterSchema).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resultIds: z.lazy(() => JsonNullableFilterSchema).optional(),
  page: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  pageSize: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  filters: z.lazy(() => JsonNullableFilterSchema).optional()
}).strict();

export const SearchAnalyticsOrderByWithRelationInputSchema: z.ZodType<Prisma.SearchAnalyticsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  query: z.lazy(() => SortOrderSchema).optional(),
  searchType: z.lazy(() => SortOrderSchema).optional(),
  totalHits: z.lazy(() => SortOrderSchema).optional(),
  took: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  facetsUsed: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sessionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultIds: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  page: z.lazy(() => SortOrderSchema).optional(),
  pageSize: z.lazy(() => SortOrderSchema).optional(),
  filters: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const SearchAnalyticsWhereUniqueInputSchema: z.ZodType<Prisma.SearchAnalyticsWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => SearchAnalyticsWhereInputSchema),z.lazy(() => SearchAnalyticsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchAnalyticsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchAnalyticsWhereInputSchema),z.lazy(() => SearchAnalyticsWhereInputSchema).array() ]).optional(),
  query: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  searchType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  totalHits: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  took: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  facetsUsed: z.lazy(() => JsonNullableFilterSchema).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  resultIds: z.lazy(() => JsonNullableFilterSchema).optional(),
  page: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  pageSize: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  filters: z.lazy(() => JsonNullableFilterSchema).optional()
}).strict());

export const SearchAnalyticsOrderByWithAggregationInputSchema: z.ZodType<Prisma.SearchAnalyticsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  query: z.lazy(() => SortOrderSchema).optional(),
  searchType: z.lazy(() => SortOrderSchema).optional(),
  totalHits: z.lazy(() => SortOrderSchema).optional(),
  took: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  facetsUsed: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sessionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultIds: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  page: z.lazy(() => SortOrderSchema).optional(),
  pageSize: z.lazy(() => SortOrderSchema).optional(),
  filters: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => SearchAnalyticsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SearchAnalyticsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SearchAnalyticsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SearchAnalyticsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SearchAnalyticsSumOrderByAggregateInputSchema).optional()
}).strict();

export const SearchAnalyticsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SearchAnalyticsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SearchAnalyticsScalarWhereWithAggregatesInputSchema),z.lazy(() => SearchAnalyticsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchAnalyticsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchAnalyticsScalarWhereWithAggregatesInputSchema),z.lazy(() => SearchAnalyticsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  query: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  searchType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  totalHits: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  took: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  facetsUsed: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  resultIds: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  page: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  pageSize: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  filters: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional()
}).strict();

export const SessionWhereInputSchema: z.ZodType<Prisma.SessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  lastActiveAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentListRelationFilterSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricListRelationFilterSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsListRelationFilterSchema).optional(),
  conversations: z.lazy(() => ConversationListRelationFilterSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricListRelationFilterSchema).optional(),
  searchEvents: z.lazy(() => SearchEventListRelationFilterSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalListRelationFilterSchema).optional()
}).strict();

export const SessionOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  lastActiveAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentOrderByRelationAggregateInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricOrderByRelationAggregateInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsOrderByRelationAggregateInputSchema).optional(),
  conversations: z.lazy(() => ConversationOrderByRelationAggregateInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricOrderByRelationAggregateInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventOrderByRelationAggregateInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalOrderByRelationAggregateInputSchema).optional()
}).strict();

export const SessionWhereUniqueInputSchema: z.ZodType<Prisma.SessionWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionWhereInputSchema),z.lazy(() => SessionWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  lastActiveAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentListRelationFilterSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricListRelationFilterSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsListRelationFilterSchema).optional(),
  conversations: z.lazy(() => ConversationListRelationFilterSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricListRelationFilterSchema).optional(),
  searchEvents: z.lazy(() => SearchEventListRelationFilterSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalListRelationFilterSchema).optional()
}).strict());

export const SessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  lastActiveAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionMinOrderByAggregateInputSchema).optional()
}).strict();

export const SessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  startedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  lastActiveAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ConversationWhereInputSchema: z.ZodType<Prisma.ConversationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ConversationWhereInputSchema),z.lazy(() => ConversationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ConversationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ConversationWhereInputSchema),z.lazy(() => ConversationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  context: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  session: z.union([ z.lazy(() => SessionScalarRelationFilterSchema),z.lazy(() => SessionWhereInputSchema) ]).optional(),
  messages: z.lazy(() => MessageListRelationFilterSchema).optional()
}).strict();

export const ConversationOrderByWithRelationInputSchema: z.ZodType<Prisma.ConversationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  context: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  session: z.lazy(() => SessionOrderByWithRelationInputSchema).optional(),
  messages: z.lazy(() => MessageOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ConversationWhereUniqueInputSchema: z.ZodType<Prisma.ConversationWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ConversationWhereInputSchema),z.lazy(() => ConversationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ConversationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ConversationWhereInputSchema),z.lazy(() => ConversationWhereInputSchema).array() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  context: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  session: z.union([ z.lazy(() => SessionScalarRelationFilterSchema),z.lazy(() => SessionWhereInputSchema) ]).optional(),
  messages: z.lazy(() => MessageListRelationFilterSchema).optional()
}).strict());

export const ConversationOrderByWithAggregationInputSchema: z.ZodType<Prisma.ConversationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  title: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  context: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ConversationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ConversationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ConversationMinOrderByAggregateInputSchema).optional()
}).strict();

export const ConversationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ConversationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ConversationScalarWhereWithAggregatesInputSchema),z.lazy(() => ConversationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ConversationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ConversationScalarWhereWithAggregatesInputSchema),z.lazy(() => ConversationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  context: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const MessageWhereInputSchema: z.ZodType<Prisma.MessageWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MessageWhereInputSchema),z.lazy(() => MessageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageWhereInputSchema),z.lazy(() => MessageWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  conversationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  conversation: z.union([ z.lazy(() => ConversationScalarRelationFilterSchema),z.lazy(() => ConversationWhereInputSchema) ]).optional(),
}).strict();

export const MessageOrderByWithRelationInputSchema: z.ZodType<Prisma.MessageOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  conversationId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  conversation: z.lazy(() => ConversationOrderByWithRelationInputSchema).optional()
}).strict();

export const MessageWhereUniqueInputSchema: z.ZodType<Prisma.MessageWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => MessageWhereInputSchema),z.lazy(() => MessageWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageWhereInputSchema),z.lazy(() => MessageWhereInputSchema).array() ]).optional(),
  conversationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  conversation: z.union([ z.lazy(() => ConversationScalarRelationFilterSchema),z.lazy(() => ConversationWhereInputSchema) ]).optional(),
}).strict());

export const MessageOrderByWithAggregationInputSchema: z.ZodType<Prisma.MessageOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  conversationId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => MessageCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MessageMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MessageMinOrderByAggregateInputSchema).optional()
}).strict();

export const MessageScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MessageScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MessageScalarWhereWithAggregatesInputSchema),z.lazy(() => MessageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageScalarWhereWithAggregatesInputSchema),z.lazy(() => MessageScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  conversationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional()
}).strict();

export const ABTestWhereInputSchema: z.ZodType<Prisma.ABTestWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ABTestWhereInputSchema),z.lazy(() => ABTestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestWhereInputSchema),z.lazy(() => ABTestWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumExperimentStatusFilterSchema),z.lazy(() => ExperimentStatusSchema) ]).optional(),
  configuration: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  assignments: z.lazy(() => ABTestAssignmentListRelationFilterSchema).optional(),
  metrics: z.lazy(() => ABTestMetricListRelationFilterSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsListRelationFilterSchema).optional()
}).strict();

export const ABTestOrderByWithRelationInputSchema: z.ZodType<Prisma.ABTestOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  configuration: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  assignments: z.lazy(() => ABTestAssignmentOrderByRelationAggregateInputSchema).optional(),
  metrics: z.lazy(() => ABTestMetricOrderByRelationAggregateInputSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ABTestWhereUniqueInputSchema: z.ZodType<Prisma.ABTestWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ABTestWhereInputSchema),z.lazy(() => ABTestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestWhereInputSchema),z.lazy(() => ABTestWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumExperimentStatusFilterSchema),z.lazy(() => ExperimentStatusSchema) ]).optional(),
  configuration: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  assignments: z.lazy(() => ABTestAssignmentListRelationFilterSchema).optional(),
  metrics: z.lazy(() => ABTestMetricListRelationFilterSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsListRelationFilterSchema).optional()
}).strict());

export const ABTestOrderByWithAggregationInputSchema: z.ZodType<Prisma.ABTestOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  configuration: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ABTestCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ABTestMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ABTestMinOrderByAggregateInputSchema).optional()
}).strict();

export const ABTestScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ABTestScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ABTestScalarWhereWithAggregatesInputSchema),z.lazy(() => ABTestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestScalarWhereWithAggregatesInputSchema),z.lazy(() => ABTestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  startDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endDate: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  status: z.union([ z.lazy(() => EnumExperimentStatusWithAggregatesFilterSchema),z.lazy(() => ExperimentStatusSchema) ]).optional(),
  configuration: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ABTestAssignmentWhereInputSchema: z.ZodType<Prisma.ABTestAssignmentWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ABTestAssignmentWhereInputSchema),z.lazy(() => ABTestAssignmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestAssignmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestAssignmentWhereInputSchema),z.lazy(() => ABTestAssignmentWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  testId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  session: z.union([ z.lazy(() => SessionScalarRelationFilterSchema),z.lazy(() => SessionWhereInputSchema) ]).optional(),
  test: z.union([ z.lazy(() => ABTestScalarRelationFilterSchema),z.lazy(() => ABTestWhereInputSchema) ]).optional(),
}).strict();

export const ABTestAssignmentOrderByWithRelationInputSchema: z.ZodType<Prisma.ABTestAssignmentOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  session: z.lazy(() => SessionOrderByWithRelationInputSchema).optional(),
  test: z.lazy(() => ABTestOrderByWithRelationInputSchema).optional()
}).strict();

export const ABTestAssignmentWhereUniqueInputSchema: z.ZodType<Prisma.ABTestAssignmentWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    testId_sessionId: z.lazy(() => ABTestAssignmentTestIdSessionIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    testId_sessionId: z.lazy(() => ABTestAssignmentTestIdSessionIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  testId_sessionId: z.lazy(() => ABTestAssignmentTestIdSessionIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => ABTestAssignmentWhereInputSchema),z.lazy(() => ABTestAssignmentWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestAssignmentWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestAssignmentWhereInputSchema),z.lazy(() => ABTestAssignmentWhereInputSchema).array() ]).optional(),
  testId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  session: z.union([ z.lazy(() => SessionScalarRelationFilterSchema),z.lazy(() => SessionWhereInputSchema) ]).optional(),
  test: z.union([ z.lazy(() => ABTestScalarRelationFilterSchema),z.lazy(() => ABTestWhereInputSchema) ]).optional(),
}).strict());

export const ABTestAssignmentOrderByWithAggregationInputSchema: z.ZodType<Prisma.ABTestAssignmentOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ABTestAssignmentCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ABTestAssignmentMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ABTestAssignmentMinOrderByAggregateInputSchema).optional()
}).strict();

export const ABTestAssignmentScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ABTestAssignmentScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ABTestAssignmentScalarWhereWithAggregatesInputSchema),z.lazy(() => ABTestAssignmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestAssignmentScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestAssignmentScalarWhereWithAggregatesInputSchema),z.lazy(() => ABTestAssignmentScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  testId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ABTestMetricWhereInputSchema: z.ZodType<Prisma.ABTestMetricWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ABTestMetricWhereInputSchema),z.lazy(() => ABTestMetricWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestMetricWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestMetricWhereInputSchema),z.lazy(() => ABTestMetricWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  testId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  session: z.union([ z.lazy(() => SessionScalarRelationFilterSchema),z.lazy(() => SessionWhereInputSchema) ]).optional(),
  test: z.union([ z.lazy(() => ABTestScalarRelationFilterSchema),z.lazy(() => ABTestWhereInputSchema) ]).optional(),
}).strict();

export const ABTestMetricOrderByWithRelationInputSchema: z.ZodType<Prisma.ABTestMetricOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  eventType: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  session: z.lazy(() => SessionOrderByWithRelationInputSchema).optional(),
  test: z.lazy(() => ABTestOrderByWithRelationInputSchema).optional()
}).strict();

export const ABTestMetricWhereUniqueInputSchema: z.ZodType<Prisma.ABTestMetricWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ABTestMetricWhereInputSchema),z.lazy(() => ABTestMetricWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestMetricWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestMetricWhereInputSchema),z.lazy(() => ABTestMetricWhereInputSchema).array() ]).optional(),
  testId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  session: z.union([ z.lazy(() => SessionScalarRelationFilterSchema),z.lazy(() => SessionWhereInputSchema) ]).optional(),
  test: z.union([ z.lazy(() => ABTestScalarRelationFilterSchema),z.lazy(() => ABTestWhereInputSchema) ]).optional(),
}).strict());

export const ABTestMetricOrderByWithAggregationInputSchema: z.ZodType<Prisma.ABTestMetricOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  eventType: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ABTestMetricCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ABTestMetricAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ABTestMetricMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ABTestMetricMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ABTestMetricSumOrderByAggregateInputSchema).optional()
}).strict();

export const ABTestMetricScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ABTestMetricScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ABTestMetricScalarWhereWithAggregatesInputSchema),z.lazy(() => ABTestMetricScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestMetricScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestMetricScalarWhereWithAggregatesInputSchema),z.lazy(() => ABTestMetricScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  testId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  eventType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const SearchFeedbackWhereInputSchema: z.ZodType<Prisma.SearchFeedbackWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SearchFeedbackWhereInputSchema),z.lazy(() => SearchFeedbackWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchFeedbackWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchFeedbackWhereInputSchema),z.lazy(() => SearchFeedbackWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  searchId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  queryHash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resultId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relevanceScore: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  userAction: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  SearchEvent: z.lazy(() => SearchEventListRelationFilterSchema).optional()
}).strict();

export const SearchFeedbackOrderByWithRelationInputSchema: z.ZodType<Prisma.SearchFeedbackOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  searchId: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.lazy(() => SortOrderSchema).optional(),
  relevanceScore: z.lazy(() => SortOrderSchema).optional(),
  userAction: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  SearchEvent: z.lazy(() => SearchEventOrderByRelationAggregateInputSchema).optional()
}).strict();

export const SearchFeedbackWhereUniqueInputSchema: z.ZodType<Prisma.SearchFeedbackWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => SearchFeedbackWhereInputSchema),z.lazy(() => SearchFeedbackWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchFeedbackWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchFeedbackWhereInputSchema),z.lazy(() => SearchFeedbackWhereInputSchema).array() ]).optional(),
  searchId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  queryHash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resultId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relevanceScore: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  userAction: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  SearchEvent: z.lazy(() => SearchEventListRelationFilterSchema).optional()
}).strict());

export const SearchFeedbackOrderByWithAggregationInputSchema: z.ZodType<Prisma.SearchFeedbackOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  searchId: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.lazy(() => SortOrderSchema).optional(),
  relevanceScore: z.lazy(() => SortOrderSchema).optional(),
  userAction: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => SearchFeedbackCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SearchFeedbackAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SearchFeedbackMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SearchFeedbackMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SearchFeedbackSumOrderByAggregateInputSchema).optional()
}).strict();

export const SearchFeedbackScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SearchFeedbackScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SearchFeedbackScalarWhereWithAggregatesInputSchema),z.lazy(() => SearchFeedbackScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchFeedbackScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchFeedbackScalarWhereWithAggregatesInputSchema),z.lazy(() => SearchFeedbackScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  searchId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  queryHash: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  resultId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  relevanceScore: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  userAction: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional()
}).strict();

export const BaseEventWhereInputSchema: z.ZodType<Prisma.BaseEventWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BaseEventWhereInputSchema),z.lazy(() => BaseEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BaseEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BaseEventWhereInputSchema),z.lazy(() => BaseEventWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumEventTypeFilterSchema),z.lazy(() => EventTypeSchema) ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  source: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  priority: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  processed: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  correlationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  searchEventid: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  searchEvent: z.union([ z.lazy(() => SearchEventNullableScalarRelationFilterSchema),z.lazy(() => SearchEventWhereInputSchema) ]).optional().nullable(),
  modelEvent: z.union([ z.lazy(() => ModelEventNullableScalarRelationFilterSchema),z.lazy(() => ModelEventWhereInputSchema) ]).optional().nullable(),
}).strict();

export const BaseEventOrderByWithRelationInputSchema: z.ZodType<Prisma.BaseEventOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  priority: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  processed: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  correlationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  searchEventid: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  searchEvent: z.lazy(() => SearchEventOrderByWithRelationInputSchema).optional(),
  modelEvent: z.lazy(() => ModelEventOrderByWithRelationInputSchema).optional()
}).strict();

export const BaseEventWhereUniqueInputSchema: z.ZodType<Prisma.BaseEventWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => BaseEventWhereInputSchema),z.lazy(() => BaseEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BaseEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BaseEventWhereInputSchema),z.lazy(() => BaseEventWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => EnumEventTypeFilterSchema),z.lazy(() => EventTypeSchema) ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  source: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  priority: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  processed: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  correlationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  searchEventid: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  searchEvent: z.union([ z.lazy(() => SearchEventNullableScalarRelationFilterSchema),z.lazy(() => SearchEventWhereInputSchema) ]).optional().nullable(),
  modelEvent: z.union([ z.lazy(() => ModelEventNullableScalarRelationFilterSchema),z.lazy(() => ModelEventWhereInputSchema) ]).optional().nullable(),
}).strict());

export const BaseEventOrderByWithAggregationInputSchema: z.ZodType<Prisma.BaseEventOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  priority: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  processed: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  correlationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  searchEventid: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => BaseEventCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => BaseEventAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => BaseEventMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => BaseEventMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => BaseEventSumOrderByAggregateInputSchema).optional()
}).strict();

export const BaseEventScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.BaseEventScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => BaseEventScalarWhereWithAggregatesInputSchema),z.lazy(() => BaseEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => BaseEventScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BaseEventScalarWhereWithAggregatesInputSchema),z.lazy(() => BaseEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumEventTypeWithAggregatesFilterSchema),z.lazy(() => EventTypeSchema) ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  data: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  source: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  priority: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  processed: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  correlationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  searchEventid: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ModelEventWhereInputSchema: z.ZodType<Prisma.ModelEventWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ModelEventWhereInputSchema),z.lazy(() => ModelEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelEventWhereInputSchema),z.lazy(() => ModelEventWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  baseEventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  modelId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  version: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parameters: z.lazy(() => JsonFilterSchema).optional(),
  metrics: z.lazy(() => JsonFilterSchema).optional(),
  results: z.lazy(() => JsonFilterSchema).optional(),
  baseEvent: z.union([ z.lazy(() => BaseEventScalarRelationFilterSchema),z.lazy(() => BaseEventWhereInputSchema) ]).optional(),
}).strict();

export const ModelEventOrderByWithRelationInputSchema: z.ZodType<Prisma.ModelEventOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  baseEventId: z.lazy(() => SortOrderSchema).optional(),
  modelId: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  parameters: z.lazy(() => SortOrderSchema).optional(),
  metrics: z.lazy(() => SortOrderSchema).optional(),
  results: z.lazy(() => SortOrderSchema).optional(),
  baseEvent: z.lazy(() => BaseEventOrderByWithRelationInputSchema).optional()
}).strict();

export const ModelEventWhereUniqueInputSchema: z.ZodType<Prisma.ModelEventWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    baseEventId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    baseEventId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  baseEventId: z.string().optional(),
  AND: z.union([ z.lazy(() => ModelEventWhereInputSchema),z.lazy(() => ModelEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelEventWhereInputSchema),z.lazy(() => ModelEventWhereInputSchema).array() ]).optional(),
  modelId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  version: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parameters: z.lazy(() => JsonFilterSchema).optional(),
  metrics: z.lazy(() => JsonFilterSchema).optional(),
  results: z.lazy(() => JsonFilterSchema).optional(),
  baseEvent: z.union([ z.lazy(() => BaseEventScalarRelationFilterSchema),z.lazy(() => BaseEventWhereInputSchema) ]).optional(),
}).strict());

export const ModelEventOrderByWithAggregationInputSchema: z.ZodType<Prisma.ModelEventOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  baseEventId: z.lazy(() => SortOrderSchema).optional(),
  modelId: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  parameters: z.lazy(() => SortOrderSchema).optional(),
  metrics: z.lazy(() => SortOrderSchema).optional(),
  results: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ModelEventCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ModelEventMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ModelEventMinOrderByAggregateInputSchema).optional()
}).strict();

export const ModelEventScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ModelEventScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ModelEventScalarWhereWithAggregatesInputSchema),z.lazy(() => ModelEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelEventScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelEventScalarWhereWithAggregatesInputSchema),z.lazy(() => ModelEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  baseEventId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  modelId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  version: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  parameters: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  metrics: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  results: z.lazy(() => JsonWithAggregatesFilterSchema).optional()
}).strict();

export const ProcessedSignalWhereInputSchema: z.ZodType<Prisma.ProcessedSignalWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProcessedSignalWhereInputSchema),z.lazy(() => ProcessedSignalWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProcessedSignalWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProcessedSignalWhereInputSchema),z.lazy(() => ProcessedSignalWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  signalId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  originalSignalId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  processingTime: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  transformations: z.lazy(() => StringNullableListFilterSchema).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  processed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  processingMetadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  signal: z.union([ z.lazy(() => SignalScalarRelationFilterSchema),z.lazy(() => SignalWhereInputSchema) ]).optional(),
}).strict();

export const ProcessedSignalOrderByWithRelationInputSchema: z.ZodType<Prisma.ProcessedSignalOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  signalId: z.lazy(() => SortOrderSchema).optional(),
  originalSignalId: z.lazy(() => SortOrderSchema).optional(),
  processingTime: z.lazy(() => SortOrderSchema).optional(),
  transformations: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  processed: z.lazy(() => SortOrderSchema).optional(),
  processingMetadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  signal: z.lazy(() => SignalOrderByWithRelationInputSchema).optional()
}).strict();

export const ProcessedSignalWhereUniqueInputSchema: z.ZodType<Prisma.ProcessedSignalWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ProcessedSignalWhereInputSchema),z.lazy(() => ProcessedSignalWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProcessedSignalWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProcessedSignalWhereInputSchema),z.lazy(() => ProcessedSignalWhereInputSchema).array() ]).optional(),
  signalId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  originalSignalId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  processingTime: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  transformations: z.lazy(() => StringNullableListFilterSchema).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  processed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  processingMetadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  signal: z.union([ z.lazy(() => SignalScalarRelationFilterSchema),z.lazy(() => SignalWhereInputSchema) ]).optional(),
}).strict());

export const ProcessedSignalOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProcessedSignalOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  signalId: z.lazy(() => SortOrderSchema).optional(),
  originalSignalId: z.lazy(() => SortOrderSchema).optional(),
  processingTime: z.lazy(() => SortOrderSchema).optional(),
  transformations: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  processed: z.lazy(() => SortOrderSchema).optional(),
  processingMetadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ProcessedSignalCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ProcessedSignalAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProcessedSignalMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProcessedSignalMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ProcessedSignalSumOrderByAggregateInputSchema).optional()
}).strict();

export const ProcessedSignalScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProcessedSignalScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProcessedSignalScalarWhereWithAggregatesInputSchema),z.lazy(() => ProcessedSignalScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProcessedSignalScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProcessedSignalScalarWhereWithAggregatesInputSchema),z.lazy(() => ProcessedSignalScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  signalId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  originalSignalId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  processingTime: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  transformations: z.lazy(() => StringNullableListFilterSchema).optional(),
  confidence: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  processed: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  processingMetadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional()
}).strict();

export const SignalBatchWhereInputSchema: z.ZodType<Prisma.SignalBatchWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SignalBatchWhereInputSchema),z.lazy(() => SignalBatchWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SignalBatchWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SignalBatchWhereInputSchema),z.lazy(() => SignalBatchWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  batchId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  priority: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  sourceSystem: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  signalIds: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const SignalBatchOrderByWithRelationInputSchema: z.ZodType<Prisma.SignalBatchOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  batchId: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  priority: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sourceSystem: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  signalIds: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalBatchWhereUniqueInputSchema: z.ZodType<Prisma.SignalBatchWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    batchId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    batchId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  batchId: z.string().optional(),
  AND: z.union([ z.lazy(() => SignalBatchWhereInputSchema),z.lazy(() => SignalBatchWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SignalBatchWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SignalBatchWhereInputSchema),z.lazy(() => SignalBatchWhereInputSchema).array() ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  priority: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  sourceSystem: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  signalIds: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict());

export const SignalBatchOrderByWithAggregationInputSchema: z.ZodType<Prisma.SignalBatchOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  batchId: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  priority: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sourceSystem: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  signalIds: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SignalBatchCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SignalBatchAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SignalBatchMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SignalBatchMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SignalBatchSumOrderByAggregateInputSchema).optional()
}).strict();

export const SignalBatchScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SignalBatchScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SignalBatchScalarWhereWithAggregatesInputSchema),z.lazy(() => SignalBatchScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SignalBatchScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SignalBatchScalarWhereWithAggregatesInputSchema),z.lazy(() => SignalBatchScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  batchId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  priority: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  sourceSystem: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  signalIds: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const SignalPatternWhereInputSchema: z.ZodType<Prisma.SignalPatternWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SignalPatternWhereInputSchema),z.lazy(() => SignalPatternWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SignalPatternWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SignalPatternWhereInputSchema),z.lazy(() => SignalPatternWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  patternId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  signalIds: z.lazy(() => StringNullableListFilterSchema).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  patternType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  frequency: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  impactScore: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  relatedPatterns: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const SignalPatternOrderByWithRelationInputSchema: z.ZodType<Prisma.SignalPatternOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  patternId: z.lazy(() => SortOrderSchema).optional(),
  signalIds: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  patternType: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  impactScore: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  relatedPatterns: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalPatternWhereUniqueInputSchema: z.ZodType<Prisma.SignalPatternWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    patternId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    patternId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  patternId: z.string().optional(),
  AND: z.union([ z.lazy(() => SignalPatternWhereInputSchema),z.lazy(() => SignalPatternWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SignalPatternWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SignalPatternWhereInputSchema),z.lazy(() => SignalPatternWhereInputSchema).array() ]).optional(),
  signalIds: z.lazy(() => StringNullableListFilterSchema).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  patternType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  frequency: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  impactScore: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  relatedPatterns: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict());

export const SignalPatternOrderByWithAggregationInputSchema: z.ZodType<Prisma.SignalPatternOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  patternId: z.lazy(() => SortOrderSchema).optional(),
  signalIds: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  patternType: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  impactScore: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  relatedPatterns: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SignalPatternCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SignalPatternAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SignalPatternMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SignalPatternMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SignalPatternSumOrderByAggregateInputSchema).optional()
}).strict();

export const SignalPatternScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SignalPatternScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SignalPatternScalarWhereWithAggregatesInputSchema),z.lazy(() => SignalPatternScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SignalPatternScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SignalPatternScalarWhereWithAggregatesInputSchema),z.lazy(() => SignalPatternScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  patternId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  signalIds: z.lazy(() => StringNullableListFilterSchema).optional(),
  confidence: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  patternType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  frequency: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  impactScore: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  relatedPatterns: z.lazy(() => StringNullableListFilterSchema).optional()
}).strict();

export const AdaptationRuleWhereInputSchema: z.ZodType<Prisma.AdaptationRuleWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AdaptationRuleWhereInputSchema),z.lazy(() => AdaptationRuleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdaptationRuleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdaptationRuleWhereInputSchema),z.lazy(() => AdaptationRuleWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  conditions: z.lazy(() => JsonFilterSchema).optional(),
  actions: z.lazy(() => JsonFilterSchema).optional(),
  priority: z.union([ z.lazy(() => EnumRulePriorityFilterSchema),z.lazy(() => RulePrioritySchema) ]).optional(),
  enabled: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  lastTriggered: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const AdaptationRuleOrderByWithRelationInputSchema: z.ZodType<Prisma.AdaptationRuleOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  conditions: z.lazy(() => SortOrderSchema).optional(),
  actions: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  enabled: z.lazy(() => SortOrderSchema).optional(),
  lastTriggered: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const AdaptationRuleWhereUniqueInputSchema: z.ZodType<Prisma.AdaptationRuleWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AdaptationRuleWhereInputSchema),z.lazy(() => AdaptationRuleWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdaptationRuleWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdaptationRuleWhereInputSchema),z.lazy(() => AdaptationRuleWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  conditions: z.lazy(() => JsonFilterSchema).optional(),
  actions: z.lazy(() => JsonFilterSchema).optional(),
  priority: z.union([ z.lazy(() => EnumRulePriorityFilterSchema),z.lazy(() => RulePrioritySchema) ]).optional(),
  enabled: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  lastTriggered: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict());

export const AdaptationRuleOrderByWithAggregationInputSchema: z.ZodType<Prisma.AdaptationRuleOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  conditions: z.lazy(() => SortOrderSchema).optional(),
  actions: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  enabled: z.lazy(() => SortOrderSchema).optional(),
  lastTriggered: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AdaptationRuleCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AdaptationRuleMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AdaptationRuleMinOrderByAggregateInputSchema).optional()
}).strict();

export const AdaptationRuleScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AdaptationRuleScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AdaptationRuleScalarWhereWithAggregatesInputSchema),z.lazy(() => AdaptationRuleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdaptationRuleScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdaptationRuleScalarWhereWithAggregatesInputSchema),z.lazy(() => AdaptationRuleScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  conditions: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  actions: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  priority: z.union([ z.lazy(() => EnumRulePriorityWithAggregatesFilterSchema),z.lazy(() => RulePrioritySchema) ]).optional(),
  enabled: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  lastTriggered: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const ModelConfigWhereInputSchema: z.ZodType<Prisma.ModelConfigWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ModelConfigWhereInputSchema),z.lazy(() => ModelConfigWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelConfigWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelConfigWhereInputSchema),z.lazy(() => ModelConfigWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumModelTypeFilterSchema),z.lazy(() => ModelTypeSchema) ]).optional(),
  hyperparameters: z.lazy(() => JsonFilterSchema).optional(),
  features: z.lazy(() => StringNullableListFilterSchema).optional(),
  trainingParams: z.lazy(() => JsonNullableFilterSchema).optional(),
  metrics: z.lazy(() => LearningMetricListRelationFilterSchema).optional(),
  modelVersions: z.lazy(() => ModelVersionListRelationFilterSchema).optional()
}).strict();

export const ModelConfigOrderByWithRelationInputSchema: z.ZodType<Prisma.ModelConfigOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  hyperparameters: z.lazy(() => SortOrderSchema).optional(),
  features: z.lazy(() => SortOrderSchema).optional(),
  trainingParams: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metrics: z.lazy(() => LearningMetricOrderByRelationAggregateInputSchema).optional(),
  modelVersions: z.lazy(() => ModelVersionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ModelConfigWhereUniqueInputSchema: z.ZodType<Prisma.ModelConfigWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ModelConfigWhereInputSchema),z.lazy(() => ModelConfigWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelConfigWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelConfigWhereInputSchema),z.lazy(() => ModelConfigWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => EnumModelTypeFilterSchema),z.lazy(() => ModelTypeSchema) ]).optional(),
  hyperparameters: z.lazy(() => JsonFilterSchema).optional(),
  features: z.lazy(() => StringNullableListFilterSchema).optional(),
  trainingParams: z.lazy(() => JsonNullableFilterSchema).optional(),
  metrics: z.lazy(() => LearningMetricListRelationFilterSchema).optional(),
  modelVersions: z.lazy(() => ModelVersionListRelationFilterSchema).optional()
}).strict());

export const ModelConfigOrderByWithAggregationInputSchema: z.ZodType<Prisma.ModelConfigOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  hyperparameters: z.lazy(() => SortOrderSchema).optional(),
  features: z.lazy(() => SortOrderSchema).optional(),
  trainingParams: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ModelConfigCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ModelConfigMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ModelConfigMinOrderByAggregateInputSchema).optional()
}).strict();

export const ModelConfigScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ModelConfigScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ModelConfigScalarWhereWithAggregatesInputSchema),z.lazy(() => ModelConfigScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelConfigScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelConfigScalarWhereWithAggregatesInputSchema),z.lazy(() => ModelConfigScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumModelTypeWithAggregatesFilterSchema),z.lazy(() => ModelTypeSchema) ]).optional(),
  hyperparameters: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  features: z.lazy(() => StringNullableListFilterSchema).optional(),
  trainingParams: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional()
}).strict();

export const ModelVersionWhereInputSchema: z.ZodType<Prisma.ModelVersionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ModelVersionWhereInputSchema),z.lazy(() => ModelVersionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelVersionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelVersionWhereInputSchema),z.lazy(() => ModelVersionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  configId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metrics: z.lazy(() => JsonFilterSchema).optional(),
  artifactPath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parentVersion: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  config: z.union([ z.lazy(() => ModelConfigScalarRelationFilterSchema),z.lazy(() => ModelConfigWhereInputSchema) ]).optional(),
}).strict();

export const ModelVersionOrderByWithRelationInputSchema: z.ZodType<Prisma.ModelVersionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  configId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metrics: z.lazy(() => SortOrderSchema).optional(),
  artifactPath: z.lazy(() => SortOrderSchema).optional(),
  parentVersion: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  config: z.lazy(() => ModelConfigOrderByWithRelationInputSchema).optional()
}).strict();

export const ModelVersionWhereUniqueInputSchema: z.ZodType<Prisma.ModelVersionWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ModelVersionWhereInputSchema),z.lazy(() => ModelVersionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelVersionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelVersionWhereInputSchema),z.lazy(() => ModelVersionWhereInputSchema).array() ]).optional(),
  configId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metrics: z.lazy(() => JsonFilterSchema).optional(),
  artifactPath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parentVersion: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  config: z.union([ z.lazy(() => ModelConfigScalarRelationFilterSchema),z.lazy(() => ModelConfigWhereInputSchema) ]).optional(),
}).strict());

export const ModelVersionOrderByWithAggregationInputSchema: z.ZodType<Prisma.ModelVersionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  configId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metrics: z.lazy(() => SortOrderSchema).optional(),
  artifactPath: z.lazy(() => SortOrderSchema).optional(),
  parentVersion: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ModelVersionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ModelVersionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ModelVersionMinOrderByAggregateInputSchema).optional()
}).strict();

export const ModelVersionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ModelVersionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ModelVersionScalarWhereWithAggregatesInputSchema),z.lazy(() => ModelVersionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelVersionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelVersionScalarWhereWithAggregatesInputSchema),z.lazy(() => ModelVersionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  configId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  metrics: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  artifactPath: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  parentVersion: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const LearningRequestWhereInputSchema: z.ZodType<Prisma.LearningRequestWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LearningRequestWhereInputSchema),z.lazy(() => LearningRequestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LearningRequestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LearningRequestWhereInputSchema),z.lazy(() => LearningRequestWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  patterns: z.lazy(() => JsonFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LearningRequestOrderByWithRelationInputSchema: z.ZodType<Prisma.LearningRequestOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  patterns: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningRequestWhereUniqueInputSchema: z.ZodType<Prisma.LearningRequestWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => LearningRequestWhereInputSchema),z.lazy(() => LearningRequestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LearningRequestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LearningRequestWhereInputSchema),z.lazy(() => LearningRequestWhereInputSchema).array() ]).optional(),
  patterns: z.lazy(() => JsonFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const LearningRequestOrderByWithAggregationInputSchema: z.ZodType<Prisma.LearningRequestOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  patterns: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => LearningRequestCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LearningRequestMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LearningRequestMinOrderByAggregateInputSchema).optional()
}).strict();

export const LearningRequestScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LearningRequestScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LearningRequestScalarWhereWithAggregatesInputSchema),z.lazy(() => LearningRequestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LearningRequestScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LearningRequestScalarWhereWithAggregatesInputSchema),z.lazy(() => LearningRequestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  patterns: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FeedbackRequestWhereInputSchema: z.ZodType<Prisma.FeedbackRequestWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FeedbackRequestWhereInputSchema),z.lazy(() => FeedbackRequestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeedbackRequestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeedbackRequestWhereInputSchema),z.lazy(() => FeedbackRequestWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  feedback: z.lazy(() => JsonFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const FeedbackRequestOrderByWithRelationInputSchema: z.ZodType<Prisma.FeedbackRequestOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  feedback: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeedbackRequestWhereUniqueInputSchema: z.ZodType<Prisma.FeedbackRequestWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => FeedbackRequestWhereInputSchema),z.lazy(() => FeedbackRequestWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeedbackRequestWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeedbackRequestWhereInputSchema),z.lazy(() => FeedbackRequestWhereInputSchema).array() ]).optional(),
  feedback: z.lazy(() => JsonFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const FeedbackRequestOrderByWithAggregationInputSchema: z.ZodType<Prisma.FeedbackRequestOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  feedback: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FeedbackRequestCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FeedbackRequestMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FeedbackRequestMinOrderByAggregateInputSchema).optional()
}).strict();

export const FeedbackRequestScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FeedbackRequestScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FeedbackRequestScalarWhereWithAggregatesInputSchema),z.lazy(() => FeedbackRequestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FeedbackRequestScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FeedbackRequestScalarWhereWithAggregatesInputSchema),z.lazy(() => FeedbackRequestScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  feedback: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ModelMetricsWhereInputSchema: z.ZodType<Prisma.ModelMetricsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ModelMetricsWhereInputSchema),z.lazy(() => ModelMetricsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelMetricsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelMetricsWhereInputSchema),z.lazy(() => ModelMetricsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  modelVersionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accuracy: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  precision: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  recall: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  f1Score: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  latencyMs: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  loss: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  validationMetrics: z.lazy(() => JsonFilterSchema).optional(),
  customMetrics: z.lazy(() => JsonNullableFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ModelState: z.lazy(() => ModelStateListRelationFilterSchema).optional()
}).strict();

export const ModelMetricsOrderByWithRelationInputSchema: z.ZodType<Prisma.ModelMetricsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  modelVersionId: z.lazy(() => SortOrderSchema).optional(),
  accuracy: z.lazy(() => SortOrderSchema).optional(),
  precision: z.lazy(() => SortOrderSchema).optional(),
  recall: z.lazy(() => SortOrderSchema).optional(),
  f1Score: z.lazy(() => SortOrderSchema).optional(),
  latencyMs: z.lazy(() => SortOrderSchema).optional(),
  loss: z.lazy(() => SortOrderSchema).optional(),
  validationMetrics: z.lazy(() => SortOrderSchema).optional(),
  customMetrics: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  ModelState: z.lazy(() => ModelStateOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ModelMetricsWhereUniqueInputSchema: z.ZodType<Prisma.ModelMetricsWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ModelMetricsWhereInputSchema),z.lazy(() => ModelMetricsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelMetricsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelMetricsWhereInputSchema),z.lazy(() => ModelMetricsWhereInputSchema).array() ]).optional(),
  modelVersionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accuracy: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  precision: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  recall: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  f1Score: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  latencyMs: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  loss: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  validationMetrics: z.lazy(() => JsonFilterSchema).optional(),
  customMetrics: z.lazy(() => JsonNullableFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  ModelState: z.lazy(() => ModelStateListRelationFilterSchema).optional()
}).strict());

export const ModelMetricsOrderByWithAggregationInputSchema: z.ZodType<Prisma.ModelMetricsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  modelVersionId: z.lazy(() => SortOrderSchema).optional(),
  accuracy: z.lazy(() => SortOrderSchema).optional(),
  precision: z.lazy(() => SortOrderSchema).optional(),
  recall: z.lazy(() => SortOrderSchema).optional(),
  f1Score: z.lazy(() => SortOrderSchema).optional(),
  latencyMs: z.lazy(() => SortOrderSchema).optional(),
  loss: z.lazy(() => SortOrderSchema).optional(),
  validationMetrics: z.lazy(() => SortOrderSchema).optional(),
  customMetrics: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ModelMetricsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ModelMetricsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ModelMetricsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ModelMetricsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ModelMetricsSumOrderByAggregateInputSchema).optional()
}).strict();

export const ModelMetricsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ModelMetricsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ModelMetricsScalarWhereWithAggregatesInputSchema),z.lazy(() => ModelMetricsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelMetricsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelMetricsScalarWhereWithAggregatesInputSchema),z.lazy(() => ModelMetricsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  modelVersionId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  accuracy: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  precision: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  recall: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  f1Score: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  latencyMs: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  loss: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  validationMetrics: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  customMetrics: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ModelStateWhereInputSchema: z.ZodType<Prisma.ModelStateWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ModelStateWhereInputSchema),z.lazy(() => ModelStateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelStateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelStateWhereInputSchema),z.lazy(() => ModelStateWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  versionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  weights: z.lazy(() => FloatNullableListFilterSchema).optional(),
  bias: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  scaler: z.lazy(() => JsonFilterSchema).optional(),
  featureNames: z.lazy(() => StringNullableListFilterSchema).optional(),
  isTrained: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  modelType: z.union([ z.lazy(() => EnumModelTypeFilterSchema),z.lazy(() => ModelTypeSchema) ]).optional(),
  hyperparameters: z.lazy(() => JsonNullableFilterSchema).optional(),
  currentEpoch: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  trainingProgress: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lastTrainingError: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metrics: z.lazy(() => ModelMetricsListRelationFilterSchema).optional()
}).strict();

export const ModelStateOrderByWithRelationInputSchema: z.ZodType<Prisma.ModelStateOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  versionId: z.lazy(() => SortOrderSchema).optional(),
  weights: z.lazy(() => SortOrderSchema).optional(),
  bias: z.lazy(() => SortOrderSchema).optional(),
  scaler: z.lazy(() => SortOrderSchema).optional(),
  featureNames: z.lazy(() => SortOrderSchema).optional(),
  isTrained: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  modelType: z.lazy(() => SortOrderSchema).optional(),
  hyperparameters: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currentEpoch: z.lazy(() => SortOrderSchema).optional(),
  trainingProgress: z.lazy(() => SortOrderSchema).optional(),
  lastTrainingError: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metrics: z.lazy(() => ModelMetricsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ModelStateWhereUniqueInputSchema: z.ZodType<Prisma.ModelStateWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    versionId: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    versionId: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  versionId: z.string().optional(),
  AND: z.union([ z.lazy(() => ModelStateWhereInputSchema),z.lazy(() => ModelStateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelStateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelStateWhereInputSchema),z.lazy(() => ModelStateWhereInputSchema).array() ]).optional(),
  weights: z.lazy(() => FloatNullableListFilterSchema).optional(),
  bias: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  scaler: z.lazy(() => JsonFilterSchema).optional(),
  featureNames: z.lazy(() => StringNullableListFilterSchema).optional(),
  isTrained: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  modelType: z.union([ z.lazy(() => EnumModelTypeFilterSchema),z.lazy(() => ModelTypeSchema) ]).optional(),
  hyperparameters: z.lazy(() => JsonNullableFilterSchema).optional(),
  currentEpoch: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  trainingProgress: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lastTrainingError: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metrics: z.lazy(() => ModelMetricsListRelationFilterSchema).optional()
}).strict());

export const ModelStateOrderByWithAggregationInputSchema: z.ZodType<Prisma.ModelStateOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  versionId: z.lazy(() => SortOrderSchema).optional(),
  weights: z.lazy(() => SortOrderSchema).optional(),
  bias: z.lazy(() => SortOrderSchema).optional(),
  scaler: z.lazy(() => SortOrderSchema).optional(),
  featureNames: z.lazy(() => SortOrderSchema).optional(),
  isTrained: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  modelType: z.lazy(() => SortOrderSchema).optional(),
  hyperparameters: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  currentEpoch: z.lazy(() => SortOrderSchema).optional(),
  trainingProgress: z.lazy(() => SortOrderSchema).optional(),
  lastTrainingError: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => ModelStateCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ModelStateAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ModelStateMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ModelStateMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ModelStateSumOrderByAggregateInputSchema).optional()
}).strict();

export const ModelStateScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ModelStateScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ModelStateScalarWhereWithAggregatesInputSchema),z.lazy(() => ModelStateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelStateScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelStateScalarWhereWithAggregatesInputSchema),z.lazy(() => ModelStateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  versionId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  weights: z.lazy(() => FloatNullableListFilterSchema).optional(),
  bias: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  scaler: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  featureNames: z.lazy(() => StringNullableListFilterSchema).optional(),
  isTrained: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  modelType: z.union([ z.lazy(() => EnumModelTypeWithAggregatesFilterSchema),z.lazy(() => ModelTypeSchema) ]).optional(),
  hyperparameters: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  currentEpoch: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  trainingProgress: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  lastTrainingError: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const SearchEventWhereInputSchema: z.ZodType<Prisma.SearchEventWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SearchEventWhereInputSchema),z.lazy(() => SearchEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchEventWhereInputSchema),z.lazy(() => SearchEventWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  query: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  searchType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  totalHits: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  took: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  facetsUsed: z.lazy(() => JsonNullableFilterSchema).optional(),
  resultIds: z.lazy(() => JsonNullableFilterSchema).optional(),
  page: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  pageSize: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  filters: z.lazy(() => JsonNullableFilterSchema).optional(),
  BaseEvent: z.lazy(() => BaseEventListRelationFilterSchema).optional(),
  session: z.union([ z.lazy(() => SessionScalarRelationFilterSchema),z.lazy(() => SessionWhereInputSchema) ]).optional(),
  feedback: z.lazy(() => SearchFeedbackListRelationFilterSchema).optional()
}).strict();

export const SearchEventOrderByWithRelationInputSchema: z.ZodType<Prisma.SearchEventOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  query: z.lazy(() => SortOrderSchema).optional(),
  searchType: z.lazy(() => SortOrderSchema).optional(),
  totalHits: z.lazy(() => SortOrderSchema).optional(),
  took: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  facetsUsed: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultIds: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  page: z.lazy(() => SortOrderSchema).optional(),
  pageSize: z.lazy(() => SortOrderSchema).optional(),
  filters: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  BaseEvent: z.lazy(() => BaseEventOrderByRelationAggregateInputSchema).optional(),
  session: z.lazy(() => SessionOrderByWithRelationInputSchema).optional(),
  feedback: z.lazy(() => SearchFeedbackOrderByRelationAggregateInputSchema).optional()
}).strict();

export const SearchEventWhereUniqueInputSchema: z.ZodType<Prisma.SearchEventWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => SearchEventWhereInputSchema),z.lazy(() => SearchEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchEventWhereInputSchema),z.lazy(() => SearchEventWhereInputSchema).array() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  query: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  searchType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  totalHits: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  took: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  facetsUsed: z.lazy(() => JsonNullableFilterSchema).optional(),
  resultIds: z.lazy(() => JsonNullableFilterSchema).optional(),
  page: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  pageSize: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  filters: z.lazy(() => JsonNullableFilterSchema).optional(),
  BaseEvent: z.lazy(() => BaseEventListRelationFilterSchema).optional(),
  session: z.union([ z.lazy(() => SessionScalarRelationFilterSchema),z.lazy(() => SessionWhereInputSchema) ]).optional(),
  feedback: z.lazy(() => SearchFeedbackListRelationFilterSchema).optional()
}).strict());

export const SearchEventOrderByWithAggregationInputSchema: z.ZodType<Prisma.SearchEventOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  query: z.lazy(() => SortOrderSchema).optional(),
  searchType: z.lazy(() => SortOrderSchema).optional(),
  totalHits: z.lazy(() => SortOrderSchema).optional(),
  took: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  facetsUsed: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  resultIds: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  page: z.lazy(() => SortOrderSchema).optional(),
  pageSize: z.lazy(() => SortOrderSchema).optional(),
  filters: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => SearchEventCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SearchEventAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SearchEventMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SearchEventMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SearchEventSumOrderByAggregateInputSchema).optional()
}).strict();

export const SearchEventScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SearchEventScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SearchEventScalarWhereWithAggregatesInputSchema),z.lazy(() => SearchEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchEventScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchEventScalarWhereWithAggregatesInputSchema),z.lazy(() => SearchEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  query: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  searchType: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  totalHits: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  took: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  facetsUsed: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  resultIds: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  page: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  pageSize: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  filters: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional()
}).strict();

export const ABTestMetricsWhereInputSchema: z.ZodType<Prisma.ABTestMetricsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ABTestMetricsWhereInputSchema),z.lazy(() => ABTestMetricsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestMetricsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestMetricsWhereInputSchema),z.lazy(() => ABTestMetricsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  testId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  queryHash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metrics: z.lazy(() => JsonFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  test: z.union([ z.lazy(() => ABTestScalarRelationFilterSchema),z.lazy(() => ABTestWhereInputSchema) ]).optional(),
}).strict();

export const ABTestMetricsOrderByWithRelationInputSchema: z.ZodType<Prisma.ABTestMetricsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  metrics: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  test: z.lazy(() => ABTestOrderByWithRelationInputSchema).optional()
}).strict();

export const ABTestMetricsWhereUniqueInputSchema: z.ZodType<Prisma.ABTestMetricsWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => ABTestMetricsWhereInputSchema),z.lazy(() => ABTestMetricsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestMetricsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestMetricsWhereInputSchema),z.lazy(() => ABTestMetricsWhereInputSchema).array() ]).optional(),
  testId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  queryHash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metrics: z.lazy(() => JsonFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  test: z.union([ z.lazy(() => ABTestScalarRelationFilterSchema),z.lazy(() => ABTestWhereInputSchema) ]).optional(),
}).strict());

export const ABTestMetricsOrderByWithAggregationInputSchema: z.ZodType<Prisma.ABTestMetricsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  metrics: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ABTestMetricsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ABTestMetricsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ABTestMetricsMinOrderByAggregateInputSchema).optional()
}).strict();

export const ABTestMetricsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ABTestMetricsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ABTestMetricsScalarWhereWithAggregatesInputSchema),z.lazy(() => ABTestMetricsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestMetricsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestMetricsScalarWhereWithAggregatesInputSchema),z.lazy(() => ABTestMetricsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  testId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  queryHash: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  metrics: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SignalWhereInputSchema: z.ZodType<Prisma.SignalWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SignalWhereInputSchema),z.lazy(() => SignalWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SignalWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SignalWhereInputSchema),z.lazy(() => SignalWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumSignalTypeFilterSchema),z.lazy(() => SignalTypeSchema) ]).optional(),
  source: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.lazy(() => JsonFilterSchema).optional(),
  priority: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  retries: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  processed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  processedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  manual: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  strength: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  ProcessedSignal: z.lazy(() => ProcessedSignalListRelationFilterSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalListRelationFilterSchema).optional()
}).strict();

export const SignalOrderByWithRelationInputSchema: z.ZodType<Prisma.SignalOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  priority: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  retries: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  processed: z.lazy(() => SortOrderSchema).optional(),
  processedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  error: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  manual: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  strength: z.lazy(() => SortOrderSchema).optional(),
  ProcessedSignal: z.lazy(() => ProcessedSignalOrderByRelationAggregateInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalOrderByRelationAggregateInputSchema).optional()
}).strict();

export const SignalWhereUniqueInputSchema: z.ZodType<Prisma.SignalWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => SignalWhereInputSchema),z.lazy(() => SignalWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SignalWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SignalWhereInputSchema),z.lazy(() => SignalWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => EnumSignalTypeFilterSchema),z.lazy(() => SignalTypeSchema) ]).optional(),
  source: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.lazy(() => JsonFilterSchema).optional(),
  priority: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  retries: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  processed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  processedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  manual: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  strength: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  ProcessedSignal: z.lazy(() => ProcessedSignalListRelationFilterSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalListRelationFilterSchema).optional()
}).strict());

export const SignalOrderByWithAggregationInputSchema: z.ZodType<Prisma.SignalOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  priority: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  retries: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  processed: z.lazy(() => SortOrderSchema).optional(),
  processedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  error: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  manual: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  strength: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SignalCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SignalAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SignalMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SignalMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SignalSumOrderByAggregateInputSchema).optional()
}).strict();

export const SignalScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SignalScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SignalScalarWhereWithAggregatesInputSchema),z.lazy(() => SignalScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SignalScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SignalScalarWhereWithAggregatesInputSchema),z.lazy(() => SignalScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumSignalTypeWithAggregatesFilterSchema),z.lazy(() => SignalTypeSchema) ]).optional(),
  source: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  priority: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  retries: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  processed: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  processedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  error: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  manual: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  strength: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const AnalyticsMetricsWhereInputSchema: z.ZodType<Prisma.AnalyticsMetricsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AnalyticsMetricsWhereInputSchema),z.lazy(() => AnalyticsMetricsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnalyticsMetricsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnalyticsMetricsWhereInputSchema),z.lazy(() => AnalyticsMetricsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  totalSearches: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  averageLatency: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  successRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  errorRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  cacheHitRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  queryCount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  uniqueUsers: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  avgResultsPerQuery: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  clickThroughRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  conversionRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  avgRelevanceScore: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  p95Latency: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  p99Latency: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  resourceUtilization: z.lazy(() => JsonFilterSchema).optional(),
  searchTypes: z.lazy(() => JsonFilterSchema).optional(),
  timeWindow: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session: z.union([ z.lazy(() => SessionNullableScalarRelationFilterSchema),z.lazy(() => SessionWhereInputSchema) ]).optional().nullable(),
}).strict();

export const AnalyticsMetricsOrderByWithRelationInputSchema: z.ZodType<Prisma.AnalyticsMetricsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  totalSearches: z.lazy(() => SortOrderSchema).optional(),
  averageLatency: z.lazy(() => SortOrderSchema).optional(),
  successRate: z.lazy(() => SortOrderSchema).optional(),
  errorRate: z.lazy(() => SortOrderSchema).optional(),
  cacheHitRate: z.lazy(() => SortOrderSchema).optional(),
  queryCount: z.lazy(() => SortOrderSchema).optional(),
  uniqueUsers: z.lazy(() => SortOrderSchema).optional(),
  avgResultsPerQuery: z.lazy(() => SortOrderSchema).optional(),
  clickThroughRate: z.lazy(() => SortOrderSchema).optional(),
  conversionRate: z.lazy(() => SortOrderSchema).optional(),
  avgRelevanceScore: z.lazy(() => SortOrderSchema).optional(),
  p95Latency: z.lazy(() => SortOrderSchema).optional(),
  p99Latency: z.lazy(() => SortOrderSchema).optional(),
  resourceUtilization: z.lazy(() => SortOrderSchema).optional(),
  searchTypes: z.lazy(() => SortOrderSchema).optional(),
  timeWindow: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session: z.lazy(() => SessionOrderByWithRelationInputSchema).optional()
}).strict();

export const AnalyticsMetricsWhereUniqueInputSchema: z.ZodType<Prisma.AnalyticsMetricsWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AnalyticsMetricsWhereInputSchema),z.lazy(() => AnalyticsMetricsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnalyticsMetricsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnalyticsMetricsWhereInputSchema),z.lazy(() => AnalyticsMetricsWhereInputSchema).array() ]).optional(),
  totalSearches: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  averageLatency: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  successRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  errorRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  cacheHitRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  queryCount: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  uniqueUsers: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  avgResultsPerQuery: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  clickThroughRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  conversionRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  avgRelevanceScore: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  p95Latency: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  p99Latency: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  resourceUtilization: z.lazy(() => JsonFilterSchema).optional(),
  searchTypes: z.lazy(() => JsonFilterSchema).optional(),
  timeWindow: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session: z.union([ z.lazy(() => SessionNullableScalarRelationFilterSchema),z.lazy(() => SessionWhereInputSchema) ]).optional().nullable(),
}).strict());

export const AnalyticsMetricsOrderByWithAggregationInputSchema: z.ZodType<Prisma.AnalyticsMetricsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  totalSearches: z.lazy(() => SortOrderSchema).optional(),
  averageLatency: z.lazy(() => SortOrderSchema).optional(),
  successRate: z.lazy(() => SortOrderSchema).optional(),
  errorRate: z.lazy(() => SortOrderSchema).optional(),
  cacheHitRate: z.lazy(() => SortOrderSchema).optional(),
  queryCount: z.lazy(() => SortOrderSchema).optional(),
  uniqueUsers: z.lazy(() => SortOrderSchema).optional(),
  avgResultsPerQuery: z.lazy(() => SortOrderSchema).optional(),
  clickThroughRate: z.lazy(() => SortOrderSchema).optional(),
  conversionRate: z.lazy(() => SortOrderSchema).optional(),
  avgRelevanceScore: z.lazy(() => SortOrderSchema).optional(),
  p95Latency: z.lazy(() => SortOrderSchema).optional(),
  p99Latency: z.lazy(() => SortOrderSchema).optional(),
  resourceUtilization: z.lazy(() => SortOrderSchema).optional(),
  searchTypes: z.lazy(() => SortOrderSchema).optional(),
  timeWindow: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AnalyticsMetricsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AnalyticsMetricsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AnalyticsMetricsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AnalyticsMetricsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AnalyticsMetricsSumOrderByAggregateInputSchema).optional()
}).strict();

export const AnalyticsMetricsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AnalyticsMetricsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AnalyticsMetricsScalarWhereWithAggregatesInputSchema),z.lazy(() => AnalyticsMetricsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnalyticsMetricsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnalyticsMetricsScalarWhereWithAggregatesInputSchema),z.lazy(() => AnalyticsMetricsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  totalSearches: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  averageLatency: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  successRate: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  errorRate: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  cacheHitRate: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  queryCount: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  uniqueUsers: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  avgResultsPerQuery: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  clickThroughRate: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  conversionRate: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  avgRelevanceScore: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  p95Latency: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  p99Latency: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  resourceUtilization: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  searchTypes: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  timeWindow: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const AnalyticsTrendWhereInputSchema: z.ZodType<Prisma.AnalyticsTrendWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AnalyticsTrendWhereInputSchema),z.lazy(() => AnalyticsTrendWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnalyticsTrendWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnalyticsTrendWhereInputSchema),z.lazy(() => AnalyticsTrendWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metric: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  current: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  change: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  trend: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AnalyticsTrendOrderByWithRelationInputSchema: z.ZodType<Prisma.AnalyticsTrendOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  metric: z.lazy(() => SortOrderSchema).optional(),
  current: z.lazy(() => SortOrderSchema).optional(),
  change: z.lazy(() => SortOrderSchema).optional(),
  trend: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsTrendWhereUniqueInputSchema: z.ZodType<Prisma.AnalyticsTrendWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AnalyticsTrendWhereInputSchema),z.lazy(() => AnalyticsTrendWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnalyticsTrendWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnalyticsTrendWhereInputSchema),z.lazy(() => AnalyticsTrendWhereInputSchema).array() ]).optional(),
  metric: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  current: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  change: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  trend: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const AnalyticsTrendOrderByWithAggregationInputSchema: z.ZodType<Prisma.AnalyticsTrendOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  metric: z.lazy(() => SortOrderSchema).optional(),
  current: z.lazy(() => SortOrderSchema).optional(),
  change: z.lazy(() => SortOrderSchema).optional(),
  trend: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AnalyticsTrendCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AnalyticsTrendAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AnalyticsTrendMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AnalyticsTrendMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AnalyticsTrendSumOrderByAggregateInputSchema).optional()
}).strict();

export const AnalyticsTrendScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AnalyticsTrendScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AnalyticsTrendScalarWhereWithAggregatesInputSchema),z.lazy(() => AnalyticsTrendScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnalyticsTrendScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnalyticsTrendScalarWhereWithAggregatesInputSchema),z.lazy(() => AnalyticsTrendScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  metric: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  current: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  change: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  trend: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PerformanceInsightWhereInputSchema: z.ZodType<Prisma.PerformanceInsightWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PerformanceInsightWhereInputSchema),z.lazy(() => PerformanceInsightWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PerformanceInsightWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PerformanceInsightWhereInputSchema),z.lazy(() => PerformanceInsightWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  severity: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metric: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currentValue: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  recommendedValue: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const PerformanceInsightOrderByWithRelationInputSchema: z.ZodType<Prisma.PerformanceInsightOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  severity: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  metric: z.lazy(() => SortOrderSchema).optional(),
  currentValue: z.lazy(() => SortOrderSchema).optional(),
  recommendedValue: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PerformanceInsightWhereUniqueInputSchema: z.ZodType<Prisma.PerformanceInsightWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => PerformanceInsightWhereInputSchema),z.lazy(() => PerformanceInsightWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PerformanceInsightWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PerformanceInsightWhereInputSchema),z.lazy(() => PerformanceInsightWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  severity: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metric: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currentValue: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  recommendedValue: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const PerformanceInsightOrderByWithAggregationInputSchema: z.ZodType<Prisma.PerformanceInsightOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  severity: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  metric: z.lazy(() => SortOrderSchema).optional(),
  currentValue: z.lazy(() => SortOrderSchema).optional(),
  recommendedValue: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PerformanceInsightCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PerformanceInsightAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PerformanceInsightMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PerformanceInsightMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PerformanceInsightSumOrderByAggregateInputSchema).optional()
}).strict();

export const PerformanceInsightScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PerformanceInsightScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PerformanceInsightScalarWhereWithAggregatesInputSchema),z.lazy(() => PerformanceInsightScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PerformanceInsightScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PerformanceInsightScalarWhereWithAggregatesInputSchema),z.lazy(() => PerformanceInsightScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  severity: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  message: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  metric: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  currentValue: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  recommendedValue: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  action: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AnalyticsReportWhereInputSchema: z.ZodType<Prisma.AnalyticsReportWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AnalyticsReportWhereInputSchema),z.lazy(() => AnalyticsReportWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnalyticsReportWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnalyticsReportWhereInputSchema),z.lazy(() => AnalyticsReportWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timeWindow: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  generatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metrics: z.lazy(() => JsonFilterSchema).optional(),
  trends: z.lazy(() => JsonFilterSchema).optional(),
  insights: z.lazy(() => JsonFilterSchema).optional(),
  popularQueries: z.lazy(() => JsonFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AnalyticsReportOrderByWithRelationInputSchema: z.ZodType<Prisma.AnalyticsReportOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  timeWindow: z.lazy(() => SortOrderSchema).optional(),
  generatedAt: z.lazy(() => SortOrderSchema).optional(),
  metrics: z.lazy(() => SortOrderSchema).optional(),
  trends: z.lazy(() => SortOrderSchema).optional(),
  insights: z.lazy(() => SortOrderSchema).optional(),
  popularQueries: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsReportWhereUniqueInputSchema: z.ZodType<Prisma.AnalyticsReportWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AnalyticsReportWhereInputSchema),z.lazy(() => AnalyticsReportWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnalyticsReportWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnalyticsReportWhereInputSchema),z.lazy(() => AnalyticsReportWhereInputSchema).array() ]).optional(),
  timeWindow: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  generatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metrics: z.lazy(() => JsonFilterSchema).optional(),
  trends: z.lazy(() => JsonFilterSchema).optional(),
  insights: z.lazy(() => JsonFilterSchema).optional(),
  popularQueries: z.lazy(() => JsonFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const AnalyticsReportOrderByWithAggregationInputSchema: z.ZodType<Prisma.AnalyticsReportOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  timeWindow: z.lazy(() => SortOrderSchema).optional(),
  generatedAt: z.lazy(() => SortOrderSchema).optional(),
  metrics: z.lazy(() => SortOrderSchema).optional(),
  trends: z.lazy(() => SortOrderSchema).optional(),
  insights: z.lazy(() => SortOrderSchema).optional(),
  popularQueries: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AnalyticsReportCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AnalyticsReportMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AnalyticsReportMinOrderByAggregateInputSchema).optional()
}).strict();

export const AnalyticsReportScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AnalyticsReportScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AnalyticsReportScalarWhereWithAggregatesInputSchema),z.lazy(() => AnalyticsReportScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnalyticsReportScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnalyticsReportScalarWhereWithAggregatesInputSchema),z.lazy(() => AnalyticsReportScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  timeWindow: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  generatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  metrics: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  trends: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  insights: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  popularQueries: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AdaptationSuggestionWhereInputSchema: z.ZodType<Prisma.AdaptationSuggestionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AdaptationSuggestionWhereInputSchema),z.lazy(() => AdaptationSuggestionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdaptationSuggestionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdaptationSuggestionWhereInputSchema),z.lazy(() => AdaptationSuggestionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  queryHash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  patterns: z.lazy(() => JsonFilterSchema).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AdaptationSuggestionOrderByWithRelationInputSchema: z.ZodType<Prisma.AdaptationSuggestionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  patterns: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdaptationSuggestionWhereUniqueInputSchema: z.ZodType<Prisma.AdaptationSuggestionWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => AdaptationSuggestionWhereInputSchema),z.lazy(() => AdaptationSuggestionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdaptationSuggestionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdaptationSuggestionWhereInputSchema),z.lazy(() => AdaptationSuggestionWhereInputSchema).array() ]).optional(),
  queryHash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  patterns: z.lazy(() => JsonFilterSchema).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const AdaptationSuggestionOrderByWithAggregationInputSchema: z.ZodType<Prisma.AdaptationSuggestionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  patterns: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AdaptationSuggestionCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AdaptationSuggestionAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AdaptationSuggestionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AdaptationSuggestionMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AdaptationSuggestionSumOrderByAggregateInputSchema).optional()
}).strict();

export const AdaptationSuggestionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AdaptationSuggestionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AdaptationSuggestionScalarWhereWithAggregatesInputSchema),z.lazy(() => AdaptationSuggestionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdaptationSuggestionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdaptationSuggestionScalarWhereWithAggregatesInputSchema),z.lazy(() => AdaptationSuggestionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  queryHash: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  patterns: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  confidence: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  metadata: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LearningMetricWhereInputSchema: z.ZodType<Prisma.LearningMetricWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LearningMetricWhereInputSchema),z.lazy(() => LearningMetricWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LearningMetricWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LearningMetricWhereInputSchema),z.lazy(() => LearningMetricWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumMetricTypeFilterSchema),z.lazy(() => MetricTypeSchema) ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  interval: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  modelId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  timeframe: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  aggregated: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  count: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  model: z.union([ z.lazy(() => ModelConfigNullableScalarRelationFilterSchema),z.lazy(() => ModelConfigWhereInputSchema) ]).optional().nullable(),
  session: z.union([ z.lazy(() => SessionNullableScalarRelationFilterSchema),z.lazy(() => SessionWhereInputSchema) ]).optional().nullable(),
}).strict();

export const LearningMetricOrderByWithRelationInputSchema: z.ZodType<Prisma.LearningMetricOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  interval: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  modelId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timeframe: z.lazy(() => SortOrderSchema).optional(),
  aggregated: z.lazy(() => SortOrderSchema).optional(),
  count: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  model: z.lazy(() => ModelConfigOrderByWithRelationInputSchema).optional(),
  session: z.lazy(() => SessionOrderByWithRelationInputSchema).optional()
}).strict();

export const LearningMetricWhereUniqueInputSchema: z.ZodType<Prisma.LearningMetricWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => LearningMetricWhereInputSchema),z.lazy(() => LearningMetricWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LearningMetricWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LearningMetricWhereInputSchema),z.lazy(() => LearningMetricWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => EnumMetricTypeFilterSchema),z.lazy(() => MetricTypeSchema) ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  interval: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  modelId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  timeframe: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  aggregated: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  count: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  model: z.union([ z.lazy(() => ModelConfigNullableScalarRelationFilterSchema),z.lazy(() => ModelConfigWhereInputSchema) ]).optional().nullable(),
  session: z.union([ z.lazy(() => SessionNullableScalarRelationFilterSchema),z.lazy(() => SessionWhereInputSchema) ]).optional().nullable(),
}).strict());

export const LearningMetricOrderByWithAggregationInputSchema: z.ZodType<Prisma.LearningMetricOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  interval: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  modelId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  timeframe: z.lazy(() => SortOrderSchema).optional(),
  aggregated: z.lazy(() => SortOrderSchema).optional(),
  count: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => LearningMetricCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => LearningMetricAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LearningMetricMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LearningMetricMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => LearningMetricSumOrderByAggregateInputSchema).optional()
}).strict();

export const LearningMetricScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LearningMetricScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LearningMetricScalarWhereWithAggregatesInputSchema),z.lazy(() => LearningMetricScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LearningMetricScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LearningMetricScalarWhereWithAggregatesInputSchema),z.lazy(() => LearningMetricScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumMetricTypeWithAggregatesFilterSchema),z.lazy(() => MetricTypeSchema) ]).optional(),
  value: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  interval: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  modelId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  timeframe: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  aggregated: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  count: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LearningEventWhereInputSchema: z.ZodType<Prisma.LearningEventWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LearningEventWhereInputSchema),z.lazy(() => LearningEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LearningEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LearningEventWhereInputSchema),z.lazy(() => LearningEventWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumLearningEventTypeFilterSchema),z.lazy(() => LearningEventTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumLearningEventStatusFilterSchema),z.lazy(() => LearningEventStatusSchema) ]).optional(),
  priority: z.union([ z.lazy(() => EnumLearningEventPriorityFilterSchema),z.lazy(() => LearningEventPrioritySchema) ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  processedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  correlationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  clientId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  environment: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  version: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  retryCount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  patterns: z.lazy(() => LearningPatternListRelationFilterSchema).optional()
}).strict();

export const LearningEventOrderByWithRelationInputSchema: z.ZodType<Prisma.LearningEventOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  processedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  correlationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sessionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  clientId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  environment: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  version: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  error: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  retryCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  patterns: z.lazy(() => LearningPatternOrderByRelationAggregateInputSchema).optional()
}).strict();

export const LearningEventWhereUniqueInputSchema: z.ZodType<Prisma.LearningEventWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => LearningEventWhereInputSchema),z.lazy(() => LearningEventWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LearningEventWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LearningEventWhereInputSchema),z.lazy(() => LearningEventWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => EnumLearningEventTypeFilterSchema),z.lazy(() => LearningEventTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumLearningEventStatusFilterSchema),z.lazy(() => LearningEventStatusSchema) ]).optional(),
  priority: z.union([ z.lazy(() => EnumLearningEventPriorityFilterSchema),z.lazy(() => LearningEventPrioritySchema) ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  processedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  correlationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  clientId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  environment: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  version: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  retryCount: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  patterns: z.lazy(() => LearningPatternListRelationFilterSchema).optional()
}).strict());

export const LearningEventOrderByWithAggregationInputSchema: z.ZodType<Prisma.LearningEventOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  processedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  correlationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  sessionId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  userId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  clientId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  environment: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  version: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  error: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  retryCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => LearningEventCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => LearningEventAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LearningEventMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LearningEventMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => LearningEventSumOrderByAggregateInputSchema).optional()
}).strict();

export const LearningEventScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LearningEventScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LearningEventScalarWhereWithAggregatesInputSchema),z.lazy(() => LearningEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LearningEventScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LearningEventScalarWhereWithAggregatesInputSchema),z.lazy(() => LearningEventScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumLearningEventTypeWithAggregatesFilterSchema),z.lazy(() => LearningEventTypeSchema) ]).optional(),
  status: z.union([ z.lazy(() => EnumLearningEventStatusWithAggregatesFilterSchema),z.lazy(() => LearningEventStatusSchema) ]).optional(),
  priority: z.union([ z.lazy(() => EnumLearningEventPriorityWithAggregatesFilterSchema),z.lazy(() => LearningEventPrioritySchema) ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  processedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  correlationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sessionId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  userId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  clientId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  environment: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  version: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tags: z.lazy(() => StringNullableListFilterSchema).optional(),
  error: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  retryCount: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LearningPatternWhereInputSchema: z.ZodType<Prisma.LearningPatternWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LearningPatternWhereInputSchema),z.lazy(() => LearningPatternWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LearningPatternWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LearningPatternWhereInputSchema),z.lazy(() => LearningPatternWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  features: z.lazy(() => JsonFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  event: z.union([ z.lazy(() => LearningEventScalarRelationFilterSchema),z.lazy(() => LearningEventWhereInputSchema) ]).optional(),
}).strict();

export const LearningPatternOrderByWithRelationInputSchema: z.ZodType<Prisma.LearningPatternOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  features: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  event: z.lazy(() => LearningEventOrderByWithRelationInputSchema).optional()
}).strict();

export const LearningPatternWhereUniqueInputSchema: z.ZodType<Prisma.LearningPatternWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => LearningPatternWhereInputSchema),z.lazy(() => LearningPatternWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LearningPatternWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LearningPatternWhereInputSchema),z.lazy(() => LearningPatternWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  features: z.lazy(() => JsonFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  event: z.union([ z.lazy(() => LearningEventScalarRelationFilterSchema),z.lazy(() => LearningEventWhereInputSchema) ]).optional(),
}).strict());

export const LearningPatternOrderByWithAggregationInputSchema: z.ZodType<Prisma.LearningPatternOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  features: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => LearningPatternCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => LearningPatternAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => LearningPatternMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => LearningPatternMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => LearningPatternSumOrderByAggregateInputSchema).optional()
}).strict();

export const LearningPatternScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.LearningPatternScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => LearningPatternScalarWhereWithAggregatesInputSchema),z.lazy(() => LearningPatternScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => LearningPatternScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LearningPatternScalarWhereWithAggregatesInputSchema),z.lazy(() => LearningPatternScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  features: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  eventId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EngineStateWhereInputSchema: z.ZodType<Prisma.EngineStateWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EngineStateWhereInputSchema),z.lazy(() => EngineStateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineStateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineStateWhereInputSchema),z.lazy(() => EngineStateWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currentPhase: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lastActive: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EngineStateOrderByWithRelationInputSchema: z.ZodType<Prisma.EngineStateOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  currentPhase: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  lastActive: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineStateWhereUniqueInputSchema: z.ZodType<Prisma.EngineStateWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => EngineStateWhereInputSchema),z.lazy(() => EngineStateWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineStateWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineStateWhereInputSchema),z.lazy(() => EngineStateWhereInputSchema).array() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  currentPhase: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lastActive: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const EngineStateOrderByWithAggregationInputSchema: z.ZodType<Prisma.EngineStateOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  currentPhase: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  lastActive: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EngineStateCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => EngineStateAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EngineStateMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EngineStateMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => EngineStateSumOrderByAggregateInputSchema).optional()
}).strict();

export const EngineStateScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EngineStateScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EngineStateScalarWhereWithAggregatesInputSchema),z.lazy(() => EngineStateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineStateScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineStateScalarWhereWithAggregatesInputSchema),z.lazy(() => EngineStateScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  currentPhase: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  confidence: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  lastActive: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EngineOperationWhereInputSchema: z.ZodType<Prisma.EngineOperationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EngineOperationWhereInputSchema),z.lazy(() => EngineOperationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineOperationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineOperationWhereInputSchema),z.lazy(() => EngineOperationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  metrics: z.lazy(() => JsonNullableFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  EngineLearningResult: z.lazy(() => EngineLearningResultListRelationFilterSchema).optional()
}).strict();

export const EngineOperationOrderByWithRelationInputSchema: z.ZodType<Prisma.EngineOperationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  error: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  EngineLearningResult: z.lazy(() => EngineLearningResultOrderByRelationAggregateInputSchema).optional()
}).strict();

export const EngineOperationWhereUniqueInputSchema: z.ZodType<Prisma.EngineOperationWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => EngineOperationWhereInputSchema),z.lazy(() => EngineOperationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineOperationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineOperationWhereInputSchema),z.lazy(() => EngineOperationWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  metrics: z.lazy(() => JsonNullableFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  EngineLearningResult: z.lazy(() => EngineLearningResultListRelationFilterSchema).optional()
}).strict());

export const EngineOperationOrderByWithAggregationInputSchema: z.ZodType<Prisma.EngineOperationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  error: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EngineOperationCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EngineOperationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EngineOperationMinOrderByAggregateInputSchema).optional()
}).strict();

export const EngineOperationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EngineOperationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EngineOperationScalarWhereWithAggregatesInputSchema),z.lazy(() => EngineOperationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineOperationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineOperationScalarWhereWithAggregatesInputSchema),z.lazy(() => EngineOperationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  startTime: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  endTime: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  metrics: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  error: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EngineMetricWhereInputSchema: z.ZodType<Prisma.EngineMetricWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EngineMetricWhereInputSchema),z.lazy(() => EngineMetricWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineMetricWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineMetricWhereInputSchema),z.lazy(() => EngineMetricWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumMetricTypeFilterSchema),z.lazy(() => MetricTypeSchema) ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  operationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const EngineMetricOrderByWithRelationInputSchema: z.ZodType<Prisma.EngineMetricOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  operationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const EngineMetricWhereUniqueInputSchema: z.ZodType<Prisma.EngineMetricWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => EngineMetricWhereInputSchema),z.lazy(() => EngineMetricWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineMetricWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineMetricWhereInputSchema),z.lazy(() => EngineMetricWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => EnumMetricTypeFilterSchema),z.lazy(() => MetricTypeSchema) ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  operationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict());

export const EngineMetricOrderByWithAggregationInputSchema: z.ZodType<Prisma.EngineMetricOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  operationId: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => EngineMetricCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => EngineMetricAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EngineMetricMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EngineMetricMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => EngineMetricSumOrderByAggregateInputSchema).optional()
}).strict();

export const EngineMetricScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EngineMetricScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EngineMetricScalarWhereWithAggregatesInputSchema),z.lazy(() => EngineMetricScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineMetricScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineMetricScalarWhereWithAggregatesInputSchema),z.lazy(() => EngineMetricScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumMetricTypeWithAggregatesFilterSchema),z.lazy(() => MetricTypeSchema) ]).optional(),
  value: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  operationId: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const EngineLearningResultWhereInputSchema: z.ZodType<Prisma.EngineLearningResultWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EngineLearningResultWhereInputSchema),z.lazy(() => EngineLearningResultWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineLearningResultWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineLearningResultWhereInputSchema),z.lazy(() => EngineLearningResultWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  patterns: z.lazy(() => JsonFilterSchema).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  performance: z.lazy(() => JsonNullableFilterSchema).optional(),
  validatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  abTestMetrics: z.lazy(() => JsonNullableFilterSchema).optional(),
  operationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  operation: z.union([ z.lazy(() => EngineOperationScalarRelationFilterSchema),z.lazy(() => EngineOperationWhereInputSchema) ]).optional(),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyListRelationFilterSchema).optional(),
  recommendations: z.lazy(() => EngineRecommendationListRelationFilterSchema).optional()
}).strict();

export const EngineLearningResultOrderByWithRelationInputSchema: z.ZodType<Prisma.EngineLearningResultOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  patterns: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  performance: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  validatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  abTestMetrics: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  operationId: z.lazy(() => SortOrderSchema).optional(),
  operation: z.lazy(() => EngineOperationOrderByWithRelationInputSchema).optional(),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyOrderByRelationAggregateInputSchema).optional(),
  recommendations: z.lazy(() => EngineRecommendationOrderByRelationAggregateInputSchema).optional()
}).strict();

export const EngineLearningResultWhereUniqueInputSchema: z.ZodType<Prisma.EngineLearningResultWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => EngineLearningResultWhereInputSchema),z.lazy(() => EngineLearningResultWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineLearningResultWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineLearningResultWhereInputSchema),z.lazy(() => EngineLearningResultWhereInputSchema).array() ]).optional(),
  patterns: z.lazy(() => JsonFilterSchema).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  performance: z.lazy(() => JsonNullableFilterSchema).optional(),
  validatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  abTestMetrics: z.lazy(() => JsonNullableFilterSchema).optional(),
  operationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  operation: z.union([ z.lazy(() => EngineOperationScalarRelationFilterSchema),z.lazy(() => EngineOperationWhereInputSchema) ]).optional(),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyListRelationFilterSchema).optional(),
  recommendations: z.lazy(() => EngineRecommendationListRelationFilterSchema).optional()
}).strict());

export const EngineLearningResultOrderByWithAggregationInputSchema: z.ZodType<Prisma.EngineLearningResultOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  patterns: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  performance: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  validatedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  abTestMetrics: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  operationId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EngineLearningResultCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => EngineLearningResultAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EngineLearningResultMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EngineLearningResultMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => EngineLearningResultSumOrderByAggregateInputSchema).optional()
}).strict();

export const EngineLearningResultScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EngineLearningResultScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EngineLearningResultScalarWhereWithAggregatesInputSchema),z.lazy(() => EngineLearningResultScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineLearningResultScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineLearningResultScalarWhereWithAggregatesInputSchema),z.lazy(() => EngineLearningResultScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  patterns: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  confidence: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  metadata: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  performance: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  validatedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  abTestMetrics: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  operationId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const EngineOptimizationStrategyWhereInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EngineOptimizationStrategyWhereInputSchema),z.lazy(() => EngineOptimizationStrategyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineOptimizationStrategyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineOptimizationStrategyWhereInputSchema),z.lazy(() => EngineOptimizationStrategyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumEngineOptimizationTypeFilterSchema),z.lazy(() => EngineOptimizationTypeSchema) ]).optional(),
  priority: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  impact: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  learningResultId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  learningResult: z.union([ z.lazy(() => EngineLearningResultScalarRelationFilterSchema),z.lazy(() => EngineLearningResultWhereInputSchema) ]).optional(),
}).strict();

export const EngineOptimizationStrategyOrderByWithRelationInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  impact: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  learningResultId: z.lazy(() => SortOrderSchema).optional(),
  learningResult: z.lazy(() => EngineLearningResultOrderByWithRelationInputSchema).optional()
}).strict();

export const EngineOptimizationStrategyWhereUniqueInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => EngineOptimizationStrategyWhereInputSchema),z.lazy(() => EngineOptimizationStrategyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineOptimizationStrategyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineOptimizationStrategyWhereInputSchema),z.lazy(() => EngineOptimizationStrategyWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => EnumEngineOptimizationTypeFilterSchema),z.lazy(() => EngineOptimizationTypeSchema) ]).optional(),
  priority: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  impact: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  learningResultId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  learningResult: z.union([ z.lazy(() => EngineLearningResultScalarRelationFilterSchema),z.lazy(() => EngineLearningResultWhereInputSchema) ]).optional(),
}).strict());

export const EngineOptimizationStrategyOrderByWithAggregationInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  impact: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  learningResultId: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EngineOptimizationStrategyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => EngineOptimizationStrategyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EngineOptimizationStrategyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EngineOptimizationStrategyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => EngineOptimizationStrategySumOrderByAggregateInputSchema).optional()
}).strict();

export const EngineOptimizationStrategyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EngineOptimizationStrategyScalarWhereWithAggregatesInputSchema),z.lazy(() => EngineOptimizationStrategyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineOptimizationStrategyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineOptimizationStrategyScalarWhereWithAggregatesInputSchema),z.lazy(() => EngineOptimizationStrategyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumEngineOptimizationTypeWithAggregatesFilterSchema),z.lazy(() => EngineOptimizationTypeSchema) ]).optional(),
  priority: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  impact: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  metadata: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  learningResultId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const EngineConfidenceScoreWhereInputSchema: z.ZodType<Prisma.EngineConfidenceScoreWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EngineConfidenceScoreWhereInputSchema),z.lazy(() => EngineConfidenceScoreWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineConfidenceScoreWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineConfidenceScoreWhereInputSchema),z.lazy(() => EngineConfidenceScoreWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  factors: z.lazy(() => JsonFilterSchema).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EngineConfidenceScoreOrderByWithRelationInputSchema: z.ZodType<Prisma.EngineConfidenceScoreOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  factors: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineConfidenceScoreWhereUniqueInputSchema: z.ZodType<Prisma.EngineConfidenceScoreWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => EngineConfidenceScoreWhereInputSchema),z.lazy(() => EngineConfidenceScoreWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineConfidenceScoreWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineConfidenceScoreWhereInputSchema),z.lazy(() => EngineConfidenceScoreWhereInputSchema).array() ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  factors: z.lazy(() => JsonFilterSchema).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const EngineConfidenceScoreOrderByWithAggregationInputSchema: z.ZodType<Prisma.EngineConfidenceScoreOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  factors: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EngineConfidenceScoreCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => EngineConfidenceScoreAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EngineConfidenceScoreMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EngineConfidenceScoreMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => EngineConfidenceScoreSumOrderByAggregateInputSchema).optional()
}).strict();

export const EngineConfidenceScoreScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EngineConfidenceScoreScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EngineConfidenceScoreScalarWhereWithAggregatesInputSchema),z.lazy(() => EngineConfidenceScoreScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineConfidenceScoreScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineConfidenceScoreScalarWhereWithAggregatesInputSchema),z.lazy(() => EngineConfidenceScoreScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  factors: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  metadata: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SearchWeightsWhereInputSchema: z.ZodType<Prisma.SearchWeightsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SearchWeightsWhereInputSchema),z.lazy(() => SearchWeightsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchWeightsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchWeightsWhereInputSchema),z.lazy(() => SearchWeightsWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  titleWeight: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  contentWeight: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  tagWeight: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SearchWeightsOrderByWithRelationInputSchema: z.ZodType<Prisma.SearchWeightsOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  titleWeight: z.lazy(() => SortOrderSchema).optional(),
  contentWeight: z.lazy(() => SortOrderSchema).optional(),
  tagWeight: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchWeightsWhereUniqueInputSchema: z.ZodType<Prisma.SearchWeightsWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => SearchWeightsWhereInputSchema),z.lazy(() => SearchWeightsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchWeightsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchWeightsWhereInputSchema),z.lazy(() => SearchWeightsWhereInputSchema).array() ]).optional(),
  titleWeight: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  contentWeight: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  tagWeight: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  active: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const SearchWeightsOrderByWithAggregationInputSchema: z.ZodType<Prisma.SearchWeightsOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  titleWeight: z.lazy(() => SortOrderSchema).optional(),
  contentWeight: z.lazy(() => SortOrderSchema).optional(),
  tagWeight: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SearchWeightsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SearchWeightsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SearchWeightsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SearchWeightsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SearchWeightsSumOrderByAggregateInputSchema).optional()
}).strict();

export const SearchWeightsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SearchWeightsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SearchWeightsScalarWhereWithAggregatesInputSchema),z.lazy(() => SearchWeightsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchWeightsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchWeightsScalarWhereWithAggregatesInputSchema),z.lazy(() => SearchWeightsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  titleWeight: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  contentWeight: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  tagWeight: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  active: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  metadata: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SearchConfigWhereInputSchema: z.ZodType<Prisma.SearchConfigWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SearchConfigWhereInputSchema),z.lazy(() => SearchConfigWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchConfigWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchConfigWhereInputSchema),z.lazy(() => SearchConfigWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  key: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SearchConfigOrderByWithRelationInputSchema: z.ZodType<Prisma.SearchConfigOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchConfigWhereUniqueInputSchema: z.ZodType<Prisma.SearchConfigWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    key: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    key: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  key: z.string().optional(),
  AND: z.union([ z.lazy(() => SearchConfigWhereInputSchema),z.lazy(() => SearchConfigWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchConfigWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchConfigWhereInputSchema),z.lazy(() => SearchConfigWhereInputSchema).array() ]).optional(),
  value: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const SearchConfigOrderByWithAggregationInputSchema: z.ZodType<Prisma.SearchConfigOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SearchConfigCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SearchConfigMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SearchConfigMinOrderByAggregateInputSchema).optional()
}).strict();

export const SearchConfigScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SearchConfigScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SearchConfigScalarWhereWithAggregatesInputSchema),z.lazy(() => SearchConfigScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchConfigScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchConfigScalarWhereWithAggregatesInputSchema),z.lazy(() => SearchConfigScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  key: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ExperimentConfigWhereInputSchema: z.ZodType<Prisma.ExperimentConfigWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ExperimentConfigWhereInputSchema),z.lazy(() => ExperimentConfigWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExperimentConfigWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExperimentConfigWhereInputSchema),z.lazy(() => ExperimentConfigWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  key: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.lazy(() => JsonFilterSchema).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ExperimentConfigOrderByWithRelationInputSchema: z.ZodType<Prisma.ExperimentConfigOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentConfigWhereUniqueInputSchema: z.ZodType<Prisma.ExperimentConfigWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    key: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    key: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  key: z.string().optional(),
  AND: z.union([ z.lazy(() => ExperimentConfigWhereInputSchema),z.lazy(() => ExperimentConfigWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExperimentConfigWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExperimentConfigWhereInputSchema),z.lazy(() => ExperimentConfigWhereInputSchema).array() ]).optional(),
  value: z.lazy(() => JsonFilterSchema).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const ExperimentConfigOrderByWithAggregationInputSchema: z.ZodType<Prisma.ExperimentConfigOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ExperimentConfigCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ExperimentConfigMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ExperimentConfigMinOrderByAggregateInputSchema).optional()
}).strict();

export const ExperimentConfigScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ExperimentConfigScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ExperimentConfigScalarWhereWithAggregatesInputSchema),z.lazy(() => ExperimentConfigScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ExperimentConfigScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ExperimentConfigScalarWhereWithAggregatesInputSchema),z.lazy(() => ExperimentConfigScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  key: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  value: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EngineRecommendationWhereInputSchema: z.ZodType<Prisma.EngineRecommendationWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EngineRecommendationWhereInputSchema),z.lazy(() => EngineRecommendationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineRecommendationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineRecommendationWhereInputSchema),z.lazy(() => EngineRecommendationWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumEngineOptimizationTypeFilterSchema),z.lazy(() => EngineOptimizationTypeSchema) ]).optional(),
  priority: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  impact: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  learningResultId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  learningResult: z.union([ z.lazy(() => EngineLearningResultScalarRelationFilterSchema),z.lazy(() => EngineLearningResultWhereInputSchema) ]).optional(),
}).strict();

export const EngineRecommendationOrderByWithRelationInputSchema: z.ZodType<Prisma.EngineRecommendationOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  impact: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  learningResultId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  learningResult: z.lazy(() => EngineLearningResultOrderByWithRelationInputSchema).optional()
}).strict();

export const EngineRecommendationWhereUniqueInputSchema: z.ZodType<Prisma.EngineRecommendationWhereUniqueInput> = z.object({
  id: z.string().cuid()
})
.and(z.object({
  id: z.string().cuid().optional(),
  AND: z.union([ z.lazy(() => EngineRecommendationWhereInputSchema),z.lazy(() => EngineRecommendationWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineRecommendationWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineRecommendationWhereInputSchema),z.lazy(() => EngineRecommendationWhereInputSchema).array() ]).optional(),
  type: z.union([ z.lazy(() => EnumEngineOptimizationTypeFilterSchema),z.lazy(() => EngineOptimizationTypeSchema) ]).optional(),
  priority: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  impact: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  learningResultId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  learningResult: z.union([ z.lazy(() => EngineLearningResultScalarRelationFilterSchema),z.lazy(() => EngineLearningResultWhereInputSchema) ]).optional(),
}).strict());

export const EngineRecommendationOrderByWithAggregationInputSchema: z.ZodType<Prisma.EngineRecommendationOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  impact: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  learningResultId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => EngineRecommendationCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => EngineRecommendationAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => EngineRecommendationMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => EngineRecommendationMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => EngineRecommendationSumOrderByAggregateInputSchema).optional()
}).strict();

export const EngineRecommendationScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.EngineRecommendationScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => EngineRecommendationScalarWhereWithAggregatesInputSchema),z.lazy(() => EngineRecommendationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineRecommendationScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineRecommendationScalarWhereWithAggregatesInputSchema),z.lazy(() => EngineRecommendationScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumEngineOptimizationTypeWithAggregatesFilterSchema),z.lazy(() => EngineOptimizationTypeSchema) ]).optional(),
  priority: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  impact: z.union([ z.lazy(() => FloatWithAggregatesFilterSchema),z.number() ]).optional(),
  metadata: z.lazy(() => JsonWithAggregatesFilterSchema).optional(),
  learningResultId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const IndexWhereInputSchema: z.ZodType<Prisma.IndexWhereInput> = z.object({
  AND: z.union([ z.lazy(() => IndexWhereInputSchema),z.lazy(() => IndexWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => IndexWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IndexWhereInputSchema),z.lazy(() => IndexWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  settings: z.lazy(() => JsonNullableFilterSchema).optional(),
  mappings: z.lazy(() => JsonNullableFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  doc_count: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  size_bytes: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  health: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const IndexOrderByWithRelationInputSchema: z.ZodType<Prisma.IndexOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  settings: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mappings: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  doc_count: z.lazy(() => SortOrderSchema).optional(),
  size_bytes: z.lazy(() => SortOrderSchema).optional(),
  health: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IndexWhereUniqueInputSchema: z.ZodType<Prisma.IndexWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    name: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    name: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional(),
  AND: z.union([ z.lazy(() => IndexWhereInputSchema),z.lazy(() => IndexWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => IndexWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IndexWhereInputSchema),z.lazy(() => IndexWhereInputSchema).array() ]).optional(),
  status: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  settings: z.lazy(() => JsonNullableFilterSchema).optional(),
  mappings: z.lazy(() => JsonNullableFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  doc_count: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  size_bytes: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
  health: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict());

export const IndexOrderByWithAggregationInputSchema: z.ZodType<Prisma.IndexOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  settings: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  mappings: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  doc_count: z.lazy(() => SortOrderSchema).optional(),
  size_bytes: z.lazy(() => SortOrderSchema).optional(),
  health: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => IndexCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => IndexAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => IndexMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => IndexMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => IndexSumOrderByAggregateInputSchema).optional()
}).strict();

export const IndexScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.IndexScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => IndexScalarWhereWithAggregatesInputSchema),z.lazy(() => IndexScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => IndexScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => IndexScalarWhereWithAggregatesInputSchema),z.lazy(() => IndexScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  status: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  settings: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  mappings: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  created_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updated_at: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  deleted_at: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  doc_count: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  size_bytes: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
  health: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const UserWhereInputSchema: z.ZodType<Prisma.UserWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  sessions: z.lazy(() => AuthSessionListRelationFilterSchema).optional()
}).strict();

export const UserOrderByWithRelationInputSchema: z.ZodType<Prisma.UserOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountOrderByRelationAggregateInputSchema).optional(),
  sessions: z.lazy(() => AuthSessionOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UserWhereUniqueInputSchema: z.ZodType<Prisma.UserWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    email: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    email: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  email: z.string().optional(),
  AND: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserWhereInputSchema),z.lazy(() => UserWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  password: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  accounts: z.lazy(() => AccountListRelationFilterSchema).optional(),
  sessions: z.lazy(() => AuthSessionListRelationFilterSchema).optional()
}).strict());

export const UserOrderByWithAggregationInputSchema: z.ZodType<Prisma.UserOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  image: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UserCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UserMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UserMinOrderByAggregateInputSchema).optional()
}).strict();

export const UserScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UserScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UserScalarWhereWithAggregatesInputSchema),z.lazy(() => UserScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  password: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  emailVerified: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  image: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const AccountWhereInputSchema: z.ZodType<Prisma.AccountWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const AccountOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  access_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expires_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const AccountWhereUniqueInputSchema: z.ZodType<Prisma.AccountWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    provider_providerAccountId: z.lazy(() => AccountProviderProviderAccountIdCompoundUniqueInputSchema)
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    provider_providerAccountId: z.lazy(() => AccountProviderProviderAccountIdCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  provider_providerAccountId: z.lazy(() => AccountProviderProviderAccountIdCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountWhereInputSchema),z.lazy(() => AccountWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const AccountOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  access_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  expires_at: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  token_type: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  scope: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  id_token: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  session_state: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AccountCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => AccountAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => AccountSumOrderByAggregateInputSchema).optional()
}).strict();

export const AccountScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const AuthSessionWhereInputSchema: z.ZodType<Prisma.AuthSessionWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AuthSessionWhereInputSchema),z.lazy(() => AuthSessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuthSessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuthSessionWhereInputSchema),z.lazy(() => AuthSessionWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionToken: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict();

export const AuthSessionOrderByWithRelationInputSchema: z.ZodType<Prisma.AuthSessionOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  user: z.lazy(() => UserOrderByWithRelationInputSchema).optional()
}).strict();

export const AuthSessionWhereUniqueInputSchema: z.ZodType<Prisma.AuthSessionWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    sessionToken: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    sessionToken: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  sessionToken: z.string().optional(),
  AND: z.union([ z.lazy(() => AuthSessionWhereInputSchema),z.lazy(() => AuthSessionWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuthSessionWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuthSessionWhereInputSchema),z.lazy(() => AuthSessionWhereInputSchema).array() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  user: z.union([ z.lazy(() => UserScalarRelationFilterSchema),z.lazy(() => UserWhereInputSchema) ]).optional(),
}).strict());

export const AuthSessionOrderByWithAggregationInputSchema: z.ZodType<Prisma.AuthSessionOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AuthSessionCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AuthSessionMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AuthSessionMinOrderByAggregateInputSchema).optional()
}).strict();

export const AuthSessionScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AuthSessionScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AuthSessionScalarWhereWithAggregatesInputSchema),z.lazy(() => AuthSessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuthSessionScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuthSessionScalarWhereWithAggregatesInputSchema),z.lazy(() => AuthSessionScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  sessionToken: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const VerificationTokenWhereInputSchema: z.ZodType<Prisma.VerificationTokenWhereInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const VerificationTokenOrderByWithRelationInputSchema: z.ZodType<Prisma.VerificationTokenOrderByWithRelationInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenWhereUniqueInputSchema: z.ZodType<Prisma.VerificationTokenWhereUniqueInput> = z.union([
  z.object({
    token: z.string(),
    identifier_token: z.lazy(() => VerificationTokenIdentifierTokenCompoundUniqueInputSchema)
  }),
  z.object({
    token: z.string(),
  }),
  z.object({
    identifier_token: z.lazy(() => VerificationTokenIdentifierTokenCompoundUniqueInputSchema),
  }),
])
.and(z.object({
  token: z.string().optional(),
  identifier_token: z.lazy(() => VerificationTokenIdentifierTokenCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenWhereInputSchema),z.lazy(() => VerificationTokenWhereInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict());

export const VerificationTokenOrderByWithAggregationInputSchema: z.ZodType<Prisma.VerificationTokenOrderByWithAggregationInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => VerificationTokenCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => VerificationTokenMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => VerificationTokenMinOrderByAggregateInputSchema).optional()
}).strict();

export const VerificationTokenScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.VerificationTokenScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => VerificationTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  identifier: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ApiKeyWhereInputSchema: z.ZodType<Prisma.ApiKeyWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ApiKeyWhereInputSchema),z.lazy(() => ApiKeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ApiKeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ApiKeyWhereInputSchema),z.lazy(() => ApiKeyWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  key: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  clientId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  lastUsedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  allowedIps: z.lazy(() => StringNullableListFilterSchema).optional(),
  rateLimit: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  usageCount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
}).strict();

export const ApiKeyOrderByWithRelationInputSchema: z.ZodType<Prisma.ApiKeyOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  clientId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastUsedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  allowedIps: z.lazy(() => SortOrderSchema).optional(),
  rateLimit: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  usageCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ApiKeyWhereUniqueInputSchema: z.ZodType<Prisma.ApiKeyWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    key: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    key: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  key: z.string().optional(),
  AND: z.union([ z.lazy(() => ApiKeyWhereInputSchema),z.lazy(() => ApiKeyWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ApiKeyWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ApiKeyWhereInputSchema),z.lazy(() => ApiKeyWhereInputSchema).array() ]).optional(),
  clientId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  lastUsedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  allowedIps: z.lazy(() => StringNullableListFilterSchema).optional(),
  rateLimit: z.union([ z.lazy(() => IntNullableFilterSchema),z.number().int() ]).optional().nullable(),
  usageCount: z.union([ z.lazy(() => IntFilterSchema),z.number().int() ]).optional(),
}).strict());

export const ApiKeyOrderByWithAggregationInputSchema: z.ZodType<Prisma.ApiKeyOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  clientId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastUsedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  allowedIps: z.lazy(() => SortOrderSchema).optional(),
  rateLimit: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  usageCount: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ApiKeyCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ApiKeyAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ApiKeyMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ApiKeyMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ApiKeySumOrderByAggregateInputSchema).optional()
}).strict();

export const ApiKeyScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ApiKeyScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema),z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema),z.lazy(() => ApiKeyScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  key: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  clientId: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  expiresAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  lastUsedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  allowedIps: z.lazy(() => StringNullableListFilterSchema).optional(),
  rateLimit: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  usageCount: z.union([ z.lazy(() => IntWithAggregatesFilterSchema),z.number() ]).optional(),
}).strict();

export const AdminTokenWhereInputSchema: z.ZodType<Prisma.AdminTokenWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AdminTokenWhereInputSchema),z.lazy(() => AdminTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdminTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdminTokenWhereInputSchema),z.lazy(() => AdminTokenWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  lastUsedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const AdminTokenOrderByWithRelationInputSchema: z.ZodType<Prisma.AdminTokenOrderByWithRelationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastUsedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
}).strict();

export const AdminTokenWhereUniqueInputSchema: z.ZodType<Prisma.AdminTokenWhereUniqueInput> = z.union([
  z.object({
    id: z.string().cuid(),
    token: z.string()
  }),
  z.object({
    id: z.string().cuid(),
  }),
  z.object({
    token: z.string(),
  }),
])
.and(z.object({
  id: z.string().cuid().optional(),
  token: z.string().optional(),
  AND: z.union([ z.lazy(() => AdminTokenWhereInputSchema),z.lazy(() => AdminTokenWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdminTokenWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdminTokenWhereInputSchema),z.lazy(() => AdminTokenWhereInputSchema).array() ]).optional(),
  name: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  lastUsedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict());

export const AdminTokenOrderByWithAggregationInputSchema: z.ZodType<Prisma.AdminTokenOrderByWithAggregationInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastUsedAt: z.union([ z.lazy(() => SortOrderSchema),z.lazy(() => SortOrderInputSchema) ]).optional(),
  _count: z.lazy(() => AdminTokenCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AdminTokenMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AdminTokenMinOrderByAggregateInputSchema).optional()
}).strict();

export const AdminTokenScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AdminTokenScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AdminTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => AdminTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AdminTokenScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AdminTokenScalarWhereWithAggregatesInputSchema),z.lazy(() => AdminTokenScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  token: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  description: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  isActive: z.union([ z.lazy(() => BoolWithAggregatesFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeWithAggregatesFilterSchema),z.coerce.date() ]).optional(),
  lastUsedAt: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
}).strict();

export const SessionToSignalWhereInputSchema: z.ZodType<Prisma.SessionToSignalWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionToSignalWhereInputSchema),z.lazy(() => SessionToSignalWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionToSignalWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionToSignalWhereInputSchema),z.lazy(() => SessionToSignalWhereInputSchema).array() ]).optional(),
  A: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  B: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessions: z.union([ z.lazy(() => SessionScalarRelationFilterSchema),z.lazy(() => SessionWhereInputSchema) ]).optional(),
  Signal: z.union([ z.lazy(() => SignalScalarRelationFilterSchema),z.lazy(() => SignalWhereInputSchema) ]).optional(),
}).strict();

export const SessionToSignalOrderByWithRelationInputSchema: z.ZodType<Prisma.SessionToSignalOrderByWithRelationInput> = z.object({
  A: z.lazy(() => SortOrderSchema).optional(),
  B: z.lazy(() => SortOrderSchema).optional(),
  sessions: z.lazy(() => SessionOrderByWithRelationInputSchema).optional(),
  Signal: z.lazy(() => SignalOrderByWithRelationInputSchema).optional()
}).strict();

export const SessionToSignalWhereUniqueInputSchema: z.ZodType<Prisma.SessionToSignalWhereUniqueInput> = z.object({
  A_B: z.lazy(() => SessionToSignalABCompoundUniqueInputSchema)
})
.and(z.object({
  A_B: z.lazy(() => SessionToSignalABCompoundUniqueInputSchema).optional(),
  AND: z.union([ z.lazy(() => SessionToSignalWhereInputSchema),z.lazy(() => SessionToSignalWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionToSignalWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionToSignalWhereInputSchema),z.lazy(() => SessionToSignalWhereInputSchema).array() ]).optional(),
  A: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  B: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessions: z.union([ z.lazy(() => SessionScalarRelationFilterSchema),z.lazy(() => SessionWhereInputSchema) ]).optional(),
  Signal: z.union([ z.lazy(() => SignalScalarRelationFilterSchema),z.lazy(() => SignalWhereInputSchema) ]).optional(),
}).strict());

export const SessionToSignalOrderByWithAggregationInputSchema: z.ZodType<Prisma.SessionToSignalOrderByWithAggregationInput> = z.object({
  A: z.lazy(() => SortOrderSchema).optional(),
  B: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SessionToSignalCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SessionToSignalMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SessionToSignalMinOrderByAggregateInputSchema).optional()
}).strict();

export const SessionToSignalScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SessionToSignalScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SessionToSignalScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionToSignalScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionToSignalScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionToSignalScalarWhereWithAggregatesInputSchema),z.lazy(() => SessionToSignalScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  A: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  B: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
}).strict();

export const DocumentCreateInputSchema: z.ZodType<Prisma.DocumentCreateInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const DocumentUncheckedCreateInputSchema: z.ZodType<Prisma.DocumentUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const DocumentUpdateInputSchema: z.ZodType<Prisma.DocumentUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentUncheckedUpdateInputSchema: z.ZodType<Prisma.DocumentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentCreateManyInputSchema: z.ZodType<Prisma.DocumentCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional()
}).strict();

export const DocumentUpdateManyMutationInputSchema: z.ZodType<Prisma.DocumentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const DocumentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.DocumentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MigrationCreateInputSchema: z.ZodType<Prisma.MigrationCreateInput> = z.object({
  name: z.string(),
  version: z.number().int(),
  applied_at: z.coerce.date().optional()
}).strict();

export const MigrationUncheckedCreateInputSchema: z.ZodType<Prisma.MigrationUncheckedCreateInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  version: z.number().int(),
  applied_at: z.coerce.date().optional()
}).strict();

export const MigrationUpdateInputSchema: z.ZodType<Prisma.MigrationUpdateInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  version: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  applied_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MigrationUncheckedUpdateInputSchema: z.ZodType<Prisma.MigrationUncheckedUpdateInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  version: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  applied_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MigrationCreateManyInputSchema: z.ZodType<Prisma.MigrationCreateManyInput> = z.object({
  id: z.number().int().optional(),
  name: z.string(),
  version: z.number().int(),
  applied_at: z.coerce.date().optional()
}).strict();

export const MigrationUpdateManyMutationInputSchema: z.ZodType<Prisma.MigrationUpdateManyMutationInput> = z.object({
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  version: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  applied_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MigrationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MigrationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  version: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  applied_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SearchAnalyticsCreateInputSchema: z.ZodType<Prisma.SearchAnalyticsCreateInput> = z.object({
  id: z.string().cuid().optional(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date().optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sessionId: z.string().optional().nullable(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SearchAnalyticsUncheckedCreateInputSchema: z.ZodType<Prisma.SearchAnalyticsUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date().optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sessionId: z.string().optional().nullable(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SearchAnalyticsUpdateInputSchema: z.ZodType<Prisma.SearchAnalyticsUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SearchAnalyticsUncheckedUpdateInputSchema: z.ZodType<Prisma.SearchAnalyticsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SearchAnalyticsCreateManyInputSchema: z.ZodType<Prisma.SearchAnalyticsCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date().optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sessionId: z.string().optional().nullable(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SearchAnalyticsUpdateManyMutationInputSchema: z.ZodType<Prisma.SearchAnalyticsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SearchAnalyticsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SearchAnalyticsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SessionCreateInputSchema: z.ZodType<Prisma.SessionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abAssignments: z.lazy(() => ABTestAssignmentCreateNestedManyWithoutSessionInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricCreateNestedManyWithoutSessionInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsCreateNestedManyWithoutSessionInputSchema).optional(),
  conversations: z.lazy(() => ConversationCreateNestedManyWithoutSessionInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricCreateNestedManyWithoutSessionInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventCreateNestedManyWithoutSessionInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const SessionUncheckedCreateInputSchema: z.ZodType<Prisma.SessionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  conversations: z.lazy(() => ConversationUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const SessionUpdateInputSchema: z.ZodType<Prisma.SessionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUpdateManyWithoutSessionNestedInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUpdateManyWithoutSessionNestedInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUpdateManyWithoutSessionNestedInputSchema).optional(),
  conversations: z.lazy(() => ConversationUpdateManyWithoutSessionNestedInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUpdateManyWithoutSessionNestedInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUpdateManyWithoutSessionNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  conversations: z.lazy(() => ConversationUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionCreateManyInputSchema: z.ZodType<Prisma.SessionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SessionUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ConversationCreateInputSchema: z.ZodType<Prisma.ConversationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  session: z.lazy(() => SessionCreateNestedOneWithoutConversationsInputSchema),
  messages: z.lazy(() => MessageCreateNestedManyWithoutConversationInputSchema).optional()
}).strict();

export const ConversationUncheckedCreateInputSchema: z.ZodType<Prisma.ConversationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  sessionId: z.string(),
  title: z.string().optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  messages: z.lazy(() => MessageUncheckedCreateNestedManyWithoutConversationInputSchema).optional()
}).strict();

export const ConversationUpdateInputSchema: z.ZodType<Prisma.ConversationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  session: z.lazy(() => SessionUpdateOneRequiredWithoutConversationsNestedInputSchema).optional(),
  messages: z.lazy(() => MessageUpdateManyWithoutConversationNestedInputSchema).optional()
}).strict();

export const ConversationUncheckedUpdateInputSchema: z.ZodType<Prisma.ConversationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  messages: z.lazy(() => MessageUncheckedUpdateManyWithoutConversationNestedInputSchema).optional()
}).strict();

export const ConversationCreateManyInputSchema: z.ZodType<Prisma.ConversationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  sessionId: z.string(),
  title: z.string().optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ConversationUpdateManyMutationInputSchema: z.ZodType<Prisma.ConversationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ConversationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ConversationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageCreateInputSchema: z.ZodType<Prisma.MessageCreateInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.string(),
  content: z.string(),
  timestamp: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  conversation: z.lazy(() => ConversationCreateNestedOneWithoutMessagesInputSchema)
}).strict();

export const MessageUncheckedCreateInputSchema: z.ZodType<Prisma.MessageUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  conversationId: z.string(),
  role: z.string(),
  content: z.string(),
  timestamp: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const MessageUpdateInputSchema: z.ZodType<Prisma.MessageUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  conversation: z.lazy(() => ConversationUpdateOneRequiredWithoutMessagesNestedInputSchema).optional()
}).strict();

export const MessageUncheckedUpdateInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conversationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const MessageCreateManyInputSchema: z.ZodType<Prisma.MessageCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  conversationId: z.string(),
  role: z.string(),
  content: z.string(),
  timestamp: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const MessageUpdateManyMutationInputSchema: z.ZodType<Prisma.MessageUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const MessageUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conversationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ABTestCreateInputSchema: z.ZodType<Prisma.ABTestCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  status: z.lazy(() => ExperimentStatusSchema),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  assignments: z.lazy(() => ABTestAssignmentCreateNestedManyWithoutTestInputSchema).optional(),
  metrics: z.lazy(() => ABTestMetricCreateNestedManyWithoutTestInputSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsCreateNestedManyWithoutTestInputSchema).optional()
}).strict();

export const ABTestUncheckedCreateInputSchema: z.ZodType<Prisma.ABTestUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  status: z.lazy(() => ExperimentStatusSchema),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  assignments: z.lazy(() => ABTestAssignmentUncheckedCreateNestedManyWithoutTestInputSchema).optional(),
  metrics: z.lazy(() => ABTestMetricUncheckedCreateNestedManyWithoutTestInputSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsUncheckedCreateNestedManyWithoutTestInputSchema).optional()
}).strict();

export const ABTestUpdateInputSchema: z.ZodType<Prisma.ABTestUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentStatusSchema),z.lazy(() => EnumExperimentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  assignments: z.lazy(() => ABTestAssignmentUpdateManyWithoutTestNestedInputSchema).optional(),
  metrics: z.lazy(() => ABTestMetricUpdateManyWithoutTestNestedInputSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsUpdateManyWithoutTestNestedInputSchema).optional()
}).strict();

export const ABTestUncheckedUpdateInputSchema: z.ZodType<Prisma.ABTestUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentStatusSchema),z.lazy(() => EnumExperimentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  assignments: z.lazy(() => ABTestAssignmentUncheckedUpdateManyWithoutTestNestedInputSchema).optional(),
  metrics: z.lazy(() => ABTestMetricUncheckedUpdateManyWithoutTestNestedInputSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsUncheckedUpdateManyWithoutTestNestedInputSchema).optional()
}).strict();

export const ABTestCreateManyInputSchema: z.ZodType<Prisma.ABTestCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  status: z.lazy(() => ExperimentStatusSchema),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ABTestUpdateManyMutationInputSchema: z.ZodType<Prisma.ABTestUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentStatusSchema),z.lazy(() => EnumExperimentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ABTestUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentStatusSchema),z.lazy(() => EnumExperimentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestAssignmentCreateInputSchema: z.ZodType<Prisma.ABTestAssignmentCreateInput> = z.object({
  id: z.string().cuid().optional(),
  variantId: z.string(),
  timestamp: z.coerce.date().optional(),
  session: z.lazy(() => SessionCreateNestedOneWithoutAbAssignmentsInputSchema),
  test: z.lazy(() => ABTestCreateNestedOneWithoutAssignmentsInputSchema)
}).strict();

export const ABTestAssignmentUncheckedCreateInputSchema: z.ZodType<Prisma.ABTestAssignmentUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  testId: z.string(),
  sessionId: z.string(),
  variantId: z.string(),
  timestamp: z.coerce.date().optional()
}).strict();

export const ABTestAssignmentUpdateInputSchema: z.ZodType<Prisma.ABTestAssignmentUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  session: z.lazy(() => SessionUpdateOneRequiredWithoutAbAssignmentsNestedInputSchema).optional(),
  test: z.lazy(() => ABTestUpdateOneRequiredWithoutAssignmentsNestedInputSchema).optional()
}).strict();

export const ABTestAssignmentUncheckedUpdateInputSchema: z.ZodType<Prisma.ABTestAssignmentUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestAssignmentCreateManyInputSchema: z.ZodType<Prisma.ABTestAssignmentCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  testId: z.string(),
  sessionId: z.string(),
  variantId: z.string(),
  timestamp: z.coerce.date().optional()
}).strict();

export const ABTestAssignmentUpdateManyMutationInputSchema: z.ZodType<Prisma.ABTestAssignmentUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestAssignmentUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ABTestAssignmentUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestMetricCreateInputSchema: z.ZodType<Prisma.ABTestMetricCreateInput> = z.object({
  id: z.string().cuid().optional(),
  variantId: z.string(),
  eventType: z.string(),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  session: z.lazy(() => SessionCreateNestedOneWithoutAbMetricsInputSchema),
  test: z.lazy(() => ABTestCreateNestedOneWithoutMetricsInputSchema)
}).strict();

export const ABTestMetricUncheckedCreateInputSchema: z.ZodType<Prisma.ABTestMetricUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  testId: z.string(),
  variantId: z.string(),
  eventType: z.string(),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  sessionId: z.string()
}).strict();

export const ABTestMetricUpdateInputSchema: z.ZodType<Prisma.ABTestMetricUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  session: z.lazy(() => SessionUpdateOneRequiredWithoutAbMetricsNestedInputSchema).optional(),
  test: z.lazy(() => ABTestUpdateOneRequiredWithoutMetricsNestedInputSchema).optional()
}).strict();

export const ABTestMetricUncheckedUpdateInputSchema: z.ZodType<Prisma.ABTestMetricUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestMetricCreateManyInputSchema: z.ZodType<Prisma.ABTestMetricCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  testId: z.string(),
  variantId: z.string(),
  eventType: z.string(),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  sessionId: z.string()
}).strict();

export const ABTestMetricUpdateManyMutationInputSchema: z.ZodType<Prisma.ABTestMetricUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestMetricUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ABTestMetricUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SearchFeedbackCreateInputSchema: z.ZodType<Prisma.SearchFeedbackCreateInput> = z.object({
  id: z.string().cuid().optional(),
  searchId: z.string(),
  queryHash: z.string(),
  resultId: z.string(),
  relevanceScore: z.number(),
  userAction: z.string(),
  timestamp: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  SearchEvent: z.lazy(() => SearchEventCreateNestedManyWithoutFeedbackInputSchema).optional()
}).strict();

export const SearchFeedbackUncheckedCreateInputSchema: z.ZodType<Prisma.SearchFeedbackUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  searchId: z.string(),
  queryHash: z.string(),
  resultId: z.string(),
  relevanceScore: z.number(),
  userAction: z.string(),
  timestamp: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  SearchEvent: z.lazy(() => SearchEventUncheckedCreateNestedManyWithoutFeedbackInputSchema).optional()
}).strict();

export const SearchFeedbackUpdateInputSchema: z.ZodType<Prisma.SearchFeedbackUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relevanceScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  userAction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  SearchEvent: z.lazy(() => SearchEventUpdateManyWithoutFeedbackNestedInputSchema).optional()
}).strict();

export const SearchFeedbackUncheckedUpdateInputSchema: z.ZodType<Prisma.SearchFeedbackUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relevanceScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  userAction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  SearchEvent: z.lazy(() => SearchEventUncheckedUpdateManyWithoutFeedbackNestedInputSchema).optional()
}).strict();

export const SearchFeedbackCreateManyInputSchema: z.ZodType<Prisma.SearchFeedbackCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  searchId: z.string(),
  queryHash: z.string(),
  resultId: z.string(),
  relevanceScore: z.number(),
  userAction: z.string(),
  timestamp: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SearchFeedbackUpdateManyMutationInputSchema: z.ZodType<Prisma.SearchFeedbackUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relevanceScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  userAction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SearchFeedbackUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SearchFeedbackUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relevanceScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  userAction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const BaseEventCreateInputSchema: z.ZodType<Prisma.BaseEventCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EventTypeSchema),
  timestamp: z.coerce.date(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  source: z.string(),
  priority: z.number().int().optional().nullable(),
  processed: z.boolean().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.string().optional().nullable(),
  searchEvent: z.lazy(() => SearchEventCreateNestedOneWithoutBaseEventInputSchema).optional(),
  modelEvent: z.lazy(() => ModelEventCreateNestedOneWithoutBaseEventInputSchema).optional()
}).strict();

export const BaseEventUncheckedCreateInputSchema: z.ZodType<Prisma.BaseEventUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EventTypeSchema),
  timestamp: z.coerce.date(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  source: z.string(),
  priority: z.number().int().optional().nullable(),
  processed: z.boolean().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.string().optional().nullable(),
  searchEventid: z.string().optional().nullable(),
  modelEvent: z.lazy(() => ModelEventUncheckedCreateNestedOneWithoutBaseEventInputSchema).optional()
}).strict();

export const BaseEventUpdateInputSchema: z.ZodType<Prisma.BaseEventUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processed: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  searchEvent: z.lazy(() => SearchEventUpdateOneWithoutBaseEventNestedInputSchema).optional(),
  modelEvent: z.lazy(() => ModelEventUpdateOneWithoutBaseEventNestedInputSchema).optional()
}).strict();

export const BaseEventUncheckedUpdateInputSchema: z.ZodType<Prisma.BaseEventUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processed: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  searchEventid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelEvent: z.lazy(() => ModelEventUncheckedUpdateOneWithoutBaseEventNestedInputSchema).optional()
}).strict();

export const BaseEventCreateManyInputSchema: z.ZodType<Prisma.BaseEventCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EventTypeSchema),
  timestamp: z.coerce.date(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  source: z.string(),
  priority: z.number().int().optional().nullable(),
  processed: z.boolean().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.string().optional().nullable(),
  searchEventid: z.string().optional().nullable()
}).strict();

export const BaseEventUpdateManyMutationInputSchema: z.ZodType<Prisma.BaseEventUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processed: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const BaseEventUncheckedUpdateManyInputSchema: z.ZodType<Prisma.BaseEventUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processed: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  searchEventid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelEventCreateInputSchema: z.ZodType<Prisma.ModelEventCreateInput> = z.object({
  id: z.string().cuid().optional(),
  modelId: z.string(),
  version: z.string(),
  parameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  results: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  baseEvent: z.lazy(() => BaseEventCreateNestedOneWithoutModelEventInputSchema)
}).strict();

export const ModelEventUncheckedCreateInputSchema: z.ZodType<Prisma.ModelEventUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  baseEventId: z.string(),
  modelId: z.string(),
  version: z.string(),
  parameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  results: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
}).strict();

export const ModelEventUpdateInputSchema: z.ZodType<Prisma.ModelEventUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  version: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  results: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  baseEvent: z.lazy(() => BaseEventUpdateOneRequiredWithoutModelEventNestedInputSchema).optional()
}).strict();

export const ModelEventUncheckedUpdateInputSchema: z.ZodType<Prisma.ModelEventUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseEventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  version: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  results: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ModelEventCreateManyInputSchema: z.ZodType<Prisma.ModelEventCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  baseEventId: z.string(),
  modelId: z.string(),
  version: z.string(),
  parameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  results: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
}).strict();

export const ModelEventUpdateManyMutationInputSchema: z.ZodType<Prisma.ModelEventUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  version: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  results: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ModelEventUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ModelEventUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  baseEventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  version: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  results: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ProcessedSignalCreateInputSchema: z.ZodType<Prisma.ProcessedSignalCreateInput> = z.object({
  id: z.string().cuid().optional(),
  originalSignalId: z.string(),
  processingTime: z.number(),
  transformations: z.union([ z.lazy(() => ProcessedSignalCreatetransformationsInputSchema),z.string().array() ]).optional(),
  confidence: z.number(),
  processed: z.boolean().optional(),
  processingMetadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  signal: z.lazy(() => SignalCreateNestedOneWithoutProcessedSignalInputSchema)
}).strict();

export const ProcessedSignalUncheckedCreateInputSchema: z.ZodType<Prisma.ProcessedSignalUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  signalId: z.string(),
  originalSignalId: z.string(),
  processingTime: z.number(),
  transformations: z.union([ z.lazy(() => ProcessedSignalCreatetransformationsInputSchema),z.string().array() ]).optional(),
  confidence: z.number(),
  processed: z.boolean().optional(),
  processingMetadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ProcessedSignalUpdateInputSchema: z.ZodType<Prisma.ProcessedSignalUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalSignalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingTime: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transformations: z.union([ z.lazy(() => ProcessedSignalUpdatetransformationsInputSchema),z.string().array() ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processingMetadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  signal: z.lazy(() => SignalUpdateOneRequiredWithoutProcessedSignalNestedInputSchema).optional()
}).strict();

export const ProcessedSignalUncheckedUpdateInputSchema: z.ZodType<Prisma.ProcessedSignalUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalSignalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingTime: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transformations: z.union([ z.lazy(() => ProcessedSignalUpdatetransformationsInputSchema),z.string().array() ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processingMetadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ProcessedSignalCreateManyInputSchema: z.ZodType<Prisma.ProcessedSignalCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  signalId: z.string(),
  originalSignalId: z.string(),
  processingTime: z.number(),
  transformations: z.union([ z.lazy(() => ProcessedSignalCreatetransformationsInputSchema),z.string().array() ]).optional(),
  confidence: z.number(),
  processed: z.boolean().optional(),
  processingMetadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ProcessedSignalUpdateManyMutationInputSchema: z.ZodType<Prisma.ProcessedSignalUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalSignalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingTime: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transformations: z.union([ z.lazy(() => ProcessedSignalUpdatetransformationsInputSchema),z.string().array() ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processingMetadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ProcessedSignalUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProcessedSignalUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalSignalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingTime: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transformations: z.union([ z.lazy(() => ProcessedSignalUpdatetransformationsInputSchema),z.string().array() ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processingMetadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SignalBatchCreateInputSchema: z.ZodType<Prisma.SignalBatchCreateInput> = z.object({
  id: z.string().cuid().optional(),
  batchId: z.string(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  priority: z.number().int().optional().nullable(),
  sourceSystem: z.string().optional().nullable(),
  signalIds: z.union([ z.lazy(() => SignalBatchCreatesignalIdsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SignalBatchUncheckedCreateInputSchema: z.ZodType<Prisma.SignalBatchUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  batchId: z.string(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  priority: z.number().int().optional().nullable(),
  sourceSystem: z.string().optional().nullable(),
  signalIds: z.union([ z.lazy(() => SignalBatchCreatesignalIdsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SignalBatchUpdateInputSchema: z.ZodType<Prisma.SignalBatchUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batchId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sourceSystem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signalIds: z.union([ z.lazy(() => SignalBatchUpdatesignalIdsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SignalBatchUncheckedUpdateInputSchema: z.ZodType<Prisma.SignalBatchUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batchId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sourceSystem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signalIds: z.union([ z.lazy(() => SignalBatchUpdatesignalIdsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SignalBatchCreateManyInputSchema: z.ZodType<Prisma.SignalBatchCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  batchId: z.string(),
  startTime: z.coerce.date(),
  endTime: z.coerce.date(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  priority: z.number().int().optional().nullable(),
  sourceSystem: z.string().optional().nullable(),
  signalIds: z.union([ z.lazy(() => SignalBatchCreatesignalIdsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SignalBatchUpdateManyMutationInputSchema: z.ZodType<Prisma.SignalBatchUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batchId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sourceSystem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signalIds: z.union([ z.lazy(() => SignalBatchUpdatesignalIdsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SignalBatchUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SignalBatchUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  batchId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sourceSystem: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  signalIds: z.union([ z.lazy(() => SignalBatchUpdatesignalIdsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SignalPatternCreateInputSchema: z.ZodType<Prisma.SignalPatternCreateInput> = z.object({
  id: z.string().cuid().optional(),
  patternId: z.string(),
  signalIds: z.union([ z.lazy(() => SignalPatternCreatesignalIdsInputSchema),z.string().array() ]).optional(),
  confidence: z.number(),
  patternType: z.string(),
  frequency: z.number().optional().nullable(),
  impactScore: z.number().optional().nullable(),
  relatedPatterns: z.union([ z.lazy(() => SignalPatternCreaterelatedPatternsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SignalPatternUncheckedCreateInputSchema: z.ZodType<Prisma.SignalPatternUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  patternId: z.string(),
  signalIds: z.union([ z.lazy(() => SignalPatternCreatesignalIdsInputSchema),z.string().array() ]).optional(),
  confidence: z.number(),
  patternType: z.string(),
  frequency: z.number().optional().nullable(),
  impactScore: z.number().optional().nullable(),
  relatedPatterns: z.union([ z.lazy(() => SignalPatternCreaterelatedPatternsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SignalPatternUpdateInputSchema: z.ZodType<Prisma.SignalPatternUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patternId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signalIds: z.union([ z.lazy(() => SignalPatternUpdatesignalIdsInputSchema),z.string().array() ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  patternType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impactScore: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  relatedPatterns: z.union([ z.lazy(() => SignalPatternUpdaterelatedPatternsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SignalPatternUncheckedUpdateInputSchema: z.ZodType<Prisma.SignalPatternUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patternId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signalIds: z.union([ z.lazy(() => SignalPatternUpdatesignalIdsInputSchema),z.string().array() ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  patternType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impactScore: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  relatedPatterns: z.union([ z.lazy(() => SignalPatternUpdaterelatedPatternsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SignalPatternCreateManyInputSchema: z.ZodType<Prisma.SignalPatternCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  patternId: z.string(),
  signalIds: z.union([ z.lazy(() => SignalPatternCreatesignalIdsInputSchema),z.string().array() ]).optional(),
  confidence: z.number(),
  patternType: z.string(),
  frequency: z.number().optional().nullable(),
  impactScore: z.number().optional().nullable(),
  relatedPatterns: z.union([ z.lazy(() => SignalPatternCreaterelatedPatternsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SignalPatternUpdateManyMutationInputSchema: z.ZodType<Prisma.SignalPatternUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patternId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signalIds: z.union([ z.lazy(() => SignalPatternUpdatesignalIdsInputSchema),z.string().array() ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  patternType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impactScore: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  relatedPatterns: z.union([ z.lazy(() => SignalPatternUpdaterelatedPatternsInputSchema),z.string().array() ]).optional(),
}).strict();

export const SignalPatternUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SignalPatternUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patternId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  signalIds: z.union([ z.lazy(() => SignalPatternUpdatesignalIdsInputSchema),z.string().array() ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  patternType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  frequency: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  impactScore: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  relatedPatterns: z.union([ z.lazy(() => SignalPatternUpdaterelatedPatternsInputSchema),z.string().array() ]).optional(),
}).strict();

export const AdaptationRuleCreateInputSchema: z.ZodType<Prisma.AdaptationRuleCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string(),
  type: z.string(),
  conditions: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  actions: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  priority: z.lazy(() => RulePrioritySchema),
  enabled: z.boolean(),
  lastTriggered: z.coerce.date().optional().nullable()
}).strict();

export const AdaptationRuleUncheckedCreateInputSchema: z.ZodType<Prisma.AdaptationRuleUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string(),
  type: z.string(),
  conditions: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  actions: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  priority: z.lazy(() => RulePrioritySchema),
  enabled: z.boolean(),
  lastTriggered: z.coerce.date().optional().nullable()
}).strict();

export const AdaptationRuleUpdateInputSchema: z.ZodType<Prisma.AdaptationRuleUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  actions: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.lazy(() => RulePrioritySchema),z.lazy(() => EnumRulePriorityFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  lastTriggered: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AdaptationRuleUncheckedUpdateInputSchema: z.ZodType<Prisma.AdaptationRuleUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  actions: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.lazy(() => RulePrioritySchema),z.lazy(() => EnumRulePriorityFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  lastTriggered: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AdaptationRuleCreateManyInputSchema: z.ZodType<Prisma.AdaptationRuleCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string(),
  type: z.string(),
  conditions: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  actions: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  priority: z.lazy(() => RulePrioritySchema),
  enabled: z.boolean(),
  lastTriggered: z.coerce.date().optional().nullable()
}).strict();

export const AdaptationRuleUpdateManyMutationInputSchema: z.ZodType<Prisma.AdaptationRuleUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  actions: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.lazy(() => RulePrioritySchema),z.lazy(() => EnumRulePriorityFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  lastTriggered: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AdaptationRuleUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AdaptationRuleUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  conditions: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  actions: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.lazy(() => RulePrioritySchema),z.lazy(() => EnumRulePriorityFieldUpdateOperationsInputSchema) ]).optional(),
  enabled: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  lastTriggered: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelConfigCreateInputSchema: z.ZodType<Prisma.ModelConfigCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => ModelTypeSchema),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  features: z.union([ z.lazy(() => ModelConfigCreatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metrics: z.lazy(() => LearningMetricCreateNestedManyWithoutModelInputSchema).optional(),
  modelVersions: z.lazy(() => ModelVersionCreateNestedManyWithoutConfigInputSchema).optional()
}).strict();

export const ModelConfigUncheckedCreateInputSchema: z.ZodType<Prisma.ModelConfigUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => ModelTypeSchema),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  features: z.union([ z.lazy(() => ModelConfigCreatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metrics: z.lazy(() => LearningMetricUncheckedCreateNestedManyWithoutModelInputSchema).optional(),
  modelVersions: z.lazy(() => ModelVersionUncheckedCreateNestedManyWithoutConfigInputSchema).optional()
}).strict();

export const ModelConfigUpdateInputSchema: z.ZodType<Prisma.ModelConfigUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  features: z.union([ z.lazy(() => ModelConfigUpdatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metrics: z.lazy(() => LearningMetricUpdateManyWithoutModelNestedInputSchema).optional(),
  modelVersions: z.lazy(() => ModelVersionUpdateManyWithoutConfigNestedInputSchema).optional()
}).strict();

export const ModelConfigUncheckedUpdateInputSchema: z.ZodType<Prisma.ModelConfigUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  features: z.union([ z.lazy(() => ModelConfigUpdatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metrics: z.lazy(() => LearningMetricUncheckedUpdateManyWithoutModelNestedInputSchema).optional(),
  modelVersions: z.lazy(() => ModelVersionUncheckedUpdateManyWithoutConfigNestedInputSchema).optional()
}).strict();

export const ModelConfigCreateManyInputSchema: z.ZodType<Prisma.ModelConfigCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => ModelTypeSchema),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  features: z.union([ z.lazy(() => ModelConfigCreatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ModelConfigUpdateManyMutationInputSchema: z.ZodType<Prisma.ModelConfigUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  features: z.union([ z.lazy(() => ModelConfigUpdatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ModelConfigUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ModelConfigUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  features: z.union([ z.lazy(() => ModelConfigUpdatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ModelVersionCreateInputSchema: z.ZodType<Prisma.ModelVersionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  artifactPath: z.string(),
  parentVersion: z.string().optional().nullable(),
  config: z.lazy(() => ModelConfigCreateNestedOneWithoutModelVersionsInputSchema)
}).strict();

export const ModelVersionUncheckedCreateInputSchema: z.ZodType<Prisma.ModelVersionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  configId: z.string(),
  createdAt: z.coerce.date().optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  artifactPath: z.string(),
  parentVersion: z.string().optional().nullable()
}).strict();

export const ModelVersionUpdateInputSchema: z.ZodType<Prisma.ModelVersionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  artifactPath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentVersion: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  config: z.lazy(() => ModelConfigUpdateOneRequiredWithoutModelVersionsNestedInputSchema).optional()
}).strict();

export const ModelVersionUncheckedUpdateInputSchema: z.ZodType<Prisma.ModelVersionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  configId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  artifactPath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentVersion: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelVersionCreateManyInputSchema: z.ZodType<Prisma.ModelVersionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  configId: z.string(),
  createdAt: z.coerce.date().optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  artifactPath: z.string(),
  parentVersion: z.string().optional().nullable()
}).strict();

export const ModelVersionUpdateManyMutationInputSchema: z.ZodType<Prisma.ModelVersionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  artifactPath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentVersion: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelVersionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ModelVersionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  configId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  artifactPath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentVersion: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const LearningRequestCreateInputSchema: z.ZodType<Prisma.LearningRequestCreateInput> = z.object({
  id: z.string().cuid().optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional()
}).strict();

export const LearningRequestUncheckedCreateInputSchema: z.ZodType<Prisma.LearningRequestUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional()
}).strict();

export const LearningRequestUpdateInputSchema: z.ZodType<Prisma.LearningRequestUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningRequestUncheckedUpdateInputSchema: z.ZodType<Prisma.LearningRequestUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningRequestCreateManyInputSchema: z.ZodType<Prisma.LearningRequestCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional()
}).strict();

export const LearningRequestUpdateManyMutationInputSchema: z.ZodType<Prisma.LearningRequestUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningRequestUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LearningRequestUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FeedbackRequestCreateInputSchema: z.ZodType<Prisma.FeedbackRequestCreateInput> = z.object({
  id: z.string().cuid().optional(),
  feedback: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional()
}).strict();

export const FeedbackRequestUncheckedCreateInputSchema: z.ZodType<Prisma.FeedbackRequestUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  feedback: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional()
}).strict();

export const FeedbackRequestUpdateInputSchema: z.ZodType<Prisma.FeedbackRequestUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  feedback: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FeedbackRequestUncheckedUpdateInputSchema: z.ZodType<Prisma.FeedbackRequestUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  feedback: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FeedbackRequestCreateManyInputSchema: z.ZodType<Prisma.FeedbackRequestCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  feedback: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional()
}).strict();

export const FeedbackRequestUpdateManyMutationInputSchema: z.ZodType<Prisma.FeedbackRequestUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  feedback: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const FeedbackRequestUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FeedbackRequestUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  feedback: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ModelMetricsCreateInputSchema: z.ZodType<Prisma.ModelMetricsCreateInput> = z.object({
  id: z.string().cuid().optional(),
  modelVersionId: z.string(),
  accuracy: z.number(),
  precision: z.number(),
  recall: z.number(),
  f1Score: z.number(),
  latencyMs: z.number(),
  loss: z.number(),
  validationMetrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  customMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.coerce.date().optional(),
  ModelState: z.lazy(() => ModelStateCreateNestedManyWithoutMetricsInputSchema).optional()
}).strict();

export const ModelMetricsUncheckedCreateInputSchema: z.ZodType<Prisma.ModelMetricsUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  modelVersionId: z.string(),
  accuracy: z.number(),
  precision: z.number(),
  recall: z.number(),
  f1Score: z.number(),
  latencyMs: z.number(),
  loss: z.number(),
  validationMetrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  customMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.coerce.date().optional(),
  ModelState: z.lazy(() => ModelStateUncheckedCreateNestedManyWithoutMetricsInputSchema).optional()
}).strict();

export const ModelMetricsUpdateInputSchema: z.ZodType<Prisma.ModelMetricsUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelVersionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accuracy: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  precision: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recall: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  f1Score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  latencyMs: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  loss: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  validationMetrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  customMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ModelState: z.lazy(() => ModelStateUpdateManyWithoutMetricsNestedInputSchema).optional()
}).strict();

export const ModelMetricsUncheckedUpdateInputSchema: z.ZodType<Prisma.ModelMetricsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelVersionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accuracy: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  precision: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recall: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  f1Score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  latencyMs: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  loss: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  validationMetrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  customMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  ModelState: z.lazy(() => ModelStateUncheckedUpdateManyWithoutMetricsNestedInputSchema).optional()
}).strict();

export const ModelMetricsCreateManyInputSchema: z.ZodType<Prisma.ModelMetricsCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  modelVersionId: z.string(),
  accuracy: z.number(),
  precision: z.number(),
  recall: z.number(),
  f1Score: z.number(),
  latencyMs: z.number(),
  loss: z.number(),
  validationMetrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  customMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.coerce.date().optional()
}).strict();

export const ModelMetricsUpdateManyMutationInputSchema: z.ZodType<Prisma.ModelMetricsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelVersionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accuracy: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  precision: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recall: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  f1Score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  latencyMs: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  loss: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  validationMetrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  customMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ModelMetricsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ModelMetricsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelVersionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accuracy: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  precision: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recall: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  f1Score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  latencyMs: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  loss: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  validationMetrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  customMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ModelStateCreateInputSchema: z.ZodType<Prisma.ModelStateCreateInput> = z.object({
  id: z.string().cuid().optional(),
  versionId: z.string(),
  weights: z.union([ z.lazy(() => ModelStateCreateweightsInputSchema),z.number().array() ]).optional(),
  bias: z.number(),
  scaler: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  featureNames: z.union([ z.lazy(() => ModelStateCreatefeatureNamesInputSchema),z.string().array() ]).optional(),
  isTrained: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  modelType: z.lazy(() => ModelTypeSchema).optional(),
  hyperparameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  currentEpoch: z.number().int().optional(),
  trainingProgress: z.number().optional(),
  lastTrainingError: z.string().optional().nullable(),
  metrics: z.lazy(() => ModelMetricsCreateNestedManyWithoutModelStateInputSchema).optional()
}).strict();

export const ModelStateUncheckedCreateInputSchema: z.ZodType<Prisma.ModelStateUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  versionId: z.string(),
  weights: z.union([ z.lazy(() => ModelStateCreateweightsInputSchema),z.number().array() ]).optional(),
  bias: z.number(),
  scaler: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  featureNames: z.union([ z.lazy(() => ModelStateCreatefeatureNamesInputSchema),z.string().array() ]).optional(),
  isTrained: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  modelType: z.lazy(() => ModelTypeSchema).optional(),
  hyperparameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  currentEpoch: z.number().int().optional(),
  trainingProgress: z.number().optional(),
  lastTrainingError: z.string().optional().nullable(),
  metrics: z.lazy(() => ModelMetricsUncheckedCreateNestedManyWithoutModelStateInputSchema).optional()
}).strict();

export const ModelStateUpdateInputSchema: z.ZodType<Prisma.ModelStateUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weights: z.union([ z.lazy(() => ModelStateUpdateweightsInputSchema),z.number().array() ]).optional(),
  bias: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  scaler: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  featureNames: z.union([ z.lazy(() => ModelStateUpdatefeatureNamesInputSchema),z.string().array() ]).optional(),
  isTrained: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  modelType: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  currentEpoch: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  trainingProgress: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastTrainingError: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metrics: z.lazy(() => ModelMetricsUpdateManyWithoutModelStateNestedInputSchema).optional()
}).strict();

export const ModelStateUncheckedUpdateInputSchema: z.ZodType<Prisma.ModelStateUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weights: z.union([ z.lazy(() => ModelStateUpdateweightsInputSchema),z.number().array() ]).optional(),
  bias: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  scaler: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  featureNames: z.union([ z.lazy(() => ModelStateUpdatefeatureNamesInputSchema),z.string().array() ]).optional(),
  isTrained: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  modelType: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  currentEpoch: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  trainingProgress: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastTrainingError: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metrics: z.lazy(() => ModelMetricsUncheckedUpdateManyWithoutModelStateNestedInputSchema).optional()
}).strict();

export const ModelStateCreateManyInputSchema: z.ZodType<Prisma.ModelStateCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  versionId: z.string(),
  weights: z.union([ z.lazy(() => ModelStateCreateweightsInputSchema),z.number().array() ]).optional(),
  bias: z.number(),
  scaler: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  featureNames: z.union([ z.lazy(() => ModelStateCreatefeatureNamesInputSchema),z.string().array() ]).optional(),
  isTrained: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  modelType: z.lazy(() => ModelTypeSchema).optional(),
  hyperparameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  currentEpoch: z.number().int().optional(),
  trainingProgress: z.number().optional(),
  lastTrainingError: z.string().optional().nullable()
}).strict();

export const ModelStateUpdateManyMutationInputSchema: z.ZodType<Prisma.ModelStateUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weights: z.union([ z.lazy(() => ModelStateUpdateweightsInputSchema),z.number().array() ]).optional(),
  bias: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  scaler: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  featureNames: z.union([ z.lazy(() => ModelStateUpdatefeatureNamesInputSchema),z.string().array() ]).optional(),
  isTrained: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  modelType: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  currentEpoch: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  trainingProgress: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastTrainingError: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelStateUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ModelStateUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weights: z.union([ z.lazy(() => ModelStateUpdateweightsInputSchema),z.number().array() ]).optional(),
  bias: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  scaler: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  featureNames: z.union([ z.lazy(() => ModelStateUpdatefeatureNamesInputSchema),z.string().array() ]).optional(),
  isTrained: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  modelType: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  currentEpoch: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  trainingProgress: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastTrainingError: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SearchEventCreateInputSchema: z.ZodType<Prisma.SearchEventCreateInput> = z.object({
  id: z.string().cuid().optional(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date().optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  BaseEvent: z.lazy(() => BaseEventCreateNestedManyWithoutSearchEventInputSchema).optional(),
  session: z.lazy(() => SessionCreateNestedOneWithoutSearchEventsInputSchema),
  feedback: z.lazy(() => SearchFeedbackCreateNestedManyWithoutSearchEventInputSchema).optional()
}).strict();

export const SearchEventUncheckedCreateInputSchema: z.ZodType<Prisma.SearchEventUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  sessionId: z.string(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date().optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  BaseEvent: z.lazy(() => BaseEventUncheckedCreateNestedManyWithoutSearchEventInputSchema).optional(),
  feedback: z.lazy(() => SearchFeedbackUncheckedCreateNestedManyWithoutSearchEventInputSchema).optional()
}).strict();

export const SearchEventUpdateInputSchema: z.ZodType<Prisma.SearchEventUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  BaseEvent: z.lazy(() => BaseEventUpdateManyWithoutSearchEventNestedInputSchema).optional(),
  session: z.lazy(() => SessionUpdateOneRequiredWithoutSearchEventsNestedInputSchema).optional(),
  feedback: z.lazy(() => SearchFeedbackUpdateManyWithoutSearchEventNestedInputSchema).optional()
}).strict();

export const SearchEventUncheckedUpdateInputSchema: z.ZodType<Prisma.SearchEventUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  BaseEvent: z.lazy(() => BaseEventUncheckedUpdateManyWithoutSearchEventNestedInputSchema).optional(),
  feedback: z.lazy(() => SearchFeedbackUncheckedUpdateManyWithoutSearchEventNestedInputSchema).optional()
}).strict();

export const SearchEventCreateManyInputSchema: z.ZodType<Prisma.SearchEventCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  sessionId: z.string(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date().optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SearchEventUpdateManyMutationInputSchema: z.ZodType<Prisma.SearchEventUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SearchEventUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SearchEventUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ABTestMetricsCreateInputSchema: z.ZodType<Prisma.ABTestMetricsCreateInput> = z.object({
  id: z.string().cuid().optional(),
  variantId: z.string(),
  queryHash: z.string(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional(),
  test: z.lazy(() => ABTestCreateNestedOneWithoutABTestMetricsInputSchema)
}).strict();

export const ABTestMetricsUncheckedCreateInputSchema: z.ZodType<Prisma.ABTestMetricsUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  testId: z.string(),
  variantId: z.string(),
  queryHash: z.string(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional()
}).strict();

export const ABTestMetricsUpdateInputSchema: z.ZodType<Prisma.ABTestMetricsUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  test: z.lazy(() => ABTestUpdateOneRequiredWithoutABTestMetricsNestedInputSchema).optional()
}).strict();

export const ABTestMetricsUncheckedUpdateInputSchema: z.ZodType<Prisma.ABTestMetricsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestMetricsCreateManyInputSchema: z.ZodType<Prisma.ABTestMetricsCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  testId: z.string(),
  variantId: z.string(),
  queryHash: z.string(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional()
}).strict();

export const ABTestMetricsUpdateManyMutationInputSchema: z.ZodType<Prisma.ABTestMetricsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestMetricsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ABTestMetricsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SignalCreateInputSchema: z.ZodType<Prisma.SignalCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => SignalTypeSchema),
  source: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  priority: z.number().int().optional().nullable(),
  retries: z.number().int().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  processed: z.boolean().optional(),
  processedAt: z.coerce.date().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.string().optional().nullable(),
  manual: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  strength: z.number(),
  ProcessedSignal: z.lazy(() => ProcessedSignalCreateNestedManyWithoutSignalInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalCreateNestedManyWithoutSignalInputSchema).optional()
}).strict();

export const SignalUncheckedCreateInputSchema: z.ZodType<Prisma.SignalUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => SignalTypeSchema),
  source: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  priority: z.number().int().optional().nullable(),
  retries: z.number().int().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  processed: z.boolean().optional(),
  processedAt: z.coerce.date().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.string().optional().nullable(),
  manual: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  strength: z.number(),
  ProcessedSignal: z.lazy(() => ProcessedSignalUncheckedCreateNestedManyWithoutSignalInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedCreateNestedManyWithoutSignalInputSchema).optional()
}).strict();

export const SignalUpdateInputSchema: z.ZodType<Prisma.SignalUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => SignalTypeSchema),z.lazy(() => EnumSignalTypeFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  retries: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  strength: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  ProcessedSignal: z.lazy(() => ProcessedSignalUpdateManyWithoutSignalNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUpdateManyWithoutSignalNestedInputSchema).optional()
}).strict();

export const SignalUncheckedUpdateInputSchema: z.ZodType<Prisma.SignalUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => SignalTypeSchema),z.lazy(() => EnumSignalTypeFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  retries: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  strength: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  ProcessedSignal: z.lazy(() => ProcessedSignalUncheckedUpdateManyWithoutSignalNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedUpdateManyWithoutSignalNestedInputSchema).optional()
}).strict();

export const SignalCreateManyInputSchema: z.ZodType<Prisma.SignalCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => SignalTypeSchema),
  source: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  priority: z.number().int().optional().nullable(),
  retries: z.number().int().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  processed: z.boolean().optional(),
  processedAt: z.coerce.date().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.string().optional().nullable(),
  manual: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  strength: z.number()
}).strict();

export const SignalUpdateManyMutationInputSchema: z.ZodType<Prisma.SignalUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => SignalTypeSchema),z.lazy(() => EnumSignalTypeFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  retries: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  strength: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SignalUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SignalUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => SignalTypeSchema),z.lazy(() => EnumSignalTypeFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  retries: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  strength: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnalyticsMetricsCreateInputSchema: z.ZodType<Prisma.AnalyticsMetricsCreateInput> = z.object({
  id: z.string().cuid().optional(),
  totalSearches: z.number().int(),
  averageLatency: z.number(),
  successRate: z.number(),
  errorRate: z.number(),
  cacheHitRate: z.number(),
  queryCount: z.number().int(),
  uniqueUsers: z.number().int(),
  avgResultsPerQuery: z.number(),
  clickThroughRate: z.number(),
  conversionRate: z.number(),
  avgRelevanceScore: z.number(),
  p95Latency: z.number(),
  p99Latency: z.number(),
  resourceUtilization: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  searchTypes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timeWindow: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  session: z.lazy(() => SessionCreateNestedOneWithoutAnalyticsMetricsInputSchema).optional()
}).strict();

export const AnalyticsMetricsUncheckedCreateInputSchema: z.ZodType<Prisma.AnalyticsMetricsUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  totalSearches: z.number().int(),
  averageLatency: z.number(),
  successRate: z.number(),
  errorRate: z.number(),
  cacheHitRate: z.number(),
  queryCount: z.number().int(),
  uniqueUsers: z.number().int(),
  avgResultsPerQuery: z.number(),
  clickThroughRate: z.number(),
  conversionRate: z.number(),
  avgRelevanceScore: z.number(),
  p95Latency: z.number(),
  p99Latency: z.number(),
  resourceUtilization: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  searchTypes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timeWindow: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  sessionId: z.string().optional().nullable()
}).strict();

export const AnalyticsMetricsUpdateInputSchema: z.ZodType<Prisma.AnalyticsMetricsUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalSearches: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  averageLatency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  successRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  errorRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cacheHitRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  queryCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  avgResultsPerQuery: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  clickThroughRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  conversionRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  avgRelevanceScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  p95Latency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  p99Latency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  resourceUtilization: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  searchTypes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeWindow: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  session: z.lazy(() => SessionUpdateOneWithoutAnalyticsMetricsNestedInputSchema).optional()
}).strict();

export const AnalyticsMetricsUncheckedUpdateInputSchema: z.ZodType<Prisma.AnalyticsMetricsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalSearches: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  averageLatency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  successRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  errorRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cacheHitRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  queryCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  avgResultsPerQuery: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  clickThroughRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  conversionRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  avgRelevanceScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  p95Latency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  p99Latency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  resourceUtilization: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  searchTypes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeWindow: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AnalyticsMetricsCreateManyInputSchema: z.ZodType<Prisma.AnalyticsMetricsCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  totalSearches: z.number().int(),
  averageLatency: z.number(),
  successRate: z.number(),
  errorRate: z.number(),
  cacheHitRate: z.number(),
  queryCount: z.number().int(),
  uniqueUsers: z.number().int(),
  avgResultsPerQuery: z.number(),
  clickThroughRate: z.number(),
  conversionRate: z.number(),
  avgRelevanceScore: z.number(),
  p95Latency: z.number(),
  p99Latency: z.number(),
  resourceUtilization: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  searchTypes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timeWindow: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  sessionId: z.string().optional().nullable()
}).strict();

export const AnalyticsMetricsUpdateManyMutationInputSchema: z.ZodType<Prisma.AnalyticsMetricsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalSearches: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  averageLatency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  successRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  errorRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cacheHitRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  queryCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  avgResultsPerQuery: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  clickThroughRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  conversionRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  avgRelevanceScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  p95Latency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  p99Latency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  resourceUtilization: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  searchTypes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeWindow: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnalyticsMetricsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AnalyticsMetricsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalSearches: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  averageLatency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  successRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  errorRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cacheHitRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  queryCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  avgResultsPerQuery: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  clickThroughRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  conversionRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  avgRelevanceScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  p95Latency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  p99Latency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  resourceUtilization: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  searchTypes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeWindow: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AnalyticsTrendCreateInputSchema: z.ZodType<Prisma.AnalyticsTrendCreateInput> = z.object({
  id: z.string().cuid().optional(),
  metric: z.string(),
  current: z.number(),
  change: z.number(),
  trend: z.string(),
  timestamp: z.coerce.date().optional()
}).strict();

export const AnalyticsTrendUncheckedCreateInputSchema: z.ZodType<Prisma.AnalyticsTrendUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  metric: z.string(),
  current: z.number(),
  change: z.number(),
  trend: z.string(),
  timestamp: z.coerce.date().optional()
}).strict();

export const AnalyticsTrendUpdateInputSchema: z.ZodType<Prisma.AnalyticsTrendUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metric: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  current: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  change: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  trend: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnalyticsTrendUncheckedUpdateInputSchema: z.ZodType<Prisma.AnalyticsTrendUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metric: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  current: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  change: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  trend: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnalyticsTrendCreateManyInputSchema: z.ZodType<Prisma.AnalyticsTrendCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  metric: z.string(),
  current: z.number(),
  change: z.number(),
  trend: z.string(),
  timestamp: z.coerce.date().optional()
}).strict();

export const AnalyticsTrendUpdateManyMutationInputSchema: z.ZodType<Prisma.AnalyticsTrendUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metric: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  current: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  change: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  trend: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnalyticsTrendUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AnalyticsTrendUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metric: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  current: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  change: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  trend: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PerformanceInsightCreateInputSchema: z.ZodType<Prisma.PerformanceInsightCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  severity: z.string(),
  message: z.string(),
  metric: z.string(),
  currentValue: z.number(),
  recommendedValue: z.number().optional().nullable(),
  action: z.string(),
  timestamp: z.coerce.date().optional()
}).strict();

export const PerformanceInsightUncheckedCreateInputSchema: z.ZodType<Prisma.PerformanceInsightUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  severity: z.string(),
  message: z.string(),
  metric: z.string(),
  currentValue: z.number(),
  recommendedValue: z.number().optional().nullable(),
  action: z.string(),
  timestamp: z.coerce.date().optional()
}).strict();

export const PerformanceInsightUpdateInputSchema: z.ZodType<Prisma.PerformanceInsightUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  severity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metric: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currentValue: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recommendedValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PerformanceInsightUncheckedUpdateInputSchema: z.ZodType<Prisma.PerformanceInsightUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  severity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metric: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currentValue: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recommendedValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PerformanceInsightCreateManyInputSchema: z.ZodType<Prisma.PerformanceInsightCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  severity: z.string(),
  message: z.string(),
  metric: z.string(),
  currentValue: z.number(),
  recommendedValue: z.number().optional().nullable(),
  action: z.string(),
  timestamp: z.coerce.date().optional()
}).strict();

export const PerformanceInsightUpdateManyMutationInputSchema: z.ZodType<Prisma.PerformanceInsightUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  severity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metric: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currentValue: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recommendedValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const PerformanceInsightUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PerformanceInsightUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  severity: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  message: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metric: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currentValue: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recommendedValue: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnalyticsReportCreateInputSchema: z.ZodType<Prisma.AnalyticsReportCreateInput> = z.object({
  id: z.string().cuid().optional(),
  timeWindow: z.string(),
  generatedAt: z.coerce.date(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  trends: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  insights: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  popularQueries: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional()
}).strict();

export const AnalyticsReportUncheckedCreateInputSchema: z.ZodType<Prisma.AnalyticsReportUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  timeWindow: z.string(),
  generatedAt: z.coerce.date(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  trends: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  insights: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  popularQueries: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional()
}).strict();

export const AnalyticsReportUpdateInputSchema: z.ZodType<Prisma.AnalyticsReportUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timeWindow: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  trends: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  insights: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  popularQueries: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnalyticsReportUncheckedUpdateInputSchema: z.ZodType<Prisma.AnalyticsReportUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timeWindow: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  trends: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  insights: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  popularQueries: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnalyticsReportCreateManyInputSchema: z.ZodType<Prisma.AnalyticsReportCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  timeWindow: z.string(),
  generatedAt: z.coerce.date(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  trends: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  insights: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  popularQueries: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional()
}).strict();

export const AnalyticsReportUpdateManyMutationInputSchema: z.ZodType<Prisma.AnalyticsReportUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timeWindow: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  trends: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  insights: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  popularQueries: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnalyticsReportUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AnalyticsReportUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timeWindow: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  generatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  trends: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  insights: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  popularQueries: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdaptationSuggestionCreateInputSchema: z.ZodType<Prisma.AdaptationSuggestionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  queryHash: z.string(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  confidence: z.number(),
  status: z.string().optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AdaptationSuggestionUncheckedCreateInputSchema: z.ZodType<Prisma.AdaptationSuggestionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  queryHash: z.string(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  confidence: z.number(),
  status: z.string().optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AdaptationSuggestionUpdateInputSchema: z.ZodType<Prisma.AdaptationSuggestionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdaptationSuggestionUncheckedUpdateInputSchema: z.ZodType<Prisma.AdaptationSuggestionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdaptationSuggestionCreateManyInputSchema: z.ZodType<Prisma.AdaptationSuggestionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  queryHash: z.string(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  confidence: z.number(),
  status: z.string().optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const AdaptationSuggestionUpdateManyMutationInputSchema: z.ZodType<Prisma.AdaptationSuggestionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdaptationSuggestionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AdaptationSuggestionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningMetricCreateInputSchema: z.ZodType<Prisma.LearningMetricCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => MetricTypeSchema),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  interval: z.string(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.string(),
  aggregated: z.boolean().optional(),
  count: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  model: z.lazy(() => ModelConfigCreateNestedOneWithoutMetricsInputSchema).optional(),
  session: z.lazy(() => SessionCreateNestedOneWithoutLearningMetricsInputSchema).optional()
}).strict();

export const LearningMetricUncheckedCreateInputSchema: z.ZodType<Prisma.LearningMetricUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => MetricTypeSchema),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  interval: z.string(),
  sessionId: z.string().optional().nullable(),
  modelId: z.string().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.string(),
  aggregated: z.boolean().optional(),
  count: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LearningMetricUpdateInputSchema: z.ZodType<Prisma.LearningMetricUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => EnumMetricTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interval: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aggregated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  model: z.lazy(() => ModelConfigUpdateOneWithoutMetricsNestedInputSchema).optional(),
  session: z.lazy(() => SessionUpdateOneWithoutLearningMetricsNestedInputSchema).optional()
}).strict();

export const LearningMetricUncheckedUpdateInputSchema: z.ZodType<Prisma.LearningMetricUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => EnumMetricTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interval: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aggregated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningMetricCreateManyInputSchema: z.ZodType<Prisma.LearningMetricCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => MetricTypeSchema),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  interval: z.string(),
  sessionId: z.string().optional().nullable(),
  modelId: z.string().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.string(),
  aggregated: z.boolean().optional(),
  count: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LearningMetricUpdateManyMutationInputSchema: z.ZodType<Prisma.LearningMetricUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => EnumMetricTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interval: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aggregated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningMetricUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LearningMetricUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => EnumMetricTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interval: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aggregated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningEventCreateInputSchema: z.ZodType<Prisma.LearningEventCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => LearningEventTypeSchema),
  status: z.lazy(() => LearningEventStatusSchema).optional(),
  priority: z.lazy(() => LearningEventPrioritySchema).optional(),
  timestamp: z.coerce.date().optional(),
  processedAt: z.coerce.date().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  clientId: z.string().optional().nullable(),
  environment: z.string().optional().nullable(),
  version: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => LearningEventCreatetagsInputSchema),z.string().array() ]).optional(),
  error: z.string().optional().nullable(),
  retryCount: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  patterns: z.lazy(() => LearningPatternCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const LearningEventUncheckedCreateInputSchema: z.ZodType<Prisma.LearningEventUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => LearningEventTypeSchema),
  status: z.lazy(() => LearningEventStatusSchema).optional(),
  priority: z.lazy(() => LearningEventPrioritySchema).optional(),
  timestamp: z.coerce.date().optional(),
  processedAt: z.coerce.date().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  clientId: z.string().optional().nullable(),
  environment: z.string().optional().nullable(),
  version: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => LearningEventCreatetagsInputSchema),z.string().array() ]).optional(),
  error: z.string().optional().nullable(),
  retryCount: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  patterns: z.lazy(() => LearningPatternUncheckedCreateNestedManyWithoutEventInputSchema).optional()
}).strict();

export const LearningEventUpdateInputSchema: z.ZodType<Prisma.LearningEventUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => LearningEventTypeSchema),z.lazy(() => EnumLearningEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LearningEventStatusSchema),z.lazy(() => EnumLearningEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => LearningEventPrioritySchema),z.lazy(() => EnumLearningEventPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  processedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  clientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  environment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => LearningEventUpdatetagsInputSchema),z.string().array() ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  retryCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.lazy(() => LearningPatternUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const LearningEventUncheckedUpdateInputSchema: z.ZodType<Prisma.LearningEventUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => LearningEventTypeSchema),z.lazy(() => EnumLearningEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LearningEventStatusSchema),z.lazy(() => EnumLearningEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => LearningEventPrioritySchema),z.lazy(() => EnumLearningEventPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  processedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  clientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  environment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => LearningEventUpdatetagsInputSchema),z.string().array() ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  retryCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.lazy(() => LearningPatternUncheckedUpdateManyWithoutEventNestedInputSchema).optional()
}).strict();

export const LearningEventCreateManyInputSchema: z.ZodType<Prisma.LearningEventCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => LearningEventTypeSchema),
  status: z.lazy(() => LearningEventStatusSchema).optional(),
  priority: z.lazy(() => LearningEventPrioritySchema).optional(),
  timestamp: z.coerce.date().optional(),
  processedAt: z.coerce.date().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  clientId: z.string().optional().nullable(),
  environment: z.string().optional().nullable(),
  version: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => LearningEventCreatetagsInputSchema),z.string().array() ]).optional(),
  error: z.string().optional().nullable(),
  retryCount: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LearningEventUpdateManyMutationInputSchema: z.ZodType<Prisma.LearningEventUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => LearningEventTypeSchema),z.lazy(() => EnumLearningEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LearningEventStatusSchema),z.lazy(() => EnumLearningEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => LearningEventPrioritySchema),z.lazy(() => EnumLearningEventPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  processedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  clientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  environment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => LearningEventUpdatetagsInputSchema),z.string().array() ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  retryCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningEventUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LearningEventUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => LearningEventTypeSchema),z.lazy(() => EnumLearningEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LearningEventStatusSchema),z.lazy(() => EnumLearningEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => LearningEventPrioritySchema),z.lazy(() => EnumLearningEventPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  processedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  clientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  environment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => LearningEventUpdatetagsInputSchema),z.string().array() ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  retryCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningPatternCreateInputSchema: z.ZodType<Prisma.LearningPatternCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  confidence: z.number(),
  features: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  event: z.lazy(() => LearningEventCreateNestedOneWithoutPatternsInputSchema)
}).strict();

export const LearningPatternUncheckedCreateInputSchema: z.ZodType<Prisma.LearningPatternUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  confidence: z.number(),
  features: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  eventId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LearningPatternUpdateInputSchema: z.ZodType<Prisma.LearningPatternUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  features: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  event: z.lazy(() => LearningEventUpdateOneRequiredWithoutPatternsNestedInputSchema).optional()
}).strict();

export const LearningPatternUncheckedUpdateInputSchema: z.ZodType<Prisma.LearningPatternUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  features: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningPatternCreateManyInputSchema: z.ZodType<Prisma.LearningPatternCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  confidence: z.number(),
  features: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  eventId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LearningPatternUpdateManyMutationInputSchema: z.ZodType<Prisma.LearningPatternUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  features: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningPatternUncheckedUpdateManyInputSchema: z.ZodType<Prisma.LearningPatternUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  features: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  eventId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineStateCreateInputSchema: z.ZodType<Prisma.EngineStateCreateInput> = z.object({
  id: z.string().cuid().optional(),
  status: z.string(),
  currentPhase: z.string().optional().nullable(),
  confidence: z.number().optional(),
  lastActive: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineStateUncheckedCreateInputSchema: z.ZodType<Prisma.EngineStateUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  status: z.string(),
  currentPhase: z.string().optional().nullable(),
  confidence: z.number().optional(),
  lastActive: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineStateUpdateInputSchema: z.ZodType<Prisma.EngineStateUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currentPhase: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastActive: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineStateUncheckedUpdateInputSchema: z.ZodType<Prisma.EngineStateUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currentPhase: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastActive: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineStateCreateManyInputSchema: z.ZodType<Prisma.EngineStateCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  status: z.string(),
  currentPhase: z.string().optional().nullable(),
  confidence: z.number().optional(),
  lastActive: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineStateUpdateManyMutationInputSchema: z.ZodType<Prisma.EngineStateUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currentPhase: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastActive: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineStateUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EngineStateUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  currentPhase: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastActive: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineOperationCreateInputSchema: z.ZodType<Prisma.EngineOperationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  status: z.string(),
  startTime: z.coerce.date().optional(),
  endTime: z.coerce.date().optional().nullable(),
  metrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  EngineLearningResult: z.lazy(() => EngineLearningResultCreateNestedManyWithoutOperationInputSchema).optional()
}).strict();

export const EngineOperationUncheckedCreateInputSchema: z.ZodType<Prisma.EngineOperationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  status: z.string(),
  startTime: z.coerce.date().optional(),
  endTime: z.coerce.date().optional().nullable(),
  metrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  EngineLearningResult: z.lazy(() => EngineLearningResultUncheckedCreateNestedManyWithoutOperationInputSchema).optional()
}).strict();

export const EngineOperationUpdateInputSchema: z.ZodType<Prisma.EngineOperationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  EngineLearningResult: z.lazy(() => EngineLearningResultUpdateManyWithoutOperationNestedInputSchema).optional()
}).strict();

export const EngineOperationUncheckedUpdateInputSchema: z.ZodType<Prisma.EngineOperationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  EngineLearningResult: z.lazy(() => EngineLearningResultUncheckedUpdateManyWithoutOperationNestedInputSchema).optional()
}).strict();

export const EngineOperationCreateManyInputSchema: z.ZodType<Prisma.EngineOperationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  status: z.string(),
  startTime: z.coerce.date().optional(),
  endTime: z.coerce.date().optional().nullable(),
  metrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineOperationUpdateManyMutationInputSchema: z.ZodType<Prisma.EngineOperationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineOperationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EngineOperationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineMetricCreateInputSchema: z.ZodType<Prisma.EngineMetricCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => MetricTypeSchema),
  value: z.number(),
  confidence: z.number(),
  timestamp: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.string().optional().nullable()
}).strict();

export const EngineMetricUncheckedCreateInputSchema: z.ZodType<Prisma.EngineMetricUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => MetricTypeSchema),
  value: z.number(),
  confidence: z.number(),
  timestamp: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.string().optional().nullable()
}).strict();

export const EngineMetricUpdateInputSchema: z.ZodType<Prisma.EngineMetricUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => EnumMetricTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EngineMetricUncheckedUpdateInputSchema: z.ZodType<Prisma.EngineMetricUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => EnumMetricTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EngineMetricCreateManyInputSchema: z.ZodType<Prisma.EngineMetricCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => MetricTypeSchema),
  value: z.number(),
  confidence: z.number(),
  timestamp: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.string().optional().nullable()
}).strict();

export const EngineMetricUpdateManyMutationInputSchema: z.ZodType<Prisma.EngineMetricUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => EnumMetricTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EngineMetricUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EngineMetricUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => EnumMetricTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const EngineLearningResultCreateInputSchema: z.ZodType<Prisma.EngineLearningResultCreateInput> = z.object({
  id: z.string().cuid().optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  confidence: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.coerce.date().optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operation: z.lazy(() => EngineOperationCreateNestedOneWithoutEngineLearningResultInputSchema),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyCreateNestedManyWithoutLearningResultInputSchema).optional(),
  recommendations: z.lazy(() => EngineRecommendationCreateNestedManyWithoutLearningResultInputSchema).optional()
}).strict();

export const EngineLearningResultUncheckedCreateInputSchema: z.ZodType<Prisma.EngineLearningResultUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  confidence: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.coerce.date().optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.string(),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyUncheckedCreateNestedManyWithoutLearningResultInputSchema).optional(),
  recommendations: z.lazy(() => EngineRecommendationUncheckedCreateNestedManyWithoutLearningResultInputSchema).optional()
}).strict();

export const EngineLearningResultUpdateInputSchema: z.ZodType<Prisma.EngineLearningResultUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operation: z.lazy(() => EngineOperationUpdateOneRequiredWithoutEngineLearningResultNestedInputSchema).optional(),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyUpdateManyWithoutLearningResultNestedInputSchema).optional(),
  recommendations: z.lazy(() => EngineRecommendationUpdateManyWithoutLearningResultNestedInputSchema).optional()
}).strict();

export const EngineLearningResultUncheckedUpdateInputSchema: z.ZodType<Prisma.EngineLearningResultUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyUncheckedUpdateManyWithoutLearningResultNestedInputSchema).optional(),
  recommendations: z.lazy(() => EngineRecommendationUncheckedUpdateManyWithoutLearningResultNestedInputSchema).optional()
}).strict();

export const EngineLearningResultCreateManyInputSchema: z.ZodType<Prisma.EngineLearningResultCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  confidence: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.coerce.date().optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.string()
}).strict();

export const EngineLearningResultUpdateManyMutationInputSchema: z.ZodType<Prisma.EngineLearningResultUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const EngineLearningResultUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EngineLearningResultUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineOptimizationStrategyCreateInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EngineOptimizationTypeSchema),
  priority: z.number(),
  confidence: z.number(),
  impact: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  learningResult: z.lazy(() => EngineLearningResultCreateNestedOneWithoutEngineOptimizationStrategyInputSchema)
}).strict();

export const EngineOptimizationStrategyUncheckedCreateInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EngineOptimizationTypeSchema),
  priority: z.number(),
  confidence: z.number(),
  impact: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  learningResultId: z.string()
}).strict();

export const EngineOptimizationStrategyUpdateInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  impact: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  learningResult: z.lazy(() => EngineLearningResultUpdateOneRequiredWithoutEngineOptimizationStrategyNestedInputSchema).optional()
}).strict();

export const EngineOptimizationStrategyUncheckedUpdateInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  impact: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  learningResultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineOptimizationStrategyCreateManyInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EngineOptimizationTypeSchema),
  priority: z.number(),
  confidence: z.number(),
  impact: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  learningResultId: z.string()
}).strict();

export const EngineOptimizationStrategyUpdateManyMutationInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  impact: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineOptimizationStrategyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  impact: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  learningResultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineConfidenceScoreCreateInputSchema: z.ZodType<Prisma.EngineConfidenceScoreCreateInput> = z.object({
  id: z.string().cuid().optional(),
  value: z.number(),
  factors: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineConfidenceScoreUncheckedCreateInputSchema: z.ZodType<Prisma.EngineConfidenceScoreUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  value: z.number(),
  factors: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineConfidenceScoreUpdateInputSchema: z.ZodType<Prisma.EngineConfidenceScoreUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  factors: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineConfidenceScoreUncheckedUpdateInputSchema: z.ZodType<Prisma.EngineConfidenceScoreUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  factors: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineConfidenceScoreCreateManyInputSchema: z.ZodType<Prisma.EngineConfidenceScoreCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  value: z.number(),
  factors: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineConfidenceScoreUpdateManyMutationInputSchema: z.ZodType<Prisma.EngineConfidenceScoreUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  factors: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineConfidenceScoreUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EngineConfidenceScoreUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  factors: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SearchWeightsCreateInputSchema: z.ZodType<Prisma.SearchWeightsCreateInput> = z.object({
  id: z.string().cuid().optional(),
  titleWeight: z.number().optional(),
  contentWeight: z.number().optional(),
  tagWeight: z.number().optional(),
  active: z.boolean().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SearchWeightsUncheckedCreateInputSchema: z.ZodType<Prisma.SearchWeightsUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  titleWeight: z.number().optional(),
  contentWeight: z.number().optional(),
  tagWeight: z.number().optional(),
  active: z.boolean().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SearchWeightsUpdateInputSchema: z.ZodType<Prisma.SearchWeightsUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  titleWeight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  contentWeight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  tagWeight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SearchWeightsUncheckedUpdateInputSchema: z.ZodType<Prisma.SearchWeightsUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  titleWeight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  contentWeight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  tagWeight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SearchWeightsCreateManyInputSchema: z.ZodType<Prisma.SearchWeightsCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  titleWeight: z.number().optional(),
  contentWeight: z.number().optional(),
  tagWeight: z.number().optional(),
  active: z.boolean().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SearchWeightsUpdateManyMutationInputSchema: z.ZodType<Prisma.SearchWeightsUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  titleWeight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  contentWeight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  tagWeight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SearchWeightsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SearchWeightsUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  titleWeight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  contentWeight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  tagWeight: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  active: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SearchConfigCreateInputSchema: z.ZodType<Prisma.SearchConfigCreateInput> = z.object({
  id: z.string().cuid().optional(),
  key: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SearchConfigUncheckedCreateInputSchema: z.ZodType<Prisma.SearchConfigUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  key: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SearchConfigUpdateInputSchema: z.ZodType<Prisma.SearchConfigUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SearchConfigUncheckedUpdateInputSchema: z.ZodType<Prisma.SearchConfigUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SearchConfigCreateManyInputSchema: z.ZodType<Prisma.SearchConfigCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  key: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SearchConfigUpdateManyMutationInputSchema: z.ZodType<Prisma.SearchConfigUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SearchConfigUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SearchConfigUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExperimentConfigCreateInputSchema: z.ZodType<Prisma.ExperimentConfigCreateInput> = z.object({
  id: z.string().cuid().optional(),
  key: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ExperimentConfigUncheckedCreateInputSchema: z.ZodType<Prisma.ExperimentConfigUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  key: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ExperimentConfigUpdateInputSchema: z.ZodType<Prisma.ExperimentConfigUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExperimentConfigUncheckedUpdateInputSchema: z.ZodType<Prisma.ExperimentConfigUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExperimentConfigCreateManyInputSchema: z.ZodType<Prisma.ExperimentConfigCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  key: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  status: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ExperimentConfigUpdateManyMutationInputSchema: z.ZodType<Prisma.ExperimentConfigUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ExperimentConfigUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ExperimentConfigUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineRecommendationCreateInputSchema: z.ZodType<Prisma.EngineRecommendationCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EngineOptimizationTypeSchema),
  priority: z.number(),
  confidence: z.number(),
  impact: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  learningResult: z.lazy(() => EngineLearningResultCreateNestedOneWithoutRecommendationsInputSchema)
}).strict();

export const EngineRecommendationUncheckedCreateInputSchema: z.ZodType<Prisma.EngineRecommendationUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EngineOptimizationTypeSchema),
  priority: z.number(),
  confidence: z.number(),
  impact: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  learningResultId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineRecommendationUpdateInputSchema: z.ZodType<Prisma.EngineRecommendationUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  impact: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  learningResult: z.lazy(() => EngineLearningResultUpdateOneRequiredWithoutRecommendationsNestedInputSchema).optional()
}).strict();

export const EngineRecommendationUncheckedUpdateInputSchema: z.ZodType<Prisma.EngineRecommendationUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  impact: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  learningResultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineRecommendationCreateManyInputSchema: z.ZodType<Prisma.EngineRecommendationCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EngineOptimizationTypeSchema),
  priority: z.number(),
  confidence: z.number(),
  impact: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  learningResultId: z.string(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineRecommendationUpdateManyMutationInputSchema: z.ZodType<Prisma.EngineRecommendationUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  impact: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineRecommendationUncheckedUpdateManyInputSchema: z.ZodType<Prisma.EngineRecommendationUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  impact: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  learningResultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IndexCreateInputSchema: z.ZodType<Prisma.IndexCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  status: z.string().optional(),
  settings: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  mappings: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  doc_count: z.number().int().optional(),
  size_bytes: z.number().int().optional(),
  health: z.string().optional()
}).strict();

export const IndexUncheckedCreateInputSchema: z.ZodType<Prisma.IndexUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  status: z.string().optional(),
  settings: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  mappings: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  doc_count: z.number().int().optional(),
  size_bytes: z.number().int().optional(),
  health: z.string().optional()
}).strict();

export const IndexUpdateInputSchema: z.ZodType<Prisma.IndexUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  mappings: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  size_bytes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  health: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IndexUncheckedUpdateInputSchema: z.ZodType<Prisma.IndexUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  mappings: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  size_bytes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  health: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IndexCreateManyInputSchema: z.ZodType<Prisma.IndexCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  status: z.string().optional(),
  settings: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  mappings: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.coerce.date().optional(),
  updated_at: z.coerce.date().optional(),
  deleted_at: z.coerce.date().optional().nullable(),
  doc_count: z.number().int().optional(),
  size_bytes: z.number().int().optional(),
  health: z.string().optional()
}).strict();

export const IndexUpdateManyMutationInputSchema: z.ZodType<Prisma.IndexUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  mappings: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  size_bytes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  health: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const IndexUncheckedUpdateManyInputSchema: z.ZodType<Prisma.IndexUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  settings: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  mappings: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  created_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updated_at: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  deleted_at: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  doc_count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  size_bytes: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  health: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserCreateInputSchema: z.ZodType<Prisma.UserCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  password: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => AuthSessionCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateInputSchema: z.ZodType<Prisma.UserUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  password: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional(),
  sessions: z.lazy(() => AuthSessionUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUpdateInputSchema: z.ZodType<Prisma.UserUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => AuthSessionUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateInputSchema: z.ZodType<Prisma.UserUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional(),
  sessions: z.lazy(() => AuthSessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateManyInputSchema: z.ZodType<Prisma.UserCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  password: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const UserUpdateManyMutationInputSchema: z.ZodType<Prisma.UserUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const UserUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UserUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountCreateInputSchema: z.ZodType<Prisma.AccountCreateInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable(),
  user: z.lazy(() => UserCreateNestedOneWithoutAccountsInputSchema)
}).strict();

export const AccountUncheckedCreateInputSchema: z.ZodType<Prisma.AccountUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountUpdateInputSchema: z.ZodType<Prisma.AccountUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountUncheckedUpdateInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountCreateManyInputSchema: z.ZodType<Prisma.AccountCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AuthSessionCreateInputSchema: z.ZodType<Prisma.AuthSessionCreateInput> = z.object({
  id: z.string().cuid().optional(),
  sessionToken: z.string(),
  expires: z.coerce.date(),
  user: z.lazy(() => UserCreateNestedOneWithoutSessionsInputSchema)
}).strict();

export const AuthSessionUncheckedCreateInputSchema: z.ZodType<Prisma.AuthSessionUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.coerce.date()
}).strict();

export const AuthSessionUpdateInputSchema: z.ZodType<Prisma.AuthSessionUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  user: z.lazy(() => UserUpdateOneRequiredWithoutSessionsNestedInputSchema).optional()
}).strict();

export const AuthSessionUncheckedUpdateInputSchema: z.ZodType<Prisma.AuthSessionUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuthSessionCreateManyInputSchema: z.ZodType<Prisma.AuthSessionCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.coerce.date()
}).strict();

export const AuthSessionUpdateManyMutationInputSchema: z.ZodType<Prisma.AuthSessionUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuthSessionUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AuthSessionUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenCreateInputSchema: z.ZodType<Prisma.VerificationTokenCreateInput> = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const VerificationTokenUncheckedCreateInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedCreateInput> = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const VerificationTokenUpdateInputSchema: z.ZodType<Prisma.VerificationTokenUpdateInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenUncheckedUpdateInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedUpdateInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenCreateManyInputSchema: z.ZodType<Prisma.VerificationTokenCreateManyInput> = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.coerce.date()
}).strict();

export const VerificationTokenUpdateManyMutationInputSchema: z.ZodType<Prisma.VerificationTokenUpdateManyMutationInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const VerificationTokenUncheckedUpdateManyInputSchema: z.ZodType<Prisma.VerificationTokenUncheckedUpdateManyInput> = z.object({
  identifier: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ApiKeyCreateInputSchema: z.ZodType<Prisma.ApiKeyCreateInput> = z.object({
  id: z.string().cuid().optional(),
  key: z.string(),
  clientId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  lastUsedAt: z.coerce.date().optional().nullable(),
  allowedIps: z.union([ z.lazy(() => ApiKeyCreateallowedIpsInputSchema),z.string().array() ]).optional(),
  rateLimit: z.number().int().optional().nullable(),
  usageCount: z.number().int().optional()
}).strict();

export const ApiKeyUncheckedCreateInputSchema: z.ZodType<Prisma.ApiKeyUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  key: z.string(),
  clientId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  lastUsedAt: z.coerce.date().optional().nullable(),
  allowedIps: z.union([ z.lazy(() => ApiKeyCreateallowedIpsInputSchema),z.string().array() ]).optional(),
  rateLimit: z.number().int().optional().nullable(),
  usageCount: z.number().int().optional()
}).strict();

export const ApiKeyUpdateInputSchema: z.ZodType<Prisma.ApiKeyUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  clientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastUsedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allowedIps: z.union([ z.lazy(() => ApiKeyUpdateallowedIpsInputSchema),z.string().array() ]).optional(),
  rateLimit: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usageCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ApiKeyUncheckedUpdateInputSchema: z.ZodType<Prisma.ApiKeyUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  clientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastUsedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allowedIps: z.union([ z.lazy(() => ApiKeyUpdateallowedIpsInputSchema),z.string().array() ]).optional(),
  rateLimit: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usageCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ApiKeyCreateManyInputSchema: z.ZodType<Prisma.ApiKeyCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  key: z.string(),
  clientId: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  expiresAt: z.coerce.date().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  lastUsedAt: z.coerce.date().optional().nullable(),
  allowedIps: z.union([ z.lazy(() => ApiKeyCreateallowedIpsInputSchema),z.string().array() ]).optional(),
  rateLimit: z.number().int().optional().nullable(),
  usageCount: z.number().int().optional()
}).strict();

export const ApiKeyUpdateManyMutationInputSchema: z.ZodType<Prisma.ApiKeyUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  clientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastUsedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allowedIps: z.union([ z.lazy(() => ApiKeyUpdateallowedIpsInputSchema),z.string().array() ]).optional(),
  rateLimit: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usageCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ApiKeyUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ApiKeyUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  key: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  clientId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastUsedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  allowedIps: z.union([ z.lazy(() => ApiKeyUpdateallowedIpsInputSchema),z.string().array() ]).optional(),
  rateLimit: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  usageCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AdminTokenCreateInputSchema: z.ZodType<Prisma.AdminTokenCreateInput> = z.object({
  id: z.string().cuid().optional(),
  token: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  lastUsedAt: z.coerce.date().optional().nullable()
}).strict();

export const AdminTokenUncheckedCreateInputSchema: z.ZodType<Prisma.AdminTokenUncheckedCreateInput> = z.object({
  id: z.string().cuid().optional(),
  token: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  lastUsedAt: z.coerce.date().optional().nullable()
}).strict();

export const AdminTokenUpdateInputSchema: z.ZodType<Prisma.AdminTokenUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastUsedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AdminTokenUncheckedUpdateInputSchema: z.ZodType<Prisma.AdminTokenUncheckedUpdateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastUsedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AdminTokenCreateManyInputSchema: z.ZodType<Prisma.AdminTokenCreateManyInput> = z.object({
  id: z.string().cuid().optional(),
  token: z.string(),
  name: z.string(),
  description: z.string().optional().nullable(),
  isActive: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  lastUsedAt: z.coerce.date().optional().nullable()
}).strict();

export const AdminTokenUpdateManyMutationInputSchema: z.ZodType<Prisma.AdminTokenUpdateManyMutationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastUsedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AdminTokenUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AdminTokenUncheckedUpdateManyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  token: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  isActive: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastUsedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SessionToSignalCreateInputSchema: z.ZodType<Prisma.SessionToSignalCreateInput> = z.object({
  sessions: z.lazy(() => SessionCreateNestedOneWithoutSessionToSignalInputSchema),
  Signal: z.lazy(() => SignalCreateNestedOneWithoutSessionToSignalInputSchema)
}).strict();

export const SessionToSignalUncheckedCreateInputSchema: z.ZodType<Prisma.SessionToSignalUncheckedCreateInput> = z.object({
  A: z.string(),
  B: z.string()
}).strict();

export const SessionToSignalUpdateInputSchema: z.ZodType<Prisma.SessionToSignalUpdateInput> = z.object({
  sessions: z.lazy(() => SessionUpdateOneRequiredWithoutSessionToSignalNestedInputSchema).optional(),
  Signal: z.lazy(() => SignalUpdateOneRequiredWithoutSessionToSignalNestedInputSchema).optional()
}).strict();

export const SessionToSignalUncheckedUpdateInputSchema: z.ZodType<Prisma.SessionToSignalUncheckedUpdateInput> = z.object({
  A: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  B: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionToSignalCreateManyInputSchema: z.ZodType<Prisma.SessionToSignalCreateManyInput> = z.object({
  A: z.string(),
  B: z.string()
}).strict();

export const SessionToSignalUpdateManyMutationInputSchema: z.ZodType<Prisma.SessionToSignalUpdateManyMutationInput> = z.object({
}).strict();

export const SessionToSignalUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SessionToSignalUncheckedUpdateManyInput> = z.object({
  A: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  B: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const JsonFilterSchema: z.ZodType<Prisma.JsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const DateTimeFilterSchema: z.ZodType<Prisma.DateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const DocumentCountOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const DocumentMinOrderByAggregateInputSchema: z.ZodType<Prisma.DocumentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const JsonWithAggregatesFilterSchema: z.ZodType<Prisma.JsonWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonFilterSchema).optional()
}).strict();

export const DateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const IntFilterSchema: z.ZodType<Prisma.IntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const MigrationCountOrderByAggregateInputSchema: z.ZodType<Prisma.MigrationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  applied_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MigrationAvgOrderByAggregateInputSchema: z.ZodType<Prisma.MigrationAvgOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MigrationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MigrationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  applied_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MigrationMinOrderByAggregateInputSchema: z.ZodType<Prisma.MigrationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  applied_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MigrationSumOrderByAggregateInputSchema: z.ZodType<Prisma.MigrationSumOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntWithAggregatesFilterSchema: z.ZodType<Prisma.IntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const SortOrderInputSchema: z.ZodType<Prisma.SortOrderInput> = z.object({
  sort: z.lazy(() => SortOrderSchema),
  nulls: z.lazy(() => NullsOrderSchema).optional()
}).strict();

export const SearchAnalyticsCountOrderByAggregateInputSchema: z.ZodType<Prisma.SearchAnalyticsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  query: z.lazy(() => SortOrderSchema).optional(),
  searchType: z.lazy(() => SortOrderSchema).optional(),
  totalHits: z.lazy(() => SortOrderSchema).optional(),
  took: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  facetsUsed: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  resultIds: z.lazy(() => SortOrderSchema).optional(),
  page: z.lazy(() => SortOrderSchema).optional(),
  pageSize: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchAnalyticsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SearchAnalyticsAvgOrderByAggregateInput> = z.object({
  totalHits: z.lazy(() => SortOrderSchema).optional(),
  took: z.lazy(() => SortOrderSchema).optional(),
  page: z.lazy(() => SortOrderSchema).optional(),
  pageSize: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchAnalyticsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SearchAnalyticsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  query: z.lazy(() => SortOrderSchema).optional(),
  searchType: z.lazy(() => SortOrderSchema).optional(),
  totalHits: z.lazy(() => SortOrderSchema).optional(),
  took: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  page: z.lazy(() => SortOrderSchema).optional(),
  pageSize: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchAnalyticsMinOrderByAggregateInputSchema: z.ZodType<Prisma.SearchAnalyticsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  query: z.lazy(() => SortOrderSchema).optional(),
  searchType: z.lazy(() => SortOrderSchema).optional(),
  totalHits: z.lazy(() => SortOrderSchema).optional(),
  took: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  page: z.lazy(() => SortOrderSchema).optional(),
  pageSize: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchAnalyticsSumOrderByAggregateInputSchema: z.ZodType<Prisma.SearchAnalyticsSumOrderByAggregateInput> = z.object({
  totalHits: z.lazy(() => SortOrderSchema).optional(),
  took: z.lazy(() => SortOrderSchema).optional(),
  page: z.lazy(() => SortOrderSchema).optional(),
  pageSize: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const ABTestAssignmentListRelationFilterSchema: z.ZodType<Prisma.ABTestAssignmentListRelationFilter> = z.object({
  every: z.lazy(() => ABTestAssignmentWhereInputSchema).optional(),
  some: z.lazy(() => ABTestAssignmentWhereInputSchema).optional(),
  none: z.lazy(() => ABTestAssignmentWhereInputSchema).optional()
}).strict();

export const ABTestMetricListRelationFilterSchema: z.ZodType<Prisma.ABTestMetricListRelationFilter> = z.object({
  every: z.lazy(() => ABTestMetricWhereInputSchema).optional(),
  some: z.lazy(() => ABTestMetricWhereInputSchema).optional(),
  none: z.lazy(() => ABTestMetricWhereInputSchema).optional()
}).strict();

export const AnalyticsMetricsListRelationFilterSchema: z.ZodType<Prisma.AnalyticsMetricsListRelationFilter> = z.object({
  every: z.lazy(() => AnalyticsMetricsWhereInputSchema).optional(),
  some: z.lazy(() => AnalyticsMetricsWhereInputSchema).optional(),
  none: z.lazy(() => AnalyticsMetricsWhereInputSchema).optional()
}).strict();

export const ConversationListRelationFilterSchema: z.ZodType<Prisma.ConversationListRelationFilter> = z.object({
  every: z.lazy(() => ConversationWhereInputSchema).optional(),
  some: z.lazy(() => ConversationWhereInputSchema).optional(),
  none: z.lazy(() => ConversationWhereInputSchema).optional()
}).strict();

export const LearningMetricListRelationFilterSchema: z.ZodType<Prisma.LearningMetricListRelationFilter> = z.object({
  every: z.lazy(() => LearningMetricWhereInputSchema).optional(),
  some: z.lazy(() => LearningMetricWhereInputSchema).optional(),
  none: z.lazy(() => LearningMetricWhereInputSchema).optional()
}).strict();

export const SearchEventListRelationFilterSchema: z.ZodType<Prisma.SearchEventListRelationFilter> = z.object({
  every: z.lazy(() => SearchEventWhereInputSchema).optional(),
  some: z.lazy(() => SearchEventWhereInputSchema).optional(),
  none: z.lazy(() => SearchEventWhereInputSchema).optional()
}).strict();

export const SessionToSignalListRelationFilterSchema: z.ZodType<Prisma.SessionToSignalListRelationFilter> = z.object({
  every: z.lazy(() => SessionToSignalWhereInputSchema).optional(),
  some: z.lazy(() => SessionToSignalWhereInputSchema).optional(),
  none: z.lazy(() => SessionToSignalWhereInputSchema).optional()
}).strict();

export const ABTestAssignmentOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ABTestAssignmentOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ABTestMetricOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ABTestMetricOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsMetricsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AnalyticsMetricsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ConversationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ConversationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningMetricOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LearningMetricOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchEventOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SearchEventOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionToSignalOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SessionToSignalOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  lastActiveAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  lastActiveAt: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  startedAt: z.lazy(() => SortOrderSchema).optional(),
  lastActiveAt: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionScalarRelationFilterSchema: z.ZodType<Prisma.SessionScalarRelationFilter> = z.object({
  is: z.lazy(() => SessionWhereInputSchema).optional(),
  isNot: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const MessageListRelationFilterSchema: z.ZodType<Prisma.MessageListRelationFilter> = z.object({
  every: z.lazy(() => MessageWhereInputSchema).optional(),
  some: z.lazy(() => MessageWhereInputSchema).optional(),
  none: z.lazy(() => MessageWhereInputSchema).optional()
}).strict();

export const MessageOrderByRelationAggregateInputSchema: z.ZodType<Prisma.MessageOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ConversationCountOrderByAggregateInputSchema: z.ZodType<Prisma.ConversationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  context: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ConversationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ConversationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ConversationMinOrderByAggregateInputSchema: z.ZodType<Prisma.ConversationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ConversationScalarRelationFilterSchema: z.ZodType<Prisma.ConversationScalarRelationFilter> = z.object({
  is: z.lazy(() => ConversationWhereInputSchema).optional(),
  isNot: z.lazy(() => ConversationWhereInputSchema).optional()
}).strict();

export const MessageCountOrderByAggregateInputSchema: z.ZodType<Prisma.MessageCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  conversationId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MessageMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  conversationId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessageMinOrderByAggregateInputSchema: z.ZodType<Prisma.MessageMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  conversationId: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  content: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumExperimentStatusFilterSchema: z.ZodType<Prisma.EnumExperimentStatusFilter> = z.object({
  equals: z.lazy(() => ExperimentStatusSchema).optional(),
  in: z.lazy(() => ExperimentStatusSchema).array().optional(),
  notIn: z.lazy(() => ExperimentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExperimentStatusSchema),z.lazy(() => NestedEnumExperimentStatusFilterSchema) ]).optional(),
}).strict();

export const ABTestMetricsListRelationFilterSchema: z.ZodType<Prisma.ABTestMetricsListRelationFilter> = z.object({
  every: z.lazy(() => ABTestMetricsWhereInputSchema).optional(),
  some: z.lazy(() => ABTestMetricsWhereInputSchema).optional(),
  none: z.lazy(() => ABTestMetricsWhereInputSchema).optional()
}).strict();

export const ABTestMetricsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ABTestMetricsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ABTestCountOrderByAggregateInputSchema: z.ZodType<Prisma.ABTestCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  configuration: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ABTestMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ABTestMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ABTestMinOrderByAggregateInputSchema: z.ZodType<Prisma.ABTestMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  startDate: z.lazy(() => SortOrderSchema).optional(),
  endDate: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumExperimentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumExperimentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ExperimentStatusSchema).optional(),
  in: z.lazy(() => ExperimentStatusSchema).array().optional(),
  notIn: z.lazy(() => ExperimentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExperimentStatusSchema),z.lazy(() => NestedEnumExperimentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumExperimentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumExperimentStatusFilterSchema).optional()
}).strict();

export const ABTestScalarRelationFilterSchema: z.ZodType<Prisma.ABTestScalarRelationFilter> = z.object({
  is: z.lazy(() => ABTestWhereInputSchema).optional(),
  isNot: z.lazy(() => ABTestWhereInputSchema).optional()
}).strict();

export const ABTestAssignmentTestIdSessionIdCompoundUniqueInputSchema: z.ZodType<Prisma.ABTestAssignmentTestIdSessionIdCompoundUniqueInput> = z.object({
  testId: z.string(),
  sessionId: z.string()
}).strict();

export const ABTestAssignmentCountOrderByAggregateInputSchema: z.ZodType<Prisma.ABTestAssignmentCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ABTestAssignmentMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ABTestAssignmentMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ABTestAssignmentMinOrderByAggregateInputSchema: z.ZodType<Prisma.ABTestAssignmentMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatFilterSchema: z.ZodType<Prisma.FloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const ABTestMetricCountOrderByAggregateInputSchema: z.ZodType<Prisma.ABTestMetricCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  eventType: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ABTestMetricAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ABTestMetricAvgOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ABTestMetricMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ABTestMetricMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  eventType: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ABTestMetricMinOrderByAggregateInputSchema: z.ZodType<Prisma.ABTestMetricMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  eventType: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ABTestMetricSumOrderByAggregateInputSchema: z.ZodType<Prisma.ABTestMetricSumOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatWithAggregatesFilterSchema: z.ZodType<Prisma.FloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const SearchFeedbackCountOrderByAggregateInputSchema: z.ZodType<Prisma.SearchFeedbackCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  searchId: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.lazy(() => SortOrderSchema).optional(),
  relevanceScore: z.lazy(() => SortOrderSchema).optional(),
  userAction: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchFeedbackAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SearchFeedbackAvgOrderByAggregateInput> = z.object({
  relevanceScore: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchFeedbackMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SearchFeedbackMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  searchId: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.lazy(() => SortOrderSchema).optional(),
  relevanceScore: z.lazy(() => SortOrderSchema).optional(),
  userAction: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchFeedbackMinOrderByAggregateInputSchema: z.ZodType<Prisma.SearchFeedbackMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  searchId: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  resultId: z.lazy(() => SortOrderSchema).optional(),
  relevanceScore: z.lazy(() => SortOrderSchema).optional(),
  userAction: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchFeedbackSumOrderByAggregateInputSchema: z.ZodType<Prisma.SearchFeedbackSumOrderByAggregateInput> = z.object({
  relevanceScore: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumEventTypeFilterSchema: z.ZodType<Prisma.EnumEventTypeFilter> = z.object({
  equals: z.lazy(() => EventTypeSchema).optional(),
  in: z.lazy(() => EventTypeSchema).array().optional(),
  notIn: z.lazy(() => EventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => NestedEnumEventTypeFilterSchema) ]).optional(),
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const SearchEventNullableScalarRelationFilterSchema: z.ZodType<Prisma.SearchEventNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => SearchEventWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => SearchEventWhereInputSchema).optional().nullable()
}).strict();

export const ModelEventNullableScalarRelationFilterSchema: z.ZodType<Prisma.ModelEventNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => ModelEventWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ModelEventWhereInputSchema).optional().nullable()
}).strict();

export const BaseEventCountOrderByAggregateInputSchema: z.ZodType<Prisma.BaseEventCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  processed: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  correlationId: z.lazy(() => SortOrderSchema).optional(),
  searchEventid: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BaseEventAvgOrderByAggregateInputSchema: z.ZodType<Prisma.BaseEventAvgOrderByAggregateInput> = z.object({
  priority: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BaseEventMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BaseEventMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  processed: z.lazy(() => SortOrderSchema).optional(),
  correlationId: z.lazy(() => SortOrderSchema).optional(),
  searchEventid: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BaseEventMinOrderByAggregateInputSchema: z.ZodType<Prisma.BaseEventMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  processed: z.lazy(() => SortOrderSchema).optional(),
  correlationId: z.lazy(() => SortOrderSchema).optional(),
  searchEventid: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BaseEventSumOrderByAggregateInputSchema: z.ZodType<Prisma.BaseEventSumOrderByAggregateInput> = z.object({
  priority: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumEventTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumEventTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EventTypeSchema).optional(),
  in: z.lazy(() => EventTypeSchema).array().optional(),
  notIn: z.lazy(() => EventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => NestedEnumEventTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEventTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEventTypeFilterSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const BaseEventScalarRelationFilterSchema: z.ZodType<Prisma.BaseEventScalarRelationFilter> = z.object({
  is: z.lazy(() => BaseEventWhereInputSchema).optional(),
  isNot: z.lazy(() => BaseEventWhereInputSchema).optional()
}).strict();

export const ModelEventCountOrderByAggregateInputSchema: z.ZodType<Prisma.ModelEventCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  baseEventId: z.lazy(() => SortOrderSchema).optional(),
  modelId: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  parameters: z.lazy(() => SortOrderSchema).optional(),
  metrics: z.lazy(() => SortOrderSchema).optional(),
  results: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelEventMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ModelEventMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  baseEventId: z.lazy(() => SortOrderSchema).optional(),
  modelId: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelEventMinOrderByAggregateInputSchema: z.ZodType<Prisma.ModelEventMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  baseEventId: z.lazy(() => SortOrderSchema).optional(),
  modelId: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringNullableListFilterSchema: z.ZodType<Prisma.StringNullableListFilter> = z.object({
  equals: z.string().array().optional().nullable(),
  has: z.string().optional().nullable(),
  hasEvery: z.string().array().optional(),
  hasSome: z.string().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const BoolFilterSchema: z.ZodType<Prisma.BoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const SignalScalarRelationFilterSchema: z.ZodType<Prisma.SignalScalarRelationFilter> = z.object({
  is: z.lazy(() => SignalWhereInputSchema).optional(),
  isNot: z.lazy(() => SignalWhereInputSchema).optional()
}).strict();

export const ProcessedSignalCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProcessedSignalCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  signalId: z.lazy(() => SortOrderSchema).optional(),
  originalSignalId: z.lazy(() => SortOrderSchema).optional(),
  processingTime: z.lazy(() => SortOrderSchema).optional(),
  transformations: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  processed: z.lazy(() => SortOrderSchema).optional(),
  processingMetadata: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProcessedSignalAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ProcessedSignalAvgOrderByAggregateInput> = z.object({
  processingTime: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProcessedSignalMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProcessedSignalMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  signalId: z.lazy(() => SortOrderSchema).optional(),
  originalSignalId: z.lazy(() => SortOrderSchema).optional(),
  processingTime: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  processed: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProcessedSignalMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProcessedSignalMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  signalId: z.lazy(() => SortOrderSchema).optional(),
  originalSignalId: z.lazy(() => SortOrderSchema).optional(),
  processingTime: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  processed: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProcessedSignalSumOrderByAggregateInputSchema: z.ZodType<Prisma.ProcessedSignalSumOrderByAggregateInput> = z.object({
  processingTime: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BoolWithAggregatesFilterSchema: z.ZodType<Prisma.BoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const SignalBatchCountOrderByAggregateInputSchema: z.ZodType<Prisma.SignalBatchCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  batchId: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  sourceSystem: z.lazy(() => SortOrderSchema).optional(),
  signalIds: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalBatchAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SignalBatchAvgOrderByAggregateInput> = z.object({
  priority: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalBatchMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SignalBatchMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  batchId: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  sourceSystem: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalBatchMinOrderByAggregateInputSchema: z.ZodType<Prisma.SignalBatchMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  batchId: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  sourceSystem: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalBatchSumOrderByAggregateInputSchema: z.ZodType<Prisma.SignalBatchSumOrderByAggregateInput> = z.object({
  priority: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatNullableFilterSchema: z.ZodType<Prisma.FloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const SignalPatternCountOrderByAggregateInputSchema: z.ZodType<Prisma.SignalPatternCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  patternId: z.lazy(() => SortOrderSchema).optional(),
  signalIds: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  patternType: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  impactScore: z.lazy(() => SortOrderSchema).optional(),
  relatedPatterns: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalPatternAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SignalPatternAvgOrderByAggregateInput> = z.object({
  confidence: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  impactScore: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalPatternMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SignalPatternMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  patternId: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  patternType: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  impactScore: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalPatternMinOrderByAggregateInputSchema: z.ZodType<Prisma.SignalPatternMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  patternId: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  patternType: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  impactScore: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalPatternSumOrderByAggregateInputSchema: z.ZodType<Prisma.SignalPatternSumOrderByAggregateInput> = z.object({
  confidence: z.lazy(() => SortOrderSchema).optional(),
  frequency: z.lazy(() => SortOrderSchema).optional(),
  impactScore: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.FloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const EnumRulePriorityFilterSchema: z.ZodType<Prisma.EnumRulePriorityFilter> = z.object({
  equals: z.lazy(() => RulePrioritySchema).optional(),
  in: z.lazy(() => RulePrioritySchema).array().optional(),
  notIn: z.lazy(() => RulePrioritySchema).array().optional(),
  not: z.union([ z.lazy(() => RulePrioritySchema),z.lazy(() => NestedEnumRulePriorityFilterSchema) ]).optional(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const AdaptationRuleCountOrderByAggregateInputSchema: z.ZodType<Prisma.AdaptationRuleCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  conditions: z.lazy(() => SortOrderSchema).optional(),
  actions: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  enabled: z.lazy(() => SortOrderSchema).optional(),
  lastTriggered: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdaptationRuleMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AdaptationRuleMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  enabled: z.lazy(() => SortOrderSchema).optional(),
  lastTriggered: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdaptationRuleMinOrderByAggregateInputSchema: z.ZodType<Prisma.AdaptationRuleMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  enabled: z.lazy(() => SortOrderSchema).optional(),
  lastTriggered: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumRulePriorityWithAggregatesFilterSchema: z.ZodType<Prisma.EnumRulePriorityWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RulePrioritySchema).optional(),
  in: z.lazy(() => RulePrioritySchema).array().optional(),
  notIn: z.lazy(() => RulePrioritySchema).array().optional(),
  not: z.union([ z.lazy(() => RulePrioritySchema),z.lazy(() => NestedEnumRulePriorityWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRulePriorityFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRulePriorityFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const EnumModelTypeFilterSchema: z.ZodType<Prisma.EnumModelTypeFilter> = z.object({
  equals: z.lazy(() => ModelTypeSchema).optional(),
  in: z.lazy(() => ModelTypeSchema).array().optional(),
  notIn: z.lazy(() => ModelTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => NestedEnumModelTypeFilterSchema) ]).optional(),
}).strict();

export const ModelVersionListRelationFilterSchema: z.ZodType<Prisma.ModelVersionListRelationFilter> = z.object({
  every: z.lazy(() => ModelVersionWhereInputSchema).optional(),
  some: z.lazy(() => ModelVersionWhereInputSchema).optional(),
  none: z.lazy(() => ModelVersionWhereInputSchema).optional()
}).strict();

export const ModelVersionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ModelVersionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelConfigCountOrderByAggregateInputSchema: z.ZodType<Prisma.ModelConfigCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  hyperparameters: z.lazy(() => SortOrderSchema).optional(),
  features: z.lazy(() => SortOrderSchema).optional(),
  trainingParams: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelConfigMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ModelConfigMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelConfigMinOrderByAggregateInputSchema: z.ZodType<Prisma.ModelConfigMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumModelTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumModelTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ModelTypeSchema).optional(),
  in: z.lazy(() => ModelTypeSchema).array().optional(),
  notIn: z.lazy(() => ModelTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => NestedEnumModelTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumModelTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumModelTypeFilterSchema).optional()
}).strict();

export const ModelConfigScalarRelationFilterSchema: z.ZodType<Prisma.ModelConfigScalarRelationFilter> = z.object({
  is: z.lazy(() => ModelConfigWhereInputSchema).optional(),
  isNot: z.lazy(() => ModelConfigWhereInputSchema).optional()
}).strict();

export const ModelVersionCountOrderByAggregateInputSchema: z.ZodType<Prisma.ModelVersionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  configId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  metrics: z.lazy(() => SortOrderSchema).optional(),
  artifactPath: z.lazy(() => SortOrderSchema).optional(),
  parentVersion: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelVersionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ModelVersionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  configId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  artifactPath: z.lazy(() => SortOrderSchema).optional(),
  parentVersion: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelVersionMinOrderByAggregateInputSchema: z.ZodType<Prisma.ModelVersionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  configId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  artifactPath: z.lazy(() => SortOrderSchema).optional(),
  parentVersion: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningRequestCountOrderByAggregateInputSchema: z.ZodType<Prisma.LearningRequestCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  patterns: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningRequestMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LearningRequestMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningRequestMinOrderByAggregateInputSchema: z.ZodType<Prisma.LearningRequestMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeedbackRequestCountOrderByAggregateInputSchema: z.ZodType<Prisma.FeedbackRequestCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  feedback: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeedbackRequestMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FeedbackRequestMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FeedbackRequestMinOrderByAggregateInputSchema: z.ZodType<Prisma.FeedbackRequestMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelStateListRelationFilterSchema: z.ZodType<Prisma.ModelStateListRelationFilter> = z.object({
  every: z.lazy(() => ModelStateWhereInputSchema).optional(),
  some: z.lazy(() => ModelStateWhereInputSchema).optional(),
  none: z.lazy(() => ModelStateWhereInputSchema).optional()
}).strict();

export const ModelStateOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ModelStateOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelMetricsCountOrderByAggregateInputSchema: z.ZodType<Prisma.ModelMetricsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  modelVersionId: z.lazy(() => SortOrderSchema).optional(),
  accuracy: z.lazy(() => SortOrderSchema).optional(),
  precision: z.lazy(() => SortOrderSchema).optional(),
  recall: z.lazy(() => SortOrderSchema).optional(),
  f1Score: z.lazy(() => SortOrderSchema).optional(),
  latencyMs: z.lazy(() => SortOrderSchema).optional(),
  loss: z.lazy(() => SortOrderSchema).optional(),
  validationMetrics: z.lazy(() => SortOrderSchema).optional(),
  customMetrics: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelMetricsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ModelMetricsAvgOrderByAggregateInput> = z.object({
  accuracy: z.lazy(() => SortOrderSchema).optional(),
  precision: z.lazy(() => SortOrderSchema).optional(),
  recall: z.lazy(() => SortOrderSchema).optional(),
  f1Score: z.lazy(() => SortOrderSchema).optional(),
  latencyMs: z.lazy(() => SortOrderSchema).optional(),
  loss: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelMetricsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ModelMetricsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  modelVersionId: z.lazy(() => SortOrderSchema).optional(),
  accuracy: z.lazy(() => SortOrderSchema).optional(),
  precision: z.lazy(() => SortOrderSchema).optional(),
  recall: z.lazy(() => SortOrderSchema).optional(),
  f1Score: z.lazy(() => SortOrderSchema).optional(),
  latencyMs: z.lazy(() => SortOrderSchema).optional(),
  loss: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelMetricsMinOrderByAggregateInputSchema: z.ZodType<Prisma.ModelMetricsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  modelVersionId: z.lazy(() => SortOrderSchema).optional(),
  accuracy: z.lazy(() => SortOrderSchema).optional(),
  precision: z.lazy(() => SortOrderSchema).optional(),
  recall: z.lazy(() => SortOrderSchema).optional(),
  f1Score: z.lazy(() => SortOrderSchema).optional(),
  latencyMs: z.lazy(() => SortOrderSchema).optional(),
  loss: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelMetricsSumOrderByAggregateInputSchema: z.ZodType<Prisma.ModelMetricsSumOrderByAggregateInput> = z.object({
  accuracy: z.lazy(() => SortOrderSchema).optional(),
  precision: z.lazy(() => SortOrderSchema).optional(),
  recall: z.lazy(() => SortOrderSchema).optional(),
  f1Score: z.lazy(() => SortOrderSchema).optional(),
  latencyMs: z.lazy(() => SortOrderSchema).optional(),
  loss: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatNullableListFilterSchema: z.ZodType<Prisma.FloatNullableListFilter> = z.object({
  equals: z.number().array().optional().nullable(),
  has: z.number().optional().nullable(),
  hasEvery: z.number().array().optional(),
  hasSome: z.number().array().optional(),
  isEmpty: z.boolean().optional()
}).strict();

export const ModelMetricsListRelationFilterSchema: z.ZodType<Prisma.ModelMetricsListRelationFilter> = z.object({
  every: z.lazy(() => ModelMetricsWhereInputSchema).optional(),
  some: z.lazy(() => ModelMetricsWhereInputSchema).optional(),
  none: z.lazy(() => ModelMetricsWhereInputSchema).optional()
}).strict();

export const ModelMetricsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ModelMetricsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelStateCountOrderByAggregateInputSchema: z.ZodType<Prisma.ModelStateCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  versionId: z.lazy(() => SortOrderSchema).optional(),
  weights: z.lazy(() => SortOrderSchema).optional(),
  bias: z.lazy(() => SortOrderSchema).optional(),
  scaler: z.lazy(() => SortOrderSchema).optional(),
  featureNames: z.lazy(() => SortOrderSchema).optional(),
  isTrained: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  modelType: z.lazy(() => SortOrderSchema).optional(),
  hyperparameters: z.lazy(() => SortOrderSchema).optional(),
  currentEpoch: z.lazy(() => SortOrderSchema).optional(),
  trainingProgress: z.lazy(() => SortOrderSchema).optional(),
  lastTrainingError: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelStateAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ModelStateAvgOrderByAggregateInput> = z.object({
  weights: z.lazy(() => SortOrderSchema).optional(),
  bias: z.lazy(() => SortOrderSchema).optional(),
  currentEpoch: z.lazy(() => SortOrderSchema).optional(),
  trainingProgress: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelStateMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ModelStateMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  versionId: z.lazy(() => SortOrderSchema).optional(),
  bias: z.lazy(() => SortOrderSchema).optional(),
  isTrained: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  modelType: z.lazy(() => SortOrderSchema).optional(),
  currentEpoch: z.lazy(() => SortOrderSchema).optional(),
  trainingProgress: z.lazy(() => SortOrderSchema).optional(),
  lastTrainingError: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelStateMinOrderByAggregateInputSchema: z.ZodType<Prisma.ModelStateMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  versionId: z.lazy(() => SortOrderSchema).optional(),
  bias: z.lazy(() => SortOrderSchema).optional(),
  isTrained: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  modelType: z.lazy(() => SortOrderSchema).optional(),
  currentEpoch: z.lazy(() => SortOrderSchema).optional(),
  trainingProgress: z.lazy(() => SortOrderSchema).optional(),
  lastTrainingError: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ModelStateSumOrderByAggregateInputSchema: z.ZodType<Prisma.ModelStateSumOrderByAggregateInput> = z.object({
  weights: z.lazy(() => SortOrderSchema).optional(),
  bias: z.lazy(() => SortOrderSchema).optional(),
  currentEpoch: z.lazy(() => SortOrderSchema).optional(),
  trainingProgress: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const BaseEventListRelationFilterSchema: z.ZodType<Prisma.BaseEventListRelationFilter> = z.object({
  every: z.lazy(() => BaseEventWhereInputSchema).optional(),
  some: z.lazy(() => BaseEventWhereInputSchema).optional(),
  none: z.lazy(() => BaseEventWhereInputSchema).optional()
}).strict();

export const SearchFeedbackListRelationFilterSchema: z.ZodType<Prisma.SearchFeedbackListRelationFilter> = z.object({
  every: z.lazy(() => SearchFeedbackWhereInputSchema).optional(),
  some: z.lazy(() => SearchFeedbackWhereInputSchema).optional(),
  none: z.lazy(() => SearchFeedbackWhereInputSchema).optional()
}).strict();

export const BaseEventOrderByRelationAggregateInputSchema: z.ZodType<Prisma.BaseEventOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchFeedbackOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SearchFeedbackOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchEventCountOrderByAggregateInputSchema: z.ZodType<Prisma.SearchEventCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  query: z.lazy(() => SortOrderSchema).optional(),
  searchType: z.lazy(() => SortOrderSchema).optional(),
  totalHits: z.lazy(() => SortOrderSchema).optional(),
  took: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  facetsUsed: z.lazy(() => SortOrderSchema).optional(),
  resultIds: z.lazy(() => SortOrderSchema).optional(),
  page: z.lazy(() => SortOrderSchema).optional(),
  pageSize: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchEventAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SearchEventAvgOrderByAggregateInput> = z.object({
  totalHits: z.lazy(() => SortOrderSchema).optional(),
  took: z.lazy(() => SortOrderSchema).optional(),
  page: z.lazy(() => SortOrderSchema).optional(),
  pageSize: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchEventMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SearchEventMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  query: z.lazy(() => SortOrderSchema).optional(),
  searchType: z.lazy(() => SortOrderSchema).optional(),
  totalHits: z.lazy(() => SortOrderSchema).optional(),
  took: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  page: z.lazy(() => SortOrderSchema).optional(),
  pageSize: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchEventMinOrderByAggregateInputSchema: z.ZodType<Prisma.SearchEventMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  query: z.lazy(() => SortOrderSchema).optional(),
  searchType: z.lazy(() => SortOrderSchema).optional(),
  totalHits: z.lazy(() => SortOrderSchema).optional(),
  took: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  page: z.lazy(() => SortOrderSchema).optional(),
  pageSize: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchEventSumOrderByAggregateInputSchema: z.ZodType<Prisma.SearchEventSumOrderByAggregateInput> = z.object({
  totalHits: z.lazy(() => SortOrderSchema).optional(),
  took: z.lazy(() => SortOrderSchema).optional(),
  page: z.lazy(() => SortOrderSchema).optional(),
  pageSize: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ABTestMetricsCountOrderByAggregateInputSchema: z.ZodType<Prisma.ABTestMetricsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  metrics: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ABTestMetricsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ABTestMetricsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ABTestMetricsMinOrderByAggregateInputSchema: z.ZodType<Prisma.ABTestMetricsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  testId: z.lazy(() => SortOrderSchema).optional(),
  variantId: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumSignalTypeFilterSchema: z.ZodType<Prisma.EnumSignalTypeFilter> = z.object({
  equals: z.lazy(() => SignalTypeSchema).optional(),
  in: z.lazy(() => SignalTypeSchema).array().optional(),
  notIn: z.lazy(() => SignalTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => SignalTypeSchema),z.lazy(() => NestedEnumSignalTypeFilterSchema) ]).optional(),
}).strict();

export const ProcessedSignalListRelationFilterSchema: z.ZodType<Prisma.ProcessedSignalListRelationFilter> = z.object({
  every: z.lazy(() => ProcessedSignalWhereInputSchema).optional(),
  some: z.lazy(() => ProcessedSignalWhereInputSchema).optional(),
  none: z.lazy(() => ProcessedSignalWhereInputSchema).optional()
}).strict();

export const ProcessedSignalOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProcessedSignalOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalCountOrderByAggregateInputSchema: z.ZodType<Prisma.SignalCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  retries: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  processed: z.lazy(() => SortOrderSchema).optional(),
  processedAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  manual: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  strength: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SignalAvgOrderByAggregateInput> = z.object({
  priority: z.lazy(() => SortOrderSchema).optional(),
  retries: z.lazy(() => SortOrderSchema).optional(),
  strength: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SignalMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  retries: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  processed: z.lazy(() => SortOrderSchema).optional(),
  processedAt: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  manual: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  strength: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalMinOrderByAggregateInputSchema: z.ZodType<Prisma.SignalMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  source: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  retries: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  processed: z.lazy(() => SortOrderSchema).optional(),
  processedAt: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  manual: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  strength: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SignalSumOrderByAggregateInputSchema: z.ZodType<Prisma.SignalSumOrderByAggregateInput> = z.object({
  priority: z.lazy(() => SortOrderSchema).optional(),
  retries: z.lazy(() => SortOrderSchema).optional(),
  strength: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumSignalTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumSignalTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => SignalTypeSchema).optional(),
  in: z.lazy(() => SignalTypeSchema).array().optional(),
  notIn: z.lazy(() => SignalTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => SignalTypeSchema),z.lazy(() => NestedEnumSignalTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSignalTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSignalTypeFilterSchema).optional()
}).strict();

export const SessionNullableScalarRelationFilterSchema: z.ZodType<Prisma.SessionNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => SessionWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => SessionWhereInputSchema).optional().nullable()
}).strict();

export const AnalyticsMetricsCountOrderByAggregateInputSchema: z.ZodType<Prisma.AnalyticsMetricsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  totalSearches: z.lazy(() => SortOrderSchema).optional(),
  averageLatency: z.lazy(() => SortOrderSchema).optional(),
  successRate: z.lazy(() => SortOrderSchema).optional(),
  errorRate: z.lazy(() => SortOrderSchema).optional(),
  cacheHitRate: z.lazy(() => SortOrderSchema).optional(),
  queryCount: z.lazy(() => SortOrderSchema).optional(),
  uniqueUsers: z.lazy(() => SortOrderSchema).optional(),
  avgResultsPerQuery: z.lazy(() => SortOrderSchema).optional(),
  clickThroughRate: z.lazy(() => SortOrderSchema).optional(),
  conversionRate: z.lazy(() => SortOrderSchema).optional(),
  avgRelevanceScore: z.lazy(() => SortOrderSchema).optional(),
  p95Latency: z.lazy(() => SortOrderSchema).optional(),
  p99Latency: z.lazy(() => SortOrderSchema).optional(),
  resourceUtilization: z.lazy(() => SortOrderSchema).optional(),
  searchTypes: z.lazy(() => SortOrderSchema).optional(),
  timeWindow: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsMetricsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AnalyticsMetricsAvgOrderByAggregateInput> = z.object({
  totalSearches: z.lazy(() => SortOrderSchema).optional(),
  averageLatency: z.lazy(() => SortOrderSchema).optional(),
  successRate: z.lazy(() => SortOrderSchema).optional(),
  errorRate: z.lazy(() => SortOrderSchema).optional(),
  cacheHitRate: z.lazy(() => SortOrderSchema).optional(),
  queryCount: z.lazy(() => SortOrderSchema).optional(),
  uniqueUsers: z.lazy(() => SortOrderSchema).optional(),
  avgResultsPerQuery: z.lazy(() => SortOrderSchema).optional(),
  clickThroughRate: z.lazy(() => SortOrderSchema).optional(),
  conversionRate: z.lazy(() => SortOrderSchema).optional(),
  avgRelevanceScore: z.lazy(() => SortOrderSchema).optional(),
  p95Latency: z.lazy(() => SortOrderSchema).optional(),
  p99Latency: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsMetricsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AnalyticsMetricsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  totalSearches: z.lazy(() => SortOrderSchema).optional(),
  averageLatency: z.lazy(() => SortOrderSchema).optional(),
  successRate: z.lazy(() => SortOrderSchema).optional(),
  errorRate: z.lazy(() => SortOrderSchema).optional(),
  cacheHitRate: z.lazy(() => SortOrderSchema).optional(),
  queryCount: z.lazy(() => SortOrderSchema).optional(),
  uniqueUsers: z.lazy(() => SortOrderSchema).optional(),
  avgResultsPerQuery: z.lazy(() => SortOrderSchema).optional(),
  clickThroughRate: z.lazy(() => SortOrderSchema).optional(),
  conversionRate: z.lazy(() => SortOrderSchema).optional(),
  avgRelevanceScore: z.lazy(() => SortOrderSchema).optional(),
  p95Latency: z.lazy(() => SortOrderSchema).optional(),
  p99Latency: z.lazy(() => SortOrderSchema).optional(),
  timeWindow: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsMetricsMinOrderByAggregateInputSchema: z.ZodType<Prisma.AnalyticsMetricsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  totalSearches: z.lazy(() => SortOrderSchema).optional(),
  averageLatency: z.lazy(() => SortOrderSchema).optional(),
  successRate: z.lazy(() => SortOrderSchema).optional(),
  errorRate: z.lazy(() => SortOrderSchema).optional(),
  cacheHitRate: z.lazy(() => SortOrderSchema).optional(),
  queryCount: z.lazy(() => SortOrderSchema).optional(),
  uniqueUsers: z.lazy(() => SortOrderSchema).optional(),
  avgResultsPerQuery: z.lazy(() => SortOrderSchema).optional(),
  clickThroughRate: z.lazy(() => SortOrderSchema).optional(),
  conversionRate: z.lazy(() => SortOrderSchema).optional(),
  avgRelevanceScore: z.lazy(() => SortOrderSchema).optional(),
  p95Latency: z.lazy(() => SortOrderSchema).optional(),
  p99Latency: z.lazy(() => SortOrderSchema).optional(),
  timeWindow: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsMetricsSumOrderByAggregateInputSchema: z.ZodType<Prisma.AnalyticsMetricsSumOrderByAggregateInput> = z.object({
  totalSearches: z.lazy(() => SortOrderSchema).optional(),
  averageLatency: z.lazy(() => SortOrderSchema).optional(),
  successRate: z.lazy(() => SortOrderSchema).optional(),
  errorRate: z.lazy(() => SortOrderSchema).optional(),
  cacheHitRate: z.lazy(() => SortOrderSchema).optional(),
  queryCount: z.lazy(() => SortOrderSchema).optional(),
  uniqueUsers: z.lazy(() => SortOrderSchema).optional(),
  avgResultsPerQuery: z.lazy(() => SortOrderSchema).optional(),
  clickThroughRate: z.lazy(() => SortOrderSchema).optional(),
  conversionRate: z.lazy(() => SortOrderSchema).optional(),
  avgRelevanceScore: z.lazy(() => SortOrderSchema).optional(),
  p95Latency: z.lazy(() => SortOrderSchema).optional(),
  p99Latency: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsTrendCountOrderByAggregateInputSchema: z.ZodType<Prisma.AnalyticsTrendCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  metric: z.lazy(() => SortOrderSchema).optional(),
  current: z.lazy(() => SortOrderSchema).optional(),
  change: z.lazy(() => SortOrderSchema).optional(),
  trend: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsTrendAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AnalyticsTrendAvgOrderByAggregateInput> = z.object({
  current: z.lazy(() => SortOrderSchema).optional(),
  change: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsTrendMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AnalyticsTrendMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  metric: z.lazy(() => SortOrderSchema).optional(),
  current: z.lazy(() => SortOrderSchema).optional(),
  change: z.lazy(() => SortOrderSchema).optional(),
  trend: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsTrendMinOrderByAggregateInputSchema: z.ZodType<Prisma.AnalyticsTrendMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  metric: z.lazy(() => SortOrderSchema).optional(),
  current: z.lazy(() => SortOrderSchema).optional(),
  change: z.lazy(() => SortOrderSchema).optional(),
  trend: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsTrendSumOrderByAggregateInputSchema: z.ZodType<Prisma.AnalyticsTrendSumOrderByAggregateInput> = z.object({
  current: z.lazy(() => SortOrderSchema).optional(),
  change: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PerformanceInsightCountOrderByAggregateInputSchema: z.ZodType<Prisma.PerformanceInsightCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  severity: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  metric: z.lazy(() => SortOrderSchema).optional(),
  currentValue: z.lazy(() => SortOrderSchema).optional(),
  recommendedValue: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PerformanceInsightAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PerformanceInsightAvgOrderByAggregateInput> = z.object({
  currentValue: z.lazy(() => SortOrderSchema).optional(),
  recommendedValue: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PerformanceInsightMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PerformanceInsightMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  severity: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  metric: z.lazy(() => SortOrderSchema).optional(),
  currentValue: z.lazy(() => SortOrderSchema).optional(),
  recommendedValue: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PerformanceInsightMinOrderByAggregateInputSchema: z.ZodType<Prisma.PerformanceInsightMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  severity: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  metric: z.lazy(() => SortOrderSchema).optional(),
  currentValue: z.lazy(() => SortOrderSchema).optional(),
  recommendedValue: z.lazy(() => SortOrderSchema).optional(),
  action: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PerformanceInsightSumOrderByAggregateInputSchema: z.ZodType<Prisma.PerformanceInsightSumOrderByAggregateInput> = z.object({
  currentValue: z.lazy(() => SortOrderSchema).optional(),
  recommendedValue: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsReportCountOrderByAggregateInputSchema: z.ZodType<Prisma.AnalyticsReportCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  timeWindow: z.lazy(() => SortOrderSchema).optional(),
  generatedAt: z.lazy(() => SortOrderSchema).optional(),
  metrics: z.lazy(() => SortOrderSchema).optional(),
  trends: z.lazy(() => SortOrderSchema).optional(),
  insights: z.lazy(() => SortOrderSchema).optional(),
  popularQueries: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsReportMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AnalyticsReportMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  timeWindow: z.lazy(() => SortOrderSchema).optional(),
  generatedAt: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AnalyticsReportMinOrderByAggregateInputSchema: z.ZodType<Prisma.AnalyticsReportMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  timeWindow: z.lazy(() => SortOrderSchema).optional(),
  generatedAt: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdaptationSuggestionCountOrderByAggregateInputSchema: z.ZodType<Prisma.AdaptationSuggestionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  patterns: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdaptationSuggestionAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AdaptationSuggestionAvgOrderByAggregateInput> = z.object({
  confidence: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdaptationSuggestionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AdaptationSuggestionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdaptationSuggestionMinOrderByAggregateInputSchema: z.ZodType<Prisma.AdaptationSuggestionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  queryHash: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdaptationSuggestionSumOrderByAggregateInputSchema: z.ZodType<Prisma.AdaptationSuggestionSumOrderByAggregateInput> = z.object({
  confidence: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumMetricTypeFilterSchema: z.ZodType<Prisma.EnumMetricTypeFilter> = z.object({
  equals: z.lazy(() => MetricTypeSchema).optional(),
  in: z.lazy(() => MetricTypeSchema).array().optional(),
  notIn: z.lazy(() => MetricTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => NestedEnumMetricTypeFilterSchema) ]).optional(),
}).strict();

export const ModelConfigNullableScalarRelationFilterSchema: z.ZodType<Prisma.ModelConfigNullableScalarRelationFilter> = z.object({
  is: z.lazy(() => ModelConfigWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ModelConfigWhereInputSchema).optional().nullable()
}).strict();

export const LearningMetricCountOrderByAggregateInputSchema: z.ZodType<Prisma.LearningMetricCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  interval: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  modelId: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  timeframe: z.lazy(() => SortOrderSchema).optional(),
  aggregated: z.lazy(() => SortOrderSchema).optional(),
  count: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningMetricAvgOrderByAggregateInputSchema: z.ZodType<Prisma.LearningMetricAvgOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional(),
  count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningMetricMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LearningMetricMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  interval: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  modelId: z.lazy(() => SortOrderSchema).optional(),
  timeframe: z.lazy(() => SortOrderSchema).optional(),
  aggregated: z.lazy(() => SortOrderSchema).optional(),
  count: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningMetricMinOrderByAggregateInputSchema: z.ZodType<Prisma.LearningMetricMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  interval: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  modelId: z.lazy(() => SortOrderSchema).optional(),
  timeframe: z.lazy(() => SortOrderSchema).optional(),
  aggregated: z.lazy(() => SortOrderSchema).optional(),
  count: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningMetricSumOrderByAggregateInputSchema: z.ZodType<Prisma.LearningMetricSumOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional(),
  count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumMetricTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumMetricTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => MetricTypeSchema).optional(),
  in: z.lazy(() => MetricTypeSchema).array().optional(),
  notIn: z.lazy(() => MetricTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => NestedEnumMetricTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumMetricTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumMetricTypeFilterSchema).optional()
}).strict();

export const EnumLearningEventTypeFilterSchema: z.ZodType<Prisma.EnumLearningEventTypeFilter> = z.object({
  equals: z.lazy(() => LearningEventTypeSchema).optional(),
  in: z.lazy(() => LearningEventTypeSchema).array().optional(),
  notIn: z.lazy(() => LearningEventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => LearningEventTypeSchema),z.lazy(() => NestedEnumLearningEventTypeFilterSchema) ]).optional(),
}).strict();

export const EnumLearningEventStatusFilterSchema: z.ZodType<Prisma.EnumLearningEventStatusFilter> = z.object({
  equals: z.lazy(() => LearningEventStatusSchema).optional(),
  in: z.lazy(() => LearningEventStatusSchema).array().optional(),
  notIn: z.lazy(() => LearningEventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => LearningEventStatusSchema),z.lazy(() => NestedEnumLearningEventStatusFilterSchema) ]).optional(),
}).strict();

export const EnumLearningEventPriorityFilterSchema: z.ZodType<Prisma.EnumLearningEventPriorityFilter> = z.object({
  equals: z.lazy(() => LearningEventPrioritySchema).optional(),
  in: z.lazy(() => LearningEventPrioritySchema).array().optional(),
  notIn: z.lazy(() => LearningEventPrioritySchema).array().optional(),
  not: z.union([ z.lazy(() => LearningEventPrioritySchema),z.lazy(() => NestedEnumLearningEventPriorityFilterSchema) ]).optional(),
}).strict();

export const LearningPatternListRelationFilterSchema: z.ZodType<Prisma.LearningPatternListRelationFilter> = z.object({
  every: z.lazy(() => LearningPatternWhereInputSchema).optional(),
  some: z.lazy(() => LearningPatternWhereInputSchema).optional(),
  none: z.lazy(() => LearningPatternWhereInputSchema).optional()
}).strict();

export const LearningPatternOrderByRelationAggregateInputSchema: z.ZodType<Prisma.LearningPatternOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningEventCountOrderByAggregateInputSchema: z.ZodType<Prisma.LearningEventCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  processedAt: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  correlationId: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  clientId: z.lazy(() => SortOrderSchema).optional(),
  environment: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  tags: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  retryCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningEventAvgOrderByAggregateInputSchema: z.ZodType<Prisma.LearningEventAvgOrderByAggregateInput> = z.object({
  retryCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningEventMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LearningEventMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  processedAt: z.lazy(() => SortOrderSchema).optional(),
  correlationId: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  clientId: z.lazy(() => SortOrderSchema).optional(),
  environment: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  retryCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningEventMinOrderByAggregateInputSchema: z.ZodType<Prisma.LearningEventMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  processedAt: z.lazy(() => SortOrderSchema).optional(),
  correlationId: z.lazy(() => SortOrderSchema).optional(),
  sessionId: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  clientId: z.lazy(() => SortOrderSchema).optional(),
  environment: z.lazy(() => SortOrderSchema).optional(),
  version: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  retryCount: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningEventSumOrderByAggregateInputSchema: z.ZodType<Prisma.LearningEventSumOrderByAggregateInput> = z.object({
  retryCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumLearningEventTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumLearningEventTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => LearningEventTypeSchema).optional(),
  in: z.lazy(() => LearningEventTypeSchema).array().optional(),
  notIn: z.lazy(() => LearningEventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => LearningEventTypeSchema),z.lazy(() => NestedEnumLearningEventTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumLearningEventTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumLearningEventTypeFilterSchema).optional()
}).strict();

export const EnumLearningEventStatusWithAggregatesFilterSchema: z.ZodType<Prisma.EnumLearningEventStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => LearningEventStatusSchema).optional(),
  in: z.lazy(() => LearningEventStatusSchema).array().optional(),
  notIn: z.lazy(() => LearningEventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => LearningEventStatusSchema),z.lazy(() => NestedEnumLearningEventStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumLearningEventStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumLearningEventStatusFilterSchema).optional()
}).strict();

export const EnumLearningEventPriorityWithAggregatesFilterSchema: z.ZodType<Prisma.EnumLearningEventPriorityWithAggregatesFilter> = z.object({
  equals: z.lazy(() => LearningEventPrioritySchema).optional(),
  in: z.lazy(() => LearningEventPrioritySchema).array().optional(),
  notIn: z.lazy(() => LearningEventPrioritySchema).array().optional(),
  not: z.union([ z.lazy(() => LearningEventPrioritySchema),z.lazy(() => NestedEnumLearningEventPriorityWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumLearningEventPriorityFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumLearningEventPriorityFilterSchema).optional()
}).strict();

export const LearningEventScalarRelationFilterSchema: z.ZodType<Prisma.LearningEventScalarRelationFilter> = z.object({
  is: z.lazy(() => LearningEventWhereInputSchema).optional(),
  isNot: z.lazy(() => LearningEventWhereInputSchema).optional()
}).strict();

export const LearningPatternCountOrderByAggregateInputSchema: z.ZodType<Prisma.LearningPatternCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  features: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningPatternAvgOrderByAggregateInputSchema: z.ZodType<Prisma.LearningPatternAvgOrderByAggregateInput> = z.object({
  confidence: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningPatternMaxOrderByAggregateInputSchema: z.ZodType<Prisma.LearningPatternMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningPatternMinOrderByAggregateInputSchema: z.ZodType<Prisma.LearningPatternMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  eventId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const LearningPatternSumOrderByAggregateInputSchema: z.ZodType<Prisma.LearningPatternSumOrderByAggregateInput> = z.object({
  confidence: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineStateCountOrderByAggregateInputSchema: z.ZodType<Prisma.EngineStateCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  currentPhase: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  lastActive: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineStateAvgOrderByAggregateInputSchema: z.ZodType<Prisma.EngineStateAvgOrderByAggregateInput> = z.object({
  confidence: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineStateMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EngineStateMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  currentPhase: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  lastActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineStateMinOrderByAggregateInputSchema: z.ZodType<Prisma.EngineStateMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  currentPhase: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  lastActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineStateSumOrderByAggregateInputSchema: z.ZodType<Prisma.EngineStateSumOrderByAggregateInput> = z.object({
  confidence: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineLearningResultListRelationFilterSchema: z.ZodType<Prisma.EngineLearningResultListRelationFilter> = z.object({
  every: z.lazy(() => EngineLearningResultWhereInputSchema).optional(),
  some: z.lazy(() => EngineLearningResultWhereInputSchema).optional(),
  none: z.lazy(() => EngineLearningResultWhereInputSchema).optional()
}).strict();

export const EngineLearningResultOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EngineLearningResultOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineOperationCountOrderByAggregateInputSchema: z.ZodType<Prisma.EngineOperationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  metrics: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineOperationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EngineOperationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineOperationMinOrderByAggregateInputSchema: z.ZodType<Prisma.EngineOperationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  startTime: z.lazy(() => SortOrderSchema).optional(),
  endTime: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineMetricCountOrderByAggregateInputSchema: z.ZodType<Prisma.EngineMetricCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  operationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineMetricAvgOrderByAggregateInputSchema: z.ZodType<Prisma.EngineMetricAvgOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineMetricMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EngineMetricMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  operationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineMetricMinOrderByAggregateInputSchema: z.ZodType<Prisma.EngineMetricMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  timestamp: z.lazy(() => SortOrderSchema).optional(),
  operationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineMetricSumOrderByAggregateInputSchema: z.ZodType<Prisma.EngineMetricSumOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineOperationScalarRelationFilterSchema: z.ZodType<Prisma.EngineOperationScalarRelationFilter> = z.object({
  is: z.lazy(() => EngineOperationWhereInputSchema).optional(),
  isNot: z.lazy(() => EngineOperationWhereInputSchema).optional()
}).strict();

export const EngineOptimizationStrategyListRelationFilterSchema: z.ZodType<Prisma.EngineOptimizationStrategyListRelationFilter> = z.object({
  every: z.lazy(() => EngineOptimizationStrategyWhereInputSchema).optional(),
  some: z.lazy(() => EngineOptimizationStrategyWhereInputSchema).optional(),
  none: z.lazy(() => EngineOptimizationStrategyWhereInputSchema).optional()
}).strict();

export const EngineRecommendationListRelationFilterSchema: z.ZodType<Prisma.EngineRecommendationListRelationFilter> = z.object({
  every: z.lazy(() => EngineRecommendationWhereInputSchema).optional(),
  some: z.lazy(() => EngineRecommendationWhereInputSchema).optional(),
  none: z.lazy(() => EngineRecommendationWhereInputSchema).optional()
}).strict();

export const EngineOptimizationStrategyOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineRecommendationOrderByRelationAggregateInputSchema: z.ZodType<Prisma.EngineRecommendationOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineLearningResultCountOrderByAggregateInputSchema: z.ZodType<Prisma.EngineLearningResultCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  patterns: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  performance: z.lazy(() => SortOrderSchema).optional(),
  validatedAt: z.lazy(() => SortOrderSchema).optional(),
  abTestMetrics: z.lazy(() => SortOrderSchema).optional(),
  operationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineLearningResultAvgOrderByAggregateInputSchema: z.ZodType<Prisma.EngineLearningResultAvgOrderByAggregateInput> = z.object({
  confidence: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineLearningResultMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EngineLearningResultMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  validatedAt: z.lazy(() => SortOrderSchema).optional(),
  operationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineLearningResultMinOrderByAggregateInputSchema: z.ZodType<Prisma.EngineLearningResultMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  validatedAt: z.lazy(() => SortOrderSchema).optional(),
  operationId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineLearningResultSumOrderByAggregateInputSchema: z.ZodType<Prisma.EngineLearningResultSumOrderByAggregateInput> = z.object({
  confidence: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumEngineOptimizationTypeFilterSchema: z.ZodType<Prisma.EnumEngineOptimizationTypeFilter> = z.object({
  equals: z.lazy(() => EngineOptimizationTypeSchema).optional(),
  in: z.lazy(() => EngineOptimizationTypeSchema).array().optional(),
  notIn: z.lazy(() => EngineOptimizationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => NestedEnumEngineOptimizationTypeFilterSchema) ]).optional(),
}).strict();

export const EngineLearningResultScalarRelationFilterSchema: z.ZodType<Prisma.EngineLearningResultScalarRelationFilter> = z.object({
  is: z.lazy(() => EngineLearningResultWhereInputSchema).optional(),
  isNot: z.lazy(() => EngineLearningResultWhereInputSchema).optional()
}).strict();

export const EngineOptimizationStrategyCountOrderByAggregateInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  impact: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  learningResultId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineOptimizationStrategyAvgOrderByAggregateInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyAvgOrderByAggregateInput> = z.object({
  priority: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  impact: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineOptimizationStrategyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  impact: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  learningResultId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineOptimizationStrategyMinOrderByAggregateInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  impact: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  learningResultId: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineOptimizationStrategySumOrderByAggregateInputSchema: z.ZodType<Prisma.EngineOptimizationStrategySumOrderByAggregateInput> = z.object({
  priority: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  impact: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EnumEngineOptimizationTypeWithAggregatesFilterSchema: z.ZodType<Prisma.EnumEngineOptimizationTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EngineOptimizationTypeSchema).optional(),
  in: z.lazy(() => EngineOptimizationTypeSchema).array().optional(),
  notIn: z.lazy(() => EngineOptimizationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => NestedEnumEngineOptimizationTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEngineOptimizationTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEngineOptimizationTypeFilterSchema).optional()
}).strict();

export const EngineConfidenceScoreCountOrderByAggregateInputSchema: z.ZodType<Prisma.EngineConfidenceScoreCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  factors: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineConfidenceScoreAvgOrderByAggregateInputSchema: z.ZodType<Prisma.EngineConfidenceScoreAvgOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineConfidenceScoreMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EngineConfidenceScoreMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineConfidenceScoreMinOrderByAggregateInputSchema: z.ZodType<Prisma.EngineConfidenceScoreMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineConfidenceScoreSumOrderByAggregateInputSchema: z.ZodType<Prisma.EngineConfidenceScoreSumOrderByAggregateInput> = z.object({
  value: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchWeightsCountOrderByAggregateInputSchema: z.ZodType<Prisma.SearchWeightsCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  titleWeight: z.lazy(() => SortOrderSchema).optional(),
  contentWeight: z.lazy(() => SortOrderSchema).optional(),
  tagWeight: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchWeightsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SearchWeightsAvgOrderByAggregateInput> = z.object({
  titleWeight: z.lazy(() => SortOrderSchema).optional(),
  contentWeight: z.lazy(() => SortOrderSchema).optional(),
  tagWeight: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchWeightsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SearchWeightsMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  titleWeight: z.lazy(() => SortOrderSchema).optional(),
  contentWeight: z.lazy(() => SortOrderSchema).optional(),
  tagWeight: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchWeightsMinOrderByAggregateInputSchema: z.ZodType<Prisma.SearchWeightsMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  titleWeight: z.lazy(() => SortOrderSchema).optional(),
  contentWeight: z.lazy(() => SortOrderSchema).optional(),
  tagWeight: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchWeightsSumOrderByAggregateInputSchema: z.ZodType<Prisma.SearchWeightsSumOrderByAggregateInput> = z.object({
  titleWeight: z.lazy(() => SortOrderSchema).optional(),
  contentWeight: z.lazy(() => SortOrderSchema).optional(),
  tagWeight: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchConfigCountOrderByAggregateInputSchema: z.ZodType<Prisma.SearchConfigCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchConfigMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SearchConfigMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SearchConfigMinOrderByAggregateInputSchema: z.ZodType<Prisma.SearchConfigMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentConfigCountOrderByAggregateInputSchema: z.ZodType<Prisma.ExperimentConfigCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentConfigMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ExperimentConfigMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ExperimentConfigMinOrderByAggregateInputSchema: z.ZodType<Prisma.ExperimentConfigMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineRecommendationCountOrderByAggregateInputSchema: z.ZodType<Prisma.EngineRecommendationCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  impact: z.lazy(() => SortOrderSchema).optional(),
  metadata: z.lazy(() => SortOrderSchema).optional(),
  learningResultId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineRecommendationAvgOrderByAggregateInputSchema: z.ZodType<Prisma.EngineRecommendationAvgOrderByAggregateInput> = z.object({
  priority: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  impact: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineRecommendationMaxOrderByAggregateInputSchema: z.ZodType<Prisma.EngineRecommendationMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  impact: z.lazy(() => SortOrderSchema).optional(),
  learningResultId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineRecommendationMinOrderByAggregateInputSchema: z.ZodType<Prisma.EngineRecommendationMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  priority: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  impact: z.lazy(() => SortOrderSchema).optional(),
  learningResultId: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const EngineRecommendationSumOrderByAggregateInputSchema: z.ZodType<Prisma.EngineRecommendationSumOrderByAggregateInput> = z.object({
  priority: z.lazy(() => SortOrderSchema).optional(),
  confidence: z.lazy(() => SortOrderSchema).optional(),
  impact: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IndexCountOrderByAggregateInputSchema: z.ZodType<Prisma.IndexCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  settings: z.lazy(() => SortOrderSchema).optional(),
  mappings: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  doc_count: z.lazy(() => SortOrderSchema).optional(),
  size_bytes: z.lazy(() => SortOrderSchema).optional(),
  health: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IndexAvgOrderByAggregateInputSchema: z.ZodType<Prisma.IndexAvgOrderByAggregateInput> = z.object({
  doc_count: z.lazy(() => SortOrderSchema).optional(),
  size_bytes: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IndexMaxOrderByAggregateInputSchema: z.ZodType<Prisma.IndexMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  doc_count: z.lazy(() => SortOrderSchema).optional(),
  size_bytes: z.lazy(() => SortOrderSchema).optional(),
  health: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IndexMinOrderByAggregateInputSchema: z.ZodType<Prisma.IndexMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  status: z.lazy(() => SortOrderSchema).optional(),
  created_at: z.lazy(() => SortOrderSchema).optional(),
  updated_at: z.lazy(() => SortOrderSchema).optional(),
  deleted_at: z.lazy(() => SortOrderSchema).optional(),
  doc_count: z.lazy(() => SortOrderSchema).optional(),
  size_bytes: z.lazy(() => SortOrderSchema).optional(),
  health: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IndexSumOrderByAggregateInputSchema: z.ZodType<Prisma.IndexSumOrderByAggregateInput> = z.object({
  doc_count: z.lazy(() => SortOrderSchema).optional(),
  size_bytes: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountListRelationFilterSchema: z.ZodType<Prisma.AccountListRelationFilter> = z.object({
  every: z.lazy(() => AccountWhereInputSchema).optional(),
  some: z.lazy(() => AccountWhereInputSchema).optional(),
  none: z.lazy(() => AccountWhereInputSchema).optional()
}).strict();

export const AuthSessionListRelationFilterSchema: z.ZodType<Prisma.AuthSessionListRelationFilter> = z.object({
  every: z.lazy(() => AuthSessionWhereInputSchema).optional(),
  some: z.lazy(() => AuthSessionWhereInputSchema).optional(),
  none: z.lazy(() => AuthSessionWhereInputSchema).optional()
}).strict();

export const AccountOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AccountOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuthSessionOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AuthSessionOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserCountOrderByAggregateInputSchema: z.ZodType<Prisma.UserCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UserMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserMinOrderByAggregateInputSchema: z.ZodType<Prisma.UserMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  password: z.lazy(() => SortOrderSchema).optional(),
  emailVerified: z.lazy(() => SortOrderSchema).optional(),
  image: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UserScalarRelationFilterSchema: z.ZodType<Prisma.UserScalarRelationFilter> = z.object({
  is: z.lazy(() => UserWhereInputSchema).optional(),
  isNot: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const AccountProviderProviderAccountIdCompoundUniqueInputSchema: z.ZodType<Prisma.AccountProviderProviderAccountIdCompoundUniqueInput> = z.object({
  provider: z.string(),
  providerAccountId: z.string()
}).strict();

export const AccountCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountAvgOrderByAggregateInputSchema: z.ZodType<Prisma.AccountAvgOrderByAggregateInput> = z.object({
  expires_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  provider: z.lazy(() => SortOrderSchema).optional(),
  providerAccountId: z.lazy(() => SortOrderSchema).optional(),
  refresh_token: z.lazy(() => SortOrderSchema).optional(),
  access_token: z.lazy(() => SortOrderSchema).optional(),
  expires_at: z.lazy(() => SortOrderSchema).optional(),
  token_type: z.lazy(() => SortOrderSchema).optional(),
  scope: z.lazy(() => SortOrderSchema).optional(),
  id_token: z.lazy(() => SortOrderSchema).optional(),
  session_state: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountSumOrderByAggregateInputSchema: z.ZodType<Prisma.AccountSumOrderByAggregateInput> = z.object({
  expires_at: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuthSessionCountOrderByAggregateInputSchema: z.ZodType<Prisma.AuthSessionCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuthSessionMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AuthSessionMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AuthSessionMinOrderByAggregateInputSchema: z.ZodType<Prisma.AuthSessionMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  sessionToken: z.lazy(() => SortOrderSchema).optional(),
  userId: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenIdentifierTokenCompoundUniqueInputSchema: z.ZodType<Prisma.VerificationTokenIdentifierTokenCompoundUniqueInput> = z.object({
  identifier: z.string(),
  token: z.string()
}).strict();

export const VerificationTokenCountOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenCountOrderByAggregateInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenMaxOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenMaxOrderByAggregateInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const VerificationTokenMinOrderByAggregateInputSchema: z.ZodType<Prisma.VerificationTokenMinOrderByAggregateInput> = z.object({
  identifier: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  expires: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ApiKeyCountOrderByAggregateInputSchema: z.ZodType<Prisma.ApiKeyCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  clientId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastUsedAt: z.lazy(() => SortOrderSchema).optional(),
  allowedIps: z.lazy(() => SortOrderSchema).optional(),
  rateLimit: z.lazy(() => SortOrderSchema).optional(),
  usageCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ApiKeyAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ApiKeyAvgOrderByAggregateInput> = z.object({
  rateLimit: z.lazy(() => SortOrderSchema).optional(),
  usageCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ApiKeyMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ApiKeyMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  clientId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastUsedAt: z.lazy(() => SortOrderSchema).optional(),
  rateLimit: z.lazy(() => SortOrderSchema).optional(),
  usageCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ApiKeyMinOrderByAggregateInputSchema: z.ZodType<Prisma.ApiKeyMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  key: z.lazy(() => SortOrderSchema).optional(),
  clientId: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  expiresAt: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastUsedAt: z.lazy(() => SortOrderSchema).optional(),
  rateLimit: z.lazy(() => SortOrderSchema).optional(),
  usageCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ApiKeySumOrderByAggregateInputSchema: z.ZodType<Prisma.ApiKeySumOrderByAggregateInput> = z.object({
  rateLimit: z.lazy(() => SortOrderSchema).optional(),
  usageCount: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdminTokenCountOrderByAggregateInputSchema: z.ZodType<Prisma.AdminTokenCountOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastUsedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdminTokenMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AdminTokenMaxOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastUsedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AdminTokenMinOrderByAggregateInputSchema: z.ZodType<Prisma.AdminTokenMinOrderByAggregateInput> = z.object({
  id: z.lazy(() => SortOrderSchema).optional(),
  token: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  description: z.lazy(() => SortOrderSchema).optional(),
  isActive: z.lazy(() => SortOrderSchema).optional(),
  createdAt: z.lazy(() => SortOrderSchema).optional(),
  updatedAt: z.lazy(() => SortOrderSchema).optional(),
  lastUsedAt: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionToSignalABCompoundUniqueInputSchema: z.ZodType<Prisma.SessionToSignalABCompoundUniqueInput> = z.object({
  A: z.string(),
  B: z.string()
}).strict();

export const SessionToSignalCountOrderByAggregateInputSchema: z.ZodType<Prisma.SessionToSignalCountOrderByAggregateInput> = z.object({
  A: z.lazy(() => SortOrderSchema).optional(),
  B: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionToSignalMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SessionToSignalMaxOrderByAggregateInput> = z.object({
  A: z.lazy(() => SortOrderSchema).optional(),
  B: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SessionToSignalMinOrderByAggregateInputSchema: z.ZodType<Prisma.SessionToSignalMinOrderByAggregateInput> = z.object({
  A: z.lazy(() => SortOrderSchema).optional(),
  B: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const DateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.DateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional()
}).strict();

export const IntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.IntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const ABTestAssignmentCreateNestedManyWithoutSessionInputSchema: z.ZodType<Prisma.ABTestAssignmentCreateNestedManyWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => ABTestAssignmentCreateWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentCreateWithoutSessionInputSchema).array(),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestAssignmentCreateOrConnectWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestAssignmentCreateManySessionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ABTestMetricCreateNestedManyWithoutSessionInputSchema: z.ZodType<Prisma.ABTestMetricCreateNestedManyWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => ABTestMetricCreateWithoutSessionInputSchema),z.lazy(() => ABTestMetricCreateWithoutSessionInputSchema).array(),z.lazy(() => ABTestMetricUncheckedCreateWithoutSessionInputSchema),z.lazy(() => ABTestMetricUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestMetricCreateOrConnectWithoutSessionInputSchema),z.lazy(() => ABTestMetricCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestMetricCreateManySessionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AnalyticsMetricsCreateNestedManyWithoutSessionInputSchema: z.ZodType<Prisma.AnalyticsMetricsCreateNestedManyWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => AnalyticsMetricsCreateWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsCreateWithoutSessionInputSchema).array(),z.lazy(() => AnalyticsMetricsUncheckedCreateWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AnalyticsMetricsCreateOrConnectWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AnalyticsMetricsCreateManySessionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema),z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ConversationCreateNestedManyWithoutSessionInputSchema: z.ZodType<Prisma.ConversationCreateNestedManyWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => ConversationCreateWithoutSessionInputSchema),z.lazy(() => ConversationCreateWithoutSessionInputSchema).array(),z.lazy(() => ConversationUncheckedCreateWithoutSessionInputSchema),z.lazy(() => ConversationUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ConversationCreateOrConnectWithoutSessionInputSchema),z.lazy(() => ConversationCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ConversationCreateManySessionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ConversationWhereUniqueInputSchema),z.lazy(() => ConversationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LearningMetricCreateNestedManyWithoutSessionInputSchema: z.ZodType<Prisma.LearningMetricCreateNestedManyWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => LearningMetricCreateWithoutSessionInputSchema),z.lazy(() => LearningMetricCreateWithoutSessionInputSchema).array(),z.lazy(() => LearningMetricUncheckedCreateWithoutSessionInputSchema),z.lazy(() => LearningMetricUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LearningMetricCreateOrConnectWithoutSessionInputSchema),z.lazy(() => LearningMetricCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LearningMetricCreateManySessionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SearchEventCreateNestedManyWithoutSessionInputSchema: z.ZodType<Prisma.SearchEventCreateNestedManyWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => SearchEventCreateWithoutSessionInputSchema),z.lazy(() => SearchEventCreateWithoutSessionInputSchema).array(),z.lazy(() => SearchEventUncheckedCreateWithoutSessionInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SearchEventCreateOrConnectWithoutSessionInputSchema),z.lazy(() => SearchEventCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SearchEventCreateManySessionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionToSignalCreateNestedManyWithoutSessionsInputSchema: z.ZodType<Prisma.SessionToSignalCreateNestedManyWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => SessionToSignalCreateWithoutSessionsInputSchema),z.lazy(() => SessionToSignalCreateWithoutSessionsInputSchema).array(),z.lazy(() => SessionToSignalUncheckedCreateWithoutSessionsInputSchema),z.lazy(() => SessionToSignalUncheckedCreateWithoutSessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionToSignalCreateOrConnectWithoutSessionsInputSchema),z.lazy(() => SessionToSignalCreateOrConnectWithoutSessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionToSignalCreateManySessionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ABTestAssignmentUncheckedCreateNestedManyWithoutSessionInputSchema: z.ZodType<Prisma.ABTestAssignmentUncheckedCreateNestedManyWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => ABTestAssignmentCreateWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentCreateWithoutSessionInputSchema).array(),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestAssignmentCreateOrConnectWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestAssignmentCreateManySessionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ABTestMetricUncheckedCreateNestedManyWithoutSessionInputSchema: z.ZodType<Prisma.ABTestMetricUncheckedCreateNestedManyWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => ABTestMetricCreateWithoutSessionInputSchema),z.lazy(() => ABTestMetricCreateWithoutSessionInputSchema).array(),z.lazy(() => ABTestMetricUncheckedCreateWithoutSessionInputSchema),z.lazy(() => ABTestMetricUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestMetricCreateOrConnectWithoutSessionInputSchema),z.lazy(() => ABTestMetricCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestMetricCreateManySessionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AnalyticsMetricsUncheckedCreateNestedManyWithoutSessionInputSchema: z.ZodType<Prisma.AnalyticsMetricsUncheckedCreateNestedManyWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => AnalyticsMetricsCreateWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsCreateWithoutSessionInputSchema).array(),z.lazy(() => AnalyticsMetricsUncheckedCreateWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AnalyticsMetricsCreateOrConnectWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AnalyticsMetricsCreateManySessionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema),z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ConversationUncheckedCreateNestedManyWithoutSessionInputSchema: z.ZodType<Prisma.ConversationUncheckedCreateNestedManyWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => ConversationCreateWithoutSessionInputSchema),z.lazy(() => ConversationCreateWithoutSessionInputSchema).array(),z.lazy(() => ConversationUncheckedCreateWithoutSessionInputSchema),z.lazy(() => ConversationUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ConversationCreateOrConnectWithoutSessionInputSchema),z.lazy(() => ConversationCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ConversationCreateManySessionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ConversationWhereUniqueInputSchema),z.lazy(() => ConversationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LearningMetricUncheckedCreateNestedManyWithoutSessionInputSchema: z.ZodType<Prisma.LearningMetricUncheckedCreateNestedManyWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => LearningMetricCreateWithoutSessionInputSchema),z.lazy(() => LearningMetricCreateWithoutSessionInputSchema).array(),z.lazy(() => LearningMetricUncheckedCreateWithoutSessionInputSchema),z.lazy(() => LearningMetricUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LearningMetricCreateOrConnectWithoutSessionInputSchema),z.lazy(() => LearningMetricCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LearningMetricCreateManySessionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SearchEventUncheckedCreateNestedManyWithoutSessionInputSchema: z.ZodType<Prisma.SearchEventUncheckedCreateNestedManyWithoutSessionInput> = z.object({
  create: z.union([ z.lazy(() => SearchEventCreateWithoutSessionInputSchema),z.lazy(() => SearchEventCreateWithoutSessionInputSchema).array(),z.lazy(() => SearchEventUncheckedCreateWithoutSessionInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SearchEventCreateOrConnectWithoutSessionInputSchema),z.lazy(() => SearchEventCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SearchEventCreateManySessionInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionToSignalUncheckedCreateNestedManyWithoutSessionsInputSchema: z.ZodType<Prisma.SessionToSignalUncheckedCreateNestedManyWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => SessionToSignalCreateWithoutSessionsInputSchema),z.lazy(() => SessionToSignalCreateWithoutSessionsInputSchema).array(),z.lazy(() => SessionToSignalUncheckedCreateWithoutSessionsInputSchema),z.lazy(() => SessionToSignalUncheckedCreateWithoutSessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionToSignalCreateOrConnectWithoutSessionsInputSchema),z.lazy(() => SessionToSignalCreateOrConnectWithoutSessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionToSignalCreateManySessionsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ABTestAssignmentUpdateManyWithoutSessionNestedInputSchema: z.ZodType<Prisma.ABTestAssignmentUpdateManyWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => ABTestAssignmentCreateWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentCreateWithoutSessionInputSchema).array(),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestAssignmentCreateOrConnectWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ABTestAssignmentUpsertWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentUpsertWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestAssignmentCreateManySessionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ABTestAssignmentUpdateWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentUpdateWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ABTestAssignmentUpdateManyWithWhereWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentUpdateManyWithWhereWithoutSessionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ABTestAssignmentScalarWhereInputSchema),z.lazy(() => ABTestAssignmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ABTestMetricUpdateManyWithoutSessionNestedInputSchema: z.ZodType<Prisma.ABTestMetricUpdateManyWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => ABTestMetricCreateWithoutSessionInputSchema),z.lazy(() => ABTestMetricCreateWithoutSessionInputSchema).array(),z.lazy(() => ABTestMetricUncheckedCreateWithoutSessionInputSchema),z.lazy(() => ABTestMetricUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestMetricCreateOrConnectWithoutSessionInputSchema),z.lazy(() => ABTestMetricCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ABTestMetricUpsertWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => ABTestMetricUpsertWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestMetricCreateManySessionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ABTestMetricUpdateWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => ABTestMetricUpdateWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ABTestMetricUpdateManyWithWhereWithoutSessionInputSchema),z.lazy(() => ABTestMetricUpdateManyWithWhereWithoutSessionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ABTestMetricScalarWhereInputSchema),z.lazy(() => ABTestMetricScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AnalyticsMetricsUpdateManyWithoutSessionNestedInputSchema: z.ZodType<Prisma.AnalyticsMetricsUpdateManyWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => AnalyticsMetricsCreateWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsCreateWithoutSessionInputSchema).array(),z.lazy(() => AnalyticsMetricsUncheckedCreateWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AnalyticsMetricsCreateOrConnectWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AnalyticsMetricsUpsertWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsUpsertWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AnalyticsMetricsCreateManySessionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema),z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema),z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema),z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema),z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AnalyticsMetricsUpdateWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsUpdateWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AnalyticsMetricsUpdateManyWithWhereWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsUpdateManyWithWhereWithoutSessionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AnalyticsMetricsScalarWhereInputSchema),z.lazy(() => AnalyticsMetricsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ConversationUpdateManyWithoutSessionNestedInputSchema: z.ZodType<Prisma.ConversationUpdateManyWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => ConversationCreateWithoutSessionInputSchema),z.lazy(() => ConversationCreateWithoutSessionInputSchema).array(),z.lazy(() => ConversationUncheckedCreateWithoutSessionInputSchema),z.lazy(() => ConversationUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ConversationCreateOrConnectWithoutSessionInputSchema),z.lazy(() => ConversationCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ConversationUpsertWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => ConversationUpsertWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ConversationCreateManySessionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ConversationWhereUniqueInputSchema),z.lazy(() => ConversationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ConversationWhereUniqueInputSchema),z.lazy(() => ConversationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ConversationWhereUniqueInputSchema),z.lazy(() => ConversationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ConversationWhereUniqueInputSchema),z.lazy(() => ConversationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ConversationUpdateWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => ConversationUpdateWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ConversationUpdateManyWithWhereWithoutSessionInputSchema),z.lazy(() => ConversationUpdateManyWithWhereWithoutSessionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ConversationScalarWhereInputSchema),z.lazy(() => ConversationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LearningMetricUpdateManyWithoutSessionNestedInputSchema: z.ZodType<Prisma.LearningMetricUpdateManyWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => LearningMetricCreateWithoutSessionInputSchema),z.lazy(() => LearningMetricCreateWithoutSessionInputSchema).array(),z.lazy(() => LearningMetricUncheckedCreateWithoutSessionInputSchema),z.lazy(() => LearningMetricUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LearningMetricCreateOrConnectWithoutSessionInputSchema),z.lazy(() => LearningMetricCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LearningMetricUpsertWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => LearningMetricUpsertWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LearningMetricCreateManySessionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LearningMetricUpdateWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => LearningMetricUpdateWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LearningMetricUpdateManyWithWhereWithoutSessionInputSchema),z.lazy(() => LearningMetricUpdateManyWithWhereWithoutSessionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LearningMetricScalarWhereInputSchema),z.lazy(() => LearningMetricScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SearchEventUpdateManyWithoutSessionNestedInputSchema: z.ZodType<Prisma.SearchEventUpdateManyWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => SearchEventCreateWithoutSessionInputSchema),z.lazy(() => SearchEventCreateWithoutSessionInputSchema).array(),z.lazy(() => SearchEventUncheckedCreateWithoutSessionInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SearchEventCreateOrConnectWithoutSessionInputSchema),z.lazy(() => SearchEventCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SearchEventUpsertWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => SearchEventUpsertWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SearchEventCreateManySessionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SearchEventUpdateWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => SearchEventUpdateWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SearchEventUpdateManyWithWhereWithoutSessionInputSchema),z.lazy(() => SearchEventUpdateManyWithWhereWithoutSessionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SearchEventScalarWhereInputSchema),z.lazy(() => SearchEventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionToSignalUpdateManyWithoutSessionsNestedInputSchema: z.ZodType<Prisma.SessionToSignalUpdateManyWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionToSignalCreateWithoutSessionsInputSchema),z.lazy(() => SessionToSignalCreateWithoutSessionsInputSchema).array(),z.lazy(() => SessionToSignalUncheckedCreateWithoutSessionsInputSchema),z.lazy(() => SessionToSignalUncheckedCreateWithoutSessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionToSignalCreateOrConnectWithoutSessionsInputSchema),z.lazy(() => SessionToSignalCreateOrConnectWithoutSessionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionToSignalUpsertWithWhereUniqueWithoutSessionsInputSchema),z.lazy(() => SessionToSignalUpsertWithWhereUniqueWithoutSessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionToSignalCreateManySessionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionToSignalUpdateWithWhereUniqueWithoutSessionsInputSchema),z.lazy(() => SessionToSignalUpdateWithWhereUniqueWithoutSessionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionToSignalUpdateManyWithWhereWithoutSessionsInputSchema),z.lazy(() => SessionToSignalUpdateManyWithWhereWithoutSessionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionToSignalScalarWhereInputSchema),z.lazy(() => SessionToSignalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ABTestAssignmentUncheckedUpdateManyWithoutSessionNestedInputSchema: z.ZodType<Prisma.ABTestAssignmentUncheckedUpdateManyWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => ABTestAssignmentCreateWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentCreateWithoutSessionInputSchema).array(),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestAssignmentCreateOrConnectWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ABTestAssignmentUpsertWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentUpsertWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestAssignmentCreateManySessionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ABTestAssignmentUpdateWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentUpdateWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ABTestAssignmentUpdateManyWithWhereWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentUpdateManyWithWhereWithoutSessionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ABTestAssignmentScalarWhereInputSchema),z.lazy(() => ABTestAssignmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ABTestMetricUncheckedUpdateManyWithoutSessionNestedInputSchema: z.ZodType<Prisma.ABTestMetricUncheckedUpdateManyWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => ABTestMetricCreateWithoutSessionInputSchema),z.lazy(() => ABTestMetricCreateWithoutSessionInputSchema).array(),z.lazy(() => ABTestMetricUncheckedCreateWithoutSessionInputSchema),z.lazy(() => ABTestMetricUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestMetricCreateOrConnectWithoutSessionInputSchema),z.lazy(() => ABTestMetricCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ABTestMetricUpsertWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => ABTestMetricUpsertWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestMetricCreateManySessionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ABTestMetricUpdateWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => ABTestMetricUpdateWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ABTestMetricUpdateManyWithWhereWithoutSessionInputSchema),z.lazy(() => ABTestMetricUpdateManyWithWhereWithoutSessionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ABTestMetricScalarWhereInputSchema),z.lazy(() => ABTestMetricScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AnalyticsMetricsUncheckedUpdateManyWithoutSessionNestedInputSchema: z.ZodType<Prisma.AnalyticsMetricsUncheckedUpdateManyWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => AnalyticsMetricsCreateWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsCreateWithoutSessionInputSchema).array(),z.lazy(() => AnalyticsMetricsUncheckedCreateWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AnalyticsMetricsCreateOrConnectWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AnalyticsMetricsUpsertWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsUpsertWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AnalyticsMetricsCreateManySessionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema),z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema),z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema),z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema),z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AnalyticsMetricsUpdateWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsUpdateWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AnalyticsMetricsUpdateManyWithWhereWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsUpdateManyWithWhereWithoutSessionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AnalyticsMetricsScalarWhereInputSchema),z.lazy(() => AnalyticsMetricsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ConversationUncheckedUpdateManyWithoutSessionNestedInputSchema: z.ZodType<Prisma.ConversationUncheckedUpdateManyWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => ConversationCreateWithoutSessionInputSchema),z.lazy(() => ConversationCreateWithoutSessionInputSchema).array(),z.lazy(() => ConversationUncheckedCreateWithoutSessionInputSchema),z.lazy(() => ConversationUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ConversationCreateOrConnectWithoutSessionInputSchema),z.lazy(() => ConversationCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ConversationUpsertWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => ConversationUpsertWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ConversationCreateManySessionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ConversationWhereUniqueInputSchema),z.lazy(() => ConversationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ConversationWhereUniqueInputSchema),z.lazy(() => ConversationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ConversationWhereUniqueInputSchema),z.lazy(() => ConversationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ConversationWhereUniqueInputSchema),z.lazy(() => ConversationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ConversationUpdateWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => ConversationUpdateWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ConversationUpdateManyWithWhereWithoutSessionInputSchema),z.lazy(() => ConversationUpdateManyWithWhereWithoutSessionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ConversationScalarWhereInputSchema),z.lazy(() => ConversationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LearningMetricUncheckedUpdateManyWithoutSessionNestedInputSchema: z.ZodType<Prisma.LearningMetricUncheckedUpdateManyWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => LearningMetricCreateWithoutSessionInputSchema),z.lazy(() => LearningMetricCreateWithoutSessionInputSchema).array(),z.lazy(() => LearningMetricUncheckedCreateWithoutSessionInputSchema),z.lazy(() => LearningMetricUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LearningMetricCreateOrConnectWithoutSessionInputSchema),z.lazy(() => LearningMetricCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LearningMetricUpsertWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => LearningMetricUpsertWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LearningMetricCreateManySessionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LearningMetricUpdateWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => LearningMetricUpdateWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LearningMetricUpdateManyWithWhereWithoutSessionInputSchema),z.lazy(() => LearningMetricUpdateManyWithWhereWithoutSessionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LearningMetricScalarWhereInputSchema),z.lazy(() => LearningMetricScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SearchEventUncheckedUpdateManyWithoutSessionNestedInputSchema: z.ZodType<Prisma.SearchEventUncheckedUpdateManyWithoutSessionNestedInput> = z.object({
  create: z.union([ z.lazy(() => SearchEventCreateWithoutSessionInputSchema),z.lazy(() => SearchEventCreateWithoutSessionInputSchema).array(),z.lazy(() => SearchEventUncheckedCreateWithoutSessionInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutSessionInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SearchEventCreateOrConnectWithoutSessionInputSchema),z.lazy(() => SearchEventCreateOrConnectWithoutSessionInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SearchEventUpsertWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => SearchEventUpsertWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SearchEventCreateManySessionInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SearchEventUpdateWithWhereUniqueWithoutSessionInputSchema),z.lazy(() => SearchEventUpdateWithWhereUniqueWithoutSessionInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SearchEventUpdateManyWithWhereWithoutSessionInputSchema),z.lazy(() => SearchEventUpdateManyWithWhereWithoutSessionInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SearchEventScalarWhereInputSchema),z.lazy(() => SearchEventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionToSignalUncheckedUpdateManyWithoutSessionsNestedInputSchema: z.ZodType<Prisma.SessionToSignalUncheckedUpdateManyWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionToSignalCreateWithoutSessionsInputSchema),z.lazy(() => SessionToSignalCreateWithoutSessionsInputSchema).array(),z.lazy(() => SessionToSignalUncheckedCreateWithoutSessionsInputSchema),z.lazy(() => SessionToSignalUncheckedCreateWithoutSessionsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionToSignalCreateOrConnectWithoutSessionsInputSchema),z.lazy(() => SessionToSignalCreateOrConnectWithoutSessionsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionToSignalUpsertWithWhereUniqueWithoutSessionsInputSchema),z.lazy(() => SessionToSignalUpsertWithWhereUniqueWithoutSessionsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionToSignalCreateManySessionsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionToSignalUpdateWithWhereUniqueWithoutSessionsInputSchema),z.lazy(() => SessionToSignalUpdateWithWhereUniqueWithoutSessionsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionToSignalUpdateManyWithWhereWithoutSessionsInputSchema),z.lazy(() => SessionToSignalUpdateManyWithWhereWithoutSessionsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionToSignalScalarWhereInputSchema),z.lazy(() => SessionToSignalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionCreateNestedOneWithoutConversationsInputSchema: z.ZodType<Prisma.SessionCreateNestedOneWithoutConversationsInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutConversationsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutConversationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SessionCreateOrConnectWithoutConversationsInputSchema).optional(),
  connect: z.lazy(() => SessionWhereUniqueInputSchema).optional()
}).strict();

export const MessageCreateNestedManyWithoutConversationInputSchema: z.ZodType<Prisma.MessageCreateNestedManyWithoutConversationInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutConversationInputSchema),z.lazy(() => MessageCreateWithoutConversationInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutConversationInputSchema),z.lazy(() => MessageUncheckedCreateWithoutConversationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutConversationInputSchema),z.lazy(() => MessageCreateOrConnectWithoutConversationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManyConversationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const MessageUncheckedCreateNestedManyWithoutConversationInputSchema: z.ZodType<Prisma.MessageUncheckedCreateNestedManyWithoutConversationInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutConversationInputSchema),z.lazy(() => MessageCreateWithoutConversationInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutConversationInputSchema),z.lazy(() => MessageUncheckedCreateWithoutConversationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutConversationInputSchema),z.lazy(() => MessageCreateOrConnectWithoutConversationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManyConversationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionUpdateOneRequiredWithoutConversationsNestedInputSchema: z.ZodType<Prisma.SessionUpdateOneRequiredWithoutConversationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutConversationsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutConversationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SessionCreateOrConnectWithoutConversationsInputSchema).optional(),
  upsert: z.lazy(() => SessionUpsertWithoutConversationsInputSchema).optional(),
  connect: z.lazy(() => SessionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SessionUpdateToOneWithWhereWithoutConversationsInputSchema),z.lazy(() => SessionUpdateWithoutConversationsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutConversationsInputSchema) ]).optional(),
}).strict();

export const MessageUpdateManyWithoutConversationNestedInputSchema: z.ZodType<Prisma.MessageUpdateManyWithoutConversationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutConversationInputSchema),z.lazy(() => MessageCreateWithoutConversationInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutConversationInputSchema),z.lazy(() => MessageUncheckedCreateWithoutConversationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutConversationInputSchema),z.lazy(() => MessageCreateOrConnectWithoutConversationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageUpsertWithWhereUniqueWithoutConversationInputSchema),z.lazy(() => MessageUpsertWithWhereUniqueWithoutConversationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManyConversationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageUpdateWithWhereUniqueWithoutConversationInputSchema),z.lazy(() => MessageUpdateWithWhereUniqueWithoutConversationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageUpdateManyWithWhereWithoutConversationInputSchema),z.lazy(() => MessageUpdateManyWithWhereWithoutConversationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageScalarWhereInputSchema),z.lazy(() => MessageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const MessageUncheckedUpdateManyWithoutConversationNestedInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateManyWithoutConversationNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessageCreateWithoutConversationInputSchema),z.lazy(() => MessageCreateWithoutConversationInputSchema).array(),z.lazy(() => MessageUncheckedCreateWithoutConversationInputSchema),z.lazy(() => MessageUncheckedCreateWithoutConversationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => MessageCreateOrConnectWithoutConversationInputSchema),z.lazy(() => MessageCreateOrConnectWithoutConversationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => MessageUpsertWithWhereUniqueWithoutConversationInputSchema),z.lazy(() => MessageUpsertWithWhereUniqueWithoutConversationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => MessageCreateManyConversationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => MessageWhereUniqueInputSchema),z.lazy(() => MessageWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => MessageUpdateWithWhereUniqueWithoutConversationInputSchema),z.lazy(() => MessageUpdateWithWhereUniqueWithoutConversationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => MessageUpdateManyWithWhereWithoutConversationInputSchema),z.lazy(() => MessageUpdateManyWithWhereWithoutConversationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => MessageScalarWhereInputSchema),z.lazy(() => MessageScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ConversationCreateNestedOneWithoutMessagesInputSchema: z.ZodType<Prisma.ConversationCreateNestedOneWithoutMessagesInput> = z.object({
  create: z.union([ z.lazy(() => ConversationCreateWithoutMessagesInputSchema),z.lazy(() => ConversationUncheckedCreateWithoutMessagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ConversationCreateOrConnectWithoutMessagesInputSchema).optional(),
  connect: z.lazy(() => ConversationWhereUniqueInputSchema).optional()
}).strict();

export const ConversationUpdateOneRequiredWithoutMessagesNestedInputSchema: z.ZodType<Prisma.ConversationUpdateOneRequiredWithoutMessagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ConversationCreateWithoutMessagesInputSchema),z.lazy(() => ConversationUncheckedCreateWithoutMessagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ConversationCreateOrConnectWithoutMessagesInputSchema).optional(),
  upsert: z.lazy(() => ConversationUpsertWithoutMessagesInputSchema).optional(),
  connect: z.lazy(() => ConversationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ConversationUpdateToOneWithWhereWithoutMessagesInputSchema),z.lazy(() => ConversationUpdateWithoutMessagesInputSchema),z.lazy(() => ConversationUncheckedUpdateWithoutMessagesInputSchema) ]).optional(),
}).strict();

export const ABTestAssignmentCreateNestedManyWithoutTestInputSchema: z.ZodType<Prisma.ABTestAssignmentCreateNestedManyWithoutTestInput> = z.object({
  create: z.union([ z.lazy(() => ABTestAssignmentCreateWithoutTestInputSchema),z.lazy(() => ABTestAssignmentCreateWithoutTestInputSchema).array(),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutTestInputSchema),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestAssignmentCreateOrConnectWithoutTestInputSchema),z.lazy(() => ABTestAssignmentCreateOrConnectWithoutTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestAssignmentCreateManyTestInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ABTestMetricCreateNestedManyWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricCreateNestedManyWithoutTestInput> = z.object({
  create: z.union([ z.lazy(() => ABTestMetricCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricCreateWithoutTestInputSchema).array(),z.lazy(() => ABTestMetricUncheckedCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricUncheckedCreateWithoutTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestMetricCreateOrConnectWithoutTestInputSchema),z.lazy(() => ABTestMetricCreateOrConnectWithoutTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestMetricCreateManyTestInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ABTestMetricsCreateNestedManyWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricsCreateNestedManyWithoutTestInput> = z.object({
  create: z.union([ z.lazy(() => ABTestMetricsCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricsCreateWithoutTestInputSchema).array(),z.lazy(() => ABTestMetricsUncheckedCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricsUncheckedCreateWithoutTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestMetricsCreateOrConnectWithoutTestInputSchema),z.lazy(() => ABTestMetricsCreateOrConnectWithoutTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestMetricsCreateManyTestInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ABTestMetricsWhereUniqueInputSchema),z.lazy(() => ABTestMetricsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ABTestAssignmentUncheckedCreateNestedManyWithoutTestInputSchema: z.ZodType<Prisma.ABTestAssignmentUncheckedCreateNestedManyWithoutTestInput> = z.object({
  create: z.union([ z.lazy(() => ABTestAssignmentCreateWithoutTestInputSchema),z.lazy(() => ABTestAssignmentCreateWithoutTestInputSchema).array(),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutTestInputSchema),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestAssignmentCreateOrConnectWithoutTestInputSchema),z.lazy(() => ABTestAssignmentCreateOrConnectWithoutTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestAssignmentCreateManyTestInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ABTestMetricUncheckedCreateNestedManyWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricUncheckedCreateNestedManyWithoutTestInput> = z.object({
  create: z.union([ z.lazy(() => ABTestMetricCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricCreateWithoutTestInputSchema).array(),z.lazy(() => ABTestMetricUncheckedCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricUncheckedCreateWithoutTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestMetricCreateOrConnectWithoutTestInputSchema),z.lazy(() => ABTestMetricCreateOrConnectWithoutTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestMetricCreateManyTestInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ABTestMetricsUncheckedCreateNestedManyWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricsUncheckedCreateNestedManyWithoutTestInput> = z.object({
  create: z.union([ z.lazy(() => ABTestMetricsCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricsCreateWithoutTestInputSchema).array(),z.lazy(() => ABTestMetricsUncheckedCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricsUncheckedCreateWithoutTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestMetricsCreateOrConnectWithoutTestInputSchema),z.lazy(() => ABTestMetricsCreateOrConnectWithoutTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestMetricsCreateManyTestInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ABTestMetricsWhereUniqueInputSchema),z.lazy(() => ABTestMetricsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumExperimentStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumExperimentStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ExperimentStatusSchema).optional()
}).strict();

export const ABTestAssignmentUpdateManyWithoutTestNestedInputSchema: z.ZodType<Prisma.ABTestAssignmentUpdateManyWithoutTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => ABTestAssignmentCreateWithoutTestInputSchema),z.lazy(() => ABTestAssignmentCreateWithoutTestInputSchema).array(),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutTestInputSchema),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestAssignmentCreateOrConnectWithoutTestInputSchema),z.lazy(() => ABTestAssignmentCreateOrConnectWithoutTestInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ABTestAssignmentUpsertWithWhereUniqueWithoutTestInputSchema),z.lazy(() => ABTestAssignmentUpsertWithWhereUniqueWithoutTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestAssignmentCreateManyTestInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ABTestAssignmentUpdateWithWhereUniqueWithoutTestInputSchema),z.lazy(() => ABTestAssignmentUpdateWithWhereUniqueWithoutTestInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ABTestAssignmentUpdateManyWithWhereWithoutTestInputSchema),z.lazy(() => ABTestAssignmentUpdateManyWithWhereWithoutTestInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ABTestAssignmentScalarWhereInputSchema),z.lazy(() => ABTestAssignmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ABTestMetricUpdateManyWithoutTestNestedInputSchema: z.ZodType<Prisma.ABTestMetricUpdateManyWithoutTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => ABTestMetricCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricCreateWithoutTestInputSchema).array(),z.lazy(() => ABTestMetricUncheckedCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricUncheckedCreateWithoutTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestMetricCreateOrConnectWithoutTestInputSchema),z.lazy(() => ABTestMetricCreateOrConnectWithoutTestInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ABTestMetricUpsertWithWhereUniqueWithoutTestInputSchema),z.lazy(() => ABTestMetricUpsertWithWhereUniqueWithoutTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestMetricCreateManyTestInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ABTestMetricUpdateWithWhereUniqueWithoutTestInputSchema),z.lazy(() => ABTestMetricUpdateWithWhereUniqueWithoutTestInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ABTestMetricUpdateManyWithWhereWithoutTestInputSchema),z.lazy(() => ABTestMetricUpdateManyWithWhereWithoutTestInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ABTestMetricScalarWhereInputSchema),z.lazy(() => ABTestMetricScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ABTestMetricsUpdateManyWithoutTestNestedInputSchema: z.ZodType<Prisma.ABTestMetricsUpdateManyWithoutTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => ABTestMetricsCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricsCreateWithoutTestInputSchema).array(),z.lazy(() => ABTestMetricsUncheckedCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricsUncheckedCreateWithoutTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestMetricsCreateOrConnectWithoutTestInputSchema),z.lazy(() => ABTestMetricsCreateOrConnectWithoutTestInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ABTestMetricsUpsertWithWhereUniqueWithoutTestInputSchema),z.lazy(() => ABTestMetricsUpsertWithWhereUniqueWithoutTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestMetricsCreateManyTestInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ABTestMetricsWhereUniqueInputSchema),z.lazy(() => ABTestMetricsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ABTestMetricsWhereUniqueInputSchema),z.lazy(() => ABTestMetricsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ABTestMetricsWhereUniqueInputSchema),z.lazy(() => ABTestMetricsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ABTestMetricsWhereUniqueInputSchema),z.lazy(() => ABTestMetricsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ABTestMetricsUpdateWithWhereUniqueWithoutTestInputSchema),z.lazy(() => ABTestMetricsUpdateWithWhereUniqueWithoutTestInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ABTestMetricsUpdateManyWithWhereWithoutTestInputSchema),z.lazy(() => ABTestMetricsUpdateManyWithWhereWithoutTestInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ABTestMetricsScalarWhereInputSchema),z.lazy(() => ABTestMetricsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ABTestAssignmentUncheckedUpdateManyWithoutTestNestedInputSchema: z.ZodType<Prisma.ABTestAssignmentUncheckedUpdateManyWithoutTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => ABTestAssignmentCreateWithoutTestInputSchema),z.lazy(() => ABTestAssignmentCreateWithoutTestInputSchema).array(),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutTestInputSchema),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestAssignmentCreateOrConnectWithoutTestInputSchema),z.lazy(() => ABTestAssignmentCreateOrConnectWithoutTestInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ABTestAssignmentUpsertWithWhereUniqueWithoutTestInputSchema),z.lazy(() => ABTestAssignmentUpsertWithWhereUniqueWithoutTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestAssignmentCreateManyTestInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),z.lazy(() => ABTestAssignmentWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ABTestAssignmentUpdateWithWhereUniqueWithoutTestInputSchema),z.lazy(() => ABTestAssignmentUpdateWithWhereUniqueWithoutTestInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ABTestAssignmentUpdateManyWithWhereWithoutTestInputSchema),z.lazy(() => ABTestAssignmentUpdateManyWithWhereWithoutTestInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ABTestAssignmentScalarWhereInputSchema),z.lazy(() => ABTestAssignmentScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ABTestMetricUncheckedUpdateManyWithoutTestNestedInputSchema: z.ZodType<Prisma.ABTestMetricUncheckedUpdateManyWithoutTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => ABTestMetricCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricCreateWithoutTestInputSchema).array(),z.lazy(() => ABTestMetricUncheckedCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricUncheckedCreateWithoutTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestMetricCreateOrConnectWithoutTestInputSchema),z.lazy(() => ABTestMetricCreateOrConnectWithoutTestInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ABTestMetricUpsertWithWhereUniqueWithoutTestInputSchema),z.lazy(() => ABTestMetricUpsertWithWhereUniqueWithoutTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestMetricCreateManyTestInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ABTestMetricWhereUniqueInputSchema),z.lazy(() => ABTestMetricWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ABTestMetricUpdateWithWhereUniqueWithoutTestInputSchema),z.lazy(() => ABTestMetricUpdateWithWhereUniqueWithoutTestInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ABTestMetricUpdateManyWithWhereWithoutTestInputSchema),z.lazy(() => ABTestMetricUpdateManyWithWhereWithoutTestInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ABTestMetricScalarWhereInputSchema),z.lazy(() => ABTestMetricScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ABTestMetricsUncheckedUpdateManyWithoutTestNestedInputSchema: z.ZodType<Prisma.ABTestMetricsUncheckedUpdateManyWithoutTestNestedInput> = z.object({
  create: z.union([ z.lazy(() => ABTestMetricsCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricsCreateWithoutTestInputSchema).array(),z.lazy(() => ABTestMetricsUncheckedCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricsUncheckedCreateWithoutTestInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ABTestMetricsCreateOrConnectWithoutTestInputSchema),z.lazy(() => ABTestMetricsCreateOrConnectWithoutTestInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ABTestMetricsUpsertWithWhereUniqueWithoutTestInputSchema),z.lazy(() => ABTestMetricsUpsertWithWhereUniqueWithoutTestInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ABTestMetricsCreateManyTestInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ABTestMetricsWhereUniqueInputSchema),z.lazy(() => ABTestMetricsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ABTestMetricsWhereUniqueInputSchema),z.lazy(() => ABTestMetricsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ABTestMetricsWhereUniqueInputSchema),z.lazy(() => ABTestMetricsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ABTestMetricsWhereUniqueInputSchema),z.lazy(() => ABTestMetricsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ABTestMetricsUpdateWithWhereUniqueWithoutTestInputSchema),z.lazy(() => ABTestMetricsUpdateWithWhereUniqueWithoutTestInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ABTestMetricsUpdateManyWithWhereWithoutTestInputSchema),z.lazy(() => ABTestMetricsUpdateManyWithWhereWithoutTestInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ABTestMetricsScalarWhereInputSchema),z.lazy(() => ABTestMetricsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionCreateNestedOneWithoutAbAssignmentsInputSchema: z.ZodType<Prisma.SessionCreateNestedOneWithoutAbAssignmentsInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutAbAssignmentsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutAbAssignmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SessionCreateOrConnectWithoutAbAssignmentsInputSchema).optional(),
  connect: z.lazy(() => SessionWhereUniqueInputSchema).optional()
}).strict();

export const ABTestCreateNestedOneWithoutAssignmentsInputSchema: z.ZodType<Prisma.ABTestCreateNestedOneWithoutAssignmentsInput> = z.object({
  create: z.union([ z.lazy(() => ABTestCreateWithoutAssignmentsInputSchema),z.lazy(() => ABTestUncheckedCreateWithoutAssignmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ABTestCreateOrConnectWithoutAssignmentsInputSchema).optional(),
  connect: z.lazy(() => ABTestWhereUniqueInputSchema).optional()
}).strict();

export const SessionUpdateOneRequiredWithoutAbAssignmentsNestedInputSchema: z.ZodType<Prisma.SessionUpdateOneRequiredWithoutAbAssignmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutAbAssignmentsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutAbAssignmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SessionCreateOrConnectWithoutAbAssignmentsInputSchema).optional(),
  upsert: z.lazy(() => SessionUpsertWithoutAbAssignmentsInputSchema).optional(),
  connect: z.lazy(() => SessionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SessionUpdateToOneWithWhereWithoutAbAssignmentsInputSchema),z.lazy(() => SessionUpdateWithoutAbAssignmentsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutAbAssignmentsInputSchema) ]).optional(),
}).strict();

export const ABTestUpdateOneRequiredWithoutAssignmentsNestedInputSchema: z.ZodType<Prisma.ABTestUpdateOneRequiredWithoutAssignmentsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ABTestCreateWithoutAssignmentsInputSchema),z.lazy(() => ABTestUncheckedCreateWithoutAssignmentsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ABTestCreateOrConnectWithoutAssignmentsInputSchema).optional(),
  upsert: z.lazy(() => ABTestUpsertWithoutAssignmentsInputSchema).optional(),
  connect: z.lazy(() => ABTestWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ABTestUpdateToOneWithWhereWithoutAssignmentsInputSchema),z.lazy(() => ABTestUpdateWithoutAssignmentsInputSchema),z.lazy(() => ABTestUncheckedUpdateWithoutAssignmentsInputSchema) ]).optional(),
}).strict();

export const SessionCreateNestedOneWithoutAbMetricsInputSchema: z.ZodType<Prisma.SessionCreateNestedOneWithoutAbMetricsInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutAbMetricsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutAbMetricsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SessionCreateOrConnectWithoutAbMetricsInputSchema).optional(),
  connect: z.lazy(() => SessionWhereUniqueInputSchema).optional()
}).strict();

export const ABTestCreateNestedOneWithoutMetricsInputSchema: z.ZodType<Prisma.ABTestCreateNestedOneWithoutMetricsInput> = z.object({
  create: z.union([ z.lazy(() => ABTestCreateWithoutMetricsInputSchema),z.lazy(() => ABTestUncheckedCreateWithoutMetricsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ABTestCreateOrConnectWithoutMetricsInputSchema).optional(),
  connect: z.lazy(() => ABTestWhereUniqueInputSchema).optional()
}).strict();

export const FloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.FloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const SessionUpdateOneRequiredWithoutAbMetricsNestedInputSchema: z.ZodType<Prisma.SessionUpdateOneRequiredWithoutAbMetricsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutAbMetricsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutAbMetricsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SessionCreateOrConnectWithoutAbMetricsInputSchema).optional(),
  upsert: z.lazy(() => SessionUpsertWithoutAbMetricsInputSchema).optional(),
  connect: z.lazy(() => SessionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SessionUpdateToOneWithWhereWithoutAbMetricsInputSchema),z.lazy(() => SessionUpdateWithoutAbMetricsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutAbMetricsInputSchema) ]).optional(),
}).strict();

export const ABTestUpdateOneRequiredWithoutMetricsNestedInputSchema: z.ZodType<Prisma.ABTestUpdateOneRequiredWithoutMetricsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ABTestCreateWithoutMetricsInputSchema),z.lazy(() => ABTestUncheckedCreateWithoutMetricsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ABTestCreateOrConnectWithoutMetricsInputSchema).optional(),
  upsert: z.lazy(() => ABTestUpsertWithoutMetricsInputSchema).optional(),
  connect: z.lazy(() => ABTestWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ABTestUpdateToOneWithWhereWithoutMetricsInputSchema),z.lazy(() => ABTestUpdateWithoutMetricsInputSchema),z.lazy(() => ABTestUncheckedUpdateWithoutMetricsInputSchema) ]).optional(),
}).strict();

export const SearchEventCreateNestedManyWithoutFeedbackInputSchema: z.ZodType<Prisma.SearchEventCreateNestedManyWithoutFeedbackInput> = z.object({
  create: z.union([ z.lazy(() => SearchEventCreateWithoutFeedbackInputSchema),z.lazy(() => SearchEventCreateWithoutFeedbackInputSchema).array(),z.lazy(() => SearchEventUncheckedCreateWithoutFeedbackInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutFeedbackInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SearchEventCreateOrConnectWithoutFeedbackInputSchema),z.lazy(() => SearchEventCreateOrConnectWithoutFeedbackInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SearchEventUncheckedCreateNestedManyWithoutFeedbackInputSchema: z.ZodType<Prisma.SearchEventUncheckedCreateNestedManyWithoutFeedbackInput> = z.object({
  create: z.union([ z.lazy(() => SearchEventCreateWithoutFeedbackInputSchema),z.lazy(() => SearchEventCreateWithoutFeedbackInputSchema).array(),z.lazy(() => SearchEventUncheckedCreateWithoutFeedbackInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutFeedbackInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SearchEventCreateOrConnectWithoutFeedbackInputSchema),z.lazy(() => SearchEventCreateOrConnectWithoutFeedbackInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SearchEventUpdateManyWithoutFeedbackNestedInputSchema: z.ZodType<Prisma.SearchEventUpdateManyWithoutFeedbackNestedInput> = z.object({
  create: z.union([ z.lazy(() => SearchEventCreateWithoutFeedbackInputSchema),z.lazy(() => SearchEventCreateWithoutFeedbackInputSchema).array(),z.lazy(() => SearchEventUncheckedCreateWithoutFeedbackInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutFeedbackInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SearchEventCreateOrConnectWithoutFeedbackInputSchema),z.lazy(() => SearchEventCreateOrConnectWithoutFeedbackInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SearchEventUpsertWithWhereUniqueWithoutFeedbackInputSchema),z.lazy(() => SearchEventUpsertWithWhereUniqueWithoutFeedbackInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SearchEventUpdateWithWhereUniqueWithoutFeedbackInputSchema),z.lazy(() => SearchEventUpdateWithWhereUniqueWithoutFeedbackInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SearchEventUpdateManyWithWhereWithoutFeedbackInputSchema),z.lazy(() => SearchEventUpdateManyWithWhereWithoutFeedbackInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SearchEventScalarWhereInputSchema),z.lazy(() => SearchEventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SearchEventUncheckedUpdateManyWithoutFeedbackNestedInputSchema: z.ZodType<Prisma.SearchEventUncheckedUpdateManyWithoutFeedbackNestedInput> = z.object({
  create: z.union([ z.lazy(() => SearchEventCreateWithoutFeedbackInputSchema),z.lazy(() => SearchEventCreateWithoutFeedbackInputSchema).array(),z.lazy(() => SearchEventUncheckedCreateWithoutFeedbackInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutFeedbackInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SearchEventCreateOrConnectWithoutFeedbackInputSchema),z.lazy(() => SearchEventCreateOrConnectWithoutFeedbackInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SearchEventUpsertWithWhereUniqueWithoutFeedbackInputSchema),z.lazy(() => SearchEventUpsertWithWhereUniqueWithoutFeedbackInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SearchEventWhereUniqueInputSchema),z.lazy(() => SearchEventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SearchEventUpdateWithWhereUniqueWithoutFeedbackInputSchema),z.lazy(() => SearchEventUpdateWithWhereUniqueWithoutFeedbackInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SearchEventUpdateManyWithWhereWithoutFeedbackInputSchema),z.lazy(() => SearchEventUpdateManyWithWhereWithoutFeedbackInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SearchEventScalarWhereInputSchema),z.lazy(() => SearchEventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SearchEventCreateNestedOneWithoutBaseEventInputSchema: z.ZodType<Prisma.SearchEventCreateNestedOneWithoutBaseEventInput> = z.object({
  create: z.union([ z.lazy(() => SearchEventCreateWithoutBaseEventInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutBaseEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SearchEventCreateOrConnectWithoutBaseEventInputSchema).optional(),
  connect: z.lazy(() => SearchEventWhereUniqueInputSchema).optional()
}).strict();

export const ModelEventCreateNestedOneWithoutBaseEventInputSchema: z.ZodType<Prisma.ModelEventCreateNestedOneWithoutBaseEventInput> = z.object({
  create: z.union([ z.lazy(() => ModelEventCreateWithoutBaseEventInputSchema),z.lazy(() => ModelEventUncheckedCreateWithoutBaseEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ModelEventCreateOrConnectWithoutBaseEventInputSchema).optional(),
  connect: z.lazy(() => ModelEventWhereUniqueInputSchema).optional()
}).strict();

export const ModelEventUncheckedCreateNestedOneWithoutBaseEventInputSchema: z.ZodType<Prisma.ModelEventUncheckedCreateNestedOneWithoutBaseEventInput> = z.object({
  create: z.union([ z.lazy(() => ModelEventCreateWithoutBaseEventInputSchema),z.lazy(() => ModelEventUncheckedCreateWithoutBaseEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ModelEventCreateOrConnectWithoutBaseEventInputSchema).optional(),
  connect: z.lazy(() => ModelEventWhereUniqueInputSchema).optional()
}).strict();

export const EnumEventTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumEventTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => EventTypeSchema).optional()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional().nullable()
}).strict();

export const SearchEventUpdateOneWithoutBaseEventNestedInputSchema: z.ZodType<Prisma.SearchEventUpdateOneWithoutBaseEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => SearchEventCreateWithoutBaseEventInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutBaseEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SearchEventCreateOrConnectWithoutBaseEventInputSchema).optional(),
  upsert: z.lazy(() => SearchEventUpsertWithoutBaseEventInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SearchEventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SearchEventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SearchEventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SearchEventUpdateToOneWithWhereWithoutBaseEventInputSchema),z.lazy(() => SearchEventUpdateWithoutBaseEventInputSchema),z.lazy(() => SearchEventUncheckedUpdateWithoutBaseEventInputSchema) ]).optional(),
}).strict();

export const ModelEventUpdateOneWithoutBaseEventNestedInputSchema: z.ZodType<Prisma.ModelEventUpdateOneWithoutBaseEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => ModelEventCreateWithoutBaseEventInputSchema),z.lazy(() => ModelEventUncheckedCreateWithoutBaseEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ModelEventCreateOrConnectWithoutBaseEventInputSchema).optional(),
  upsert: z.lazy(() => ModelEventUpsertWithoutBaseEventInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ModelEventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ModelEventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ModelEventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ModelEventUpdateToOneWithWhereWithoutBaseEventInputSchema),z.lazy(() => ModelEventUpdateWithoutBaseEventInputSchema),z.lazy(() => ModelEventUncheckedUpdateWithoutBaseEventInputSchema) ]).optional(),
}).strict();

export const ModelEventUncheckedUpdateOneWithoutBaseEventNestedInputSchema: z.ZodType<Prisma.ModelEventUncheckedUpdateOneWithoutBaseEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => ModelEventCreateWithoutBaseEventInputSchema),z.lazy(() => ModelEventUncheckedCreateWithoutBaseEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ModelEventCreateOrConnectWithoutBaseEventInputSchema).optional(),
  upsert: z.lazy(() => ModelEventUpsertWithoutBaseEventInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ModelEventWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ModelEventWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ModelEventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ModelEventUpdateToOneWithWhereWithoutBaseEventInputSchema),z.lazy(() => ModelEventUpdateWithoutBaseEventInputSchema),z.lazy(() => ModelEventUncheckedUpdateWithoutBaseEventInputSchema) ]).optional(),
}).strict();

export const BaseEventCreateNestedOneWithoutModelEventInputSchema: z.ZodType<Prisma.BaseEventCreateNestedOneWithoutModelEventInput> = z.object({
  create: z.union([ z.lazy(() => BaseEventCreateWithoutModelEventInputSchema),z.lazy(() => BaseEventUncheckedCreateWithoutModelEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BaseEventCreateOrConnectWithoutModelEventInputSchema).optional(),
  connect: z.lazy(() => BaseEventWhereUniqueInputSchema).optional()
}).strict();

export const BaseEventUpdateOneRequiredWithoutModelEventNestedInputSchema: z.ZodType<Prisma.BaseEventUpdateOneRequiredWithoutModelEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => BaseEventCreateWithoutModelEventInputSchema),z.lazy(() => BaseEventUncheckedCreateWithoutModelEventInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => BaseEventCreateOrConnectWithoutModelEventInputSchema).optional(),
  upsert: z.lazy(() => BaseEventUpsertWithoutModelEventInputSchema).optional(),
  connect: z.lazy(() => BaseEventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => BaseEventUpdateToOneWithWhereWithoutModelEventInputSchema),z.lazy(() => BaseEventUpdateWithoutModelEventInputSchema),z.lazy(() => BaseEventUncheckedUpdateWithoutModelEventInputSchema) ]).optional(),
}).strict();

export const ProcessedSignalCreatetransformationsInputSchema: z.ZodType<Prisma.ProcessedSignalCreatetransformationsInput> = z.object({
  set: z.string().array()
}).strict();

export const SignalCreateNestedOneWithoutProcessedSignalInputSchema: z.ZodType<Prisma.SignalCreateNestedOneWithoutProcessedSignalInput> = z.object({
  create: z.union([ z.lazy(() => SignalCreateWithoutProcessedSignalInputSchema),z.lazy(() => SignalUncheckedCreateWithoutProcessedSignalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SignalCreateOrConnectWithoutProcessedSignalInputSchema).optional(),
  connect: z.lazy(() => SignalWhereUniqueInputSchema).optional()
}).strict();

export const ProcessedSignalUpdatetransformationsInputSchema: z.ZodType<Prisma.ProcessedSignalUpdatetransformationsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const BoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.BoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional()
}).strict();

export const SignalUpdateOneRequiredWithoutProcessedSignalNestedInputSchema: z.ZodType<Prisma.SignalUpdateOneRequiredWithoutProcessedSignalNestedInput> = z.object({
  create: z.union([ z.lazy(() => SignalCreateWithoutProcessedSignalInputSchema),z.lazy(() => SignalUncheckedCreateWithoutProcessedSignalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SignalCreateOrConnectWithoutProcessedSignalInputSchema).optional(),
  upsert: z.lazy(() => SignalUpsertWithoutProcessedSignalInputSchema).optional(),
  connect: z.lazy(() => SignalWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SignalUpdateToOneWithWhereWithoutProcessedSignalInputSchema),z.lazy(() => SignalUpdateWithoutProcessedSignalInputSchema),z.lazy(() => SignalUncheckedUpdateWithoutProcessedSignalInputSchema) ]).optional(),
}).strict();

export const SignalBatchCreatesignalIdsInputSchema: z.ZodType<Prisma.SignalBatchCreatesignalIdsInput> = z.object({
  set: z.string().array()
}).strict();

export const SignalBatchUpdatesignalIdsInputSchema: z.ZodType<Prisma.SignalBatchUpdatesignalIdsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const SignalPatternCreatesignalIdsInputSchema: z.ZodType<Prisma.SignalPatternCreatesignalIdsInput> = z.object({
  set: z.string().array()
}).strict();

export const SignalPatternCreaterelatedPatternsInputSchema: z.ZodType<Prisma.SignalPatternCreaterelatedPatternsInput> = z.object({
  set: z.string().array()
}).strict();

export const SignalPatternUpdatesignalIdsInputSchema: z.ZodType<Prisma.SignalPatternUpdatesignalIdsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const NullableFloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableFloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const SignalPatternUpdaterelatedPatternsInputSchema: z.ZodType<Prisma.SignalPatternUpdaterelatedPatternsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const EnumRulePriorityFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumRulePriorityFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => RulePrioritySchema).optional()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const ModelConfigCreatefeaturesInputSchema: z.ZodType<Prisma.ModelConfigCreatefeaturesInput> = z.object({
  set: z.string().array()
}).strict();

export const LearningMetricCreateNestedManyWithoutModelInputSchema: z.ZodType<Prisma.LearningMetricCreateNestedManyWithoutModelInput> = z.object({
  create: z.union([ z.lazy(() => LearningMetricCreateWithoutModelInputSchema),z.lazy(() => LearningMetricCreateWithoutModelInputSchema).array(),z.lazy(() => LearningMetricUncheckedCreateWithoutModelInputSchema),z.lazy(() => LearningMetricUncheckedCreateWithoutModelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LearningMetricCreateOrConnectWithoutModelInputSchema),z.lazy(() => LearningMetricCreateOrConnectWithoutModelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LearningMetricCreateManyModelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ModelVersionCreateNestedManyWithoutConfigInputSchema: z.ZodType<Prisma.ModelVersionCreateNestedManyWithoutConfigInput> = z.object({
  create: z.union([ z.lazy(() => ModelVersionCreateWithoutConfigInputSchema),z.lazy(() => ModelVersionCreateWithoutConfigInputSchema).array(),z.lazy(() => ModelVersionUncheckedCreateWithoutConfigInputSchema),z.lazy(() => ModelVersionUncheckedCreateWithoutConfigInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelVersionCreateOrConnectWithoutConfigInputSchema),z.lazy(() => ModelVersionCreateOrConnectWithoutConfigInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ModelVersionCreateManyConfigInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ModelVersionWhereUniqueInputSchema),z.lazy(() => ModelVersionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LearningMetricUncheckedCreateNestedManyWithoutModelInputSchema: z.ZodType<Prisma.LearningMetricUncheckedCreateNestedManyWithoutModelInput> = z.object({
  create: z.union([ z.lazy(() => LearningMetricCreateWithoutModelInputSchema),z.lazy(() => LearningMetricCreateWithoutModelInputSchema).array(),z.lazy(() => LearningMetricUncheckedCreateWithoutModelInputSchema),z.lazy(() => LearningMetricUncheckedCreateWithoutModelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LearningMetricCreateOrConnectWithoutModelInputSchema),z.lazy(() => LearningMetricCreateOrConnectWithoutModelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LearningMetricCreateManyModelInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ModelVersionUncheckedCreateNestedManyWithoutConfigInputSchema: z.ZodType<Prisma.ModelVersionUncheckedCreateNestedManyWithoutConfigInput> = z.object({
  create: z.union([ z.lazy(() => ModelVersionCreateWithoutConfigInputSchema),z.lazy(() => ModelVersionCreateWithoutConfigInputSchema).array(),z.lazy(() => ModelVersionUncheckedCreateWithoutConfigInputSchema),z.lazy(() => ModelVersionUncheckedCreateWithoutConfigInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelVersionCreateOrConnectWithoutConfigInputSchema),z.lazy(() => ModelVersionCreateOrConnectWithoutConfigInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ModelVersionCreateManyConfigInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ModelVersionWhereUniqueInputSchema),z.lazy(() => ModelVersionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumModelTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumModelTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => ModelTypeSchema).optional()
}).strict();

export const ModelConfigUpdatefeaturesInputSchema: z.ZodType<Prisma.ModelConfigUpdatefeaturesInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const LearningMetricUpdateManyWithoutModelNestedInputSchema: z.ZodType<Prisma.LearningMetricUpdateManyWithoutModelNestedInput> = z.object({
  create: z.union([ z.lazy(() => LearningMetricCreateWithoutModelInputSchema),z.lazy(() => LearningMetricCreateWithoutModelInputSchema).array(),z.lazy(() => LearningMetricUncheckedCreateWithoutModelInputSchema),z.lazy(() => LearningMetricUncheckedCreateWithoutModelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LearningMetricCreateOrConnectWithoutModelInputSchema),z.lazy(() => LearningMetricCreateOrConnectWithoutModelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LearningMetricUpsertWithWhereUniqueWithoutModelInputSchema),z.lazy(() => LearningMetricUpsertWithWhereUniqueWithoutModelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LearningMetricCreateManyModelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LearningMetricUpdateWithWhereUniqueWithoutModelInputSchema),z.lazy(() => LearningMetricUpdateWithWhereUniqueWithoutModelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LearningMetricUpdateManyWithWhereWithoutModelInputSchema),z.lazy(() => LearningMetricUpdateManyWithWhereWithoutModelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LearningMetricScalarWhereInputSchema),z.lazy(() => LearningMetricScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ModelVersionUpdateManyWithoutConfigNestedInputSchema: z.ZodType<Prisma.ModelVersionUpdateManyWithoutConfigNestedInput> = z.object({
  create: z.union([ z.lazy(() => ModelVersionCreateWithoutConfigInputSchema),z.lazy(() => ModelVersionCreateWithoutConfigInputSchema).array(),z.lazy(() => ModelVersionUncheckedCreateWithoutConfigInputSchema),z.lazy(() => ModelVersionUncheckedCreateWithoutConfigInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelVersionCreateOrConnectWithoutConfigInputSchema),z.lazy(() => ModelVersionCreateOrConnectWithoutConfigInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ModelVersionUpsertWithWhereUniqueWithoutConfigInputSchema),z.lazy(() => ModelVersionUpsertWithWhereUniqueWithoutConfigInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ModelVersionCreateManyConfigInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ModelVersionWhereUniqueInputSchema),z.lazy(() => ModelVersionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ModelVersionWhereUniqueInputSchema),z.lazy(() => ModelVersionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ModelVersionWhereUniqueInputSchema),z.lazy(() => ModelVersionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ModelVersionWhereUniqueInputSchema),z.lazy(() => ModelVersionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ModelVersionUpdateWithWhereUniqueWithoutConfigInputSchema),z.lazy(() => ModelVersionUpdateWithWhereUniqueWithoutConfigInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ModelVersionUpdateManyWithWhereWithoutConfigInputSchema),z.lazy(() => ModelVersionUpdateManyWithWhereWithoutConfigInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ModelVersionScalarWhereInputSchema),z.lazy(() => ModelVersionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LearningMetricUncheckedUpdateManyWithoutModelNestedInputSchema: z.ZodType<Prisma.LearningMetricUncheckedUpdateManyWithoutModelNestedInput> = z.object({
  create: z.union([ z.lazy(() => LearningMetricCreateWithoutModelInputSchema),z.lazy(() => LearningMetricCreateWithoutModelInputSchema).array(),z.lazy(() => LearningMetricUncheckedCreateWithoutModelInputSchema),z.lazy(() => LearningMetricUncheckedCreateWithoutModelInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LearningMetricCreateOrConnectWithoutModelInputSchema),z.lazy(() => LearningMetricCreateOrConnectWithoutModelInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LearningMetricUpsertWithWhereUniqueWithoutModelInputSchema),z.lazy(() => LearningMetricUpsertWithWhereUniqueWithoutModelInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LearningMetricCreateManyModelInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LearningMetricWhereUniqueInputSchema),z.lazy(() => LearningMetricWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LearningMetricUpdateWithWhereUniqueWithoutModelInputSchema),z.lazy(() => LearningMetricUpdateWithWhereUniqueWithoutModelInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LearningMetricUpdateManyWithWhereWithoutModelInputSchema),z.lazy(() => LearningMetricUpdateManyWithWhereWithoutModelInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LearningMetricScalarWhereInputSchema),z.lazy(() => LearningMetricScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ModelVersionUncheckedUpdateManyWithoutConfigNestedInputSchema: z.ZodType<Prisma.ModelVersionUncheckedUpdateManyWithoutConfigNestedInput> = z.object({
  create: z.union([ z.lazy(() => ModelVersionCreateWithoutConfigInputSchema),z.lazy(() => ModelVersionCreateWithoutConfigInputSchema).array(),z.lazy(() => ModelVersionUncheckedCreateWithoutConfigInputSchema),z.lazy(() => ModelVersionUncheckedCreateWithoutConfigInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelVersionCreateOrConnectWithoutConfigInputSchema),z.lazy(() => ModelVersionCreateOrConnectWithoutConfigInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ModelVersionUpsertWithWhereUniqueWithoutConfigInputSchema),z.lazy(() => ModelVersionUpsertWithWhereUniqueWithoutConfigInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ModelVersionCreateManyConfigInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ModelVersionWhereUniqueInputSchema),z.lazy(() => ModelVersionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ModelVersionWhereUniqueInputSchema),z.lazy(() => ModelVersionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ModelVersionWhereUniqueInputSchema),z.lazy(() => ModelVersionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ModelVersionWhereUniqueInputSchema),z.lazy(() => ModelVersionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ModelVersionUpdateWithWhereUniqueWithoutConfigInputSchema),z.lazy(() => ModelVersionUpdateWithWhereUniqueWithoutConfigInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ModelVersionUpdateManyWithWhereWithoutConfigInputSchema),z.lazy(() => ModelVersionUpdateManyWithWhereWithoutConfigInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ModelVersionScalarWhereInputSchema),z.lazy(() => ModelVersionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ModelConfigCreateNestedOneWithoutModelVersionsInputSchema: z.ZodType<Prisma.ModelConfigCreateNestedOneWithoutModelVersionsInput> = z.object({
  create: z.union([ z.lazy(() => ModelConfigCreateWithoutModelVersionsInputSchema),z.lazy(() => ModelConfigUncheckedCreateWithoutModelVersionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ModelConfigCreateOrConnectWithoutModelVersionsInputSchema).optional(),
  connect: z.lazy(() => ModelConfigWhereUniqueInputSchema).optional()
}).strict();

export const ModelConfigUpdateOneRequiredWithoutModelVersionsNestedInputSchema: z.ZodType<Prisma.ModelConfigUpdateOneRequiredWithoutModelVersionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ModelConfigCreateWithoutModelVersionsInputSchema),z.lazy(() => ModelConfigUncheckedCreateWithoutModelVersionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ModelConfigCreateOrConnectWithoutModelVersionsInputSchema).optional(),
  upsert: z.lazy(() => ModelConfigUpsertWithoutModelVersionsInputSchema).optional(),
  connect: z.lazy(() => ModelConfigWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ModelConfigUpdateToOneWithWhereWithoutModelVersionsInputSchema),z.lazy(() => ModelConfigUpdateWithoutModelVersionsInputSchema),z.lazy(() => ModelConfigUncheckedUpdateWithoutModelVersionsInputSchema) ]).optional(),
}).strict();

export const ModelStateCreateNestedManyWithoutMetricsInputSchema: z.ZodType<Prisma.ModelStateCreateNestedManyWithoutMetricsInput> = z.object({
  create: z.union([ z.lazy(() => ModelStateCreateWithoutMetricsInputSchema),z.lazy(() => ModelStateCreateWithoutMetricsInputSchema).array(),z.lazy(() => ModelStateUncheckedCreateWithoutMetricsInputSchema),z.lazy(() => ModelStateUncheckedCreateWithoutMetricsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelStateCreateOrConnectWithoutMetricsInputSchema),z.lazy(() => ModelStateCreateOrConnectWithoutMetricsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ModelStateWhereUniqueInputSchema),z.lazy(() => ModelStateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ModelStateUncheckedCreateNestedManyWithoutMetricsInputSchema: z.ZodType<Prisma.ModelStateUncheckedCreateNestedManyWithoutMetricsInput> = z.object({
  create: z.union([ z.lazy(() => ModelStateCreateWithoutMetricsInputSchema),z.lazy(() => ModelStateCreateWithoutMetricsInputSchema).array(),z.lazy(() => ModelStateUncheckedCreateWithoutMetricsInputSchema),z.lazy(() => ModelStateUncheckedCreateWithoutMetricsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelStateCreateOrConnectWithoutMetricsInputSchema),z.lazy(() => ModelStateCreateOrConnectWithoutMetricsInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ModelStateWhereUniqueInputSchema),z.lazy(() => ModelStateWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ModelStateUpdateManyWithoutMetricsNestedInputSchema: z.ZodType<Prisma.ModelStateUpdateManyWithoutMetricsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ModelStateCreateWithoutMetricsInputSchema),z.lazy(() => ModelStateCreateWithoutMetricsInputSchema).array(),z.lazy(() => ModelStateUncheckedCreateWithoutMetricsInputSchema),z.lazy(() => ModelStateUncheckedCreateWithoutMetricsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelStateCreateOrConnectWithoutMetricsInputSchema),z.lazy(() => ModelStateCreateOrConnectWithoutMetricsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ModelStateUpsertWithWhereUniqueWithoutMetricsInputSchema),z.lazy(() => ModelStateUpsertWithWhereUniqueWithoutMetricsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ModelStateWhereUniqueInputSchema),z.lazy(() => ModelStateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ModelStateWhereUniqueInputSchema),z.lazy(() => ModelStateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ModelStateWhereUniqueInputSchema),z.lazy(() => ModelStateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ModelStateWhereUniqueInputSchema),z.lazy(() => ModelStateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ModelStateUpdateWithWhereUniqueWithoutMetricsInputSchema),z.lazy(() => ModelStateUpdateWithWhereUniqueWithoutMetricsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ModelStateUpdateManyWithWhereWithoutMetricsInputSchema),z.lazy(() => ModelStateUpdateManyWithWhereWithoutMetricsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ModelStateScalarWhereInputSchema),z.lazy(() => ModelStateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ModelStateUncheckedUpdateManyWithoutMetricsNestedInputSchema: z.ZodType<Prisma.ModelStateUncheckedUpdateManyWithoutMetricsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ModelStateCreateWithoutMetricsInputSchema),z.lazy(() => ModelStateCreateWithoutMetricsInputSchema).array(),z.lazy(() => ModelStateUncheckedCreateWithoutMetricsInputSchema),z.lazy(() => ModelStateUncheckedCreateWithoutMetricsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelStateCreateOrConnectWithoutMetricsInputSchema),z.lazy(() => ModelStateCreateOrConnectWithoutMetricsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ModelStateUpsertWithWhereUniqueWithoutMetricsInputSchema),z.lazy(() => ModelStateUpsertWithWhereUniqueWithoutMetricsInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ModelStateWhereUniqueInputSchema),z.lazy(() => ModelStateWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ModelStateWhereUniqueInputSchema),z.lazy(() => ModelStateWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ModelStateWhereUniqueInputSchema),z.lazy(() => ModelStateWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ModelStateWhereUniqueInputSchema),z.lazy(() => ModelStateWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ModelStateUpdateWithWhereUniqueWithoutMetricsInputSchema),z.lazy(() => ModelStateUpdateWithWhereUniqueWithoutMetricsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ModelStateUpdateManyWithWhereWithoutMetricsInputSchema),z.lazy(() => ModelStateUpdateManyWithWhereWithoutMetricsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ModelStateScalarWhereInputSchema),z.lazy(() => ModelStateScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ModelStateCreateweightsInputSchema: z.ZodType<Prisma.ModelStateCreateweightsInput> = z.object({
  set: z.number().array()
}).strict();

export const ModelStateCreatefeatureNamesInputSchema: z.ZodType<Prisma.ModelStateCreatefeatureNamesInput> = z.object({
  set: z.string().array()
}).strict();

export const ModelMetricsCreateNestedManyWithoutModelStateInputSchema: z.ZodType<Prisma.ModelMetricsCreateNestedManyWithoutModelStateInput> = z.object({
  create: z.union([ z.lazy(() => ModelMetricsCreateWithoutModelStateInputSchema),z.lazy(() => ModelMetricsCreateWithoutModelStateInputSchema).array(),z.lazy(() => ModelMetricsUncheckedCreateWithoutModelStateInputSchema),z.lazy(() => ModelMetricsUncheckedCreateWithoutModelStateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelMetricsCreateOrConnectWithoutModelStateInputSchema),z.lazy(() => ModelMetricsCreateOrConnectWithoutModelStateInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ModelMetricsWhereUniqueInputSchema),z.lazy(() => ModelMetricsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ModelMetricsUncheckedCreateNestedManyWithoutModelStateInputSchema: z.ZodType<Prisma.ModelMetricsUncheckedCreateNestedManyWithoutModelStateInput> = z.object({
  create: z.union([ z.lazy(() => ModelMetricsCreateWithoutModelStateInputSchema),z.lazy(() => ModelMetricsCreateWithoutModelStateInputSchema).array(),z.lazy(() => ModelMetricsUncheckedCreateWithoutModelStateInputSchema),z.lazy(() => ModelMetricsUncheckedCreateWithoutModelStateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelMetricsCreateOrConnectWithoutModelStateInputSchema),z.lazy(() => ModelMetricsCreateOrConnectWithoutModelStateInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ModelMetricsWhereUniqueInputSchema),z.lazy(() => ModelMetricsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ModelStateUpdateweightsInputSchema: z.ZodType<Prisma.ModelStateUpdateweightsInput> = z.object({
  set: z.number().array().optional(),
  push: z.union([ z.number(),z.number().array() ]).optional(),
}).strict();

export const ModelStateUpdatefeatureNamesInputSchema: z.ZodType<Prisma.ModelStateUpdatefeatureNamesInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const ModelMetricsUpdateManyWithoutModelStateNestedInputSchema: z.ZodType<Prisma.ModelMetricsUpdateManyWithoutModelStateNestedInput> = z.object({
  create: z.union([ z.lazy(() => ModelMetricsCreateWithoutModelStateInputSchema),z.lazy(() => ModelMetricsCreateWithoutModelStateInputSchema).array(),z.lazy(() => ModelMetricsUncheckedCreateWithoutModelStateInputSchema),z.lazy(() => ModelMetricsUncheckedCreateWithoutModelStateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelMetricsCreateOrConnectWithoutModelStateInputSchema),z.lazy(() => ModelMetricsCreateOrConnectWithoutModelStateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ModelMetricsUpsertWithWhereUniqueWithoutModelStateInputSchema),z.lazy(() => ModelMetricsUpsertWithWhereUniqueWithoutModelStateInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ModelMetricsWhereUniqueInputSchema),z.lazy(() => ModelMetricsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ModelMetricsWhereUniqueInputSchema),z.lazy(() => ModelMetricsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ModelMetricsWhereUniqueInputSchema),z.lazy(() => ModelMetricsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ModelMetricsWhereUniqueInputSchema),z.lazy(() => ModelMetricsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ModelMetricsUpdateWithWhereUniqueWithoutModelStateInputSchema),z.lazy(() => ModelMetricsUpdateWithWhereUniqueWithoutModelStateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ModelMetricsUpdateManyWithWhereWithoutModelStateInputSchema),z.lazy(() => ModelMetricsUpdateManyWithWhereWithoutModelStateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ModelMetricsScalarWhereInputSchema),z.lazy(() => ModelMetricsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ModelMetricsUncheckedUpdateManyWithoutModelStateNestedInputSchema: z.ZodType<Prisma.ModelMetricsUncheckedUpdateManyWithoutModelStateNestedInput> = z.object({
  create: z.union([ z.lazy(() => ModelMetricsCreateWithoutModelStateInputSchema),z.lazy(() => ModelMetricsCreateWithoutModelStateInputSchema).array(),z.lazy(() => ModelMetricsUncheckedCreateWithoutModelStateInputSchema),z.lazy(() => ModelMetricsUncheckedCreateWithoutModelStateInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ModelMetricsCreateOrConnectWithoutModelStateInputSchema),z.lazy(() => ModelMetricsCreateOrConnectWithoutModelStateInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ModelMetricsUpsertWithWhereUniqueWithoutModelStateInputSchema),z.lazy(() => ModelMetricsUpsertWithWhereUniqueWithoutModelStateInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => ModelMetricsWhereUniqueInputSchema),z.lazy(() => ModelMetricsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ModelMetricsWhereUniqueInputSchema),z.lazy(() => ModelMetricsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ModelMetricsWhereUniqueInputSchema),z.lazy(() => ModelMetricsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ModelMetricsWhereUniqueInputSchema),z.lazy(() => ModelMetricsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ModelMetricsUpdateWithWhereUniqueWithoutModelStateInputSchema),z.lazy(() => ModelMetricsUpdateWithWhereUniqueWithoutModelStateInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ModelMetricsUpdateManyWithWhereWithoutModelStateInputSchema),z.lazy(() => ModelMetricsUpdateManyWithWhereWithoutModelStateInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ModelMetricsScalarWhereInputSchema),z.lazy(() => ModelMetricsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BaseEventCreateNestedManyWithoutSearchEventInputSchema: z.ZodType<Prisma.BaseEventCreateNestedManyWithoutSearchEventInput> = z.object({
  create: z.union([ z.lazy(() => BaseEventCreateWithoutSearchEventInputSchema),z.lazy(() => BaseEventCreateWithoutSearchEventInputSchema).array(),z.lazy(() => BaseEventUncheckedCreateWithoutSearchEventInputSchema),z.lazy(() => BaseEventUncheckedCreateWithoutSearchEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BaseEventCreateOrConnectWithoutSearchEventInputSchema),z.lazy(() => BaseEventCreateOrConnectWithoutSearchEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BaseEventCreateManySearchEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BaseEventWhereUniqueInputSchema),z.lazy(() => BaseEventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionCreateNestedOneWithoutSearchEventsInputSchema: z.ZodType<Prisma.SessionCreateNestedOneWithoutSearchEventsInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutSearchEventsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutSearchEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SessionCreateOrConnectWithoutSearchEventsInputSchema).optional(),
  connect: z.lazy(() => SessionWhereUniqueInputSchema).optional()
}).strict();

export const SearchFeedbackCreateNestedManyWithoutSearchEventInputSchema: z.ZodType<Prisma.SearchFeedbackCreateNestedManyWithoutSearchEventInput> = z.object({
  create: z.union([ z.lazy(() => SearchFeedbackCreateWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackCreateWithoutSearchEventInputSchema).array(),z.lazy(() => SearchFeedbackUncheckedCreateWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackUncheckedCreateWithoutSearchEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SearchFeedbackCreateOrConnectWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackCreateOrConnectWithoutSearchEventInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SearchFeedbackWhereUniqueInputSchema),z.lazy(() => SearchFeedbackWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BaseEventUncheckedCreateNestedManyWithoutSearchEventInputSchema: z.ZodType<Prisma.BaseEventUncheckedCreateNestedManyWithoutSearchEventInput> = z.object({
  create: z.union([ z.lazy(() => BaseEventCreateWithoutSearchEventInputSchema),z.lazy(() => BaseEventCreateWithoutSearchEventInputSchema).array(),z.lazy(() => BaseEventUncheckedCreateWithoutSearchEventInputSchema),z.lazy(() => BaseEventUncheckedCreateWithoutSearchEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BaseEventCreateOrConnectWithoutSearchEventInputSchema),z.lazy(() => BaseEventCreateOrConnectWithoutSearchEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BaseEventCreateManySearchEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => BaseEventWhereUniqueInputSchema),z.lazy(() => BaseEventWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SearchFeedbackUncheckedCreateNestedManyWithoutSearchEventInputSchema: z.ZodType<Prisma.SearchFeedbackUncheckedCreateNestedManyWithoutSearchEventInput> = z.object({
  create: z.union([ z.lazy(() => SearchFeedbackCreateWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackCreateWithoutSearchEventInputSchema).array(),z.lazy(() => SearchFeedbackUncheckedCreateWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackUncheckedCreateWithoutSearchEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SearchFeedbackCreateOrConnectWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackCreateOrConnectWithoutSearchEventInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SearchFeedbackWhereUniqueInputSchema),z.lazy(() => SearchFeedbackWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const BaseEventUpdateManyWithoutSearchEventNestedInputSchema: z.ZodType<Prisma.BaseEventUpdateManyWithoutSearchEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => BaseEventCreateWithoutSearchEventInputSchema),z.lazy(() => BaseEventCreateWithoutSearchEventInputSchema).array(),z.lazy(() => BaseEventUncheckedCreateWithoutSearchEventInputSchema),z.lazy(() => BaseEventUncheckedCreateWithoutSearchEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BaseEventCreateOrConnectWithoutSearchEventInputSchema),z.lazy(() => BaseEventCreateOrConnectWithoutSearchEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BaseEventUpsertWithWhereUniqueWithoutSearchEventInputSchema),z.lazy(() => BaseEventUpsertWithWhereUniqueWithoutSearchEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BaseEventCreateManySearchEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BaseEventWhereUniqueInputSchema),z.lazy(() => BaseEventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BaseEventWhereUniqueInputSchema),z.lazy(() => BaseEventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BaseEventWhereUniqueInputSchema),z.lazy(() => BaseEventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BaseEventWhereUniqueInputSchema),z.lazy(() => BaseEventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BaseEventUpdateWithWhereUniqueWithoutSearchEventInputSchema),z.lazy(() => BaseEventUpdateWithWhereUniqueWithoutSearchEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BaseEventUpdateManyWithWhereWithoutSearchEventInputSchema),z.lazy(() => BaseEventUpdateManyWithWhereWithoutSearchEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BaseEventScalarWhereInputSchema),z.lazy(() => BaseEventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionUpdateOneRequiredWithoutSearchEventsNestedInputSchema: z.ZodType<Prisma.SessionUpdateOneRequiredWithoutSearchEventsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutSearchEventsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutSearchEventsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SessionCreateOrConnectWithoutSearchEventsInputSchema).optional(),
  upsert: z.lazy(() => SessionUpsertWithoutSearchEventsInputSchema).optional(),
  connect: z.lazy(() => SessionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SessionUpdateToOneWithWhereWithoutSearchEventsInputSchema),z.lazy(() => SessionUpdateWithoutSearchEventsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutSearchEventsInputSchema) ]).optional(),
}).strict();

export const SearchFeedbackUpdateManyWithoutSearchEventNestedInputSchema: z.ZodType<Prisma.SearchFeedbackUpdateManyWithoutSearchEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => SearchFeedbackCreateWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackCreateWithoutSearchEventInputSchema).array(),z.lazy(() => SearchFeedbackUncheckedCreateWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackUncheckedCreateWithoutSearchEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SearchFeedbackCreateOrConnectWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackCreateOrConnectWithoutSearchEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SearchFeedbackUpsertWithWhereUniqueWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackUpsertWithWhereUniqueWithoutSearchEventInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SearchFeedbackWhereUniqueInputSchema),z.lazy(() => SearchFeedbackWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SearchFeedbackWhereUniqueInputSchema),z.lazy(() => SearchFeedbackWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SearchFeedbackWhereUniqueInputSchema),z.lazy(() => SearchFeedbackWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SearchFeedbackWhereUniqueInputSchema),z.lazy(() => SearchFeedbackWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SearchFeedbackUpdateWithWhereUniqueWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackUpdateWithWhereUniqueWithoutSearchEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SearchFeedbackUpdateManyWithWhereWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackUpdateManyWithWhereWithoutSearchEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SearchFeedbackScalarWhereInputSchema),z.lazy(() => SearchFeedbackScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const BaseEventUncheckedUpdateManyWithoutSearchEventNestedInputSchema: z.ZodType<Prisma.BaseEventUncheckedUpdateManyWithoutSearchEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => BaseEventCreateWithoutSearchEventInputSchema),z.lazy(() => BaseEventCreateWithoutSearchEventInputSchema).array(),z.lazy(() => BaseEventUncheckedCreateWithoutSearchEventInputSchema),z.lazy(() => BaseEventUncheckedCreateWithoutSearchEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => BaseEventCreateOrConnectWithoutSearchEventInputSchema),z.lazy(() => BaseEventCreateOrConnectWithoutSearchEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => BaseEventUpsertWithWhereUniqueWithoutSearchEventInputSchema),z.lazy(() => BaseEventUpsertWithWhereUniqueWithoutSearchEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => BaseEventCreateManySearchEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => BaseEventWhereUniqueInputSchema),z.lazy(() => BaseEventWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => BaseEventWhereUniqueInputSchema),z.lazy(() => BaseEventWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => BaseEventWhereUniqueInputSchema),z.lazy(() => BaseEventWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => BaseEventWhereUniqueInputSchema),z.lazy(() => BaseEventWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => BaseEventUpdateWithWhereUniqueWithoutSearchEventInputSchema),z.lazy(() => BaseEventUpdateWithWhereUniqueWithoutSearchEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => BaseEventUpdateManyWithWhereWithoutSearchEventInputSchema),z.lazy(() => BaseEventUpdateManyWithWhereWithoutSearchEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => BaseEventScalarWhereInputSchema),z.lazy(() => BaseEventScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SearchFeedbackUncheckedUpdateManyWithoutSearchEventNestedInputSchema: z.ZodType<Prisma.SearchFeedbackUncheckedUpdateManyWithoutSearchEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => SearchFeedbackCreateWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackCreateWithoutSearchEventInputSchema).array(),z.lazy(() => SearchFeedbackUncheckedCreateWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackUncheckedCreateWithoutSearchEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SearchFeedbackCreateOrConnectWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackCreateOrConnectWithoutSearchEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SearchFeedbackUpsertWithWhereUniqueWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackUpsertWithWhereUniqueWithoutSearchEventInputSchema).array() ]).optional(),
  set: z.union([ z.lazy(() => SearchFeedbackWhereUniqueInputSchema),z.lazy(() => SearchFeedbackWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SearchFeedbackWhereUniqueInputSchema),z.lazy(() => SearchFeedbackWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SearchFeedbackWhereUniqueInputSchema),z.lazy(() => SearchFeedbackWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SearchFeedbackWhereUniqueInputSchema),z.lazy(() => SearchFeedbackWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SearchFeedbackUpdateWithWhereUniqueWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackUpdateWithWhereUniqueWithoutSearchEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SearchFeedbackUpdateManyWithWhereWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackUpdateManyWithWhereWithoutSearchEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SearchFeedbackScalarWhereInputSchema),z.lazy(() => SearchFeedbackScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ABTestCreateNestedOneWithoutABTestMetricsInputSchema: z.ZodType<Prisma.ABTestCreateNestedOneWithoutABTestMetricsInput> = z.object({
  create: z.union([ z.lazy(() => ABTestCreateWithoutABTestMetricsInputSchema),z.lazy(() => ABTestUncheckedCreateWithoutABTestMetricsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ABTestCreateOrConnectWithoutABTestMetricsInputSchema).optional(),
  connect: z.lazy(() => ABTestWhereUniqueInputSchema).optional()
}).strict();

export const ABTestUpdateOneRequiredWithoutABTestMetricsNestedInputSchema: z.ZodType<Prisma.ABTestUpdateOneRequiredWithoutABTestMetricsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ABTestCreateWithoutABTestMetricsInputSchema),z.lazy(() => ABTestUncheckedCreateWithoutABTestMetricsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ABTestCreateOrConnectWithoutABTestMetricsInputSchema).optional(),
  upsert: z.lazy(() => ABTestUpsertWithoutABTestMetricsInputSchema).optional(),
  connect: z.lazy(() => ABTestWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ABTestUpdateToOneWithWhereWithoutABTestMetricsInputSchema),z.lazy(() => ABTestUpdateWithoutABTestMetricsInputSchema),z.lazy(() => ABTestUncheckedUpdateWithoutABTestMetricsInputSchema) ]).optional(),
}).strict();

export const ProcessedSignalCreateNestedManyWithoutSignalInputSchema: z.ZodType<Prisma.ProcessedSignalCreateNestedManyWithoutSignalInput> = z.object({
  create: z.union([ z.lazy(() => ProcessedSignalCreateWithoutSignalInputSchema),z.lazy(() => ProcessedSignalCreateWithoutSignalInputSchema).array(),z.lazy(() => ProcessedSignalUncheckedCreateWithoutSignalInputSchema),z.lazy(() => ProcessedSignalUncheckedCreateWithoutSignalInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProcessedSignalCreateOrConnectWithoutSignalInputSchema),z.lazy(() => ProcessedSignalCreateOrConnectWithoutSignalInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProcessedSignalCreateManySignalInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProcessedSignalWhereUniqueInputSchema),z.lazy(() => ProcessedSignalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionToSignalCreateNestedManyWithoutSignalInputSchema: z.ZodType<Prisma.SessionToSignalCreateNestedManyWithoutSignalInput> = z.object({
  create: z.union([ z.lazy(() => SessionToSignalCreateWithoutSignalInputSchema),z.lazy(() => SessionToSignalCreateWithoutSignalInputSchema).array(),z.lazy(() => SessionToSignalUncheckedCreateWithoutSignalInputSchema),z.lazy(() => SessionToSignalUncheckedCreateWithoutSignalInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionToSignalCreateOrConnectWithoutSignalInputSchema),z.lazy(() => SessionToSignalCreateOrConnectWithoutSignalInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionToSignalCreateManySignalInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProcessedSignalUncheckedCreateNestedManyWithoutSignalInputSchema: z.ZodType<Prisma.ProcessedSignalUncheckedCreateNestedManyWithoutSignalInput> = z.object({
  create: z.union([ z.lazy(() => ProcessedSignalCreateWithoutSignalInputSchema),z.lazy(() => ProcessedSignalCreateWithoutSignalInputSchema).array(),z.lazy(() => ProcessedSignalUncheckedCreateWithoutSignalInputSchema),z.lazy(() => ProcessedSignalUncheckedCreateWithoutSignalInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProcessedSignalCreateOrConnectWithoutSignalInputSchema),z.lazy(() => ProcessedSignalCreateOrConnectWithoutSignalInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProcessedSignalCreateManySignalInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProcessedSignalWhereUniqueInputSchema),z.lazy(() => ProcessedSignalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SessionToSignalUncheckedCreateNestedManyWithoutSignalInputSchema: z.ZodType<Prisma.SessionToSignalUncheckedCreateNestedManyWithoutSignalInput> = z.object({
  create: z.union([ z.lazy(() => SessionToSignalCreateWithoutSignalInputSchema),z.lazy(() => SessionToSignalCreateWithoutSignalInputSchema).array(),z.lazy(() => SessionToSignalUncheckedCreateWithoutSignalInputSchema),z.lazy(() => SessionToSignalUncheckedCreateWithoutSignalInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionToSignalCreateOrConnectWithoutSignalInputSchema),z.lazy(() => SessionToSignalCreateOrConnectWithoutSignalInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionToSignalCreateManySignalInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumSignalTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumSignalTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => SignalTypeSchema).optional()
}).strict();

export const ProcessedSignalUpdateManyWithoutSignalNestedInputSchema: z.ZodType<Prisma.ProcessedSignalUpdateManyWithoutSignalNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProcessedSignalCreateWithoutSignalInputSchema),z.lazy(() => ProcessedSignalCreateWithoutSignalInputSchema).array(),z.lazy(() => ProcessedSignalUncheckedCreateWithoutSignalInputSchema),z.lazy(() => ProcessedSignalUncheckedCreateWithoutSignalInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProcessedSignalCreateOrConnectWithoutSignalInputSchema),z.lazy(() => ProcessedSignalCreateOrConnectWithoutSignalInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProcessedSignalUpsertWithWhereUniqueWithoutSignalInputSchema),z.lazy(() => ProcessedSignalUpsertWithWhereUniqueWithoutSignalInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProcessedSignalCreateManySignalInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProcessedSignalWhereUniqueInputSchema),z.lazy(() => ProcessedSignalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProcessedSignalWhereUniqueInputSchema),z.lazy(() => ProcessedSignalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProcessedSignalWhereUniqueInputSchema),z.lazy(() => ProcessedSignalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProcessedSignalWhereUniqueInputSchema),z.lazy(() => ProcessedSignalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProcessedSignalUpdateWithWhereUniqueWithoutSignalInputSchema),z.lazy(() => ProcessedSignalUpdateWithWhereUniqueWithoutSignalInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProcessedSignalUpdateManyWithWhereWithoutSignalInputSchema),z.lazy(() => ProcessedSignalUpdateManyWithWhereWithoutSignalInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProcessedSignalScalarWhereInputSchema),z.lazy(() => ProcessedSignalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionToSignalUpdateManyWithoutSignalNestedInputSchema: z.ZodType<Prisma.SessionToSignalUpdateManyWithoutSignalNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionToSignalCreateWithoutSignalInputSchema),z.lazy(() => SessionToSignalCreateWithoutSignalInputSchema).array(),z.lazy(() => SessionToSignalUncheckedCreateWithoutSignalInputSchema),z.lazy(() => SessionToSignalUncheckedCreateWithoutSignalInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionToSignalCreateOrConnectWithoutSignalInputSchema),z.lazy(() => SessionToSignalCreateOrConnectWithoutSignalInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionToSignalUpsertWithWhereUniqueWithoutSignalInputSchema),z.lazy(() => SessionToSignalUpsertWithWhereUniqueWithoutSignalInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionToSignalCreateManySignalInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionToSignalUpdateWithWhereUniqueWithoutSignalInputSchema),z.lazy(() => SessionToSignalUpdateWithWhereUniqueWithoutSignalInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionToSignalUpdateManyWithWhereWithoutSignalInputSchema),z.lazy(() => SessionToSignalUpdateManyWithWhereWithoutSignalInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionToSignalScalarWhereInputSchema),z.lazy(() => SessionToSignalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProcessedSignalUncheckedUpdateManyWithoutSignalNestedInputSchema: z.ZodType<Prisma.ProcessedSignalUncheckedUpdateManyWithoutSignalNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProcessedSignalCreateWithoutSignalInputSchema),z.lazy(() => ProcessedSignalCreateWithoutSignalInputSchema).array(),z.lazy(() => ProcessedSignalUncheckedCreateWithoutSignalInputSchema),z.lazy(() => ProcessedSignalUncheckedCreateWithoutSignalInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProcessedSignalCreateOrConnectWithoutSignalInputSchema),z.lazy(() => ProcessedSignalCreateOrConnectWithoutSignalInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProcessedSignalUpsertWithWhereUniqueWithoutSignalInputSchema),z.lazy(() => ProcessedSignalUpsertWithWhereUniqueWithoutSignalInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProcessedSignalCreateManySignalInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProcessedSignalWhereUniqueInputSchema),z.lazy(() => ProcessedSignalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProcessedSignalWhereUniqueInputSchema),z.lazy(() => ProcessedSignalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProcessedSignalWhereUniqueInputSchema),z.lazy(() => ProcessedSignalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProcessedSignalWhereUniqueInputSchema),z.lazy(() => ProcessedSignalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProcessedSignalUpdateWithWhereUniqueWithoutSignalInputSchema),z.lazy(() => ProcessedSignalUpdateWithWhereUniqueWithoutSignalInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProcessedSignalUpdateManyWithWhereWithoutSignalInputSchema),z.lazy(() => ProcessedSignalUpdateManyWithWhereWithoutSignalInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProcessedSignalScalarWhereInputSchema),z.lazy(() => ProcessedSignalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionToSignalUncheckedUpdateManyWithoutSignalNestedInputSchema: z.ZodType<Prisma.SessionToSignalUncheckedUpdateManyWithoutSignalNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionToSignalCreateWithoutSignalInputSchema),z.lazy(() => SessionToSignalCreateWithoutSignalInputSchema).array(),z.lazy(() => SessionToSignalUncheckedCreateWithoutSignalInputSchema),z.lazy(() => SessionToSignalUncheckedCreateWithoutSignalInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SessionToSignalCreateOrConnectWithoutSignalInputSchema),z.lazy(() => SessionToSignalCreateOrConnectWithoutSignalInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SessionToSignalUpsertWithWhereUniqueWithoutSignalInputSchema),z.lazy(() => SessionToSignalUpsertWithWhereUniqueWithoutSignalInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SessionToSignalCreateManySignalInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SessionToSignalWhereUniqueInputSchema),z.lazy(() => SessionToSignalWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SessionToSignalUpdateWithWhereUniqueWithoutSignalInputSchema),z.lazy(() => SessionToSignalUpdateWithWhereUniqueWithoutSignalInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SessionToSignalUpdateManyWithWhereWithoutSignalInputSchema),z.lazy(() => SessionToSignalUpdateManyWithWhereWithoutSignalInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SessionToSignalScalarWhereInputSchema),z.lazy(() => SessionToSignalScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SessionCreateNestedOneWithoutAnalyticsMetricsInputSchema: z.ZodType<Prisma.SessionCreateNestedOneWithoutAnalyticsMetricsInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutAnalyticsMetricsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutAnalyticsMetricsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SessionCreateOrConnectWithoutAnalyticsMetricsInputSchema).optional(),
  connect: z.lazy(() => SessionWhereUniqueInputSchema).optional()
}).strict();

export const SessionUpdateOneWithoutAnalyticsMetricsNestedInputSchema: z.ZodType<Prisma.SessionUpdateOneWithoutAnalyticsMetricsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutAnalyticsMetricsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutAnalyticsMetricsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SessionCreateOrConnectWithoutAnalyticsMetricsInputSchema).optional(),
  upsert: z.lazy(() => SessionUpsertWithoutAnalyticsMetricsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SessionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SessionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SessionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SessionUpdateToOneWithWhereWithoutAnalyticsMetricsInputSchema),z.lazy(() => SessionUpdateWithoutAnalyticsMetricsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutAnalyticsMetricsInputSchema) ]).optional(),
}).strict();

export const ModelConfigCreateNestedOneWithoutMetricsInputSchema: z.ZodType<Prisma.ModelConfigCreateNestedOneWithoutMetricsInput> = z.object({
  create: z.union([ z.lazy(() => ModelConfigCreateWithoutMetricsInputSchema),z.lazy(() => ModelConfigUncheckedCreateWithoutMetricsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ModelConfigCreateOrConnectWithoutMetricsInputSchema).optional(),
  connect: z.lazy(() => ModelConfigWhereUniqueInputSchema).optional()
}).strict();

export const SessionCreateNestedOneWithoutLearningMetricsInputSchema: z.ZodType<Prisma.SessionCreateNestedOneWithoutLearningMetricsInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutLearningMetricsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutLearningMetricsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SessionCreateOrConnectWithoutLearningMetricsInputSchema).optional(),
  connect: z.lazy(() => SessionWhereUniqueInputSchema).optional()
}).strict();

export const EnumMetricTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumMetricTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => MetricTypeSchema).optional()
}).strict();

export const ModelConfigUpdateOneWithoutMetricsNestedInputSchema: z.ZodType<Prisma.ModelConfigUpdateOneWithoutMetricsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ModelConfigCreateWithoutMetricsInputSchema),z.lazy(() => ModelConfigUncheckedCreateWithoutMetricsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ModelConfigCreateOrConnectWithoutMetricsInputSchema).optional(),
  upsert: z.lazy(() => ModelConfigUpsertWithoutMetricsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => ModelConfigWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => ModelConfigWhereInputSchema) ]).optional(),
  connect: z.lazy(() => ModelConfigWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ModelConfigUpdateToOneWithWhereWithoutMetricsInputSchema),z.lazy(() => ModelConfigUpdateWithoutMetricsInputSchema),z.lazy(() => ModelConfigUncheckedUpdateWithoutMetricsInputSchema) ]).optional(),
}).strict();

export const SessionUpdateOneWithoutLearningMetricsNestedInputSchema: z.ZodType<Prisma.SessionUpdateOneWithoutLearningMetricsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutLearningMetricsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutLearningMetricsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SessionCreateOrConnectWithoutLearningMetricsInputSchema).optional(),
  upsert: z.lazy(() => SessionUpsertWithoutLearningMetricsInputSchema).optional(),
  disconnect: z.union([ z.boolean(),z.lazy(() => SessionWhereInputSchema) ]).optional(),
  delete: z.union([ z.boolean(),z.lazy(() => SessionWhereInputSchema) ]).optional(),
  connect: z.lazy(() => SessionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SessionUpdateToOneWithWhereWithoutLearningMetricsInputSchema),z.lazy(() => SessionUpdateWithoutLearningMetricsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutLearningMetricsInputSchema) ]).optional(),
}).strict();

export const LearningEventCreatetagsInputSchema: z.ZodType<Prisma.LearningEventCreatetagsInput> = z.object({
  set: z.string().array()
}).strict();

export const LearningPatternCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.LearningPatternCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => LearningPatternCreateWithoutEventInputSchema),z.lazy(() => LearningPatternCreateWithoutEventInputSchema).array(),z.lazy(() => LearningPatternUncheckedCreateWithoutEventInputSchema),z.lazy(() => LearningPatternUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LearningPatternCreateOrConnectWithoutEventInputSchema),z.lazy(() => LearningPatternCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LearningPatternCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LearningPatternWhereUniqueInputSchema),z.lazy(() => LearningPatternWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const LearningPatternUncheckedCreateNestedManyWithoutEventInputSchema: z.ZodType<Prisma.LearningPatternUncheckedCreateNestedManyWithoutEventInput> = z.object({
  create: z.union([ z.lazy(() => LearningPatternCreateWithoutEventInputSchema),z.lazy(() => LearningPatternCreateWithoutEventInputSchema).array(),z.lazy(() => LearningPatternUncheckedCreateWithoutEventInputSchema),z.lazy(() => LearningPatternUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LearningPatternCreateOrConnectWithoutEventInputSchema),z.lazy(() => LearningPatternCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LearningPatternCreateManyEventInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => LearningPatternWhereUniqueInputSchema),z.lazy(() => LearningPatternWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EnumLearningEventTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumLearningEventTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => LearningEventTypeSchema).optional()
}).strict();

export const EnumLearningEventStatusFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumLearningEventStatusFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => LearningEventStatusSchema).optional()
}).strict();

export const EnumLearningEventPriorityFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumLearningEventPriorityFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => LearningEventPrioritySchema).optional()
}).strict();

export const LearningEventUpdatetagsInputSchema: z.ZodType<Prisma.LearningEventUpdatetagsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const LearningPatternUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.LearningPatternUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => LearningPatternCreateWithoutEventInputSchema),z.lazy(() => LearningPatternCreateWithoutEventInputSchema).array(),z.lazy(() => LearningPatternUncheckedCreateWithoutEventInputSchema),z.lazy(() => LearningPatternUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LearningPatternCreateOrConnectWithoutEventInputSchema),z.lazy(() => LearningPatternCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LearningPatternUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => LearningPatternUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LearningPatternCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LearningPatternWhereUniqueInputSchema),z.lazy(() => LearningPatternWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LearningPatternWhereUniqueInputSchema),z.lazy(() => LearningPatternWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LearningPatternWhereUniqueInputSchema),z.lazy(() => LearningPatternWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LearningPatternWhereUniqueInputSchema),z.lazy(() => LearningPatternWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LearningPatternUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => LearningPatternUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LearningPatternUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => LearningPatternUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LearningPatternScalarWhereInputSchema),z.lazy(() => LearningPatternScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LearningPatternUncheckedUpdateManyWithoutEventNestedInputSchema: z.ZodType<Prisma.LearningPatternUncheckedUpdateManyWithoutEventNestedInput> = z.object({
  create: z.union([ z.lazy(() => LearningPatternCreateWithoutEventInputSchema),z.lazy(() => LearningPatternCreateWithoutEventInputSchema).array(),z.lazy(() => LearningPatternUncheckedCreateWithoutEventInputSchema),z.lazy(() => LearningPatternUncheckedCreateWithoutEventInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => LearningPatternCreateOrConnectWithoutEventInputSchema),z.lazy(() => LearningPatternCreateOrConnectWithoutEventInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => LearningPatternUpsertWithWhereUniqueWithoutEventInputSchema),z.lazy(() => LearningPatternUpsertWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  createMany: z.lazy(() => LearningPatternCreateManyEventInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => LearningPatternWhereUniqueInputSchema),z.lazy(() => LearningPatternWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => LearningPatternWhereUniqueInputSchema),z.lazy(() => LearningPatternWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => LearningPatternWhereUniqueInputSchema),z.lazy(() => LearningPatternWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => LearningPatternWhereUniqueInputSchema),z.lazy(() => LearningPatternWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => LearningPatternUpdateWithWhereUniqueWithoutEventInputSchema),z.lazy(() => LearningPatternUpdateWithWhereUniqueWithoutEventInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => LearningPatternUpdateManyWithWhereWithoutEventInputSchema),z.lazy(() => LearningPatternUpdateManyWithWhereWithoutEventInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => LearningPatternScalarWhereInputSchema),z.lazy(() => LearningPatternScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const LearningEventCreateNestedOneWithoutPatternsInputSchema: z.ZodType<Prisma.LearningEventCreateNestedOneWithoutPatternsInput> = z.object({
  create: z.union([ z.lazy(() => LearningEventCreateWithoutPatternsInputSchema),z.lazy(() => LearningEventUncheckedCreateWithoutPatternsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LearningEventCreateOrConnectWithoutPatternsInputSchema).optional(),
  connect: z.lazy(() => LearningEventWhereUniqueInputSchema).optional()
}).strict();

export const LearningEventUpdateOneRequiredWithoutPatternsNestedInputSchema: z.ZodType<Prisma.LearningEventUpdateOneRequiredWithoutPatternsNestedInput> = z.object({
  create: z.union([ z.lazy(() => LearningEventCreateWithoutPatternsInputSchema),z.lazy(() => LearningEventUncheckedCreateWithoutPatternsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => LearningEventCreateOrConnectWithoutPatternsInputSchema).optional(),
  upsert: z.lazy(() => LearningEventUpsertWithoutPatternsInputSchema).optional(),
  connect: z.lazy(() => LearningEventWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => LearningEventUpdateToOneWithWhereWithoutPatternsInputSchema),z.lazy(() => LearningEventUpdateWithoutPatternsInputSchema),z.lazy(() => LearningEventUncheckedUpdateWithoutPatternsInputSchema) ]).optional(),
}).strict();

export const EngineLearningResultCreateNestedManyWithoutOperationInputSchema: z.ZodType<Prisma.EngineLearningResultCreateNestedManyWithoutOperationInput> = z.object({
  create: z.union([ z.lazy(() => EngineLearningResultCreateWithoutOperationInputSchema),z.lazy(() => EngineLearningResultCreateWithoutOperationInputSchema).array(),z.lazy(() => EngineLearningResultUncheckedCreateWithoutOperationInputSchema),z.lazy(() => EngineLearningResultUncheckedCreateWithoutOperationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EngineLearningResultCreateOrConnectWithoutOperationInputSchema),z.lazy(() => EngineLearningResultCreateOrConnectWithoutOperationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EngineLearningResultCreateManyOperationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EngineLearningResultWhereUniqueInputSchema),z.lazy(() => EngineLearningResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EngineLearningResultUncheckedCreateNestedManyWithoutOperationInputSchema: z.ZodType<Prisma.EngineLearningResultUncheckedCreateNestedManyWithoutOperationInput> = z.object({
  create: z.union([ z.lazy(() => EngineLearningResultCreateWithoutOperationInputSchema),z.lazy(() => EngineLearningResultCreateWithoutOperationInputSchema).array(),z.lazy(() => EngineLearningResultUncheckedCreateWithoutOperationInputSchema),z.lazy(() => EngineLearningResultUncheckedCreateWithoutOperationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EngineLearningResultCreateOrConnectWithoutOperationInputSchema),z.lazy(() => EngineLearningResultCreateOrConnectWithoutOperationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EngineLearningResultCreateManyOperationInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EngineLearningResultWhereUniqueInputSchema),z.lazy(() => EngineLearningResultWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EngineLearningResultUpdateManyWithoutOperationNestedInputSchema: z.ZodType<Prisma.EngineLearningResultUpdateManyWithoutOperationNestedInput> = z.object({
  create: z.union([ z.lazy(() => EngineLearningResultCreateWithoutOperationInputSchema),z.lazy(() => EngineLearningResultCreateWithoutOperationInputSchema).array(),z.lazy(() => EngineLearningResultUncheckedCreateWithoutOperationInputSchema),z.lazy(() => EngineLearningResultUncheckedCreateWithoutOperationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EngineLearningResultCreateOrConnectWithoutOperationInputSchema),z.lazy(() => EngineLearningResultCreateOrConnectWithoutOperationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EngineLearningResultUpsertWithWhereUniqueWithoutOperationInputSchema),z.lazy(() => EngineLearningResultUpsertWithWhereUniqueWithoutOperationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EngineLearningResultCreateManyOperationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EngineLearningResultWhereUniqueInputSchema),z.lazy(() => EngineLearningResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EngineLearningResultWhereUniqueInputSchema),z.lazy(() => EngineLearningResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EngineLearningResultWhereUniqueInputSchema),z.lazy(() => EngineLearningResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EngineLearningResultWhereUniqueInputSchema),z.lazy(() => EngineLearningResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EngineLearningResultUpdateWithWhereUniqueWithoutOperationInputSchema),z.lazy(() => EngineLearningResultUpdateWithWhereUniqueWithoutOperationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EngineLearningResultUpdateManyWithWhereWithoutOperationInputSchema),z.lazy(() => EngineLearningResultUpdateManyWithWhereWithoutOperationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EngineLearningResultScalarWhereInputSchema),z.lazy(() => EngineLearningResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EngineLearningResultUncheckedUpdateManyWithoutOperationNestedInputSchema: z.ZodType<Prisma.EngineLearningResultUncheckedUpdateManyWithoutOperationNestedInput> = z.object({
  create: z.union([ z.lazy(() => EngineLearningResultCreateWithoutOperationInputSchema),z.lazy(() => EngineLearningResultCreateWithoutOperationInputSchema).array(),z.lazy(() => EngineLearningResultUncheckedCreateWithoutOperationInputSchema),z.lazy(() => EngineLearningResultUncheckedCreateWithoutOperationInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EngineLearningResultCreateOrConnectWithoutOperationInputSchema),z.lazy(() => EngineLearningResultCreateOrConnectWithoutOperationInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EngineLearningResultUpsertWithWhereUniqueWithoutOperationInputSchema),z.lazy(() => EngineLearningResultUpsertWithWhereUniqueWithoutOperationInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EngineLearningResultCreateManyOperationInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EngineLearningResultWhereUniqueInputSchema),z.lazy(() => EngineLearningResultWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EngineLearningResultWhereUniqueInputSchema),z.lazy(() => EngineLearningResultWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EngineLearningResultWhereUniqueInputSchema),z.lazy(() => EngineLearningResultWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EngineLearningResultWhereUniqueInputSchema),z.lazy(() => EngineLearningResultWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EngineLearningResultUpdateWithWhereUniqueWithoutOperationInputSchema),z.lazy(() => EngineLearningResultUpdateWithWhereUniqueWithoutOperationInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EngineLearningResultUpdateManyWithWhereWithoutOperationInputSchema),z.lazy(() => EngineLearningResultUpdateManyWithWhereWithoutOperationInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EngineLearningResultScalarWhereInputSchema),z.lazy(() => EngineLearningResultScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EngineOperationCreateNestedOneWithoutEngineLearningResultInputSchema: z.ZodType<Prisma.EngineOperationCreateNestedOneWithoutEngineLearningResultInput> = z.object({
  create: z.union([ z.lazy(() => EngineOperationCreateWithoutEngineLearningResultInputSchema),z.lazy(() => EngineOperationUncheckedCreateWithoutEngineLearningResultInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EngineOperationCreateOrConnectWithoutEngineLearningResultInputSchema).optional(),
  connect: z.lazy(() => EngineOperationWhereUniqueInputSchema).optional()
}).strict();

export const EngineOptimizationStrategyCreateNestedManyWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyCreateNestedManyWithoutLearningResultInput> = z.object({
  create: z.union([ z.lazy(() => EngineOptimizationStrategyCreateWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyCreateWithoutLearningResultInputSchema).array(),z.lazy(() => EngineOptimizationStrategyUncheckedCreateWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyUncheckedCreateWithoutLearningResultInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EngineOptimizationStrategyCreateOrConnectWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyCreateOrConnectWithoutLearningResultInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EngineOptimizationStrategyCreateManyLearningResultInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema),z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EngineRecommendationCreateNestedManyWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineRecommendationCreateNestedManyWithoutLearningResultInput> = z.object({
  create: z.union([ z.lazy(() => EngineRecommendationCreateWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationCreateWithoutLearningResultInputSchema).array(),z.lazy(() => EngineRecommendationUncheckedCreateWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationUncheckedCreateWithoutLearningResultInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EngineRecommendationCreateOrConnectWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationCreateOrConnectWithoutLearningResultInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EngineRecommendationCreateManyLearningResultInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EngineRecommendationWhereUniqueInputSchema),z.lazy(() => EngineRecommendationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EngineOptimizationStrategyUncheckedCreateNestedManyWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUncheckedCreateNestedManyWithoutLearningResultInput> = z.object({
  create: z.union([ z.lazy(() => EngineOptimizationStrategyCreateWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyCreateWithoutLearningResultInputSchema).array(),z.lazy(() => EngineOptimizationStrategyUncheckedCreateWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyUncheckedCreateWithoutLearningResultInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EngineOptimizationStrategyCreateOrConnectWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyCreateOrConnectWithoutLearningResultInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EngineOptimizationStrategyCreateManyLearningResultInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema),z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EngineRecommendationUncheckedCreateNestedManyWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineRecommendationUncheckedCreateNestedManyWithoutLearningResultInput> = z.object({
  create: z.union([ z.lazy(() => EngineRecommendationCreateWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationCreateWithoutLearningResultInputSchema).array(),z.lazy(() => EngineRecommendationUncheckedCreateWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationUncheckedCreateWithoutLearningResultInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EngineRecommendationCreateOrConnectWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationCreateOrConnectWithoutLearningResultInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EngineRecommendationCreateManyLearningResultInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => EngineRecommendationWhereUniqueInputSchema),z.lazy(() => EngineRecommendationWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const EngineOperationUpdateOneRequiredWithoutEngineLearningResultNestedInputSchema: z.ZodType<Prisma.EngineOperationUpdateOneRequiredWithoutEngineLearningResultNestedInput> = z.object({
  create: z.union([ z.lazy(() => EngineOperationCreateWithoutEngineLearningResultInputSchema),z.lazy(() => EngineOperationUncheckedCreateWithoutEngineLearningResultInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EngineOperationCreateOrConnectWithoutEngineLearningResultInputSchema).optional(),
  upsert: z.lazy(() => EngineOperationUpsertWithoutEngineLearningResultInputSchema).optional(),
  connect: z.lazy(() => EngineOperationWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EngineOperationUpdateToOneWithWhereWithoutEngineLearningResultInputSchema),z.lazy(() => EngineOperationUpdateWithoutEngineLearningResultInputSchema),z.lazy(() => EngineOperationUncheckedUpdateWithoutEngineLearningResultInputSchema) ]).optional(),
}).strict();

export const EngineOptimizationStrategyUpdateManyWithoutLearningResultNestedInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUpdateManyWithoutLearningResultNestedInput> = z.object({
  create: z.union([ z.lazy(() => EngineOptimizationStrategyCreateWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyCreateWithoutLearningResultInputSchema).array(),z.lazy(() => EngineOptimizationStrategyUncheckedCreateWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyUncheckedCreateWithoutLearningResultInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EngineOptimizationStrategyCreateOrConnectWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyCreateOrConnectWithoutLearningResultInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EngineOptimizationStrategyUpsertWithWhereUniqueWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyUpsertWithWhereUniqueWithoutLearningResultInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EngineOptimizationStrategyCreateManyLearningResultInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema),z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema),z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema),z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema),z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EngineOptimizationStrategyUpdateWithWhereUniqueWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyUpdateWithWhereUniqueWithoutLearningResultInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EngineOptimizationStrategyUpdateManyWithWhereWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyUpdateManyWithWhereWithoutLearningResultInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EngineOptimizationStrategyScalarWhereInputSchema),z.lazy(() => EngineOptimizationStrategyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EngineRecommendationUpdateManyWithoutLearningResultNestedInputSchema: z.ZodType<Prisma.EngineRecommendationUpdateManyWithoutLearningResultNestedInput> = z.object({
  create: z.union([ z.lazy(() => EngineRecommendationCreateWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationCreateWithoutLearningResultInputSchema).array(),z.lazy(() => EngineRecommendationUncheckedCreateWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationUncheckedCreateWithoutLearningResultInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EngineRecommendationCreateOrConnectWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationCreateOrConnectWithoutLearningResultInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EngineRecommendationUpsertWithWhereUniqueWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationUpsertWithWhereUniqueWithoutLearningResultInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EngineRecommendationCreateManyLearningResultInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EngineRecommendationWhereUniqueInputSchema),z.lazy(() => EngineRecommendationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EngineRecommendationWhereUniqueInputSchema),z.lazy(() => EngineRecommendationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EngineRecommendationWhereUniqueInputSchema),z.lazy(() => EngineRecommendationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EngineRecommendationWhereUniqueInputSchema),z.lazy(() => EngineRecommendationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EngineRecommendationUpdateWithWhereUniqueWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationUpdateWithWhereUniqueWithoutLearningResultInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EngineRecommendationUpdateManyWithWhereWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationUpdateManyWithWhereWithoutLearningResultInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EngineRecommendationScalarWhereInputSchema),z.lazy(() => EngineRecommendationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EngineOptimizationStrategyUncheckedUpdateManyWithoutLearningResultNestedInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUncheckedUpdateManyWithoutLearningResultNestedInput> = z.object({
  create: z.union([ z.lazy(() => EngineOptimizationStrategyCreateWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyCreateWithoutLearningResultInputSchema).array(),z.lazy(() => EngineOptimizationStrategyUncheckedCreateWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyUncheckedCreateWithoutLearningResultInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EngineOptimizationStrategyCreateOrConnectWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyCreateOrConnectWithoutLearningResultInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EngineOptimizationStrategyUpsertWithWhereUniqueWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyUpsertWithWhereUniqueWithoutLearningResultInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EngineOptimizationStrategyCreateManyLearningResultInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema),z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema),z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema),z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema),z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EngineOptimizationStrategyUpdateWithWhereUniqueWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyUpdateWithWhereUniqueWithoutLearningResultInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EngineOptimizationStrategyUpdateManyWithWhereWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyUpdateManyWithWhereWithoutLearningResultInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EngineOptimizationStrategyScalarWhereInputSchema),z.lazy(() => EngineOptimizationStrategyScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EngineRecommendationUncheckedUpdateManyWithoutLearningResultNestedInputSchema: z.ZodType<Prisma.EngineRecommendationUncheckedUpdateManyWithoutLearningResultNestedInput> = z.object({
  create: z.union([ z.lazy(() => EngineRecommendationCreateWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationCreateWithoutLearningResultInputSchema).array(),z.lazy(() => EngineRecommendationUncheckedCreateWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationUncheckedCreateWithoutLearningResultInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => EngineRecommendationCreateOrConnectWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationCreateOrConnectWithoutLearningResultInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => EngineRecommendationUpsertWithWhereUniqueWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationUpsertWithWhereUniqueWithoutLearningResultInputSchema).array() ]).optional(),
  createMany: z.lazy(() => EngineRecommendationCreateManyLearningResultInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => EngineRecommendationWhereUniqueInputSchema),z.lazy(() => EngineRecommendationWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => EngineRecommendationWhereUniqueInputSchema),z.lazy(() => EngineRecommendationWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => EngineRecommendationWhereUniqueInputSchema),z.lazy(() => EngineRecommendationWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => EngineRecommendationWhereUniqueInputSchema),z.lazy(() => EngineRecommendationWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => EngineRecommendationUpdateWithWhereUniqueWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationUpdateWithWhereUniqueWithoutLearningResultInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => EngineRecommendationUpdateManyWithWhereWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationUpdateManyWithWhereWithoutLearningResultInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => EngineRecommendationScalarWhereInputSchema),z.lazy(() => EngineRecommendationScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const EngineLearningResultCreateNestedOneWithoutEngineOptimizationStrategyInputSchema: z.ZodType<Prisma.EngineLearningResultCreateNestedOneWithoutEngineOptimizationStrategyInput> = z.object({
  create: z.union([ z.lazy(() => EngineLearningResultCreateWithoutEngineOptimizationStrategyInputSchema),z.lazy(() => EngineLearningResultUncheckedCreateWithoutEngineOptimizationStrategyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EngineLearningResultCreateOrConnectWithoutEngineOptimizationStrategyInputSchema).optional(),
  connect: z.lazy(() => EngineLearningResultWhereUniqueInputSchema).optional()
}).strict();

export const EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.EnumEngineOptimizationTypeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => EngineOptimizationTypeSchema).optional()
}).strict();

export const EngineLearningResultUpdateOneRequiredWithoutEngineOptimizationStrategyNestedInputSchema: z.ZodType<Prisma.EngineLearningResultUpdateOneRequiredWithoutEngineOptimizationStrategyNestedInput> = z.object({
  create: z.union([ z.lazy(() => EngineLearningResultCreateWithoutEngineOptimizationStrategyInputSchema),z.lazy(() => EngineLearningResultUncheckedCreateWithoutEngineOptimizationStrategyInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EngineLearningResultCreateOrConnectWithoutEngineOptimizationStrategyInputSchema).optional(),
  upsert: z.lazy(() => EngineLearningResultUpsertWithoutEngineOptimizationStrategyInputSchema).optional(),
  connect: z.lazy(() => EngineLearningResultWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EngineLearningResultUpdateToOneWithWhereWithoutEngineOptimizationStrategyInputSchema),z.lazy(() => EngineLearningResultUpdateWithoutEngineOptimizationStrategyInputSchema),z.lazy(() => EngineLearningResultUncheckedUpdateWithoutEngineOptimizationStrategyInputSchema) ]).optional(),
}).strict();

export const EngineLearningResultCreateNestedOneWithoutRecommendationsInputSchema: z.ZodType<Prisma.EngineLearningResultCreateNestedOneWithoutRecommendationsInput> = z.object({
  create: z.union([ z.lazy(() => EngineLearningResultCreateWithoutRecommendationsInputSchema),z.lazy(() => EngineLearningResultUncheckedCreateWithoutRecommendationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EngineLearningResultCreateOrConnectWithoutRecommendationsInputSchema).optional(),
  connect: z.lazy(() => EngineLearningResultWhereUniqueInputSchema).optional()
}).strict();

export const EngineLearningResultUpdateOneRequiredWithoutRecommendationsNestedInputSchema: z.ZodType<Prisma.EngineLearningResultUpdateOneRequiredWithoutRecommendationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => EngineLearningResultCreateWithoutRecommendationsInputSchema),z.lazy(() => EngineLearningResultUncheckedCreateWithoutRecommendationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => EngineLearningResultCreateOrConnectWithoutRecommendationsInputSchema).optional(),
  upsert: z.lazy(() => EngineLearningResultUpsertWithoutRecommendationsInputSchema).optional(),
  connect: z.lazy(() => EngineLearningResultWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => EngineLearningResultUpdateToOneWithWhereWithoutRecommendationsInputSchema),z.lazy(() => EngineLearningResultUpdateWithoutRecommendationsInputSchema),z.lazy(() => EngineLearningResultUncheckedUpdateWithoutRecommendationsInputSchema) ]).optional(),
}).strict();

export const AccountCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuthSessionCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AuthSessionCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AuthSessionCreateWithoutUserInputSchema),z.lazy(() => AuthSessionCreateWithoutUserInputSchema).array(),z.lazy(() => AuthSessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => AuthSessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuthSessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => AuthSessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuthSessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuthSessionWhereUniqueInputSchema),z.lazy(() => AuthSessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AuthSessionUncheckedCreateNestedManyWithoutUserInputSchema: z.ZodType<Prisma.AuthSessionUncheckedCreateNestedManyWithoutUserInput> = z.object({
  create: z.union([ z.lazy(() => AuthSessionCreateWithoutUserInputSchema),z.lazy(() => AuthSessionCreateWithoutUserInputSchema).array(),z.lazy(() => AuthSessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => AuthSessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuthSessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => AuthSessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuthSessionCreateManyUserInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AuthSessionWhereUniqueInputSchema),z.lazy(() => AuthSessionWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuthSessionUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AuthSessionUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuthSessionCreateWithoutUserInputSchema),z.lazy(() => AuthSessionCreateWithoutUserInputSchema).array(),z.lazy(() => AuthSessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => AuthSessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuthSessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => AuthSessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuthSessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AuthSessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuthSessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuthSessionWhereUniqueInputSchema),z.lazy(() => AuthSessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuthSessionWhereUniqueInputSchema),z.lazy(() => AuthSessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuthSessionWhereUniqueInputSchema),z.lazy(() => AuthSessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuthSessionWhereUniqueInputSchema),z.lazy(() => AuthSessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuthSessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AuthSessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuthSessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AuthSessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuthSessionScalarWhereInputSchema),z.lazy(() => AuthSessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountCreateWithoutUserInputSchema).array(),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema),z.lazy(() => AccountCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountWhereUniqueInputSchema),z.lazy(() => AccountWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AccountUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AccountUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AuthSessionUncheckedUpdateManyWithoutUserNestedInputSchema: z.ZodType<Prisma.AuthSessionUncheckedUpdateManyWithoutUserNestedInput> = z.object({
  create: z.union([ z.lazy(() => AuthSessionCreateWithoutUserInputSchema),z.lazy(() => AuthSessionCreateWithoutUserInputSchema).array(),z.lazy(() => AuthSessionUncheckedCreateWithoutUserInputSchema),z.lazy(() => AuthSessionUncheckedCreateWithoutUserInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AuthSessionCreateOrConnectWithoutUserInputSchema),z.lazy(() => AuthSessionCreateOrConnectWithoutUserInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AuthSessionUpsertWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AuthSessionUpsertWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AuthSessionCreateManyUserInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AuthSessionWhereUniqueInputSchema),z.lazy(() => AuthSessionWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AuthSessionWhereUniqueInputSchema),z.lazy(() => AuthSessionWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AuthSessionWhereUniqueInputSchema),z.lazy(() => AuthSessionWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AuthSessionWhereUniqueInputSchema),z.lazy(() => AuthSessionWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AuthSessionUpdateWithWhereUniqueWithoutUserInputSchema),z.lazy(() => AuthSessionUpdateWithWhereUniqueWithoutUserInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AuthSessionUpdateManyWithWhereWithoutUserInputSchema),z.lazy(() => AuthSessionUpdateManyWithWhereWithoutUserInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AuthSessionScalarWhereInputSchema),z.lazy(() => AuthSessionScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutAccountsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutAccountsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutAccountsInputSchema),z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]).optional(),
}).strict();

export const UserCreateNestedOneWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateNestedOneWithoutSessionsInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional()
}).strict();

export const UserUpdateOneRequiredWithoutSessionsNestedInputSchema: z.ZodType<Prisma.UserUpdateOneRequiredWithoutSessionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UserCreateOrConnectWithoutSessionsInputSchema).optional(),
  upsert: z.lazy(() => UserUpsertWithoutSessionsInputSchema).optional(),
  connect: z.lazy(() => UserWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UserUpdateToOneWithWhereWithoutSessionsInputSchema),z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]).optional(),
}).strict();

export const ApiKeyCreateallowedIpsInputSchema: z.ZodType<Prisma.ApiKeyCreateallowedIpsInput> = z.object({
  set: z.string().array()
}).strict();

export const ApiKeyUpdateallowedIpsInputSchema: z.ZodType<Prisma.ApiKeyUpdateallowedIpsInput> = z.object({
  set: z.string().array().optional(),
  push: z.union([ z.string(),z.string().array() ]).optional(),
}).strict();

export const SessionCreateNestedOneWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SessionCreateNestedOneWithoutSessionToSignalInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutSessionToSignalInputSchema),z.lazy(() => SessionUncheckedCreateWithoutSessionToSignalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SessionCreateOrConnectWithoutSessionToSignalInputSchema).optional(),
  connect: z.lazy(() => SessionWhereUniqueInputSchema).optional()
}).strict();

export const SignalCreateNestedOneWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SignalCreateNestedOneWithoutSessionToSignalInput> = z.object({
  create: z.union([ z.lazy(() => SignalCreateWithoutSessionToSignalInputSchema),z.lazy(() => SignalUncheckedCreateWithoutSessionToSignalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SignalCreateOrConnectWithoutSessionToSignalInputSchema).optional(),
  connect: z.lazy(() => SignalWhereUniqueInputSchema).optional()
}).strict();

export const SessionUpdateOneRequiredWithoutSessionToSignalNestedInputSchema: z.ZodType<Prisma.SessionUpdateOneRequiredWithoutSessionToSignalNestedInput> = z.object({
  create: z.union([ z.lazy(() => SessionCreateWithoutSessionToSignalInputSchema),z.lazy(() => SessionUncheckedCreateWithoutSessionToSignalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SessionCreateOrConnectWithoutSessionToSignalInputSchema).optional(),
  upsert: z.lazy(() => SessionUpsertWithoutSessionToSignalInputSchema).optional(),
  connect: z.lazy(() => SessionWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SessionUpdateToOneWithWhereWithoutSessionToSignalInputSchema),z.lazy(() => SessionUpdateWithoutSessionToSignalInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutSessionToSignalInputSchema) ]).optional(),
}).strict();

export const SignalUpdateOneRequiredWithoutSessionToSignalNestedInputSchema: z.ZodType<Prisma.SignalUpdateOneRequiredWithoutSessionToSignalNestedInput> = z.object({
  create: z.union([ z.lazy(() => SignalCreateWithoutSessionToSignalInputSchema),z.lazy(() => SignalUncheckedCreateWithoutSessionToSignalInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SignalCreateOrConnectWithoutSessionToSignalInputSchema).optional(),
  upsert: z.lazy(() => SignalUpsertWithoutSessionToSignalInputSchema).optional(),
  connect: z.lazy(() => SignalWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SignalUpdateToOneWithWhereWithoutSessionToSignalInputSchema),z.lazy(() => SignalUpdateWithoutSessionToSignalInputSchema),z.lazy(() => SignalUncheckedUpdateWithoutSessionToSignalInputSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeFilterSchema: z.ZodType<Prisma.NestedDateTimeFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeFilterSchema) ]).optional(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedJsonFilterSchema: z.ZodType<Prisma.NestedJsonFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedDateTimeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional(),
  in: z.coerce.date().array().optional(),
  notIn: z.coerce.date().array().optional(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeFilterSchema).optional()
}).strict();

export const NestedIntWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedIntFilterSchema).optional(),
  _max: z.lazy(() => NestedIntFilterSchema).optional()
}).strict();

export const NestedFloatFilterSchema: z.ZodType<Prisma.NestedFloatFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatFilterSchema) ]).optional(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z.object({
  equals: InputJsonValueSchema.optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValueSchema.optional().nullable(),
  array_starts_with: InputJsonValueSchema.optional().nullable(),
  array_ends_with: InputJsonValueSchema.optional().nullable(),
  lt: InputJsonValueSchema.optional(),
  lte: InputJsonValueSchema.optional(),
  gt: InputJsonValueSchema.optional(),
  gte: InputJsonValueSchema.optional(),
  not: InputJsonValueSchema.optional()
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedEnumExperimentStatusFilterSchema: z.ZodType<Prisma.NestedEnumExperimentStatusFilter> = z.object({
  equals: z.lazy(() => ExperimentStatusSchema).optional(),
  in: z.lazy(() => ExperimentStatusSchema).array().optional(),
  notIn: z.lazy(() => ExperimentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExperimentStatusSchema),z.lazy(() => NestedEnumExperimentStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumExperimentStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumExperimentStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ExperimentStatusSchema).optional(),
  in: z.lazy(() => ExperimentStatusSchema).array().optional(),
  notIn: z.lazy(() => ExperimentStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => ExperimentStatusSchema),z.lazy(() => NestedEnumExperimentStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumExperimentStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumExperimentStatusFilterSchema).optional()
}).strict();

export const NestedFloatWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatWithAggregatesFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatFilterSchema).optional()
}).strict();

export const NestedEnumEventTypeFilterSchema: z.ZodType<Prisma.NestedEnumEventTypeFilter> = z.object({
  equals: z.lazy(() => EventTypeSchema).optional(),
  in: z.lazy(() => EventTypeSchema).array().optional(),
  notIn: z.lazy(() => EventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => NestedEnumEventTypeFilterSchema) ]).optional(),
}).strict();

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumEventTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumEventTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EventTypeSchema).optional(),
  in: z.lazy(() => EventTypeSchema).array().optional(),
  notIn: z.lazy(() => EventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => NestedEnumEventTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEventTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEventTypeFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const NestedBoolFilterSchema: z.ZodType<Prisma.NestedBoolFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolFilterSchema) ]).optional(),
}).strict();

export const NestedBoolWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolWithAggregatesFilter> = z.object({
  equals: z.boolean().optional(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolFilterSchema).optional()
}).strict();

export const NestedFloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const NestedEnumRulePriorityFilterSchema: z.ZodType<Prisma.NestedEnumRulePriorityFilter> = z.object({
  equals: z.lazy(() => RulePrioritySchema).optional(),
  in: z.lazy(() => RulePrioritySchema).array().optional(),
  notIn: z.lazy(() => RulePrioritySchema).array().optional(),
  not: z.union([ z.lazy(() => RulePrioritySchema),z.lazy(() => NestedEnumRulePriorityFilterSchema) ]).optional(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumRulePriorityWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumRulePriorityWithAggregatesFilter> = z.object({
  equals: z.lazy(() => RulePrioritySchema).optional(),
  in: z.lazy(() => RulePrioritySchema).array().optional(),
  notIn: z.lazy(() => RulePrioritySchema).array().optional(),
  not: z.union([ z.lazy(() => RulePrioritySchema),z.lazy(() => NestedEnumRulePriorityWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumRulePriorityFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumRulePriorityFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedEnumModelTypeFilterSchema: z.ZodType<Prisma.NestedEnumModelTypeFilter> = z.object({
  equals: z.lazy(() => ModelTypeSchema).optional(),
  in: z.lazy(() => ModelTypeSchema).array().optional(),
  notIn: z.lazy(() => ModelTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => NestedEnumModelTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumModelTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumModelTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => ModelTypeSchema).optional(),
  in: z.lazy(() => ModelTypeSchema).array().optional(),
  notIn: z.lazy(() => ModelTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => NestedEnumModelTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumModelTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumModelTypeFilterSchema).optional()
}).strict();

export const NestedEnumSignalTypeFilterSchema: z.ZodType<Prisma.NestedEnumSignalTypeFilter> = z.object({
  equals: z.lazy(() => SignalTypeSchema).optional(),
  in: z.lazy(() => SignalTypeSchema).array().optional(),
  notIn: z.lazy(() => SignalTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => SignalTypeSchema),z.lazy(() => NestedEnumSignalTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumSignalTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumSignalTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => SignalTypeSchema).optional(),
  in: z.lazy(() => SignalTypeSchema).array().optional(),
  notIn: z.lazy(() => SignalTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => SignalTypeSchema),z.lazy(() => NestedEnumSignalTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumSignalTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumSignalTypeFilterSchema).optional()
}).strict();

export const NestedEnumMetricTypeFilterSchema: z.ZodType<Prisma.NestedEnumMetricTypeFilter> = z.object({
  equals: z.lazy(() => MetricTypeSchema).optional(),
  in: z.lazy(() => MetricTypeSchema).array().optional(),
  notIn: z.lazy(() => MetricTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => NestedEnumMetricTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumMetricTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumMetricTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => MetricTypeSchema).optional(),
  in: z.lazy(() => MetricTypeSchema).array().optional(),
  notIn: z.lazy(() => MetricTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => NestedEnumMetricTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumMetricTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumMetricTypeFilterSchema).optional()
}).strict();

export const NestedEnumLearningEventTypeFilterSchema: z.ZodType<Prisma.NestedEnumLearningEventTypeFilter> = z.object({
  equals: z.lazy(() => LearningEventTypeSchema).optional(),
  in: z.lazy(() => LearningEventTypeSchema).array().optional(),
  notIn: z.lazy(() => LearningEventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => LearningEventTypeSchema),z.lazy(() => NestedEnumLearningEventTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumLearningEventStatusFilterSchema: z.ZodType<Prisma.NestedEnumLearningEventStatusFilter> = z.object({
  equals: z.lazy(() => LearningEventStatusSchema).optional(),
  in: z.lazy(() => LearningEventStatusSchema).array().optional(),
  notIn: z.lazy(() => LearningEventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => LearningEventStatusSchema),z.lazy(() => NestedEnumLearningEventStatusFilterSchema) ]).optional(),
}).strict();

export const NestedEnumLearningEventPriorityFilterSchema: z.ZodType<Prisma.NestedEnumLearningEventPriorityFilter> = z.object({
  equals: z.lazy(() => LearningEventPrioritySchema).optional(),
  in: z.lazy(() => LearningEventPrioritySchema).array().optional(),
  notIn: z.lazy(() => LearningEventPrioritySchema).array().optional(),
  not: z.union([ z.lazy(() => LearningEventPrioritySchema),z.lazy(() => NestedEnumLearningEventPriorityFilterSchema) ]).optional(),
}).strict();

export const NestedEnumLearningEventTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumLearningEventTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => LearningEventTypeSchema).optional(),
  in: z.lazy(() => LearningEventTypeSchema).array().optional(),
  notIn: z.lazy(() => LearningEventTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => LearningEventTypeSchema),z.lazy(() => NestedEnumLearningEventTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumLearningEventTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumLearningEventTypeFilterSchema).optional()
}).strict();

export const NestedEnumLearningEventStatusWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumLearningEventStatusWithAggregatesFilter> = z.object({
  equals: z.lazy(() => LearningEventStatusSchema).optional(),
  in: z.lazy(() => LearningEventStatusSchema).array().optional(),
  notIn: z.lazy(() => LearningEventStatusSchema).array().optional(),
  not: z.union([ z.lazy(() => LearningEventStatusSchema),z.lazy(() => NestedEnumLearningEventStatusWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumLearningEventStatusFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumLearningEventStatusFilterSchema).optional()
}).strict();

export const NestedEnumLearningEventPriorityWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumLearningEventPriorityWithAggregatesFilter> = z.object({
  equals: z.lazy(() => LearningEventPrioritySchema).optional(),
  in: z.lazy(() => LearningEventPrioritySchema).array().optional(),
  notIn: z.lazy(() => LearningEventPrioritySchema).array().optional(),
  not: z.union([ z.lazy(() => LearningEventPrioritySchema),z.lazy(() => NestedEnumLearningEventPriorityWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumLearningEventPriorityFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumLearningEventPriorityFilterSchema).optional()
}).strict();

export const NestedEnumEngineOptimizationTypeFilterSchema: z.ZodType<Prisma.NestedEnumEngineOptimizationTypeFilter> = z.object({
  equals: z.lazy(() => EngineOptimizationTypeSchema).optional(),
  in: z.lazy(() => EngineOptimizationTypeSchema).array().optional(),
  notIn: z.lazy(() => EngineOptimizationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => NestedEnumEngineOptimizationTypeFilterSchema) ]).optional(),
}).strict();

export const NestedEnumEngineOptimizationTypeWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumEngineOptimizationTypeWithAggregatesFilter> = z.object({
  equals: z.lazy(() => EngineOptimizationTypeSchema).optional(),
  in: z.lazy(() => EngineOptimizationTypeSchema).array().optional(),
  notIn: z.lazy(() => EngineOptimizationTypeSchema).array().optional(),
  not: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => NestedEnumEngineOptimizationTypeWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumEngineOptimizationTypeFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumEngineOptimizationTypeFilterSchema).optional()
}).strict();

export const ABTestAssignmentCreateWithoutSessionInputSchema: z.ZodType<Prisma.ABTestAssignmentCreateWithoutSessionInput> = z.object({
  id: z.string().cuid().optional(),
  variantId: z.string(),
  timestamp: z.coerce.date().optional(),
  test: z.lazy(() => ABTestCreateNestedOneWithoutAssignmentsInputSchema)
}).strict();

export const ABTestAssignmentUncheckedCreateWithoutSessionInputSchema: z.ZodType<Prisma.ABTestAssignmentUncheckedCreateWithoutSessionInput> = z.object({
  id: z.string().cuid().optional(),
  testId: z.string(),
  variantId: z.string(),
  timestamp: z.coerce.date().optional()
}).strict();

export const ABTestAssignmentCreateOrConnectWithoutSessionInputSchema: z.ZodType<Prisma.ABTestAssignmentCreateOrConnectWithoutSessionInput> = z.object({
  where: z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ABTestAssignmentCreateWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const ABTestAssignmentCreateManySessionInputEnvelopeSchema: z.ZodType<Prisma.ABTestAssignmentCreateManySessionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ABTestAssignmentCreateManySessionInputSchema),z.lazy(() => ABTestAssignmentCreateManySessionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ABTestMetricCreateWithoutSessionInputSchema: z.ZodType<Prisma.ABTestMetricCreateWithoutSessionInput> = z.object({
  id: z.string().cuid().optional(),
  variantId: z.string(),
  eventType: z.string(),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  test: z.lazy(() => ABTestCreateNestedOneWithoutMetricsInputSchema)
}).strict();

export const ABTestMetricUncheckedCreateWithoutSessionInputSchema: z.ZodType<Prisma.ABTestMetricUncheckedCreateWithoutSessionInput> = z.object({
  id: z.string().cuid().optional(),
  testId: z.string(),
  variantId: z.string(),
  eventType: z.string(),
  value: z.number(),
  timestamp: z.coerce.date().optional()
}).strict();

export const ABTestMetricCreateOrConnectWithoutSessionInputSchema: z.ZodType<Prisma.ABTestMetricCreateOrConnectWithoutSessionInput> = z.object({
  where: z.lazy(() => ABTestMetricWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ABTestMetricCreateWithoutSessionInputSchema),z.lazy(() => ABTestMetricUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const ABTestMetricCreateManySessionInputEnvelopeSchema: z.ZodType<Prisma.ABTestMetricCreateManySessionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ABTestMetricCreateManySessionInputSchema),z.lazy(() => ABTestMetricCreateManySessionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AnalyticsMetricsCreateWithoutSessionInputSchema: z.ZodType<Prisma.AnalyticsMetricsCreateWithoutSessionInput> = z.object({
  id: z.string().cuid().optional(),
  totalSearches: z.number().int(),
  averageLatency: z.number(),
  successRate: z.number(),
  errorRate: z.number(),
  cacheHitRate: z.number(),
  queryCount: z.number().int(),
  uniqueUsers: z.number().int(),
  avgResultsPerQuery: z.number(),
  clickThroughRate: z.number(),
  conversionRate: z.number(),
  avgRelevanceScore: z.number(),
  p95Latency: z.number(),
  p99Latency: z.number(),
  resourceUtilization: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  searchTypes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timeWindow: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const AnalyticsMetricsUncheckedCreateWithoutSessionInputSchema: z.ZodType<Prisma.AnalyticsMetricsUncheckedCreateWithoutSessionInput> = z.object({
  id: z.string().cuid().optional(),
  totalSearches: z.number().int(),
  averageLatency: z.number(),
  successRate: z.number(),
  errorRate: z.number(),
  cacheHitRate: z.number(),
  queryCount: z.number().int(),
  uniqueUsers: z.number().int(),
  avgResultsPerQuery: z.number(),
  clickThroughRate: z.number(),
  conversionRate: z.number(),
  avgRelevanceScore: z.number(),
  p95Latency: z.number(),
  p99Latency: z.number(),
  resourceUtilization: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  searchTypes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timeWindow: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const AnalyticsMetricsCreateOrConnectWithoutSessionInputSchema: z.ZodType<Prisma.AnalyticsMetricsCreateOrConnectWithoutSessionInput> = z.object({
  where: z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AnalyticsMetricsCreateWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const AnalyticsMetricsCreateManySessionInputEnvelopeSchema: z.ZodType<Prisma.AnalyticsMetricsCreateManySessionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AnalyticsMetricsCreateManySessionInputSchema),z.lazy(() => AnalyticsMetricsCreateManySessionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ConversationCreateWithoutSessionInputSchema: z.ZodType<Prisma.ConversationCreateWithoutSessionInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  messages: z.lazy(() => MessageCreateNestedManyWithoutConversationInputSchema).optional()
}).strict();

export const ConversationUncheckedCreateWithoutSessionInputSchema: z.ZodType<Prisma.ConversationUncheckedCreateWithoutSessionInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  messages: z.lazy(() => MessageUncheckedCreateNestedManyWithoutConversationInputSchema).optional()
}).strict();

export const ConversationCreateOrConnectWithoutSessionInputSchema: z.ZodType<Prisma.ConversationCreateOrConnectWithoutSessionInput> = z.object({
  where: z.lazy(() => ConversationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ConversationCreateWithoutSessionInputSchema),z.lazy(() => ConversationUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const ConversationCreateManySessionInputEnvelopeSchema: z.ZodType<Prisma.ConversationCreateManySessionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ConversationCreateManySessionInputSchema),z.lazy(() => ConversationCreateManySessionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LearningMetricCreateWithoutSessionInputSchema: z.ZodType<Prisma.LearningMetricCreateWithoutSessionInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => MetricTypeSchema),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  interval: z.string(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.string(),
  aggregated: z.boolean().optional(),
  count: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  model: z.lazy(() => ModelConfigCreateNestedOneWithoutMetricsInputSchema).optional()
}).strict();

export const LearningMetricUncheckedCreateWithoutSessionInputSchema: z.ZodType<Prisma.LearningMetricUncheckedCreateWithoutSessionInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => MetricTypeSchema),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  interval: z.string(),
  modelId: z.string().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.string(),
  aggregated: z.boolean().optional(),
  count: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LearningMetricCreateOrConnectWithoutSessionInputSchema: z.ZodType<Prisma.LearningMetricCreateOrConnectWithoutSessionInput> = z.object({
  where: z.lazy(() => LearningMetricWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LearningMetricCreateWithoutSessionInputSchema),z.lazy(() => LearningMetricUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const LearningMetricCreateManySessionInputEnvelopeSchema: z.ZodType<Prisma.LearningMetricCreateManySessionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LearningMetricCreateManySessionInputSchema),z.lazy(() => LearningMetricCreateManySessionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SearchEventCreateWithoutSessionInputSchema: z.ZodType<Prisma.SearchEventCreateWithoutSessionInput> = z.object({
  id: z.string().cuid().optional(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date().optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  BaseEvent: z.lazy(() => BaseEventCreateNestedManyWithoutSearchEventInputSchema).optional(),
  feedback: z.lazy(() => SearchFeedbackCreateNestedManyWithoutSearchEventInputSchema).optional()
}).strict();

export const SearchEventUncheckedCreateWithoutSessionInputSchema: z.ZodType<Prisma.SearchEventUncheckedCreateWithoutSessionInput> = z.object({
  id: z.string().cuid().optional(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date().optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  BaseEvent: z.lazy(() => BaseEventUncheckedCreateNestedManyWithoutSearchEventInputSchema).optional(),
  feedback: z.lazy(() => SearchFeedbackUncheckedCreateNestedManyWithoutSearchEventInputSchema).optional()
}).strict();

export const SearchEventCreateOrConnectWithoutSessionInputSchema: z.ZodType<Prisma.SearchEventCreateOrConnectWithoutSessionInput> = z.object({
  where: z.lazy(() => SearchEventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SearchEventCreateWithoutSessionInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const SearchEventCreateManySessionInputEnvelopeSchema: z.ZodType<Prisma.SearchEventCreateManySessionInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SearchEventCreateManySessionInputSchema),z.lazy(() => SearchEventCreateManySessionInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SessionToSignalCreateWithoutSessionsInputSchema: z.ZodType<Prisma.SessionToSignalCreateWithoutSessionsInput> = z.object({
  Signal: z.lazy(() => SignalCreateNestedOneWithoutSessionToSignalInputSchema)
}).strict();

export const SessionToSignalUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.SessionToSignalUncheckedCreateWithoutSessionsInput> = z.object({
  B: z.string()
}).strict();

export const SessionToSignalCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.SessionToSignalCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => SessionToSignalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionToSignalCreateWithoutSessionsInputSchema),z.lazy(() => SessionToSignalUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const SessionToSignalCreateManySessionsInputEnvelopeSchema: z.ZodType<Prisma.SessionToSignalCreateManySessionsInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionToSignalCreateManySessionsInputSchema),z.lazy(() => SessionToSignalCreateManySessionsInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ABTestAssignmentUpsertWithWhereUniqueWithoutSessionInputSchema: z.ZodType<Prisma.ABTestAssignmentUpsertWithWhereUniqueWithoutSessionInput> = z.object({
  where: z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ABTestAssignmentUpdateWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentUncheckedUpdateWithoutSessionInputSchema) ]),
  create: z.union([ z.lazy(() => ABTestAssignmentCreateWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const ABTestAssignmentUpdateWithWhereUniqueWithoutSessionInputSchema: z.ZodType<Prisma.ABTestAssignmentUpdateWithWhereUniqueWithoutSessionInput> = z.object({
  where: z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ABTestAssignmentUpdateWithoutSessionInputSchema),z.lazy(() => ABTestAssignmentUncheckedUpdateWithoutSessionInputSchema) ]),
}).strict();

export const ABTestAssignmentUpdateManyWithWhereWithoutSessionInputSchema: z.ZodType<Prisma.ABTestAssignmentUpdateManyWithWhereWithoutSessionInput> = z.object({
  where: z.lazy(() => ABTestAssignmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ABTestAssignmentUpdateManyMutationInputSchema),z.lazy(() => ABTestAssignmentUncheckedUpdateManyWithoutSessionInputSchema) ]),
}).strict();

export const ABTestAssignmentScalarWhereInputSchema: z.ZodType<Prisma.ABTestAssignmentScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ABTestAssignmentScalarWhereInputSchema),z.lazy(() => ABTestAssignmentScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestAssignmentScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestAssignmentScalarWhereInputSchema),z.lazy(() => ABTestAssignmentScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  testId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const ABTestMetricUpsertWithWhereUniqueWithoutSessionInputSchema: z.ZodType<Prisma.ABTestMetricUpsertWithWhereUniqueWithoutSessionInput> = z.object({
  where: z.lazy(() => ABTestMetricWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ABTestMetricUpdateWithoutSessionInputSchema),z.lazy(() => ABTestMetricUncheckedUpdateWithoutSessionInputSchema) ]),
  create: z.union([ z.lazy(() => ABTestMetricCreateWithoutSessionInputSchema),z.lazy(() => ABTestMetricUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const ABTestMetricUpdateWithWhereUniqueWithoutSessionInputSchema: z.ZodType<Prisma.ABTestMetricUpdateWithWhereUniqueWithoutSessionInput> = z.object({
  where: z.lazy(() => ABTestMetricWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ABTestMetricUpdateWithoutSessionInputSchema),z.lazy(() => ABTestMetricUncheckedUpdateWithoutSessionInputSchema) ]),
}).strict();

export const ABTestMetricUpdateManyWithWhereWithoutSessionInputSchema: z.ZodType<Prisma.ABTestMetricUpdateManyWithWhereWithoutSessionInput> = z.object({
  where: z.lazy(() => ABTestMetricScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ABTestMetricUpdateManyMutationInputSchema),z.lazy(() => ABTestMetricUncheckedUpdateManyWithoutSessionInputSchema) ]),
}).strict();

export const ABTestMetricScalarWhereInputSchema: z.ZodType<Prisma.ABTestMetricScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ABTestMetricScalarWhereInputSchema),z.lazy(() => ABTestMetricScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestMetricScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestMetricScalarWhereInputSchema),z.lazy(() => ABTestMetricScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  testId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  eventType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const AnalyticsMetricsUpsertWithWhereUniqueWithoutSessionInputSchema: z.ZodType<Prisma.AnalyticsMetricsUpsertWithWhereUniqueWithoutSessionInput> = z.object({
  where: z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AnalyticsMetricsUpdateWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsUncheckedUpdateWithoutSessionInputSchema) ]),
  create: z.union([ z.lazy(() => AnalyticsMetricsCreateWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const AnalyticsMetricsUpdateWithWhereUniqueWithoutSessionInputSchema: z.ZodType<Prisma.AnalyticsMetricsUpdateWithWhereUniqueWithoutSessionInput> = z.object({
  where: z.lazy(() => AnalyticsMetricsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AnalyticsMetricsUpdateWithoutSessionInputSchema),z.lazy(() => AnalyticsMetricsUncheckedUpdateWithoutSessionInputSchema) ]),
}).strict();

export const AnalyticsMetricsUpdateManyWithWhereWithoutSessionInputSchema: z.ZodType<Prisma.AnalyticsMetricsUpdateManyWithWhereWithoutSessionInput> = z.object({
  where: z.lazy(() => AnalyticsMetricsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AnalyticsMetricsUpdateManyMutationInputSchema),z.lazy(() => AnalyticsMetricsUncheckedUpdateManyWithoutSessionInputSchema) ]),
}).strict();

export const AnalyticsMetricsScalarWhereInputSchema: z.ZodType<Prisma.AnalyticsMetricsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AnalyticsMetricsScalarWhereInputSchema),z.lazy(() => AnalyticsMetricsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AnalyticsMetricsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AnalyticsMetricsScalarWhereInputSchema),z.lazy(() => AnalyticsMetricsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  totalSearches: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  averageLatency: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  successRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  errorRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  cacheHitRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  queryCount: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  uniqueUsers: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  avgResultsPerQuery: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  clickThroughRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  conversionRate: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  avgRelevanceScore: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  p95Latency: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  p99Latency: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  resourceUtilization: z.lazy(() => JsonFilterSchema).optional(),
  searchTypes: z.lazy(() => JsonFilterSchema).optional(),
  timeWindow: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ConversationUpsertWithWhereUniqueWithoutSessionInputSchema: z.ZodType<Prisma.ConversationUpsertWithWhereUniqueWithoutSessionInput> = z.object({
  where: z.lazy(() => ConversationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ConversationUpdateWithoutSessionInputSchema),z.lazy(() => ConversationUncheckedUpdateWithoutSessionInputSchema) ]),
  create: z.union([ z.lazy(() => ConversationCreateWithoutSessionInputSchema),z.lazy(() => ConversationUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const ConversationUpdateWithWhereUniqueWithoutSessionInputSchema: z.ZodType<Prisma.ConversationUpdateWithWhereUniqueWithoutSessionInput> = z.object({
  where: z.lazy(() => ConversationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ConversationUpdateWithoutSessionInputSchema),z.lazy(() => ConversationUncheckedUpdateWithoutSessionInputSchema) ]),
}).strict();

export const ConversationUpdateManyWithWhereWithoutSessionInputSchema: z.ZodType<Prisma.ConversationUpdateManyWithWhereWithoutSessionInput> = z.object({
  where: z.lazy(() => ConversationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ConversationUpdateManyMutationInputSchema),z.lazy(() => ConversationUncheckedUpdateManyWithoutSessionInputSchema) ]),
}).strict();

export const ConversationScalarWhereInputSchema: z.ZodType<Prisma.ConversationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ConversationScalarWhereInputSchema),z.lazy(() => ConversationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ConversationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ConversationScalarWhereInputSchema),z.lazy(() => ConversationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  context: z.lazy(() => JsonNullableFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LearningMetricUpsertWithWhereUniqueWithoutSessionInputSchema: z.ZodType<Prisma.LearningMetricUpsertWithWhereUniqueWithoutSessionInput> = z.object({
  where: z.lazy(() => LearningMetricWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LearningMetricUpdateWithoutSessionInputSchema),z.lazy(() => LearningMetricUncheckedUpdateWithoutSessionInputSchema) ]),
  create: z.union([ z.lazy(() => LearningMetricCreateWithoutSessionInputSchema),z.lazy(() => LearningMetricUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const LearningMetricUpdateWithWhereUniqueWithoutSessionInputSchema: z.ZodType<Prisma.LearningMetricUpdateWithWhereUniqueWithoutSessionInput> = z.object({
  where: z.lazy(() => LearningMetricWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LearningMetricUpdateWithoutSessionInputSchema),z.lazy(() => LearningMetricUncheckedUpdateWithoutSessionInputSchema) ]),
}).strict();

export const LearningMetricUpdateManyWithWhereWithoutSessionInputSchema: z.ZodType<Prisma.LearningMetricUpdateManyWithWhereWithoutSessionInput> = z.object({
  where: z.lazy(() => LearningMetricScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LearningMetricUpdateManyMutationInputSchema),z.lazy(() => LearningMetricUncheckedUpdateManyWithoutSessionInputSchema) ]),
}).strict();

export const LearningMetricScalarWhereInputSchema: z.ZodType<Prisma.LearningMetricScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LearningMetricScalarWhereInputSchema),z.lazy(() => LearningMetricScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LearningMetricScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LearningMetricScalarWhereInputSchema),z.lazy(() => LearningMetricScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumMetricTypeFilterSchema),z.lazy(() => MetricTypeSchema) ]).optional(),
  value: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  interval: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  modelId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  timeframe: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  aggregated: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  count: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SearchEventUpsertWithWhereUniqueWithoutSessionInputSchema: z.ZodType<Prisma.SearchEventUpsertWithWhereUniqueWithoutSessionInput> = z.object({
  where: z.lazy(() => SearchEventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SearchEventUpdateWithoutSessionInputSchema),z.lazy(() => SearchEventUncheckedUpdateWithoutSessionInputSchema) ]),
  create: z.union([ z.lazy(() => SearchEventCreateWithoutSessionInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutSessionInputSchema) ]),
}).strict();

export const SearchEventUpdateWithWhereUniqueWithoutSessionInputSchema: z.ZodType<Prisma.SearchEventUpdateWithWhereUniqueWithoutSessionInput> = z.object({
  where: z.lazy(() => SearchEventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SearchEventUpdateWithoutSessionInputSchema),z.lazy(() => SearchEventUncheckedUpdateWithoutSessionInputSchema) ]),
}).strict();

export const SearchEventUpdateManyWithWhereWithoutSessionInputSchema: z.ZodType<Prisma.SearchEventUpdateManyWithWhereWithoutSessionInput> = z.object({
  where: z.lazy(() => SearchEventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SearchEventUpdateManyMutationInputSchema),z.lazy(() => SearchEventUncheckedUpdateManyWithoutSessionInputSchema) ]),
}).strict();

export const SearchEventScalarWhereInputSchema: z.ZodType<Prisma.SearchEventScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SearchEventScalarWhereInputSchema),z.lazy(() => SearchEventScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchEventScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchEventScalarWhereInputSchema),z.lazy(() => SearchEventScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  query: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  searchType: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  totalHits: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  took: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  facetsUsed: z.lazy(() => JsonNullableFilterSchema).optional(),
  resultIds: z.lazy(() => JsonNullableFilterSchema).optional(),
  page: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  pageSize: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  filters: z.lazy(() => JsonNullableFilterSchema).optional()
}).strict();

export const SessionToSignalUpsertWithWhereUniqueWithoutSessionsInputSchema: z.ZodType<Prisma.SessionToSignalUpsertWithWhereUniqueWithoutSessionsInput> = z.object({
  where: z.lazy(() => SessionToSignalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionToSignalUpdateWithoutSessionsInputSchema),z.lazy(() => SessionToSignalUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => SessionToSignalCreateWithoutSessionsInputSchema),z.lazy(() => SessionToSignalUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const SessionToSignalUpdateWithWhereUniqueWithoutSessionsInputSchema: z.ZodType<Prisma.SessionToSignalUpdateWithWhereUniqueWithoutSessionsInput> = z.object({
  where: z.lazy(() => SessionToSignalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionToSignalUpdateWithoutSessionsInputSchema),z.lazy(() => SessionToSignalUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const SessionToSignalUpdateManyWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.SessionToSignalUpdateManyWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => SessionToSignalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionToSignalUpdateManyMutationInputSchema),z.lazy(() => SessionToSignalUncheckedUpdateManyWithoutSessionsInputSchema) ]),
}).strict();

export const SessionToSignalScalarWhereInputSchema: z.ZodType<Prisma.SessionToSignalScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SessionToSignalScalarWhereInputSchema),z.lazy(() => SessionToSignalScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SessionToSignalScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SessionToSignalScalarWhereInputSchema),z.lazy(() => SessionToSignalScalarWhereInputSchema).array() ]).optional(),
  A: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  B: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const SessionCreateWithoutConversationsInputSchema: z.ZodType<Prisma.SessionCreateWithoutConversationsInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abAssignments: z.lazy(() => ABTestAssignmentCreateNestedManyWithoutSessionInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricCreateNestedManyWithoutSessionInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsCreateNestedManyWithoutSessionInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricCreateNestedManyWithoutSessionInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventCreateNestedManyWithoutSessionInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const SessionUncheckedCreateWithoutConversationsInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutConversationsInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const SessionCreateOrConnectWithoutConversationsInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutConversationsInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutConversationsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutConversationsInputSchema) ]),
}).strict();

export const MessageCreateWithoutConversationInputSchema: z.ZodType<Prisma.MessageCreateWithoutConversationInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.string(),
  content: z.string(),
  timestamp: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const MessageUncheckedCreateWithoutConversationInputSchema: z.ZodType<Prisma.MessageUncheckedCreateWithoutConversationInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.string(),
  content: z.string(),
  timestamp: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const MessageCreateOrConnectWithoutConversationInputSchema: z.ZodType<Prisma.MessageCreateOrConnectWithoutConversationInput> = z.object({
  where: z.lazy(() => MessageWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MessageCreateWithoutConversationInputSchema),z.lazy(() => MessageUncheckedCreateWithoutConversationInputSchema) ]),
}).strict();

export const MessageCreateManyConversationInputEnvelopeSchema: z.ZodType<Prisma.MessageCreateManyConversationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => MessageCreateManyConversationInputSchema),z.lazy(() => MessageCreateManyConversationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SessionUpsertWithoutConversationsInputSchema: z.ZodType<Prisma.SessionUpsertWithoutConversationsInput> = z.object({
  update: z.union([ z.lazy(() => SessionUpdateWithoutConversationsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutConversationsInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutConversationsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutConversationsInputSchema) ]),
  where: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const SessionUpdateToOneWithWhereWithoutConversationsInputSchema: z.ZodType<Prisma.SessionUpdateToOneWithWhereWithoutConversationsInput> = z.object({
  where: z.lazy(() => SessionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SessionUpdateWithoutConversationsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutConversationsInputSchema) ]),
}).strict();

export const SessionUpdateWithoutConversationsInputSchema: z.ZodType<Prisma.SessionUpdateWithoutConversationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUpdateManyWithoutSessionNestedInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUpdateManyWithoutSessionNestedInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUpdateManyWithoutSessionNestedInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUpdateManyWithoutSessionNestedInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUpdateManyWithoutSessionNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateWithoutConversationsInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutConversationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const MessageUpsertWithWhereUniqueWithoutConversationInputSchema: z.ZodType<Prisma.MessageUpsertWithWhereUniqueWithoutConversationInput> = z.object({
  where: z.lazy(() => MessageWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => MessageUpdateWithoutConversationInputSchema),z.lazy(() => MessageUncheckedUpdateWithoutConversationInputSchema) ]),
  create: z.union([ z.lazy(() => MessageCreateWithoutConversationInputSchema),z.lazy(() => MessageUncheckedCreateWithoutConversationInputSchema) ]),
}).strict();

export const MessageUpdateWithWhereUniqueWithoutConversationInputSchema: z.ZodType<Prisma.MessageUpdateWithWhereUniqueWithoutConversationInput> = z.object({
  where: z.lazy(() => MessageWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => MessageUpdateWithoutConversationInputSchema),z.lazy(() => MessageUncheckedUpdateWithoutConversationInputSchema) ]),
}).strict();

export const MessageUpdateManyWithWhereWithoutConversationInputSchema: z.ZodType<Prisma.MessageUpdateManyWithWhereWithoutConversationInput> = z.object({
  where: z.lazy(() => MessageScalarWhereInputSchema),
  data: z.union([ z.lazy(() => MessageUpdateManyMutationInputSchema),z.lazy(() => MessageUncheckedUpdateManyWithoutConversationInputSchema) ]),
}).strict();

export const MessageScalarWhereInputSchema: z.ZodType<Prisma.MessageScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MessageScalarWhereInputSchema),z.lazy(() => MessageScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessageScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessageScalarWhereInputSchema),z.lazy(() => MessageScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  conversationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  role: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  content: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional()
}).strict();

export const ConversationCreateWithoutMessagesInputSchema: z.ZodType<Prisma.ConversationCreateWithoutMessagesInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  session: z.lazy(() => SessionCreateNestedOneWithoutConversationsInputSchema)
}).strict();

export const ConversationUncheckedCreateWithoutMessagesInputSchema: z.ZodType<Prisma.ConversationUncheckedCreateWithoutMessagesInput> = z.object({
  id: z.string().cuid().optional(),
  sessionId: z.string(),
  title: z.string().optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ConversationCreateOrConnectWithoutMessagesInputSchema: z.ZodType<Prisma.ConversationCreateOrConnectWithoutMessagesInput> = z.object({
  where: z.lazy(() => ConversationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ConversationCreateWithoutMessagesInputSchema),z.lazy(() => ConversationUncheckedCreateWithoutMessagesInputSchema) ]),
}).strict();

export const ConversationUpsertWithoutMessagesInputSchema: z.ZodType<Prisma.ConversationUpsertWithoutMessagesInput> = z.object({
  update: z.union([ z.lazy(() => ConversationUpdateWithoutMessagesInputSchema),z.lazy(() => ConversationUncheckedUpdateWithoutMessagesInputSchema) ]),
  create: z.union([ z.lazy(() => ConversationCreateWithoutMessagesInputSchema),z.lazy(() => ConversationUncheckedCreateWithoutMessagesInputSchema) ]),
  where: z.lazy(() => ConversationWhereInputSchema).optional()
}).strict();

export const ConversationUpdateToOneWithWhereWithoutMessagesInputSchema: z.ZodType<Prisma.ConversationUpdateToOneWithWhereWithoutMessagesInput> = z.object({
  where: z.lazy(() => ConversationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ConversationUpdateWithoutMessagesInputSchema),z.lazy(() => ConversationUncheckedUpdateWithoutMessagesInputSchema) ]),
}).strict();

export const ConversationUpdateWithoutMessagesInputSchema: z.ZodType<Prisma.ConversationUpdateWithoutMessagesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  session: z.lazy(() => SessionUpdateOneRequiredWithoutConversationsNestedInputSchema).optional()
}).strict();

export const ConversationUncheckedUpdateWithoutMessagesInputSchema: z.ZodType<Prisma.ConversationUncheckedUpdateWithoutMessagesInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestAssignmentCreateWithoutTestInputSchema: z.ZodType<Prisma.ABTestAssignmentCreateWithoutTestInput> = z.object({
  id: z.string().cuid().optional(),
  variantId: z.string(),
  timestamp: z.coerce.date().optional(),
  session: z.lazy(() => SessionCreateNestedOneWithoutAbAssignmentsInputSchema)
}).strict();

export const ABTestAssignmentUncheckedCreateWithoutTestInputSchema: z.ZodType<Prisma.ABTestAssignmentUncheckedCreateWithoutTestInput> = z.object({
  id: z.string().cuid().optional(),
  sessionId: z.string(),
  variantId: z.string(),
  timestamp: z.coerce.date().optional()
}).strict();

export const ABTestAssignmentCreateOrConnectWithoutTestInputSchema: z.ZodType<Prisma.ABTestAssignmentCreateOrConnectWithoutTestInput> = z.object({
  where: z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ABTestAssignmentCreateWithoutTestInputSchema),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutTestInputSchema) ]),
}).strict();

export const ABTestAssignmentCreateManyTestInputEnvelopeSchema: z.ZodType<Prisma.ABTestAssignmentCreateManyTestInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ABTestAssignmentCreateManyTestInputSchema),z.lazy(() => ABTestAssignmentCreateManyTestInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ABTestMetricCreateWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricCreateWithoutTestInput> = z.object({
  id: z.string().cuid().optional(),
  variantId: z.string(),
  eventType: z.string(),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  session: z.lazy(() => SessionCreateNestedOneWithoutAbMetricsInputSchema)
}).strict();

export const ABTestMetricUncheckedCreateWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricUncheckedCreateWithoutTestInput> = z.object({
  id: z.string().cuid().optional(),
  variantId: z.string(),
  eventType: z.string(),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  sessionId: z.string()
}).strict();

export const ABTestMetricCreateOrConnectWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricCreateOrConnectWithoutTestInput> = z.object({
  where: z.lazy(() => ABTestMetricWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ABTestMetricCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricUncheckedCreateWithoutTestInputSchema) ]),
}).strict();

export const ABTestMetricCreateManyTestInputEnvelopeSchema: z.ZodType<Prisma.ABTestMetricCreateManyTestInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ABTestMetricCreateManyTestInputSchema),z.lazy(() => ABTestMetricCreateManyTestInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ABTestMetricsCreateWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricsCreateWithoutTestInput> = z.object({
  id: z.string().cuid().optional(),
  variantId: z.string(),
  queryHash: z.string(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional()
}).strict();

export const ABTestMetricsUncheckedCreateWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricsUncheckedCreateWithoutTestInput> = z.object({
  id: z.string().cuid().optional(),
  variantId: z.string(),
  queryHash: z.string(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional()
}).strict();

export const ABTestMetricsCreateOrConnectWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricsCreateOrConnectWithoutTestInput> = z.object({
  where: z.lazy(() => ABTestMetricsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ABTestMetricsCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricsUncheckedCreateWithoutTestInputSchema) ]),
}).strict();

export const ABTestMetricsCreateManyTestInputEnvelopeSchema: z.ZodType<Prisma.ABTestMetricsCreateManyTestInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ABTestMetricsCreateManyTestInputSchema),z.lazy(() => ABTestMetricsCreateManyTestInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ABTestAssignmentUpsertWithWhereUniqueWithoutTestInputSchema: z.ZodType<Prisma.ABTestAssignmentUpsertWithWhereUniqueWithoutTestInput> = z.object({
  where: z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ABTestAssignmentUpdateWithoutTestInputSchema),z.lazy(() => ABTestAssignmentUncheckedUpdateWithoutTestInputSchema) ]),
  create: z.union([ z.lazy(() => ABTestAssignmentCreateWithoutTestInputSchema),z.lazy(() => ABTestAssignmentUncheckedCreateWithoutTestInputSchema) ]),
}).strict();

export const ABTestAssignmentUpdateWithWhereUniqueWithoutTestInputSchema: z.ZodType<Prisma.ABTestAssignmentUpdateWithWhereUniqueWithoutTestInput> = z.object({
  where: z.lazy(() => ABTestAssignmentWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ABTestAssignmentUpdateWithoutTestInputSchema),z.lazy(() => ABTestAssignmentUncheckedUpdateWithoutTestInputSchema) ]),
}).strict();

export const ABTestAssignmentUpdateManyWithWhereWithoutTestInputSchema: z.ZodType<Prisma.ABTestAssignmentUpdateManyWithWhereWithoutTestInput> = z.object({
  where: z.lazy(() => ABTestAssignmentScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ABTestAssignmentUpdateManyMutationInputSchema),z.lazy(() => ABTestAssignmentUncheckedUpdateManyWithoutTestInputSchema) ]),
}).strict();

export const ABTestMetricUpsertWithWhereUniqueWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricUpsertWithWhereUniqueWithoutTestInput> = z.object({
  where: z.lazy(() => ABTestMetricWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ABTestMetricUpdateWithoutTestInputSchema),z.lazy(() => ABTestMetricUncheckedUpdateWithoutTestInputSchema) ]),
  create: z.union([ z.lazy(() => ABTestMetricCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricUncheckedCreateWithoutTestInputSchema) ]),
}).strict();

export const ABTestMetricUpdateWithWhereUniqueWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricUpdateWithWhereUniqueWithoutTestInput> = z.object({
  where: z.lazy(() => ABTestMetricWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ABTestMetricUpdateWithoutTestInputSchema),z.lazy(() => ABTestMetricUncheckedUpdateWithoutTestInputSchema) ]),
}).strict();

export const ABTestMetricUpdateManyWithWhereWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricUpdateManyWithWhereWithoutTestInput> = z.object({
  where: z.lazy(() => ABTestMetricScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ABTestMetricUpdateManyMutationInputSchema),z.lazy(() => ABTestMetricUncheckedUpdateManyWithoutTestInputSchema) ]),
}).strict();

export const ABTestMetricsUpsertWithWhereUniqueWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricsUpsertWithWhereUniqueWithoutTestInput> = z.object({
  where: z.lazy(() => ABTestMetricsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ABTestMetricsUpdateWithoutTestInputSchema),z.lazy(() => ABTestMetricsUncheckedUpdateWithoutTestInputSchema) ]),
  create: z.union([ z.lazy(() => ABTestMetricsCreateWithoutTestInputSchema),z.lazy(() => ABTestMetricsUncheckedCreateWithoutTestInputSchema) ]),
}).strict();

export const ABTestMetricsUpdateWithWhereUniqueWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricsUpdateWithWhereUniqueWithoutTestInput> = z.object({
  where: z.lazy(() => ABTestMetricsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ABTestMetricsUpdateWithoutTestInputSchema),z.lazy(() => ABTestMetricsUncheckedUpdateWithoutTestInputSchema) ]),
}).strict();

export const ABTestMetricsUpdateManyWithWhereWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricsUpdateManyWithWhereWithoutTestInput> = z.object({
  where: z.lazy(() => ABTestMetricsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ABTestMetricsUpdateManyMutationInputSchema),z.lazy(() => ABTestMetricsUncheckedUpdateManyWithoutTestInputSchema) ]),
}).strict();

export const ABTestMetricsScalarWhereInputSchema: z.ZodType<Prisma.ABTestMetricsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ABTestMetricsScalarWhereInputSchema),z.lazy(() => ABTestMetricsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ABTestMetricsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ABTestMetricsScalarWhereInputSchema),z.lazy(() => ABTestMetricsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  testId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  variantId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  queryHash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  metrics: z.lazy(() => JsonFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const SessionCreateWithoutAbAssignmentsInputSchema: z.ZodType<Prisma.SessionCreateWithoutAbAssignmentsInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abMetrics: z.lazy(() => ABTestMetricCreateNestedManyWithoutSessionInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsCreateNestedManyWithoutSessionInputSchema).optional(),
  conversations: z.lazy(() => ConversationCreateNestedManyWithoutSessionInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricCreateNestedManyWithoutSessionInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventCreateNestedManyWithoutSessionInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const SessionUncheckedCreateWithoutAbAssignmentsInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutAbAssignmentsInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abMetrics: z.lazy(() => ABTestMetricUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  conversations: z.lazy(() => ConversationUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const SessionCreateOrConnectWithoutAbAssignmentsInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutAbAssignmentsInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutAbAssignmentsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutAbAssignmentsInputSchema) ]),
}).strict();

export const ABTestCreateWithoutAssignmentsInputSchema: z.ZodType<Prisma.ABTestCreateWithoutAssignmentsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  status: z.lazy(() => ExperimentStatusSchema),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  metrics: z.lazy(() => ABTestMetricCreateNestedManyWithoutTestInputSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsCreateNestedManyWithoutTestInputSchema).optional()
}).strict();

export const ABTestUncheckedCreateWithoutAssignmentsInputSchema: z.ZodType<Prisma.ABTestUncheckedCreateWithoutAssignmentsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  status: z.lazy(() => ExperimentStatusSchema),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  metrics: z.lazy(() => ABTestMetricUncheckedCreateNestedManyWithoutTestInputSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsUncheckedCreateNestedManyWithoutTestInputSchema).optional()
}).strict();

export const ABTestCreateOrConnectWithoutAssignmentsInputSchema: z.ZodType<Prisma.ABTestCreateOrConnectWithoutAssignmentsInput> = z.object({
  where: z.lazy(() => ABTestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ABTestCreateWithoutAssignmentsInputSchema),z.lazy(() => ABTestUncheckedCreateWithoutAssignmentsInputSchema) ]),
}).strict();

export const SessionUpsertWithoutAbAssignmentsInputSchema: z.ZodType<Prisma.SessionUpsertWithoutAbAssignmentsInput> = z.object({
  update: z.union([ z.lazy(() => SessionUpdateWithoutAbAssignmentsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutAbAssignmentsInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutAbAssignmentsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutAbAssignmentsInputSchema) ]),
  where: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const SessionUpdateToOneWithWhereWithoutAbAssignmentsInputSchema: z.ZodType<Prisma.SessionUpdateToOneWithWhereWithoutAbAssignmentsInput> = z.object({
  where: z.lazy(() => SessionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SessionUpdateWithoutAbAssignmentsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutAbAssignmentsInputSchema) ]),
}).strict();

export const SessionUpdateWithoutAbAssignmentsInputSchema: z.ZodType<Prisma.SessionUpdateWithoutAbAssignmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abMetrics: z.lazy(() => ABTestMetricUpdateManyWithoutSessionNestedInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUpdateManyWithoutSessionNestedInputSchema).optional(),
  conversations: z.lazy(() => ConversationUpdateManyWithoutSessionNestedInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUpdateManyWithoutSessionNestedInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUpdateManyWithoutSessionNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateWithoutAbAssignmentsInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutAbAssignmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abMetrics: z.lazy(() => ABTestMetricUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  conversations: z.lazy(() => ConversationUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const ABTestUpsertWithoutAssignmentsInputSchema: z.ZodType<Prisma.ABTestUpsertWithoutAssignmentsInput> = z.object({
  update: z.union([ z.lazy(() => ABTestUpdateWithoutAssignmentsInputSchema),z.lazy(() => ABTestUncheckedUpdateWithoutAssignmentsInputSchema) ]),
  create: z.union([ z.lazy(() => ABTestCreateWithoutAssignmentsInputSchema),z.lazy(() => ABTestUncheckedCreateWithoutAssignmentsInputSchema) ]),
  where: z.lazy(() => ABTestWhereInputSchema).optional()
}).strict();

export const ABTestUpdateToOneWithWhereWithoutAssignmentsInputSchema: z.ZodType<Prisma.ABTestUpdateToOneWithWhereWithoutAssignmentsInput> = z.object({
  where: z.lazy(() => ABTestWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ABTestUpdateWithoutAssignmentsInputSchema),z.lazy(() => ABTestUncheckedUpdateWithoutAssignmentsInputSchema) ]),
}).strict();

export const ABTestUpdateWithoutAssignmentsInputSchema: z.ZodType<Prisma.ABTestUpdateWithoutAssignmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentStatusSchema),z.lazy(() => EnumExperimentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.lazy(() => ABTestMetricUpdateManyWithoutTestNestedInputSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsUpdateManyWithoutTestNestedInputSchema).optional()
}).strict();

export const ABTestUncheckedUpdateWithoutAssignmentsInputSchema: z.ZodType<Prisma.ABTestUncheckedUpdateWithoutAssignmentsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentStatusSchema),z.lazy(() => EnumExperimentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.lazy(() => ABTestMetricUncheckedUpdateManyWithoutTestNestedInputSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsUncheckedUpdateManyWithoutTestNestedInputSchema).optional()
}).strict();

export const SessionCreateWithoutAbMetricsInputSchema: z.ZodType<Prisma.SessionCreateWithoutAbMetricsInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abAssignments: z.lazy(() => ABTestAssignmentCreateNestedManyWithoutSessionInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsCreateNestedManyWithoutSessionInputSchema).optional(),
  conversations: z.lazy(() => ConversationCreateNestedManyWithoutSessionInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricCreateNestedManyWithoutSessionInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventCreateNestedManyWithoutSessionInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const SessionUncheckedCreateWithoutAbMetricsInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutAbMetricsInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  conversations: z.lazy(() => ConversationUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const SessionCreateOrConnectWithoutAbMetricsInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutAbMetricsInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutAbMetricsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutAbMetricsInputSchema) ]),
}).strict();

export const ABTestCreateWithoutMetricsInputSchema: z.ZodType<Prisma.ABTestCreateWithoutMetricsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  status: z.lazy(() => ExperimentStatusSchema),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  assignments: z.lazy(() => ABTestAssignmentCreateNestedManyWithoutTestInputSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsCreateNestedManyWithoutTestInputSchema).optional()
}).strict();

export const ABTestUncheckedCreateWithoutMetricsInputSchema: z.ZodType<Prisma.ABTestUncheckedCreateWithoutMetricsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  status: z.lazy(() => ExperimentStatusSchema),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  assignments: z.lazy(() => ABTestAssignmentUncheckedCreateNestedManyWithoutTestInputSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsUncheckedCreateNestedManyWithoutTestInputSchema).optional()
}).strict();

export const ABTestCreateOrConnectWithoutMetricsInputSchema: z.ZodType<Prisma.ABTestCreateOrConnectWithoutMetricsInput> = z.object({
  where: z.lazy(() => ABTestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ABTestCreateWithoutMetricsInputSchema),z.lazy(() => ABTestUncheckedCreateWithoutMetricsInputSchema) ]),
}).strict();

export const SessionUpsertWithoutAbMetricsInputSchema: z.ZodType<Prisma.SessionUpsertWithoutAbMetricsInput> = z.object({
  update: z.union([ z.lazy(() => SessionUpdateWithoutAbMetricsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutAbMetricsInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutAbMetricsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutAbMetricsInputSchema) ]),
  where: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const SessionUpdateToOneWithWhereWithoutAbMetricsInputSchema: z.ZodType<Prisma.SessionUpdateToOneWithWhereWithoutAbMetricsInput> = z.object({
  where: z.lazy(() => SessionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SessionUpdateWithoutAbMetricsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutAbMetricsInputSchema) ]),
}).strict();

export const SessionUpdateWithoutAbMetricsInputSchema: z.ZodType<Prisma.SessionUpdateWithoutAbMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUpdateManyWithoutSessionNestedInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUpdateManyWithoutSessionNestedInputSchema).optional(),
  conversations: z.lazy(() => ConversationUpdateManyWithoutSessionNestedInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUpdateManyWithoutSessionNestedInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUpdateManyWithoutSessionNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateWithoutAbMetricsInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutAbMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  conversations: z.lazy(() => ConversationUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const ABTestUpsertWithoutMetricsInputSchema: z.ZodType<Prisma.ABTestUpsertWithoutMetricsInput> = z.object({
  update: z.union([ z.lazy(() => ABTestUpdateWithoutMetricsInputSchema),z.lazy(() => ABTestUncheckedUpdateWithoutMetricsInputSchema) ]),
  create: z.union([ z.lazy(() => ABTestCreateWithoutMetricsInputSchema),z.lazy(() => ABTestUncheckedCreateWithoutMetricsInputSchema) ]),
  where: z.lazy(() => ABTestWhereInputSchema).optional()
}).strict();

export const ABTestUpdateToOneWithWhereWithoutMetricsInputSchema: z.ZodType<Prisma.ABTestUpdateToOneWithWhereWithoutMetricsInput> = z.object({
  where: z.lazy(() => ABTestWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ABTestUpdateWithoutMetricsInputSchema),z.lazy(() => ABTestUncheckedUpdateWithoutMetricsInputSchema) ]),
}).strict();

export const ABTestUpdateWithoutMetricsInputSchema: z.ZodType<Prisma.ABTestUpdateWithoutMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentStatusSchema),z.lazy(() => EnumExperimentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  assignments: z.lazy(() => ABTestAssignmentUpdateManyWithoutTestNestedInputSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsUpdateManyWithoutTestNestedInputSchema).optional()
}).strict();

export const ABTestUncheckedUpdateWithoutMetricsInputSchema: z.ZodType<Prisma.ABTestUncheckedUpdateWithoutMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentStatusSchema),z.lazy(() => EnumExperimentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  assignments: z.lazy(() => ABTestAssignmentUncheckedUpdateManyWithoutTestNestedInputSchema).optional(),
  ABTestMetrics: z.lazy(() => ABTestMetricsUncheckedUpdateManyWithoutTestNestedInputSchema).optional()
}).strict();

export const SearchEventCreateWithoutFeedbackInputSchema: z.ZodType<Prisma.SearchEventCreateWithoutFeedbackInput> = z.object({
  id: z.string().cuid().optional(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date().optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  BaseEvent: z.lazy(() => BaseEventCreateNestedManyWithoutSearchEventInputSchema).optional(),
  session: z.lazy(() => SessionCreateNestedOneWithoutSearchEventsInputSchema)
}).strict();

export const SearchEventUncheckedCreateWithoutFeedbackInputSchema: z.ZodType<Prisma.SearchEventUncheckedCreateWithoutFeedbackInput> = z.object({
  id: z.string().cuid().optional(),
  sessionId: z.string(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date().optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  BaseEvent: z.lazy(() => BaseEventUncheckedCreateNestedManyWithoutSearchEventInputSchema).optional()
}).strict();

export const SearchEventCreateOrConnectWithoutFeedbackInputSchema: z.ZodType<Prisma.SearchEventCreateOrConnectWithoutFeedbackInput> = z.object({
  where: z.lazy(() => SearchEventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SearchEventCreateWithoutFeedbackInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutFeedbackInputSchema) ]),
}).strict();

export const SearchEventUpsertWithWhereUniqueWithoutFeedbackInputSchema: z.ZodType<Prisma.SearchEventUpsertWithWhereUniqueWithoutFeedbackInput> = z.object({
  where: z.lazy(() => SearchEventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SearchEventUpdateWithoutFeedbackInputSchema),z.lazy(() => SearchEventUncheckedUpdateWithoutFeedbackInputSchema) ]),
  create: z.union([ z.lazy(() => SearchEventCreateWithoutFeedbackInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutFeedbackInputSchema) ]),
}).strict();

export const SearchEventUpdateWithWhereUniqueWithoutFeedbackInputSchema: z.ZodType<Prisma.SearchEventUpdateWithWhereUniqueWithoutFeedbackInput> = z.object({
  where: z.lazy(() => SearchEventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SearchEventUpdateWithoutFeedbackInputSchema),z.lazy(() => SearchEventUncheckedUpdateWithoutFeedbackInputSchema) ]),
}).strict();

export const SearchEventUpdateManyWithWhereWithoutFeedbackInputSchema: z.ZodType<Prisma.SearchEventUpdateManyWithWhereWithoutFeedbackInput> = z.object({
  where: z.lazy(() => SearchEventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SearchEventUpdateManyMutationInputSchema),z.lazy(() => SearchEventUncheckedUpdateManyWithoutFeedbackInputSchema) ]),
}).strict();

export const SearchEventCreateWithoutBaseEventInputSchema: z.ZodType<Prisma.SearchEventCreateWithoutBaseEventInput> = z.object({
  id: z.string().cuid().optional(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date().optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  session: z.lazy(() => SessionCreateNestedOneWithoutSearchEventsInputSchema),
  feedback: z.lazy(() => SearchFeedbackCreateNestedManyWithoutSearchEventInputSchema).optional()
}).strict();

export const SearchEventUncheckedCreateWithoutBaseEventInputSchema: z.ZodType<Prisma.SearchEventUncheckedCreateWithoutBaseEventInput> = z.object({
  id: z.string().cuid().optional(),
  sessionId: z.string(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date().optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  feedback: z.lazy(() => SearchFeedbackUncheckedCreateNestedManyWithoutSearchEventInputSchema).optional()
}).strict();

export const SearchEventCreateOrConnectWithoutBaseEventInputSchema: z.ZodType<Prisma.SearchEventCreateOrConnectWithoutBaseEventInput> = z.object({
  where: z.lazy(() => SearchEventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SearchEventCreateWithoutBaseEventInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutBaseEventInputSchema) ]),
}).strict();

export const ModelEventCreateWithoutBaseEventInputSchema: z.ZodType<Prisma.ModelEventCreateWithoutBaseEventInput> = z.object({
  id: z.string().cuid().optional(),
  modelId: z.string(),
  version: z.string(),
  parameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  results: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
}).strict();

export const ModelEventUncheckedCreateWithoutBaseEventInputSchema: z.ZodType<Prisma.ModelEventUncheckedCreateWithoutBaseEventInput> = z.object({
  id: z.string().cuid().optional(),
  modelId: z.string(),
  version: z.string(),
  parameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  results: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
}).strict();

export const ModelEventCreateOrConnectWithoutBaseEventInputSchema: z.ZodType<Prisma.ModelEventCreateOrConnectWithoutBaseEventInput> = z.object({
  where: z.lazy(() => ModelEventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ModelEventCreateWithoutBaseEventInputSchema),z.lazy(() => ModelEventUncheckedCreateWithoutBaseEventInputSchema) ]),
}).strict();

export const SearchEventUpsertWithoutBaseEventInputSchema: z.ZodType<Prisma.SearchEventUpsertWithoutBaseEventInput> = z.object({
  update: z.union([ z.lazy(() => SearchEventUpdateWithoutBaseEventInputSchema),z.lazy(() => SearchEventUncheckedUpdateWithoutBaseEventInputSchema) ]),
  create: z.union([ z.lazy(() => SearchEventCreateWithoutBaseEventInputSchema),z.lazy(() => SearchEventUncheckedCreateWithoutBaseEventInputSchema) ]),
  where: z.lazy(() => SearchEventWhereInputSchema).optional()
}).strict();

export const SearchEventUpdateToOneWithWhereWithoutBaseEventInputSchema: z.ZodType<Prisma.SearchEventUpdateToOneWithWhereWithoutBaseEventInput> = z.object({
  where: z.lazy(() => SearchEventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SearchEventUpdateWithoutBaseEventInputSchema),z.lazy(() => SearchEventUncheckedUpdateWithoutBaseEventInputSchema) ]),
}).strict();

export const SearchEventUpdateWithoutBaseEventInputSchema: z.ZodType<Prisma.SearchEventUpdateWithoutBaseEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  session: z.lazy(() => SessionUpdateOneRequiredWithoutSearchEventsNestedInputSchema).optional(),
  feedback: z.lazy(() => SearchFeedbackUpdateManyWithoutSearchEventNestedInputSchema).optional()
}).strict();

export const SearchEventUncheckedUpdateWithoutBaseEventInputSchema: z.ZodType<Prisma.SearchEventUncheckedUpdateWithoutBaseEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  feedback: z.lazy(() => SearchFeedbackUncheckedUpdateManyWithoutSearchEventNestedInputSchema).optional()
}).strict();

export const ModelEventUpsertWithoutBaseEventInputSchema: z.ZodType<Prisma.ModelEventUpsertWithoutBaseEventInput> = z.object({
  update: z.union([ z.lazy(() => ModelEventUpdateWithoutBaseEventInputSchema),z.lazy(() => ModelEventUncheckedUpdateWithoutBaseEventInputSchema) ]),
  create: z.union([ z.lazy(() => ModelEventCreateWithoutBaseEventInputSchema),z.lazy(() => ModelEventUncheckedCreateWithoutBaseEventInputSchema) ]),
  where: z.lazy(() => ModelEventWhereInputSchema).optional()
}).strict();

export const ModelEventUpdateToOneWithWhereWithoutBaseEventInputSchema: z.ZodType<Prisma.ModelEventUpdateToOneWithWhereWithoutBaseEventInput> = z.object({
  where: z.lazy(() => ModelEventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ModelEventUpdateWithoutBaseEventInputSchema),z.lazy(() => ModelEventUncheckedUpdateWithoutBaseEventInputSchema) ]),
}).strict();

export const ModelEventUpdateWithoutBaseEventInputSchema: z.ZodType<Prisma.ModelEventUpdateWithoutBaseEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  version: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  results: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ModelEventUncheckedUpdateWithoutBaseEventInputSchema: z.ZodType<Prisma.ModelEventUncheckedUpdateWithoutBaseEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  version: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  results: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const BaseEventCreateWithoutModelEventInputSchema: z.ZodType<Prisma.BaseEventCreateWithoutModelEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EventTypeSchema),
  timestamp: z.coerce.date(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  source: z.string(),
  priority: z.number().int().optional().nullable(),
  processed: z.boolean().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.string().optional().nullable(),
  searchEvent: z.lazy(() => SearchEventCreateNestedOneWithoutBaseEventInputSchema).optional()
}).strict();

export const BaseEventUncheckedCreateWithoutModelEventInputSchema: z.ZodType<Prisma.BaseEventUncheckedCreateWithoutModelEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EventTypeSchema),
  timestamp: z.coerce.date(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  source: z.string(),
  priority: z.number().int().optional().nullable(),
  processed: z.boolean().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.string().optional().nullable(),
  searchEventid: z.string().optional().nullable()
}).strict();

export const BaseEventCreateOrConnectWithoutModelEventInputSchema: z.ZodType<Prisma.BaseEventCreateOrConnectWithoutModelEventInput> = z.object({
  where: z.lazy(() => BaseEventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BaseEventCreateWithoutModelEventInputSchema),z.lazy(() => BaseEventUncheckedCreateWithoutModelEventInputSchema) ]),
}).strict();

export const BaseEventUpsertWithoutModelEventInputSchema: z.ZodType<Prisma.BaseEventUpsertWithoutModelEventInput> = z.object({
  update: z.union([ z.lazy(() => BaseEventUpdateWithoutModelEventInputSchema),z.lazy(() => BaseEventUncheckedUpdateWithoutModelEventInputSchema) ]),
  create: z.union([ z.lazy(() => BaseEventCreateWithoutModelEventInputSchema),z.lazy(() => BaseEventUncheckedCreateWithoutModelEventInputSchema) ]),
  where: z.lazy(() => BaseEventWhereInputSchema).optional()
}).strict();

export const BaseEventUpdateToOneWithWhereWithoutModelEventInputSchema: z.ZodType<Prisma.BaseEventUpdateToOneWithWhereWithoutModelEventInput> = z.object({
  where: z.lazy(() => BaseEventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => BaseEventUpdateWithoutModelEventInputSchema),z.lazy(() => BaseEventUncheckedUpdateWithoutModelEventInputSchema) ]),
}).strict();

export const BaseEventUpdateWithoutModelEventInputSchema: z.ZodType<Prisma.BaseEventUpdateWithoutModelEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processed: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  searchEvent: z.lazy(() => SearchEventUpdateOneWithoutBaseEventNestedInputSchema).optional()
}).strict();

export const BaseEventUncheckedUpdateWithoutModelEventInputSchema: z.ZodType<Prisma.BaseEventUncheckedUpdateWithoutModelEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processed: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  searchEventid: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SignalCreateWithoutProcessedSignalInputSchema: z.ZodType<Prisma.SignalCreateWithoutProcessedSignalInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => SignalTypeSchema),
  source: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  priority: z.number().int().optional().nullable(),
  retries: z.number().int().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  processed: z.boolean().optional(),
  processedAt: z.coerce.date().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.string().optional().nullable(),
  manual: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  strength: z.number(),
  SessionToSignal: z.lazy(() => SessionToSignalCreateNestedManyWithoutSignalInputSchema).optional()
}).strict();

export const SignalUncheckedCreateWithoutProcessedSignalInputSchema: z.ZodType<Prisma.SignalUncheckedCreateWithoutProcessedSignalInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => SignalTypeSchema),
  source: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  priority: z.number().int().optional().nullable(),
  retries: z.number().int().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  processed: z.boolean().optional(),
  processedAt: z.coerce.date().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.string().optional().nullable(),
  manual: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  strength: z.number(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedCreateNestedManyWithoutSignalInputSchema).optional()
}).strict();

export const SignalCreateOrConnectWithoutProcessedSignalInputSchema: z.ZodType<Prisma.SignalCreateOrConnectWithoutProcessedSignalInput> = z.object({
  where: z.lazy(() => SignalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SignalCreateWithoutProcessedSignalInputSchema),z.lazy(() => SignalUncheckedCreateWithoutProcessedSignalInputSchema) ]),
}).strict();

export const SignalUpsertWithoutProcessedSignalInputSchema: z.ZodType<Prisma.SignalUpsertWithoutProcessedSignalInput> = z.object({
  update: z.union([ z.lazy(() => SignalUpdateWithoutProcessedSignalInputSchema),z.lazy(() => SignalUncheckedUpdateWithoutProcessedSignalInputSchema) ]),
  create: z.union([ z.lazy(() => SignalCreateWithoutProcessedSignalInputSchema),z.lazy(() => SignalUncheckedCreateWithoutProcessedSignalInputSchema) ]),
  where: z.lazy(() => SignalWhereInputSchema).optional()
}).strict();

export const SignalUpdateToOneWithWhereWithoutProcessedSignalInputSchema: z.ZodType<Prisma.SignalUpdateToOneWithWhereWithoutProcessedSignalInput> = z.object({
  where: z.lazy(() => SignalWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SignalUpdateWithoutProcessedSignalInputSchema),z.lazy(() => SignalUncheckedUpdateWithoutProcessedSignalInputSchema) ]),
}).strict();

export const SignalUpdateWithoutProcessedSignalInputSchema: z.ZodType<Prisma.SignalUpdateWithoutProcessedSignalInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => SignalTypeSchema),z.lazy(() => EnumSignalTypeFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  retries: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  strength: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUpdateManyWithoutSignalNestedInputSchema).optional()
}).strict();

export const SignalUncheckedUpdateWithoutProcessedSignalInputSchema: z.ZodType<Prisma.SignalUncheckedUpdateWithoutProcessedSignalInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => SignalTypeSchema),z.lazy(() => EnumSignalTypeFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  retries: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  strength: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedUpdateManyWithoutSignalNestedInputSchema).optional()
}).strict();

export const LearningMetricCreateWithoutModelInputSchema: z.ZodType<Prisma.LearningMetricCreateWithoutModelInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => MetricTypeSchema),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  interval: z.string(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.string(),
  aggregated: z.boolean().optional(),
  count: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  session: z.lazy(() => SessionCreateNestedOneWithoutLearningMetricsInputSchema).optional()
}).strict();

export const LearningMetricUncheckedCreateWithoutModelInputSchema: z.ZodType<Prisma.LearningMetricUncheckedCreateWithoutModelInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => MetricTypeSchema),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  interval: z.string(),
  sessionId: z.string().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.string(),
  aggregated: z.boolean().optional(),
  count: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LearningMetricCreateOrConnectWithoutModelInputSchema: z.ZodType<Prisma.LearningMetricCreateOrConnectWithoutModelInput> = z.object({
  where: z.lazy(() => LearningMetricWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LearningMetricCreateWithoutModelInputSchema),z.lazy(() => LearningMetricUncheckedCreateWithoutModelInputSchema) ]),
}).strict();

export const LearningMetricCreateManyModelInputEnvelopeSchema: z.ZodType<Prisma.LearningMetricCreateManyModelInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LearningMetricCreateManyModelInputSchema),z.lazy(() => LearningMetricCreateManyModelInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ModelVersionCreateWithoutConfigInputSchema: z.ZodType<Prisma.ModelVersionCreateWithoutConfigInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  artifactPath: z.string(),
  parentVersion: z.string().optional().nullable()
}).strict();

export const ModelVersionUncheckedCreateWithoutConfigInputSchema: z.ZodType<Prisma.ModelVersionUncheckedCreateWithoutConfigInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  artifactPath: z.string(),
  parentVersion: z.string().optional().nullable()
}).strict();

export const ModelVersionCreateOrConnectWithoutConfigInputSchema: z.ZodType<Prisma.ModelVersionCreateOrConnectWithoutConfigInput> = z.object({
  where: z.lazy(() => ModelVersionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ModelVersionCreateWithoutConfigInputSchema),z.lazy(() => ModelVersionUncheckedCreateWithoutConfigInputSchema) ]),
}).strict();

export const ModelVersionCreateManyConfigInputEnvelopeSchema: z.ZodType<Prisma.ModelVersionCreateManyConfigInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ModelVersionCreateManyConfigInputSchema),z.lazy(() => ModelVersionCreateManyConfigInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LearningMetricUpsertWithWhereUniqueWithoutModelInputSchema: z.ZodType<Prisma.LearningMetricUpsertWithWhereUniqueWithoutModelInput> = z.object({
  where: z.lazy(() => LearningMetricWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LearningMetricUpdateWithoutModelInputSchema),z.lazy(() => LearningMetricUncheckedUpdateWithoutModelInputSchema) ]),
  create: z.union([ z.lazy(() => LearningMetricCreateWithoutModelInputSchema),z.lazy(() => LearningMetricUncheckedCreateWithoutModelInputSchema) ]),
}).strict();

export const LearningMetricUpdateWithWhereUniqueWithoutModelInputSchema: z.ZodType<Prisma.LearningMetricUpdateWithWhereUniqueWithoutModelInput> = z.object({
  where: z.lazy(() => LearningMetricWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LearningMetricUpdateWithoutModelInputSchema),z.lazy(() => LearningMetricUncheckedUpdateWithoutModelInputSchema) ]),
}).strict();

export const LearningMetricUpdateManyWithWhereWithoutModelInputSchema: z.ZodType<Prisma.LearningMetricUpdateManyWithWhereWithoutModelInput> = z.object({
  where: z.lazy(() => LearningMetricScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LearningMetricUpdateManyMutationInputSchema),z.lazy(() => LearningMetricUncheckedUpdateManyWithoutModelInputSchema) ]),
}).strict();

export const ModelVersionUpsertWithWhereUniqueWithoutConfigInputSchema: z.ZodType<Prisma.ModelVersionUpsertWithWhereUniqueWithoutConfigInput> = z.object({
  where: z.lazy(() => ModelVersionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ModelVersionUpdateWithoutConfigInputSchema),z.lazy(() => ModelVersionUncheckedUpdateWithoutConfigInputSchema) ]),
  create: z.union([ z.lazy(() => ModelVersionCreateWithoutConfigInputSchema),z.lazy(() => ModelVersionUncheckedCreateWithoutConfigInputSchema) ]),
}).strict();

export const ModelVersionUpdateWithWhereUniqueWithoutConfigInputSchema: z.ZodType<Prisma.ModelVersionUpdateWithWhereUniqueWithoutConfigInput> = z.object({
  where: z.lazy(() => ModelVersionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ModelVersionUpdateWithoutConfigInputSchema),z.lazy(() => ModelVersionUncheckedUpdateWithoutConfigInputSchema) ]),
}).strict();

export const ModelVersionUpdateManyWithWhereWithoutConfigInputSchema: z.ZodType<Prisma.ModelVersionUpdateManyWithWhereWithoutConfigInput> = z.object({
  where: z.lazy(() => ModelVersionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ModelVersionUpdateManyMutationInputSchema),z.lazy(() => ModelVersionUncheckedUpdateManyWithoutConfigInputSchema) ]),
}).strict();

export const ModelVersionScalarWhereInputSchema: z.ZodType<Prisma.ModelVersionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ModelVersionScalarWhereInputSchema),z.lazy(() => ModelVersionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelVersionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelVersionScalarWhereInputSchema),z.lazy(() => ModelVersionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  configId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metrics: z.lazy(() => JsonFilterSchema).optional(),
  artifactPath: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  parentVersion: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ModelConfigCreateWithoutModelVersionsInputSchema: z.ZodType<Prisma.ModelConfigCreateWithoutModelVersionsInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => ModelTypeSchema),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  features: z.union([ z.lazy(() => ModelConfigCreatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metrics: z.lazy(() => LearningMetricCreateNestedManyWithoutModelInputSchema).optional()
}).strict();

export const ModelConfigUncheckedCreateWithoutModelVersionsInputSchema: z.ZodType<Prisma.ModelConfigUncheckedCreateWithoutModelVersionsInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => ModelTypeSchema),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  features: z.union([ z.lazy(() => ModelConfigCreatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metrics: z.lazy(() => LearningMetricUncheckedCreateNestedManyWithoutModelInputSchema).optional()
}).strict();

export const ModelConfigCreateOrConnectWithoutModelVersionsInputSchema: z.ZodType<Prisma.ModelConfigCreateOrConnectWithoutModelVersionsInput> = z.object({
  where: z.lazy(() => ModelConfigWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ModelConfigCreateWithoutModelVersionsInputSchema),z.lazy(() => ModelConfigUncheckedCreateWithoutModelVersionsInputSchema) ]),
}).strict();

export const ModelConfigUpsertWithoutModelVersionsInputSchema: z.ZodType<Prisma.ModelConfigUpsertWithoutModelVersionsInput> = z.object({
  update: z.union([ z.lazy(() => ModelConfigUpdateWithoutModelVersionsInputSchema),z.lazy(() => ModelConfigUncheckedUpdateWithoutModelVersionsInputSchema) ]),
  create: z.union([ z.lazy(() => ModelConfigCreateWithoutModelVersionsInputSchema),z.lazy(() => ModelConfigUncheckedCreateWithoutModelVersionsInputSchema) ]),
  where: z.lazy(() => ModelConfigWhereInputSchema).optional()
}).strict();

export const ModelConfigUpdateToOneWithWhereWithoutModelVersionsInputSchema: z.ZodType<Prisma.ModelConfigUpdateToOneWithWhereWithoutModelVersionsInput> = z.object({
  where: z.lazy(() => ModelConfigWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ModelConfigUpdateWithoutModelVersionsInputSchema),z.lazy(() => ModelConfigUncheckedUpdateWithoutModelVersionsInputSchema) ]),
}).strict();

export const ModelConfigUpdateWithoutModelVersionsInputSchema: z.ZodType<Prisma.ModelConfigUpdateWithoutModelVersionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  features: z.union([ z.lazy(() => ModelConfigUpdatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metrics: z.lazy(() => LearningMetricUpdateManyWithoutModelNestedInputSchema).optional()
}).strict();

export const ModelConfigUncheckedUpdateWithoutModelVersionsInputSchema: z.ZodType<Prisma.ModelConfigUncheckedUpdateWithoutModelVersionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  features: z.union([ z.lazy(() => ModelConfigUpdatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metrics: z.lazy(() => LearningMetricUncheckedUpdateManyWithoutModelNestedInputSchema).optional()
}).strict();

export const ModelStateCreateWithoutMetricsInputSchema: z.ZodType<Prisma.ModelStateCreateWithoutMetricsInput> = z.object({
  id: z.string().cuid().optional(),
  versionId: z.string(),
  weights: z.union([ z.lazy(() => ModelStateCreateweightsInputSchema),z.number().array() ]).optional(),
  bias: z.number(),
  scaler: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  featureNames: z.union([ z.lazy(() => ModelStateCreatefeatureNamesInputSchema),z.string().array() ]).optional(),
  isTrained: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  modelType: z.lazy(() => ModelTypeSchema).optional(),
  hyperparameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  currentEpoch: z.number().int().optional(),
  trainingProgress: z.number().optional(),
  lastTrainingError: z.string().optional().nullable()
}).strict();

export const ModelStateUncheckedCreateWithoutMetricsInputSchema: z.ZodType<Prisma.ModelStateUncheckedCreateWithoutMetricsInput> = z.object({
  id: z.string().cuid().optional(),
  versionId: z.string(),
  weights: z.union([ z.lazy(() => ModelStateCreateweightsInputSchema),z.number().array() ]).optional(),
  bias: z.number(),
  scaler: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  featureNames: z.union([ z.lazy(() => ModelStateCreatefeatureNamesInputSchema),z.string().array() ]).optional(),
  isTrained: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  modelType: z.lazy(() => ModelTypeSchema).optional(),
  hyperparameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  currentEpoch: z.number().int().optional(),
  trainingProgress: z.number().optional(),
  lastTrainingError: z.string().optional().nullable()
}).strict();

export const ModelStateCreateOrConnectWithoutMetricsInputSchema: z.ZodType<Prisma.ModelStateCreateOrConnectWithoutMetricsInput> = z.object({
  where: z.lazy(() => ModelStateWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ModelStateCreateWithoutMetricsInputSchema),z.lazy(() => ModelStateUncheckedCreateWithoutMetricsInputSchema) ]),
}).strict();

export const ModelStateUpsertWithWhereUniqueWithoutMetricsInputSchema: z.ZodType<Prisma.ModelStateUpsertWithWhereUniqueWithoutMetricsInput> = z.object({
  where: z.lazy(() => ModelStateWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ModelStateUpdateWithoutMetricsInputSchema),z.lazy(() => ModelStateUncheckedUpdateWithoutMetricsInputSchema) ]),
  create: z.union([ z.lazy(() => ModelStateCreateWithoutMetricsInputSchema),z.lazy(() => ModelStateUncheckedCreateWithoutMetricsInputSchema) ]),
}).strict();

export const ModelStateUpdateWithWhereUniqueWithoutMetricsInputSchema: z.ZodType<Prisma.ModelStateUpdateWithWhereUniqueWithoutMetricsInput> = z.object({
  where: z.lazy(() => ModelStateWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ModelStateUpdateWithoutMetricsInputSchema),z.lazy(() => ModelStateUncheckedUpdateWithoutMetricsInputSchema) ]),
}).strict();

export const ModelStateUpdateManyWithWhereWithoutMetricsInputSchema: z.ZodType<Prisma.ModelStateUpdateManyWithWhereWithoutMetricsInput> = z.object({
  where: z.lazy(() => ModelStateScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ModelStateUpdateManyMutationInputSchema),z.lazy(() => ModelStateUncheckedUpdateManyWithoutMetricsInputSchema) ]),
}).strict();

export const ModelStateScalarWhereInputSchema: z.ZodType<Prisma.ModelStateScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ModelStateScalarWhereInputSchema),z.lazy(() => ModelStateScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelStateScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelStateScalarWhereInputSchema),z.lazy(() => ModelStateScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  versionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  weights: z.lazy(() => FloatNullableListFilterSchema).optional(),
  bias: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  scaler: z.lazy(() => JsonFilterSchema).optional(),
  featureNames: z.lazy(() => StringNullableListFilterSchema).optional(),
  isTrained: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  modelType: z.union([ z.lazy(() => EnumModelTypeFilterSchema),z.lazy(() => ModelTypeSchema) ]).optional(),
  hyperparameters: z.lazy(() => JsonNullableFilterSchema).optional(),
  currentEpoch: z.union([ z.lazy(() => IntFilterSchema),z.number() ]).optional(),
  trainingProgress: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  lastTrainingError: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ModelMetricsCreateWithoutModelStateInputSchema: z.ZodType<Prisma.ModelMetricsCreateWithoutModelStateInput> = z.object({
  id: z.string().cuid().optional(),
  modelVersionId: z.string(),
  accuracy: z.number(),
  precision: z.number(),
  recall: z.number(),
  f1Score: z.number(),
  latencyMs: z.number(),
  loss: z.number(),
  validationMetrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  customMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.coerce.date().optional()
}).strict();

export const ModelMetricsUncheckedCreateWithoutModelStateInputSchema: z.ZodType<Prisma.ModelMetricsUncheckedCreateWithoutModelStateInput> = z.object({
  id: z.string().cuid().optional(),
  modelVersionId: z.string(),
  accuracy: z.number(),
  precision: z.number(),
  recall: z.number(),
  f1Score: z.number(),
  latencyMs: z.number(),
  loss: z.number(),
  validationMetrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  customMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.coerce.date().optional()
}).strict();

export const ModelMetricsCreateOrConnectWithoutModelStateInputSchema: z.ZodType<Prisma.ModelMetricsCreateOrConnectWithoutModelStateInput> = z.object({
  where: z.lazy(() => ModelMetricsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ModelMetricsCreateWithoutModelStateInputSchema),z.lazy(() => ModelMetricsUncheckedCreateWithoutModelStateInputSchema) ]),
}).strict();

export const ModelMetricsUpsertWithWhereUniqueWithoutModelStateInputSchema: z.ZodType<Prisma.ModelMetricsUpsertWithWhereUniqueWithoutModelStateInput> = z.object({
  where: z.lazy(() => ModelMetricsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ModelMetricsUpdateWithoutModelStateInputSchema),z.lazy(() => ModelMetricsUncheckedUpdateWithoutModelStateInputSchema) ]),
  create: z.union([ z.lazy(() => ModelMetricsCreateWithoutModelStateInputSchema),z.lazy(() => ModelMetricsUncheckedCreateWithoutModelStateInputSchema) ]),
}).strict();

export const ModelMetricsUpdateWithWhereUniqueWithoutModelStateInputSchema: z.ZodType<Prisma.ModelMetricsUpdateWithWhereUniqueWithoutModelStateInput> = z.object({
  where: z.lazy(() => ModelMetricsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ModelMetricsUpdateWithoutModelStateInputSchema),z.lazy(() => ModelMetricsUncheckedUpdateWithoutModelStateInputSchema) ]),
}).strict();

export const ModelMetricsUpdateManyWithWhereWithoutModelStateInputSchema: z.ZodType<Prisma.ModelMetricsUpdateManyWithWhereWithoutModelStateInput> = z.object({
  where: z.lazy(() => ModelMetricsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ModelMetricsUpdateManyMutationInputSchema),z.lazy(() => ModelMetricsUncheckedUpdateManyWithoutModelStateInputSchema) ]),
}).strict();

export const ModelMetricsScalarWhereInputSchema: z.ZodType<Prisma.ModelMetricsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ModelMetricsScalarWhereInputSchema),z.lazy(() => ModelMetricsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ModelMetricsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ModelMetricsScalarWhereInputSchema),z.lazy(() => ModelMetricsScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  modelVersionId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  accuracy: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  precision: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  recall: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  f1Score: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  latencyMs: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  loss: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  validationMetrics: z.lazy(() => JsonFilterSchema).optional(),
  customMetrics: z.lazy(() => JsonNullableFilterSchema).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const BaseEventCreateWithoutSearchEventInputSchema: z.ZodType<Prisma.BaseEventCreateWithoutSearchEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EventTypeSchema),
  timestamp: z.coerce.date(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  source: z.string(),
  priority: z.number().int().optional().nullable(),
  processed: z.boolean().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.string().optional().nullable(),
  modelEvent: z.lazy(() => ModelEventCreateNestedOneWithoutBaseEventInputSchema).optional()
}).strict();

export const BaseEventUncheckedCreateWithoutSearchEventInputSchema: z.ZodType<Prisma.BaseEventUncheckedCreateWithoutSearchEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EventTypeSchema),
  timestamp: z.coerce.date(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  source: z.string(),
  priority: z.number().int().optional().nullable(),
  processed: z.boolean().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.string().optional().nullable(),
  modelEvent: z.lazy(() => ModelEventUncheckedCreateNestedOneWithoutBaseEventInputSchema).optional()
}).strict();

export const BaseEventCreateOrConnectWithoutSearchEventInputSchema: z.ZodType<Prisma.BaseEventCreateOrConnectWithoutSearchEventInput> = z.object({
  where: z.lazy(() => BaseEventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => BaseEventCreateWithoutSearchEventInputSchema),z.lazy(() => BaseEventUncheckedCreateWithoutSearchEventInputSchema) ]),
}).strict();

export const BaseEventCreateManySearchEventInputEnvelopeSchema: z.ZodType<Prisma.BaseEventCreateManySearchEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => BaseEventCreateManySearchEventInputSchema),z.lazy(() => BaseEventCreateManySearchEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SessionCreateWithoutSearchEventsInputSchema: z.ZodType<Prisma.SessionCreateWithoutSearchEventsInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abAssignments: z.lazy(() => ABTestAssignmentCreateNestedManyWithoutSessionInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricCreateNestedManyWithoutSessionInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsCreateNestedManyWithoutSessionInputSchema).optional(),
  conversations: z.lazy(() => ConversationCreateNestedManyWithoutSessionInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricCreateNestedManyWithoutSessionInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const SessionUncheckedCreateWithoutSearchEventsInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutSearchEventsInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  conversations: z.lazy(() => ConversationUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const SessionCreateOrConnectWithoutSearchEventsInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutSearchEventsInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutSearchEventsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutSearchEventsInputSchema) ]),
}).strict();

export const SearchFeedbackCreateWithoutSearchEventInputSchema: z.ZodType<Prisma.SearchFeedbackCreateWithoutSearchEventInput> = z.object({
  id: z.string().cuid().optional(),
  searchId: z.string(),
  queryHash: z.string(),
  resultId: z.string(),
  relevanceScore: z.number(),
  userAction: z.string(),
  timestamp: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SearchFeedbackUncheckedCreateWithoutSearchEventInputSchema: z.ZodType<Prisma.SearchFeedbackUncheckedCreateWithoutSearchEventInput> = z.object({
  id: z.string().cuid().optional(),
  searchId: z.string(),
  queryHash: z.string(),
  resultId: z.string(),
  relevanceScore: z.number(),
  userAction: z.string(),
  timestamp: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SearchFeedbackCreateOrConnectWithoutSearchEventInputSchema: z.ZodType<Prisma.SearchFeedbackCreateOrConnectWithoutSearchEventInput> = z.object({
  where: z.lazy(() => SearchFeedbackWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SearchFeedbackCreateWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackUncheckedCreateWithoutSearchEventInputSchema) ]),
}).strict();

export const BaseEventUpsertWithWhereUniqueWithoutSearchEventInputSchema: z.ZodType<Prisma.BaseEventUpsertWithWhereUniqueWithoutSearchEventInput> = z.object({
  where: z.lazy(() => BaseEventWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => BaseEventUpdateWithoutSearchEventInputSchema),z.lazy(() => BaseEventUncheckedUpdateWithoutSearchEventInputSchema) ]),
  create: z.union([ z.lazy(() => BaseEventCreateWithoutSearchEventInputSchema),z.lazy(() => BaseEventUncheckedCreateWithoutSearchEventInputSchema) ]),
}).strict();

export const BaseEventUpdateWithWhereUniqueWithoutSearchEventInputSchema: z.ZodType<Prisma.BaseEventUpdateWithWhereUniqueWithoutSearchEventInput> = z.object({
  where: z.lazy(() => BaseEventWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => BaseEventUpdateWithoutSearchEventInputSchema),z.lazy(() => BaseEventUncheckedUpdateWithoutSearchEventInputSchema) ]),
}).strict();

export const BaseEventUpdateManyWithWhereWithoutSearchEventInputSchema: z.ZodType<Prisma.BaseEventUpdateManyWithWhereWithoutSearchEventInput> = z.object({
  where: z.lazy(() => BaseEventScalarWhereInputSchema),
  data: z.union([ z.lazy(() => BaseEventUpdateManyMutationInputSchema),z.lazy(() => BaseEventUncheckedUpdateManyWithoutSearchEventInputSchema) ]),
}).strict();

export const BaseEventScalarWhereInputSchema: z.ZodType<Prisma.BaseEventScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => BaseEventScalarWhereInputSchema),z.lazy(() => BaseEventScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => BaseEventScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => BaseEventScalarWhereInputSchema),z.lazy(() => BaseEventScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumEventTypeFilterSchema),z.lazy(() => EventTypeSchema) ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  data: z.lazy(() => JsonFilterSchema).optional(),
  source: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  priority: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  processed: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  correlationId: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  searchEventid: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const SessionUpsertWithoutSearchEventsInputSchema: z.ZodType<Prisma.SessionUpsertWithoutSearchEventsInput> = z.object({
  update: z.union([ z.lazy(() => SessionUpdateWithoutSearchEventsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutSearchEventsInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutSearchEventsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutSearchEventsInputSchema) ]),
  where: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const SessionUpdateToOneWithWhereWithoutSearchEventsInputSchema: z.ZodType<Prisma.SessionUpdateToOneWithWhereWithoutSearchEventsInput> = z.object({
  where: z.lazy(() => SessionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SessionUpdateWithoutSearchEventsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutSearchEventsInputSchema) ]),
}).strict();

export const SessionUpdateWithoutSearchEventsInputSchema: z.ZodType<Prisma.SessionUpdateWithoutSearchEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUpdateManyWithoutSessionNestedInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUpdateManyWithoutSessionNestedInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUpdateManyWithoutSessionNestedInputSchema).optional(),
  conversations: z.lazy(() => ConversationUpdateManyWithoutSessionNestedInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUpdateManyWithoutSessionNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateWithoutSearchEventsInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutSearchEventsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  conversations: z.lazy(() => ConversationUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SearchFeedbackUpsertWithWhereUniqueWithoutSearchEventInputSchema: z.ZodType<Prisma.SearchFeedbackUpsertWithWhereUniqueWithoutSearchEventInput> = z.object({
  where: z.lazy(() => SearchFeedbackWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SearchFeedbackUpdateWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackUncheckedUpdateWithoutSearchEventInputSchema) ]),
  create: z.union([ z.lazy(() => SearchFeedbackCreateWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackUncheckedCreateWithoutSearchEventInputSchema) ]),
}).strict();

export const SearchFeedbackUpdateWithWhereUniqueWithoutSearchEventInputSchema: z.ZodType<Prisma.SearchFeedbackUpdateWithWhereUniqueWithoutSearchEventInput> = z.object({
  where: z.lazy(() => SearchFeedbackWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SearchFeedbackUpdateWithoutSearchEventInputSchema),z.lazy(() => SearchFeedbackUncheckedUpdateWithoutSearchEventInputSchema) ]),
}).strict();

export const SearchFeedbackUpdateManyWithWhereWithoutSearchEventInputSchema: z.ZodType<Prisma.SearchFeedbackUpdateManyWithWhereWithoutSearchEventInput> = z.object({
  where: z.lazy(() => SearchFeedbackScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SearchFeedbackUpdateManyMutationInputSchema),z.lazy(() => SearchFeedbackUncheckedUpdateManyWithoutSearchEventInputSchema) ]),
}).strict();

export const SearchFeedbackScalarWhereInputSchema: z.ZodType<Prisma.SearchFeedbackScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SearchFeedbackScalarWhereInputSchema),z.lazy(() => SearchFeedbackScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SearchFeedbackScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SearchFeedbackScalarWhereInputSchema),z.lazy(() => SearchFeedbackScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  searchId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  queryHash: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  resultId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  relevanceScore: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  userAction: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  timestamp: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional()
}).strict();

export const ABTestCreateWithoutABTestMetricsInputSchema: z.ZodType<Prisma.ABTestCreateWithoutABTestMetricsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  status: z.lazy(() => ExperimentStatusSchema),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  assignments: z.lazy(() => ABTestAssignmentCreateNestedManyWithoutTestInputSchema).optional(),
  metrics: z.lazy(() => ABTestMetricCreateNestedManyWithoutTestInputSchema).optional()
}).strict();

export const ABTestUncheckedCreateWithoutABTestMetricsInputSchema: z.ZodType<Prisma.ABTestUncheckedCreateWithoutABTestMetricsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string(),
  description: z.string().optional().nullable(),
  startDate: z.coerce.date(),
  endDate: z.coerce.date(),
  status: z.lazy(() => ExperimentStatusSchema),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  assignments: z.lazy(() => ABTestAssignmentUncheckedCreateNestedManyWithoutTestInputSchema).optional(),
  metrics: z.lazy(() => ABTestMetricUncheckedCreateNestedManyWithoutTestInputSchema).optional()
}).strict();

export const ABTestCreateOrConnectWithoutABTestMetricsInputSchema: z.ZodType<Prisma.ABTestCreateOrConnectWithoutABTestMetricsInput> = z.object({
  where: z.lazy(() => ABTestWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ABTestCreateWithoutABTestMetricsInputSchema),z.lazy(() => ABTestUncheckedCreateWithoutABTestMetricsInputSchema) ]),
}).strict();

export const ABTestUpsertWithoutABTestMetricsInputSchema: z.ZodType<Prisma.ABTestUpsertWithoutABTestMetricsInput> = z.object({
  update: z.union([ z.lazy(() => ABTestUpdateWithoutABTestMetricsInputSchema),z.lazy(() => ABTestUncheckedUpdateWithoutABTestMetricsInputSchema) ]),
  create: z.union([ z.lazy(() => ABTestCreateWithoutABTestMetricsInputSchema),z.lazy(() => ABTestUncheckedCreateWithoutABTestMetricsInputSchema) ]),
  where: z.lazy(() => ABTestWhereInputSchema).optional()
}).strict();

export const ABTestUpdateToOneWithWhereWithoutABTestMetricsInputSchema: z.ZodType<Prisma.ABTestUpdateToOneWithWhereWithoutABTestMetricsInput> = z.object({
  where: z.lazy(() => ABTestWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ABTestUpdateWithoutABTestMetricsInputSchema),z.lazy(() => ABTestUncheckedUpdateWithoutABTestMetricsInputSchema) ]),
}).strict();

export const ABTestUpdateWithoutABTestMetricsInputSchema: z.ZodType<Prisma.ABTestUpdateWithoutABTestMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentStatusSchema),z.lazy(() => EnumExperimentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  assignments: z.lazy(() => ABTestAssignmentUpdateManyWithoutTestNestedInputSchema).optional(),
  metrics: z.lazy(() => ABTestMetricUpdateManyWithoutTestNestedInputSchema).optional()
}).strict();

export const ABTestUncheckedUpdateWithoutABTestMetricsInputSchema: z.ZodType<Prisma.ABTestUncheckedUpdateWithoutABTestMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  description: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endDate: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => ExperimentStatusSchema),z.lazy(() => EnumExperimentStatusFieldUpdateOperationsInputSchema) ]).optional(),
  configuration: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  assignments: z.lazy(() => ABTestAssignmentUncheckedUpdateManyWithoutTestNestedInputSchema).optional(),
  metrics: z.lazy(() => ABTestMetricUncheckedUpdateManyWithoutTestNestedInputSchema).optional()
}).strict();

export const ProcessedSignalCreateWithoutSignalInputSchema: z.ZodType<Prisma.ProcessedSignalCreateWithoutSignalInput> = z.object({
  id: z.string().cuid().optional(),
  originalSignalId: z.string(),
  processingTime: z.number(),
  transformations: z.union([ z.lazy(() => ProcessedSignalCreatetransformationsInputSchema),z.string().array() ]).optional(),
  confidence: z.number(),
  processed: z.boolean().optional(),
  processingMetadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ProcessedSignalUncheckedCreateWithoutSignalInputSchema: z.ZodType<Prisma.ProcessedSignalUncheckedCreateWithoutSignalInput> = z.object({
  id: z.string().cuid().optional(),
  originalSignalId: z.string(),
  processingTime: z.number(),
  transformations: z.union([ z.lazy(() => ProcessedSignalCreatetransformationsInputSchema),z.string().array() ]).optional(),
  confidence: z.number(),
  processed: z.boolean().optional(),
  processingMetadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ProcessedSignalCreateOrConnectWithoutSignalInputSchema: z.ZodType<Prisma.ProcessedSignalCreateOrConnectWithoutSignalInput> = z.object({
  where: z.lazy(() => ProcessedSignalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProcessedSignalCreateWithoutSignalInputSchema),z.lazy(() => ProcessedSignalUncheckedCreateWithoutSignalInputSchema) ]),
}).strict();

export const ProcessedSignalCreateManySignalInputEnvelopeSchema: z.ZodType<Prisma.ProcessedSignalCreateManySignalInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => ProcessedSignalCreateManySignalInputSchema),z.lazy(() => ProcessedSignalCreateManySignalInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SessionToSignalCreateWithoutSignalInputSchema: z.ZodType<Prisma.SessionToSignalCreateWithoutSignalInput> = z.object({
  sessions: z.lazy(() => SessionCreateNestedOneWithoutSessionToSignalInputSchema)
}).strict();

export const SessionToSignalUncheckedCreateWithoutSignalInputSchema: z.ZodType<Prisma.SessionToSignalUncheckedCreateWithoutSignalInput> = z.object({
  A: z.string()
}).strict();

export const SessionToSignalCreateOrConnectWithoutSignalInputSchema: z.ZodType<Prisma.SessionToSignalCreateOrConnectWithoutSignalInput> = z.object({
  where: z.lazy(() => SessionToSignalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionToSignalCreateWithoutSignalInputSchema),z.lazy(() => SessionToSignalUncheckedCreateWithoutSignalInputSchema) ]),
}).strict();

export const SessionToSignalCreateManySignalInputEnvelopeSchema: z.ZodType<Prisma.SessionToSignalCreateManySignalInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => SessionToSignalCreateManySignalInputSchema),z.lazy(() => SessionToSignalCreateManySignalInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProcessedSignalUpsertWithWhereUniqueWithoutSignalInputSchema: z.ZodType<Prisma.ProcessedSignalUpsertWithWhereUniqueWithoutSignalInput> = z.object({
  where: z.lazy(() => ProcessedSignalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProcessedSignalUpdateWithoutSignalInputSchema),z.lazy(() => ProcessedSignalUncheckedUpdateWithoutSignalInputSchema) ]),
  create: z.union([ z.lazy(() => ProcessedSignalCreateWithoutSignalInputSchema),z.lazy(() => ProcessedSignalUncheckedCreateWithoutSignalInputSchema) ]),
}).strict();

export const ProcessedSignalUpdateWithWhereUniqueWithoutSignalInputSchema: z.ZodType<Prisma.ProcessedSignalUpdateWithWhereUniqueWithoutSignalInput> = z.object({
  where: z.lazy(() => ProcessedSignalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProcessedSignalUpdateWithoutSignalInputSchema),z.lazy(() => ProcessedSignalUncheckedUpdateWithoutSignalInputSchema) ]),
}).strict();

export const ProcessedSignalUpdateManyWithWhereWithoutSignalInputSchema: z.ZodType<Prisma.ProcessedSignalUpdateManyWithWhereWithoutSignalInput> = z.object({
  where: z.lazy(() => ProcessedSignalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProcessedSignalUpdateManyMutationInputSchema),z.lazy(() => ProcessedSignalUncheckedUpdateManyWithoutSignalInputSchema) ]),
}).strict();

export const ProcessedSignalScalarWhereInputSchema: z.ZodType<Prisma.ProcessedSignalScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProcessedSignalScalarWhereInputSchema),z.lazy(() => ProcessedSignalScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProcessedSignalScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProcessedSignalScalarWhereInputSchema),z.lazy(() => ProcessedSignalScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  signalId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  originalSignalId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  processingTime: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  transformations: z.lazy(() => StringNullableListFilterSchema).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  processed: z.union([ z.lazy(() => BoolFilterSchema),z.boolean() ]).optional(),
  processingMetadata: z.lazy(() => JsonNullableFilterSchema).optional()
}).strict();

export const SessionToSignalUpsertWithWhereUniqueWithoutSignalInputSchema: z.ZodType<Prisma.SessionToSignalUpsertWithWhereUniqueWithoutSignalInput> = z.object({
  where: z.lazy(() => SessionToSignalWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SessionToSignalUpdateWithoutSignalInputSchema),z.lazy(() => SessionToSignalUncheckedUpdateWithoutSignalInputSchema) ]),
  create: z.union([ z.lazy(() => SessionToSignalCreateWithoutSignalInputSchema),z.lazy(() => SessionToSignalUncheckedCreateWithoutSignalInputSchema) ]),
}).strict();

export const SessionToSignalUpdateWithWhereUniqueWithoutSignalInputSchema: z.ZodType<Prisma.SessionToSignalUpdateWithWhereUniqueWithoutSignalInput> = z.object({
  where: z.lazy(() => SessionToSignalWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SessionToSignalUpdateWithoutSignalInputSchema),z.lazy(() => SessionToSignalUncheckedUpdateWithoutSignalInputSchema) ]),
}).strict();

export const SessionToSignalUpdateManyWithWhereWithoutSignalInputSchema: z.ZodType<Prisma.SessionToSignalUpdateManyWithWhereWithoutSignalInput> = z.object({
  where: z.lazy(() => SessionToSignalScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SessionToSignalUpdateManyMutationInputSchema),z.lazy(() => SessionToSignalUncheckedUpdateManyWithoutSignalInputSchema) ]),
}).strict();

export const SessionCreateWithoutAnalyticsMetricsInputSchema: z.ZodType<Prisma.SessionCreateWithoutAnalyticsMetricsInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abAssignments: z.lazy(() => ABTestAssignmentCreateNestedManyWithoutSessionInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricCreateNestedManyWithoutSessionInputSchema).optional(),
  conversations: z.lazy(() => ConversationCreateNestedManyWithoutSessionInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricCreateNestedManyWithoutSessionInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventCreateNestedManyWithoutSessionInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const SessionUncheckedCreateWithoutAnalyticsMetricsInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutAnalyticsMetricsInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  conversations: z.lazy(() => ConversationUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const SessionCreateOrConnectWithoutAnalyticsMetricsInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutAnalyticsMetricsInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutAnalyticsMetricsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutAnalyticsMetricsInputSchema) ]),
}).strict();

export const SessionUpsertWithoutAnalyticsMetricsInputSchema: z.ZodType<Prisma.SessionUpsertWithoutAnalyticsMetricsInput> = z.object({
  update: z.union([ z.lazy(() => SessionUpdateWithoutAnalyticsMetricsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutAnalyticsMetricsInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutAnalyticsMetricsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutAnalyticsMetricsInputSchema) ]),
  where: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const SessionUpdateToOneWithWhereWithoutAnalyticsMetricsInputSchema: z.ZodType<Prisma.SessionUpdateToOneWithWhereWithoutAnalyticsMetricsInput> = z.object({
  where: z.lazy(() => SessionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SessionUpdateWithoutAnalyticsMetricsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutAnalyticsMetricsInputSchema) ]),
}).strict();

export const SessionUpdateWithoutAnalyticsMetricsInputSchema: z.ZodType<Prisma.SessionUpdateWithoutAnalyticsMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUpdateManyWithoutSessionNestedInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUpdateManyWithoutSessionNestedInputSchema).optional(),
  conversations: z.lazy(() => ConversationUpdateManyWithoutSessionNestedInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUpdateManyWithoutSessionNestedInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUpdateManyWithoutSessionNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateWithoutAnalyticsMetricsInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutAnalyticsMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  conversations: z.lazy(() => ConversationUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const ModelConfigCreateWithoutMetricsInputSchema: z.ZodType<Prisma.ModelConfigCreateWithoutMetricsInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => ModelTypeSchema),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  features: z.union([ z.lazy(() => ModelConfigCreatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  modelVersions: z.lazy(() => ModelVersionCreateNestedManyWithoutConfigInputSchema).optional()
}).strict();

export const ModelConfigUncheckedCreateWithoutMetricsInputSchema: z.ZodType<Prisma.ModelConfigUncheckedCreateWithoutMetricsInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => ModelTypeSchema),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  features: z.union([ z.lazy(() => ModelConfigCreatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  modelVersions: z.lazy(() => ModelVersionUncheckedCreateNestedManyWithoutConfigInputSchema).optional()
}).strict();

export const ModelConfigCreateOrConnectWithoutMetricsInputSchema: z.ZodType<Prisma.ModelConfigCreateOrConnectWithoutMetricsInput> = z.object({
  where: z.lazy(() => ModelConfigWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ModelConfigCreateWithoutMetricsInputSchema),z.lazy(() => ModelConfigUncheckedCreateWithoutMetricsInputSchema) ]),
}).strict();

export const SessionCreateWithoutLearningMetricsInputSchema: z.ZodType<Prisma.SessionCreateWithoutLearningMetricsInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abAssignments: z.lazy(() => ABTestAssignmentCreateNestedManyWithoutSessionInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricCreateNestedManyWithoutSessionInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsCreateNestedManyWithoutSessionInputSchema).optional(),
  conversations: z.lazy(() => ConversationCreateNestedManyWithoutSessionInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventCreateNestedManyWithoutSessionInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const SessionUncheckedCreateWithoutLearningMetricsInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutLearningMetricsInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  conversations: z.lazy(() => ConversationUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedCreateNestedManyWithoutSessionsInputSchema).optional()
}).strict();

export const SessionCreateOrConnectWithoutLearningMetricsInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutLearningMetricsInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutLearningMetricsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutLearningMetricsInputSchema) ]),
}).strict();

export const ModelConfigUpsertWithoutMetricsInputSchema: z.ZodType<Prisma.ModelConfigUpsertWithoutMetricsInput> = z.object({
  update: z.union([ z.lazy(() => ModelConfigUpdateWithoutMetricsInputSchema),z.lazy(() => ModelConfigUncheckedUpdateWithoutMetricsInputSchema) ]),
  create: z.union([ z.lazy(() => ModelConfigCreateWithoutMetricsInputSchema),z.lazy(() => ModelConfigUncheckedCreateWithoutMetricsInputSchema) ]),
  where: z.lazy(() => ModelConfigWhereInputSchema).optional()
}).strict();

export const ModelConfigUpdateToOneWithWhereWithoutMetricsInputSchema: z.ZodType<Prisma.ModelConfigUpdateToOneWithWhereWithoutMetricsInput> = z.object({
  where: z.lazy(() => ModelConfigWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => ModelConfigUpdateWithoutMetricsInputSchema),z.lazy(() => ModelConfigUncheckedUpdateWithoutMetricsInputSchema) ]),
}).strict();

export const ModelConfigUpdateWithoutMetricsInputSchema: z.ZodType<Prisma.ModelConfigUpdateWithoutMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  features: z.union([ z.lazy(() => ModelConfigUpdatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  modelVersions: z.lazy(() => ModelVersionUpdateManyWithoutConfigNestedInputSchema).optional()
}).strict();

export const ModelConfigUncheckedUpdateWithoutMetricsInputSchema: z.ZodType<Prisma.ModelConfigUncheckedUpdateWithoutMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  features: z.union([ z.lazy(() => ModelConfigUpdatefeaturesInputSchema),z.string().array() ]).optional(),
  trainingParams: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  modelVersions: z.lazy(() => ModelVersionUncheckedUpdateManyWithoutConfigNestedInputSchema).optional()
}).strict();

export const SessionUpsertWithoutLearningMetricsInputSchema: z.ZodType<Prisma.SessionUpsertWithoutLearningMetricsInput> = z.object({
  update: z.union([ z.lazy(() => SessionUpdateWithoutLearningMetricsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutLearningMetricsInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutLearningMetricsInputSchema),z.lazy(() => SessionUncheckedCreateWithoutLearningMetricsInputSchema) ]),
  where: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const SessionUpdateToOneWithWhereWithoutLearningMetricsInputSchema: z.ZodType<Prisma.SessionUpdateToOneWithWhereWithoutLearningMetricsInput> = z.object({
  where: z.lazy(() => SessionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SessionUpdateWithoutLearningMetricsInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutLearningMetricsInputSchema) ]),
}).strict();

export const SessionUpdateWithoutLearningMetricsInputSchema: z.ZodType<Prisma.SessionUpdateWithoutLearningMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUpdateManyWithoutSessionNestedInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUpdateManyWithoutSessionNestedInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUpdateManyWithoutSessionNestedInputSchema).optional(),
  conversations: z.lazy(() => ConversationUpdateManyWithoutSessionNestedInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUpdateManyWithoutSessionNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateWithoutLearningMetricsInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutLearningMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  conversations: z.lazy(() => ConversationUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  SessionToSignal: z.lazy(() => SessionToSignalUncheckedUpdateManyWithoutSessionsNestedInputSchema).optional()
}).strict();

export const LearningPatternCreateWithoutEventInputSchema: z.ZodType<Prisma.LearningPatternCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  confidence: z.number(),
  features: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LearningPatternUncheckedCreateWithoutEventInputSchema: z.ZodType<Prisma.LearningPatternUncheckedCreateWithoutEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  confidence: z.number(),
  features: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LearningPatternCreateOrConnectWithoutEventInputSchema: z.ZodType<Prisma.LearningPatternCreateOrConnectWithoutEventInput> = z.object({
  where: z.lazy(() => LearningPatternWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LearningPatternCreateWithoutEventInputSchema),z.lazy(() => LearningPatternUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const LearningPatternCreateManyEventInputEnvelopeSchema: z.ZodType<Prisma.LearningPatternCreateManyEventInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => LearningPatternCreateManyEventInputSchema),z.lazy(() => LearningPatternCreateManyEventInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const LearningPatternUpsertWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.LearningPatternUpsertWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => LearningPatternWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => LearningPatternUpdateWithoutEventInputSchema),z.lazy(() => LearningPatternUncheckedUpdateWithoutEventInputSchema) ]),
  create: z.union([ z.lazy(() => LearningPatternCreateWithoutEventInputSchema),z.lazy(() => LearningPatternUncheckedCreateWithoutEventInputSchema) ]),
}).strict();

export const LearningPatternUpdateWithWhereUniqueWithoutEventInputSchema: z.ZodType<Prisma.LearningPatternUpdateWithWhereUniqueWithoutEventInput> = z.object({
  where: z.lazy(() => LearningPatternWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => LearningPatternUpdateWithoutEventInputSchema),z.lazy(() => LearningPatternUncheckedUpdateWithoutEventInputSchema) ]),
}).strict();

export const LearningPatternUpdateManyWithWhereWithoutEventInputSchema: z.ZodType<Prisma.LearningPatternUpdateManyWithWhereWithoutEventInput> = z.object({
  where: z.lazy(() => LearningPatternScalarWhereInputSchema),
  data: z.union([ z.lazy(() => LearningPatternUpdateManyMutationInputSchema),z.lazy(() => LearningPatternUncheckedUpdateManyWithoutEventInputSchema) ]),
}).strict();

export const LearningPatternScalarWhereInputSchema: z.ZodType<Prisma.LearningPatternScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => LearningPatternScalarWhereInputSchema),z.lazy(() => LearningPatternScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => LearningPatternScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => LearningPatternScalarWhereInputSchema),z.lazy(() => LearningPatternScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  features: z.lazy(() => JsonFilterSchema).optional(),
  metadata: z.lazy(() => JsonNullableFilterSchema).optional(),
  eventId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const LearningEventCreateWithoutPatternsInputSchema: z.ZodType<Prisma.LearningEventCreateWithoutPatternsInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => LearningEventTypeSchema),
  status: z.lazy(() => LearningEventStatusSchema).optional(),
  priority: z.lazy(() => LearningEventPrioritySchema).optional(),
  timestamp: z.coerce.date().optional(),
  processedAt: z.coerce.date().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  clientId: z.string().optional().nullable(),
  environment: z.string().optional().nullable(),
  version: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => LearningEventCreatetagsInputSchema),z.string().array() ]).optional(),
  error: z.string().optional().nullable(),
  retryCount: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LearningEventUncheckedCreateWithoutPatternsInputSchema: z.ZodType<Prisma.LearningEventUncheckedCreateWithoutPatternsInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => LearningEventTypeSchema),
  status: z.lazy(() => LearningEventStatusSchema).optional(),
  priority: z.lazy(() => LearningEventPrioritySchema).optional(),
  timestamp: z.coerce.date().optional(),
  processedAt: z.coerce.date().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.string().optional().nullable(),
  sessionId: z.string().optional().nullable(),
  userId: z.string().optional().nullable(),
  clientId: z.string().optional().nullable(),
  environment: z.string().optional().nullable(),
  version: z.string().optional().nullable(),
  tags: z.union([ z.lazy(() => LearningEventCreatetagsInputSchema),z.string().array() ]).optional(),
  error: z.string().optional().nullable(),
  retryCount: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LearningEventCreateOrConnectWithoutPatternsInputSchema: z.ZodType<Prisma.LearningEventCreateOrConnectWithoutPatternsInput> = z.object({
  where: z.lazy(() => LearningEventWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => LearningEventCreateWithoutPatternsInputSchema),z.lazy(() => LearningEventUncheckedCreateWithoutPatternsInputSchema) ]),
}).strict();

export const LearningEventUpsertWithoutPatternsInputSchema: z.ZodType<Prisma.LearningEventUpsertWithoutPatternsInput> = z.object({
  update: z.union([ z.lazy(() => LearningEventUpdateWithoutPatternsInputSchema),z.lazy(() => LearningEventUncheckedUpdateWithoutPatternsInputSchema) ]),
  create: z.union([ z.lazy(() => LearningEventCreateWithoutPatternsInputSchema),z.lazy(() => LearningEventUncheckedCreateWithoutPatternsInputSchema) ]),
  where: z.lazy(() => LearningEventWhereInputSchema).optional()
}).strict();

export const LearningEventUpdateToOneWithWhereWithoutPatternsInputSchema: z.ZodType<Prisma.LearningEventUpdateToOneWithWhereWithoutPatternsInput> = z.object({
  where: z.lazy(() => LearningEventWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => LearningEventUpdateWithoutPatternsInputSchema),z.lazy(() => LearningEventUncheckedUpdateWithoutPatternsInputSchema) ]),
}).strict();

export const LearningEventUpdateWithoutPatternsInputSchema: z.ZodType<Prisma.LearningEventUpdateWithoutPatternsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => LearningEventTypeSchema),z.lazy(() => EnumLearningEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LearningEventStatusSchema),z.lazy(() => EnumLearningEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => LearningEventPrioritySchema),z.lazy(() => EnumLearningEventPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  processedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  clientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  environment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => LearningEventUpdatetagsInputSchema),z.string().array() ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  retryCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningEventUncheckedUpdateWithoutPatternsInputSchema: z.ZodType<Prisma.LearningEventUncheckedUpdateWithoutPatternsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => LearningEventTypeSchema),z.lazy(() => EnumLearningEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.lazy(() => LearningEventStatusSchema),z.lazy(() => EnumLearningEventStatusFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.lazy(() => LearningEventPrioritySchema),z.lazy(() => EnumLearningEventPriorityFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  processedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  clientId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  environment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tags: z.union([ z.lazy(() => LearningEventUpdatetagsInputSchema),z.string().array() ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  retryCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineLearningResultCreateWithoutOperationInputSchema: z.ZodType<Prisma.EngineLearningResultCreateWithoutOperationInput> = z.object({
  id: z.string().cuid().optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  confidence: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.coerce.date().optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyCreateNestedManyWithoutLearningResultInputSchema).optional(),
  recommendations: z.lazy(() => EngineRecommendationCreateNestedManyWithoutLearningResultInputSchema).optional()
}).strict();

export const EngineLearningResultUncheckedCreateWithoutOperationInputSchema: z.ZodType<Prisma.EngineLearningResultUncheckedCreateWithoutOperationInput> = z.object({
  id: z.string().cuid().optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  confidence: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.coerce.date().optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyUncheckedCreateNestedManyWithoutLearningResultInputSchema).optional(),
  recommendations: z.lazy(() => EngineRecommendationUncheckedCreateNestedManyWithoutLearningResultInputSchema).optional()
}).strict();

export const EngineLearningResultCreateOrConnectWithoutOperationInputSchema: z.ZodType<Prisma.EngineLearningResultCreateOrConnectWithoutOperationInput> = z.object({
  where: z.lazy(() => EngineLearningResultWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EngineLearningResultCreateWithoutOperationInputSchema),z.lazy(() => EngineLearningResultUncheckedCreateWithoutOperationInputSchema) ]),
}).strict();

export const EngineLearningResultCreateManyOperationInputEnvelopeSchema: z.ZodType<Prisma.EngineLearningResultCreateManyOperationInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EngineLearningResultCreateManyOperationInputSchema),z.lazy(() => EngineLearningResultCreateManyOperationInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EngineLearningResultUpsertWithWhereUniqueWithoutOperationInputSchema: z.ZodType<Prisma.EngineLearningResultUpsertWithWhereUniqueWithoutOperationInput> = z.object({
  where: z.lazy(() => EngineLearningResultWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EngineLearningResultUpdateWithoutOperationInputSchema),z.lazy(() => EngineLearningResultUncheckedUpdateWithoutOperationInputSchema) ]),
  create: z.union([ z.lazy(() => EngineLearningResultCreateWithoutOperationInputSchema),z.lazy(() => EngineLearningResultUncheckedCreateWithoutOperationInputSchema) ]),
}).strict();

export const EngineLearningResultUpdateWithWhereUniqueWithoutOperationInputSchema: z.ZodType<Prisma.EngineLearningResultUpdateWithWhereUniqueWithoutOperationInput> = z.object({
  where: z.lazy(() => EngineLearningResultWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EngineLearningResultUpdateWithoutOperationInputSchema),z.lazy(() => EngineLearningResultUncheckedUpdateWithoutOperationInputSchema) ]),
}).strict();

export const EngineLearningResultUpdateManyWithWhereWithoutOperationInputSchema: z.ZodType<Prisma.EngineLearningResultUpdateManyWithWhereWithoutOperationInput> = z.object({
  where: z.lazy(() => EngineLearningResultScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EngineLearningResultUpdateManyMutationInputSchema),z.lazy(() => EngineLearningResultUncheckedUpdateManyWithoutOperationInputSchema) ]),
}).strict();

export const EngineLearningResultScalarWhereInputSchema: z.ZodType<Prisma.EngineLearningResultScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EngineLearningResultScalarWhereInputSchema),z.lazy(() => EngineLearningResultScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineLearningResultScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineLearningResultScalarWhereInputSchema),z.lazy(() => EngineLearningResultScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  patterns: z.lazy(() => JsonFilterSchema).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  performance: z.lazy(() => JsonNullableFilterSchema).optional(),
  validatedAt: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  abTestMetrics: z.lazy(() => JsonNullableFilterSchema).optional(),
  operationId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const EngineOperationCreateWithoutEngineLearningResultInputSchema: z.ZodType<Prisma.EngineOperationCreateWithoutEngineLearningResultInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  status: z.string(),
  startTime: z.coerce.date().optional(),
  endTime: z.coerce.date().optional().nullable(),
  metrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineOperationUncheckedCreateWithoutEngineLearningResultInputSchema: z.ZodType<Prisma.EngineOperationUncheckedCreateWithoutEngineLearningResultInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  status: z.string(),
  startTime: z.coerce.date().optional(),
  endTime: z.coerce.date().optional().nullable(),
  metrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineOperationCreateOrConnectWithoutEngineLearningResultInputSchema: z.ZodType<Prisma.EngineOperationCreateOrConnectWithoutEngineLearningResultInput> = z.object({
  where: z.lazy(() => EngineOperationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EngineOperationCreateWithoutEngineLearningResultInputSchema),z.lazy(() => EngineOperationUncheckedCreateWithoutEngineLearningResultInputSchema) ]),
}).strict();

export const EngineOptimizationStrategyCreateWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyCreateWithoutLearningResultInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EngineOptimizationTypeSchema),
  priority: z.number(),
  confidence: z.number(),
  impact: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineOptimizationStrategyUncheckedCreateWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUncheckedCreateWithoutLearningResultInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EngineOptimizationTypeSchema),
  priority: z.number(),
  confidence: z.number(),
  impact: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineOptimizationStrategyCreateOrConnectWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyCreateOrConnectWithoutLearningResultInput> = z.object({
  where: z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EngineOptimizationStrategyCreateWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyUncheckedCreateWithoutLearningResultInputSchema) ]),
}).strict();

export const EngineOptimizationStrategyCreateManyLearningResultInputEnvelopeSchema: z.ZodType<Prisma.EngineOptimizationStrategyCreateManyLearningResultInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EngineOptimizationStrategyCreateManyLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyCreateManyLearningResultInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EngineRecommendationCreateWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineRecommendationCreateWithoutLearningResultInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EngineOptimizationTypeSchema),
  priority: z.number(),
  confidence: z.number(),
  impact: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineRecommendationUncheckedCreateWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineRecommendationUncheckedCreateWithoutLearningResultInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EngineOptimizationTypeSchema),
  priority: z.number(),
  confidence: z.number(),
  impact: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineRecommendationCreateOrConnectWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineRecommendationCreateOrConnectWithoutLearningResultInput> = z.object({
  where: z.lazy(() => EngineRecommendationWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EngineRecommendationCreateWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationUncheckedCreateWithoutLearningResultInputSchema) ]),
}).strict();

export const EngineRecommendationCreateManyLearningResultInputEnvelopeSchema: z.ZodType<Prisma.EngineRecommendationCreateManyLearningResultInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => EngineRecommendationCreateManyLearningResultInputSchema),z.lazy(() => EngineRecommendationCreateManyLearningResultInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const EngineOperationUpsertWithoutEngineLearningResultInputSchema: z.ZodType<Prisma.EngineOperationUpsertWithoutEngineLearningResultInput> = z.object({
  update: z.union([ z.lazy(() => EngineOperationUpdateWithoutEngineLearningResultInputSchema),z.lazy(() => EngineOperationUncheckedUpdateWithoutEngineLearningResultInputSchema) ]),
  create: z.union([ z.lazy(() => EngineOperationCreateWithoutEngineLearningResultInputSchema),z.lazy(() => EngineOperationUncheckedCreateWithoutEngineLearningResultInputSchema) ]),
  where: z.lazy(() => EngineOperationWhereInputSchema).optional()
}).strict();

export const EngineOperationUpdateToOneWithWhereWithoutEngineLearningResultInputSchema: z.ZodType<Prisma.EngineOperationUpdateToOneWithWhereWithoutEngineLearningResultInput> = z.object({
  where: z.lazy(() => EngineOperationWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EngineOperationUpdateWithoutEngineLearningResultInputSchema),z.lazy(() => EngineOperationUncheckedUpdateWithoutEngineLearningResultInputSchema) ]),
}).strict();

export const EngineOperationUpdateWithoutEngineLearningResultInputSchema: z.ZodType<Prisma.EngineOperationUpdateWithoutEngineLearningResultInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineOperationUncheckedUpdateWithoutEngineLearningResultInputSchema: z.ZodType<Prisma.EngineOperationUncheckedUpdateWithoutEngineLearningResultInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  status: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  startTime: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  endTime: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineOptimizationStrategyUpsertWithWhereUniqueWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUpsertWithWhereUniqueWithoutLearningResultInput> = z.object({
  where: z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EngineOptimizationStrategyUpdateWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyUncheckedUpdateWithoutLearningResultInputSchema) ]),
  create: z.union([ z.lazy(() => EngineOptimizationStrategyCreateWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyUncheckedCreateWithoutLearningResultInputSchema) ]),
}).strict();

export const EngineOptimizationStrategyUpdateWithWhereUniqueWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUpdateWithWhereUniqueWithoutLearningResultInput> = z.object({
  where: z.lazy(() => EngineOptimizationStrategyWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EngineOptimizationStrategyUpdateWithoutLearningResultInputSchema),z.lazy(() => EngineOptimizationStrategyUncheckedUpdateWithoutLearningResultInputSchema) ]),
}).strict();

export const EngineOptimizationStrategyUpdateManyWithWhereWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUpdateManyWithWhereWithoutLearningResultInput> = z.object({
  where: z.lazy(() => EngineOptimizationStrategyScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EngineOptimizationStrategyUpdateManyMutationInputSchema),z.lazy(() => EngineOptimizationStrategyUncheckedUpdateManyWithoutLearningResultInputSchema) ]),
}).strict();

export const EngineOptimizationStrategyScalarWhereInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EngineOptimizationStrategyScalarWhereInputSchema),z.lazy(() => EngineOptimizationStrategyScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineOptimizationStrategyScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineOptimizationStrategyScalarWhereInputSchema),z.lazy(() => EngineOptimizationStrategyScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumEngineOptimizationTypeFilterSchema),z.lazy(() => EngineOptimizationTypeSchema) ]).optional(),
  priority: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  impact: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  learningResultId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
}).strict();

export const EngineRecommendationUpsertWithWhereUniqueWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineRecommendationUpsertWithWhereUniqueWithoutLearningResultInput> = z.object({
  where: z.lazy(() => EngineRecommendationWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => EngineRecommendationUpdateWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationUncheckedUpdateWithoutLearningResultInputSchema) ]),
  create: z.union([ z.lazy(() => EngineRecommendationCreateWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationUncheckedCreateWithoutLearningResultInputSchema) ]),
}).strict();

export const EngineRecommendationUpdateWithWhereUniqueWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineRecommendationUpdateWithWhereUniqueWithoutLearningResultInput> = z.object({
  where: z.lazy(() => EngineRecommendationWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => EngineRecommendationUpdateWithoutLearningResultInputSchema),z.lazy(() => EngineRecommendationUncheckedUpdateWithoutLearningResultInputSchema) ]),
}).strict();

export const EngineRecommendationUpdateManyWithWhereWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineRecommendationUpdateManyWithWhereWithoutLearningResultInput> = z.object({
  where: z.lazy(() => EngineRecommendationScalarWhereInputSchema),
  data: z.union([ z.lazy(() => EngineRecommendationUpdateManyMutationInputSchema),z.lazy(() => EngineRecommendationUncheckedUpdateManyWithoutLearningResultInputSchema) ]),
}).strict();

export const EngineRecommendationScalarWhereInputSchema: z.ZodType<Prisma.EngineRecommendationScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => EngineRecommendationScalarWhereInputSchema),z.lazy(() => EngineRecommendationScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => EngineRecommendationScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => EngineRecommendationScalarWhereInputSchema),z.lazy(() => EngineRecommendationScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => EnumEngineOptimizationTypeFilterSchema),z.lazy(() => EngineOptimizationTypeSchema) ]).optional(),
  priority: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  confidence: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  impact: z.union([ z.lazy(() => FloatFilterSchema),z.number() ]).optional(),
  metadata: z.lazy(() => JsonFilterSchema).optional(),
  learningResultId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  createdAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
  updatedAt: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const EngineLearningResultCreateWithoutEngineOptimizationStrategyInputSchema: z.ZodType<Prisma.EngineLearningResultCreateWithoutEngineOptimizationStrategyInput> = z.object({
  id: z.string().cuid().optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  confidence: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.coerce.date().optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operation: z.lazy(() => EngineOperationCreateNestedOneWithoutEngineLearningResultInputSchema),
  recommendations: z.lazy(() => EngineRecommendationCreateNestedManyWithoutLearningResultInputSchema).optional()
}).strict();

export const EngineLearningResultUncheckedCreateWithoutEngineOptimizationStrategyInputSchema: z.ZodType<Prisma.EngineLearningResultUncheckedCreateWithoutEngineOptimizationStrategyInput> = z.object({
  id: z.string().cuid().optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  confidence: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.coerce.date().optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.string(),
  recommendations: z.lazy(() => EngineRecommendationUncheckedCreateNestedManyWithoutLearningResultInputSchema).optional()
}).strict();

export const EngineLearningResultCreateOrConnectWithoutEngineOptimizationStrategyInputSchema: z.ZodType<Prisma.EngineLearningResultCreateOrConnectWithoutEngineOptimizationStrategyInput> = z.object({
  where: z.lazy(() => EngineLearningResultWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EngineLearningResultCreateWithoutEngineOptimizationStrategyInputSchema),z.lazy(() => EngineLearningResultUncheckedCreateWithoutEngineOptimizationStrategyInputSchema) ]),
}).strict();

export const EngineLearningResultUpsertWithoutEngineOptimizationStrategyInputSchema: z.ZodType<Prisma.EngineLearningResultUpsertWithoutEngineOptimizationStrategyInput> = z.object({
  update: z.union([ z.lazy(() => EngineLearningResultUpdateWithoutEngineOptimizationStrategyInputSchema),z.lazy(() => EngineLearningResultUncheckedUpdateWithoutEngineOptimizationStrategyInputSchema) ]),
  create: z.union([ z.lazy(() => EngineLearningResultCreateWithoutEngineOptimizationStrategyInputSchema),z.lazy(() => EngineLearningResultUncheckedCreateWithoutEngineOptimizationStrategyInputSchema) ]),
  where: z.lazy(() => EngineLearningResultWhereInputSchema).optional()
}).strict();

export const EngineLearningResultUpdateToOneWithWhereWithoutEngineOptimizationStrategyInputSchema: z.ZodType<Prisma.EngineLearningResultUpdateToOneWithWhereWithoutEngineOptimizationStrategyInput> = z.object({
  where: z.lazy(() => EngineLearningResultWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EngineLearningResultUpdateWithoutEngineOptimizationStrategyInputSchema),z.lazy(() => EngineLearningResultUncheckedUpdateWithoutEngineOptimizationStrategyInputSchema) ]),
}).strict();

export const EngineLearningResultUpdateWithoutEngineOptimizationStrategyInputSchema: z.ZodType<Prisma.EngineLearningResultUpdateWithoutEngineOptimizationStrategyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operation: z.lazy(() => EngineOperationUpdateOneRequiredWithoutEngineLearningResultNestedInputSchema).optional(),
  recommendations: z.lazy(() => EngineRecommendationUpdateManyWithoutLearningResultNestedInputSchema).optional()
}).strict();

export const EngineLearningResultUncheckedUpdateWithoutEngineOptimizationStrategyInputSchema: z.ZodType<Prisma.EngineLearningResultUncheckedUpdateWithoutEngineOptimizationStrategyInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  recommendations: z.lazy(() => EngineRecommendationUncheckedUpdateManyWithoutLearningResultNestedInputSchema).optional()
}).strict();

export const EngineLearningResultCreateWithoutRecommendationsInputSchema: z.ZodType<Prisma.EngineLearningResultCreateWithoutRecommendationsInput> = z.object({
  id: z.string().cuid().optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  confidence: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.coerce.date().optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operation: z.lazy(() => EngineOperationCreateNestedOneWithoutEngineLearningResultInputSchema),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyCreateNestedManyWithoutLearningResultInputSchema).optional()
}).strict();

export const EngineLearningResultUncheckedCreateWithoutRecommendationsInputSchema: z.ZodType<Prisma.EngineLearningResultUncheckedCreateWithoutRecommendationsInput> = z.object({
  id: z.string().cuid().optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  confidence: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.coerce.date().optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.string(),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyUncheckedCreateNestedManyWithoutLearningResultInputSchema).optional()
}).strict();

export const EngineLearningResultCreateOrConnectWithoutRecommendationsInputSchema: z.ZodType<Prisma.EngineLearningResultCreateOrConnectWithoutRecommendationsInput> = z.object({
  where: z.lazy(() => EngineLearningResultWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => EngineLearningResultCreateWithoutRecommendationsInputSchema),z.lazy(() => EngineLearningResultUncheckedCreateWithoutRecommendationsInputSchema) ]),
}).strict();

export const EngineLearningResultUpsertWithoutRecommendationsInputSchema: z.ZodType<Prisma.EngineLearningResultUpsertWithoutRecommendationsInput> = z.object({
  update: z.union([ z.lazy(() => EngineLearningResultUpdateWithoutRecommendationsInputSchema),z.lazy(() => EngineLearningResultUncheckedUpdateWithoutRecommendationsInputSchema) ]),
  create: z.union([ z.lazy(() => EngineLearningResultCreateWithoutRecommendationsInputSchema),z.lazy(() => EngineLearningResultUncheckedCreateWithoutRecommendationsInputSchema) ]),
  where: z.lazy(() => EngineLearningResultWhereInputSchema).optional()
}).strict();

export const EngineLearningResultUpdateToOneWithWhereWithoutRecommendationsInputSchema: z.ZodType<Prisma.EngineLearningResultUpdateToOneWithWhereWithoutRecommendationsInput> = z.object({
  where: z.lazy(() => EngineLearningResultWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => EngineLearningResultUpdateWithoutRecommendationsInputSchema),z.lazy(() => EngineLearningResultUncheckedUpdateWithoutRecommendationsInputSchema) ]),
}).strict();

export const EngineLearningResultUpdateWithoutRecommendationsInputSchema: z.ZodType<Prisma.EngineLearningResultUpdateWithoutRecommendationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operation: z.lazy(() => EngineOperationUpdateOneRequiredWithoutEngineLearningResultNestedInputSchema).optional(),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyUpdateManyWithoutLearningResultNestedInputSchema).optional()
}).strict();

export const EngineLearningResultUncheckedUpdateWithoutRecommendationsInputSchema: z.ZodType<Prisma.EngineLearningResultUncheckedUpdateWithoutRecommendationsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  operationId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyUncheckedUpdateManyWithoutLearningResultNestedInputSchema).optional()
}).strict();

export const AccountCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AccountCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AccountCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AccountCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AccountCreateManyUserInputSchema),z.lazy(() => AccountCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AuthSessionCreateWithoutUserInputSchema: z.ZodType<Prisma.AuthSessionCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  sessionToken: z.string(),
  expires: z.coerce.date()
}).strict();

export const AuthSessionUncheckedCreateWithoutUserInputSchema: z.ZodType<Prisma.AuthSessionUncheckedCreateWithoutUserInput> = z.object({
  id: z.string().cuid().optional(),
  sessionToken: z.string(),
  expires: z.coerce.date()
}).strict();

export const AuthSessionCreateOrConnectWithoutUserInputSchema: z.ZodType<Prisma.AuthSessionCreateOrConnectWithoutUserInput> = z.object({
  where: z.lazy(() => AuthSessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AuthSessionCreateWithoutUserInputSchema),z.lazy(() => AuthSessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AuthSessionCreateManyUserInputEnvelopeSchema: z.ZodType<Prisma.AuthSessionCreateManyUserInputEnvelope> = z.object({
  data: z.union([ z.lazy(() => AuthSessionCreateManyUserInputSchema),z.lazy(() => AuthSessionCreateManyUserInputSchema).array() ]),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AccountCreateWithoutUserInputSchema),z.lazy(() => AccountUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AccountWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateWithoutUserInputSchema),z.lazy(() => AccountUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AccountUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AccountScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AccountUpdateManyMutationInputSchema),z.lazy(() => AccountUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AccountScalarWhereInputSchema: z.ZodType<Prisma.AccountScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountScalarWhereInputSchema),z.lazy(() => AccountScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  type: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  provider: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  providerAccountId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  refresh_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  access_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  expires_at: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  token_type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  scope: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_token: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  session_state: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const AuthSessionUpsertWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AuthSessionUpsertWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AuthSessionWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AuthSessionUpdateWithoutUserInputSchema),z.lazy(() => AuthSessionUncheckedUpdateWithoutUserInputSchema) ]),
  create: z.union([ z.lazy(() => AuthSessionCreateWithoutUserInputSchema),z.lazy(() => AuthSessionUncheckedCreateWithoutUserInputSchema) ]),
}).strict();

export const AuthSessionUpdateWithWhereUniqueWithoutUserInputSchema: z.ZodType<Prisma.AuthSessionUpdateWithWhereUniqueWithoutUserInput> = z.object({
  where: z.lazy(() => AuthSessionWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AuthSessionUpdateWithoutUserInputSchema),z.lazy(() => AuthSessionUncheckedUpdateWithoutUserInputSchema) ]),
}).strict();

export const AuthSessionUpdateManyWithWhereWithoutUserInputSchema: z.ZodType<Prisma.AuthSessionUpdateManyWithWhereWithoutUserInput> = z.object({
  where: z.lazy(() => AuthSessionScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AuthSessionUpdateManyMutationInputSchema),z.lazy(() => AuthSessionUncheckedUpdateManyWithoutUserInputSchema) ]),
}).strict();

export const AuthSessionScalarWhereInputSchema: z.ZodType<Prisma.AuthSessionScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AuthSessionScalarWhereInputSchema),z.lazy(() => AuthSessionScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AuthSessionScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AuthSessionScalarWhereInputSchema),z.lazy(() => AuthSessionScalarWhereInputSchema).array() ]).optional(),
  id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  sessionToken: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  userId: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  expires: z.union([ z.lazy(() => DateTimeFilterSchema),z.coerce.date() ]).optional(),
}).strict();

export const UserCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateWithoutAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  password: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  sessions: z.lazy(() => AuthSessionCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutAccountsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  password: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  sessions: z.lazy(() => AuthSessionUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpsertWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpsertWithoutAccountsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedCreateWithoutAccountsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutAccountsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const UserUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sessions: z.lazy(() => AuthSessionUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutAccountsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sessions: z.lazy(() => AuthSessionUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateWithoutSessionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  password: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accounts: z.lazy(() => AccountCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserUncheckedCreateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedCreateWithoutSessionsInput> = z.object({
  id: z.string().cuid().optional(),
  name: z.string().optional().nullable(),
  email: z.string(),
  password: z.string(),
  emailVerified: z.coerce.date().optional().nullable(),
  image: z.string().optional().nullable(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  accounts: z.lazy(() => AccountUncheckedCreateNestedManyWithoutUserInputSchema).optional()
}).strict();

export const UserCreateOrConnectWithoutSessionsInputSchema: z.ZodType<Prisma.UserCreateOrConnectWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpsertWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpsertWithoutSessionsInput> = z.object({
  update: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
  create: z.union([ z.lazy(() => UserCreateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedCreateWithoutSessionsInputSchema) ]),
  where: z.lazy(() => UserWhereInputSchema).optional()
}).strict();

export const UserUpdateToOneWithWhereWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateToOneWithWhereWithoutSessionsInput> = z.object({
  where: z.lazy(() => UserWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => UserUpdateWithoutSessionsInputSchema),z.lazy(() => UserUncheckedUpdateWithoutSessionsInputSchema) ]),
}).strict();

export const UserUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const UserUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.UserUncheckedUpdateWithoutSessionsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  password: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  emailVerified: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  image: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  accounts: z.lazy(() => AccountUncheckedUpdateManyWithoutUserNestedInputSchema).optional()
}).strict();

export const SessionCreateWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SessionCreateWithoutSessionToSignalInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abAssignments: z.lazy(() => ABTestAssignmentCreateNestedManyWithoutSessionInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricCreateNestedManyWithoutSessionInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsCreateNestedManyWithoutSessionInputSchema).optional(),
  conversations: z.lazy(() => ConversationCreateNestedManyWithoutSessionInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricCreateNestedManyWithoutSessionInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventCreateNestedManyWithoutSessionInputSchema).optional()
}).strict();

export const SessionUncheckedCreateWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SessionUncheckedCreateWithoutSessionToSignalInput> = z.object({
  id: z.string().cuid().optional(),
  userId: z.string().optional().nullable(),
  startedAt: z.coerce.date().optional(),
  lastActiveAt: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.coerce.date(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  conversations: z.lazy(() => ConversationUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUncheckedCreateNestedManyWithoutSessionInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUncheckedCreateNestedManyWithoutSessionInputSchema).optional()
}).strict();

export const SessionCreateOrConnectWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SessionCreateOrConnectWithoutSessionToSignalInput> = z.object({
  where: z.lazy(() => SessionWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SessionCreateWithoutSessionToSignalInputSchema),z.lazy(() => SessionUncheckedCreateWithoutSessionToSignalInputSchema) ]),
}).strict();

export const SignalCreateWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SignalCreateWithoutSessionToSignalInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => SignalTypeSchema),
  source: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  priority: z.number().int().optional().nullable(),
  retries: z.number().int().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  processed: z.boolean().optional(),
  processedAt: z.coerce.date().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.string().optional().nullable(),
  manual: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  strength: z.number(),
  ProcessedSignal: z.lazy(() => ProcessedSignalCreateNestedManyWithoutSignalInputSchema).optional()
}).strict();

export const SignalUncheckedCreateWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SignalUncheckedCreateWithoutSessionToSignalInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => SignalTypeSchema),
  source: z.string(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  priority: z.number().int().optional().nullable(),
  retries: z.number().int().optional().nullable(),
  timestamp: z.coerce.date().optional(),
  processed: z.boolean().optional(),
  processedAt: z.coerce.date().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.string().optional().nullable(),
  manual: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  strength: z.number(),
  ProcessedSignal: z.lazy(() => ProcessedSignalUncheckedCreateNestedManyWithoutSignalInputSchema).optional()
}).strict();

export const SignalCreateOrConnectWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SignalCreateOrConnectWithoutSessionToSignalInput> = z.object({
  where: z.lazy(() => SignalWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SignalCreateWithoutSessionToSignalInputSchema),z.lazy(() => SignalUncheckedCreateWithoutSessionToSignalInputSchema) ]),
}).strict();

export const SessionUpsertWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SessionUpsertWithoutSessionToSignalInput> = z.object({
  update: z.union([ z.lazy(() => SessionUpdateWithoutSessionToSignalInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutSessionToSignalInputSchema) ]),
  create: z.union([ z.lazy(() => SessionCreateWithoutSessionToSignalInputSchema),z.lazy(() => SessionUncheckedCreateWithoutSessionToSignalInputSchema) ]),
  where: z.lazy(() => SessionWhereInputSchema).optional()
}).strict();

export const SessionUpdateToOneWithWhereWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SessionUpdateToOneWithWhereWithoutSessionToSignalInput> = z.object({
  where: z.lazy(() => SessionWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SessionUpdateWithoutSessionToSignalInputSchema),z.lazy(() => SessionUncheckedUpdateWithoutSessionToSignalInputSchema) ]),
}).strict();

export const SessionUpdateWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SessionUpdateWithoutSessionToSignalInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUpdateManyWithoutSessionNestedInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUpdateManyWithoutSessionNestedInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUpdateManyWithoutSessionNestedInputSchema).optional(),
  conversations: z.lazy(() => ConversationUpdateManyWithoutSessionNestedInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUpdateManyWithoutSessionNestedInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUpdateManyWithoutSessionNestedInputSchema).optional()
}).strict();

export const SessionUncheckedUpdateWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SessionUncheckedUpdateWithoutSessionToSignalInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  userId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  startedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  lastActiveAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  expiresAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  abAssignments: z.lazy(() => ABTestAssignmentUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  abMetrics: z.lazy(() => ABTestMetricUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  analyticsMetrics: z.lazy(() => AnalyticsMetricsUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  conversations: z.lazy(() => ConversationUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  learningMetrics: z.lazy(() => LearningMetricUncheckedUpdateManyWithoutSessionNestedInputSchema).optional(),
  searchEvents: z.lazy(() => SearchEventUncheckedUpdateManyWithoutSessionNestedInputSchema).optional()
}).strict();

export const SignalUpsertWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SignalUpsertWithoutSessionToSignalInput> = z.object({
  update: z.union([ z.lazy(() => SignalUpdateWithoutSessionToSignalInputSchema),z.lazy(() => SignalUncheckedUpdateWithoutSessionToSignalInputSchema) ]),
  create: z.union([ z.lazy(() => SignalCreateWithoutSessionToSignalInputSchema),z.lazy(() => SignalUncheckedCreateWithoutSessionToSignalInputSchema) ]),
  where: z.lazy(() => SignalWhereInputSchema).optional()
}).strict();

export const SignalUpdateToOneWithWhereWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SignalUpdateToOneWithWhereWithoutSessionToSignalInput> = z.object({
  where: z.lazy(() => SignalWhereInputSchema).optional(),
  data: z.union([ z.lazy(() => SignalUpdateWithoutSessionToSignalInputSchema),z.lazy(() => SignalUncheckedUpdateWithoutSessionToSignalInputSchema) ]),
}).strict();

export const SignalUpdateWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SignalUpdateWithoutSessionToSignalInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => SignalTypeSchema),z.lazy(() => EnumSignalTypeFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  retries: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  strength: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  ProcessedSignal: z.lazy(() => ProcessedSignalUpdateManyWithoutSignalNestedInputSchema).optional()
}).strict();

export const SignalUncheckedUpdateWithoutSessionToSignalInputSchema: z.ZodType<Prisma.SignalUncheckedUpdateWithoutSessionToSignalInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => SignalTypeSchema),z.lazy(() => EnumSignalTypeFieldUpdateOperationsInputSchema) ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  retries: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  manual: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  strength: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  ProcessedSignal: z.lazy(() => ProcessedSignalUncheckedUpdateManyWithoutSignalNestedInputSchema).optional()
}).strict();

export const ABTestAssignmentCreateManySessionInputSchema: z.ZodType<Prisma.ABTestAssignmentCreateManySessionInput> = z.object({
  id: z.string().cuid().optional(),
  testId: z.string(),
  variantId: z.string(),
  timestamp: z.coerce.date().optional()
}).strict();

export const ABTestMetricCreateManySessionInputSchema: z.ZodType<Prisma.ABTestMetricCreateManySessionInput> = z.object({
  id: z.string().cuid().optional(),
  testId: z.string(),
  variantId: z.string(),
  eventType: z.string(),
  value: z.number(),
  timestamp: z.coerce.date().optional()
}).strict();

export const AnalyticsMetricsCreateManySessionInputSchema: z.ZodType<Prisma.AnalyticsMetricsCreateManySessionInput> = z.object({
  id: z.string().cuid().optional(),
  totalSearches: z.number().int(),
  averageLatency: z.number(),
  successRate: z.number(),
  errorRate: z.number(),
  cacheHitRate: z.number(),
  queryCount: z.number().int(),
  uniqueUsers: z.number().int(),
  avgResultsPerQuery: z.number(),
  clickThroughRate: z.number(),
  conversionRate: z.number(),
  avgRelevanceScore: z.number(),
  p95Latency: z.number(),
  p99Latency: z.number(),
  resourceUtilization: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  searchTypes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timeWindow: z.string().optional().nullable(),
  timestamp: z.coerce.date().optional()
}).strict();

export const ConversationCreateManySessionInputSchema: z.ZodType<Prisma.ConversationCreateManySessionInput> = z.object({
  id: z.string().cuid().optional(),
  title: z.string().optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LearningMetricCreateManySessionInputSchema: z.ZodType<Prisma.LearningMetricCreateManySessionInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => MetricTypeSchema),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  interval: z.string(),
  modelId: z.string().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.string(),
  aggregated: z.boolean().optional(),
  count: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const SearchEventCreateManySessionInputSchema: z.ZodType<Prisma.SearchEventCreateManySessionInput> = z.object({
  id: z.string().cuid().optional(),
  query: z.string(),
  searchType: z.string(),
  totalHits: z.number().int(),
  took: z.number().int(),
  timestamp: z.coerce.date().optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.number().int().optional(),
  pageSize: z.number().int().optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SessionToSignalCreateManySessionsInputSchema: z.ZodType<Prisma.SessionToSignalCreateManySessionsInput> = z.object({
  B: z.string()
}).strict();

export const ABTestAssignmentUpdateWithoutSessionInputSchema: z.ZodType<Prisma.ABTestAssignmentUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  test: z.lazy(() => ABTestUpdateOneRequiredWithoutAssignmentsNestedInputSchema).optional()
}).strict();

export const ABTestAssignmentUncheckedUpdateWithoutSessionInputSchema: z.ZodType<Prisma.ABTestAssignmentUncheckedUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestAssignmentUncheckedUpdateManyWithoutSessionInputSchema: z.ZodType<Prisma.ABTestAssignmentUncheckedUpdateManyWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestMetricUpdateWithoutSessionInputSchema: z.ZodType<Prisma.ABTestMetricUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  test: z.lazy(() => ABTestUpdateOneRequiredWithoutMetricsNestedInputSchema).optional()
}).strict();

export const ABTestMetricUncheckedUpdateWithoutSessionInputSchema: z.ZodType<Prisma.ABTestMetricUncheckedUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestMetricUncheckedUpdateManyWithoutSessionInputSchema: z.ZodType<Prisma.ABTestMetricUncheckedUpdateManyWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  testId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnalyticsMetricsUpdateWithoutSessionInputSchema: z.ZodType<Prisma.AnalyticsMetricsUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalSearches: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  averageLatency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  successRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  errorRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cacheHitRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  queryCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  avgResultsPerQuery: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  clickThroughRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  conversionRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  avgRelevanceScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  p95Latency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  p99Latency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  resourceUtilization: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  searchTypes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeWindow: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnalyticsMetricsUncheckedUpdateWithoutSessionInputSchema: z.ZodType<Prisma.AnalyticsMetricsUncheckedUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalSearches: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  averageLatency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  successRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  errorRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cacheHitRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  queryCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  avgResultsPerQuery: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  clickThroughRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  conversionRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  avgRelevanceScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  p95Latency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  p99Latency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  resourceUtilization: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  searchTypes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeWindow: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AnalyticsMetricsUncheckedUpdateManyWithoutSessionInputSchema: z.ZodType<Prisma.AnalyticsMetricsUncheckedUpdateManyWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalSearches: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  averageLatency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  successRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  errorRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  cacheHitRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  queryCount: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  uniqueUsers: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  avgResultsPerQuery: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  clickThroughRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  conversionRate: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  avgRelevanceScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  p95Latency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  p99Latency: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  resourceUtilization: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  searchTypes: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeWindow: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ConversationUpdateWithoutSessionInputSchema: z.ZodType<Prisma.ConversationUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  messages: z.lazy(() => MessageUpdateManyWithoutConversationNestedInputSchema).optional()
}).strict();

export const ConversationUncheckedUpdateWithoutSessionInputSchema: z.ZodType<Prisma.ConversationUncheckedUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  messages: z.lazy(() => MessageUncheckedUpdateManyWithoutConversationNestedInputSchema).optional()
}).strict();

export const ConversationUncheckedUpdateManyWithoutSessionInputSchema: z.ZodType<Prisma.ConversationUncheckedUpdateManyWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  context: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningMetricUpdateWithoutSessionInputSchema: z.ZodType<Prisma.LearningMetricUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => EnumMetricTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interval: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aggregated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  model: z.lazy(() => ModelConfigUpdateOneWithoutMetricsNestedInputSchema).optional()
}).strict();

export const LearningMetricUncheckedUpdateWithoutSessionInputSchema: z.ZodType<Prisma.LearningMetricUncheckedUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => EnumMetricTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interval: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aggregated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningMetricUncheckedUpdateManyWithoutSessionInputSchema: z.ZodType<Prisma.LearningMetricUncheckedUpdateManyWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => EnumMetricTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interval: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aggregated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SearchEventUpdateWithoutSessionInputSchema: z.ZodType<Prisma.SearchEventUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  BaseEvent: z.lazy(() => BaseEventUpdateManyWithoutSearchEventNestedInputSchema).optional(),
  feedback: z.lazy(() => SearchFeedbackUpdateManyWithoutSearchEventNestedInputSchema).optional()
}).strict();

export const SearchEventUncheckedUpdateWithoutSessionInputSchema: z.ZodType<Prisma.SearchEventUncheckedUpdateWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  BaseEvent: z.lazy(() => BaseEventUncheckedUpdateManyWithoutSearchEventNestedInputSchema).optional(),
  feedback: z.lazy(() => SearchFeedbackUncheckedUpdateManyWithoutSearchEventNestedInputSchema).optional()
}).strict();

export const SearchEventUncheckedUpdateManyWithoutSessionInputSchema: z.ZodType<Prisma.SearchEventUncheckedUpdateManyWithoutSessionInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SessionToSignalUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.SessionToSignalUpdateWithoutSessionsInput> = z.object({
  Signal: z.lazy(() => SignalUpdateOneRequiredWithoutSessionToSignalNestedInputSchema).optional()
}).strict();

export const SessionToSignalUncheckedUpdateWithoutSessionsInputSchema: z.ZodType<Prisma.SessionToSignalUncheckedUpdateWithoutSessionsInput> = z.object({
  B: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionToSignalUncheckedUpdateManyWithoutSessionsInputSchema: z.ZodType<Prisma.SessionToSignalUncheckedUpdateManyWithoutSessionsInput> = z.object({
  B: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const MessageCreateManyConversationInputSchema: z.ZodType<Prisma.MessageCreateManyConversationInput> = z.object({
  id: z.string().cuid().optional(),
  role: z.string(),
  content: z.string(),
  timestamp: z.coerce.date().optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const MessageUpdateWithoutConversationInputSchema: z.ZodType<Prisma.MessageUpdateWithoutConversationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const MessageUncheckedUpdateWithoutConversationInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateWithoutConversationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const MessageUncheckedUpdateManyWithoutConversationInputSchema: z.ZodType<Prisma.MessageUncheckedUpdateManyWithoutConversationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  content: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ABTestAssignmentCreateManyTestInputSchema: z.ZodType<Prisma.ABTestAssignmentCreateManyTestInput> = z.object({
  id: z.string().cuid().optional(),
  sessionId: z.string(),
  variantId: z.string(),
  timestamp: z.coerce.date().optional()
}).strict();

export const ABTestMetricCreateManyTestInputSchema: z.ZodType<Prisma.ABTestMetricCreateManyTestInput> = z.object({
  id: z.string().cuid().optional(),
  variantId: z.string(),
  eventType: z.string(),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  sessionId: z.string()
}).strict();

export const ABTestMetricsCreateManyTestInputSchema: z.ZodType<Prisma.ABTestMetricsCreateManyTestInput> = z.object({
  id: z.string().cuid().optional(),
  variantId: z.string(),
  queryHash: z.string(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  timestamp: z.coerce.date().optional()
}).strict();

export const ABTestAssignmentUpdateWithoutTestInputSchema: z.ZodType<Prisma.ABTestAssignmentUpdateWithoutTestInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  session: z.lazy(() => SessionUpdateOneRequiredWithoutAbAssignmentsNestedInputSchema).optional()
}).strict();

export const ABTestAssignmentUncheckedUpdateWithoutTestInputSchema: z.ZodType<Prisma.ABTestAssignmentUncheckedUpdateWithoutTestInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestAssignmentUncheckedUpdateManyWithoutTestInputSchema: z.ZodType<Prisma.ABTestAssignmentUncheckedUpdateManyWithoutTestInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestMetricUpdateWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricUpdateWithoutTestInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  session: z.lazy(() => SessionUpdateOneRequiredWithoutAbMetricsNestedInputSchema).optional()
}).strict();

export const ABTestMetricUncheckedUpdateWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricUncheckedUpdateWithoutTestInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestMetricUncheckedUpdateManyWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricUncheckedUpdateManyWithoutTestInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  eventType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestMetricsUpdateWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricsUpdateWithoutTestInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestMetricsUncheckedUpdateWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricsUncheckedUpdateWithoutTestInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ABTestMetricsUncheckedUpdateManyWithoutTestInputSchema: z.ZodType<Prisma.ABTestMetricsUncheckedUpdateManyWithoutTestInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  variantId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SearchEventUpdateWithoutFeedbackInputSchema: z.ZodType<Prisma.SearchEventUpdateWithoutFeedbackInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  BaseEvent: z.lazy(() => BaseEventUpdateManyWithoutSearchEventNestedInputSchema).optional(),
  session: z.lazy(() => SessionUpdateOneRequiredWithoutSearchEventsNestedInputSchema).optional()
}).strict();

export const SearchEventUncheckedUpdateWithoutFeedbackInputSchema: z.ZodType<Prisma.SearchEventUncheckedUpdateWithoutFeedbackInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  BaseEvent: z.lazy(() => BaseEventUncheckedUpdateManyWithoutSearchEventNestedInputSchema).optional()
}).strict();

export const SearchEventUncheckedUpdateManyWithoutFeedbackInputSchema: z.ZodType<Prisma.SearchEventUncheckedUpdateManyWithoutFeedbackInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  query: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchType: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  totalHits: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  took: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  facetsUsed: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  resultIds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  page: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  pageSize: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const LearningMetricCreateManyModelInputSchema: z.ZodType<Prisma.LearningMetricCreateManyModelInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => MetricTypeSchema),
  value: z.number(),
  timestamp: z.coerce.date().optional(),
  interval: z.string(),
  sessionId: z.string().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.string(),
  aggregated: z.boolean().optional(),
  count: z.number().int().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const ModelVersionCreateManyConfigInputSchema: z.ZodType<Prisma.ModelVersionCreateManyConfigInput> = z.object({
  id: z.string().cuid().optional(),
  createdAt: z.coerce.date().optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  artifactPath: z.string(),
  parentVersion: z.string().optional().nullable()
}).strict();

export const LearningMetricUpdateWithoutModelInputSchema: z.ZodType<Prisma.LearningMetricUpdateWithoutModelInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => EnumMetricTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interval: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aggregated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  session: z.lazy(() => SessionUpdateOneWithoutLearningMetricsNestedInputSchema).optional()
}).strict();

export const LearningMetricUncheckedUpdateWithoutModelInputSchema: z.ZodType<Prisma.LearningMetricUncheckedUpdateWithoutModelInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => EnumMetricTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interval: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aggregated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningMetricUncheckedUpdateManyWithoutModelInputSchema: z.ZodType<Prisma.LearningMetricUncheckedUpdateManyWithoutModelInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => MetricTypeSchema),z.lazy(() => EnumMetricTypeFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  interval: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timeframe: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  aggregated: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  count: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ModelVersionUpdateWithoutConfigInputSchema: z.ZodType<Prisma.ModelVersionUpdateWithoutConfigInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  artifactPath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentVersion: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelVersionUncheckedUpdateWithoutConfigInputSchema: z.ZodType<Prisma.ModelVersionUncheckedUpdateWithoutConfigInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  artifactPath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentVersion: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelVersionUncheckedUpdateManyWithoutConfigInputSchema: z.ZodType<Prisma.ModelVersionUncheckedUpdateManyWithoutConfigInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  artifactPath: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  parentVersion: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelStateUpdateWithoutMetricsInputSchema: z.ZodType<Prisma.ModelStateUpdateWithoutMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weights: z.union([ z.lazy(() => ModelStateUpdateweightsInputSchema),z.number().array() ]).optional(),
  bias: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  scaler: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  featureNames: z.union([ z.lazy(() => ModelStateUpdatefeatureNamesInputSchema),z.string().array() ]).optional(),
  isTrained: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  modelType: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  currentEpoch: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  trainingProgress: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastTrainingError: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelStateUncheckedUpdateWithoutMetricsInputSchema: z.ZodType<Prisma.ModelStateUncheckedUpdateWithoutMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weights: z.union([ z.lazy(() => ModelStateUpdateweightsInputSchema),z.number().array() ]).optional(),
  bias: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  scaler: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  featureNames: z.union([ z.lazy(() => ModelStateUpdatefeatureNamesInputSchema),z.string().array() ]).optional(),
  isTrained: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  modelType: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  currentEpoch: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  trainingProgress: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastTrainingError: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelStateUncheckedUpdateManyWithoutMetricsInputSchema: z.ZodType<Prisma.ModelStateUncheckedUpdateManyWithoutMetricsInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  versionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  weights: z.union([ z.lazy(() => ModelStateUpdateweightsInputSchema),z.number().array() ]).optional(),
  bias: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  scaler: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  featureNames: z.union([ z.lazy(() => ModelStateUpdatefeatureNamesInputSchema),z.string().array() ]).optional(),
  isTrained: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  modelType: z.union([ z.lazy(() => ModelTypeSchema),z.lazy(() => EnumModelTypeFieldUpdateOperationsInputSchema) ]).optional(),
  hyperparameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  currentEpoch: z.union([ z.number().int(),z.lazy(() => IntFieldUpdateOperationsInputSchema) ]).optional(),
  trainingProgress: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  lastTrainingError: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ModelMetricsUpdateWithoutModelStateInputSchema: z.ZodType<Prisma.ModelMetricsUpdateWithoutModelStateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelVersionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accuracy: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  precision: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recall: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  f1Score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  latencyMs: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  loss: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  validationMetrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  customMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ModelMetricsUncheckedUpdateWithoutModelStateInputSchema: z.ZodType<Prisma.ModelMetricsUncheckedUpdateWithoutModelStateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelVersionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accuracy: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  precision: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recall: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  f1Score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  latencyMs: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  loss: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  validationMetrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  customMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const ModelMetricsUncheckedUpdateManyWithoutModelStateInputSchema: z.ZodType<Prisma.ModelMetricsUncheckedUpdateManyWithoutModelStateInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  modelVersionId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  accuracy: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  precision: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  recall: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  f1Score: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  latencyMs: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  loss: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  validationMetrics: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  customMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const BaseEventCreateManySearchEventInputSchema: z.ZodType<Prisma.BaseEventCreateManySearchEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EventTypeSchema),
  timestamp: z.coerce.date(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  source: z.string(),
  priority: z.number().int().optional().nullable(),
  processed: z.boolean().optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.string().optional().nullable()
}).strict();

export const BaseEventUpdateWithoutSearchEventInputSchema: z.ZodType<Prisma.BaseEventUpdateWithoutSearchEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processed: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelEvent: z.lazy(() => ModelEventUpdateOneWithoutBaseEventNestedInputSchema).optional()
}).strict();

export const BaseEventUncheckedUpdateWithoutSearchEventInputSchema: z.ZodType<Prisma.BaseEventUncheckedUpdateWithoutSearchEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processed: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  modelEvent: z.lazy(() => ModelEventUncheckedUpdateOneWithoutBaseEventNestedInputSchema).optional()
}).strict();

export const BaseEventUncheckedUpdateManyWithoutSearchEventInputSchema: z.ZodType<Prisma.BaseEventUncheckedUpdateManyWithoutSearchEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EventTypeSchema),z.lazy(() => EnumEventTypeFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  source: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  processed: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  correlationId: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SearchFeedbackUpdateWithoutSearchEventInputSchema: z.ZodType<Prisma.SearchFeedbackUpdateWithoutSearchEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relevanceScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  userAction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SearchFeedbackUncheckedUpdateWithoutSearchEventInputSchema: z.ZodType<Prisma.SearchFeedbackUncheckedUpdateWithoutSearchEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relevanceScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  userAction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SearchFeedbackUncheckedUpdateManyWithoutSearchEventInputSchema: z.ZodType<Prisma.SearchFeedbackUncheckedUpdateManyWithoutSearchEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  searchId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  queryHash: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  resultId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  relevanceScore: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  userAction: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  timestamp: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ProcessedSignalCreateManySignalInputSchema: z.ZodType<Prisma.ProcessedSignalCreateManySignalInput> = z.object({
  id: z.string().cuid().optional(),
  originalSignalId: z.string(),
  processingTime: z.number(),
  transformations: z.union([ z.lazy(() => ProcessedSignalCreatetransformationsInputSchema),z.string().array() ]).optional(),
  confidence: z.number(),
  processed: z.boolean().optional(),
  processingMetadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SessionToSignalCreateManySignalInputSchema: z.ZodType<Prisma.SessionToSignalCreateManySignalInput> = z.object({
  A: z.string()
}).strict();

export const ProcessedSignalUpdateWithoutSignalInputSchema: z.ZodType<Prisma.ProcessedSignalUpdateWithoutSignalInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalSignalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingTime: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transformations: z.union([ z.lazy(() => ProcessedSignalUpdatetransformationsInputSchema),z.string().array() ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processingMetadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ProcessedSignalUncheckedUpdateWithoutSignalInputSchema: z.ZodType<Prisma.ProcessedSignalUncheckedUpdateWithoutSignalInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalSignalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingTime: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transformations: z.union([ z.lazy(() => ProcessedSignalUpdatetransformationsInputSchema),z.string().array() ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processingMetadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const ProcessedSignalUncheckedUpdateManyWithoutSignalInputSchema: z.ZodType<Prisma.ProcessedSignalUncheckedUpdateManyWithoutSignalInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  originalSignalId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  processingTime: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  transformations: z.union([ z.lazy(() => ProcessedSignalUpdatetransformationsInputSchema),z.string().array() ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  processed: z.union([ z.boolean(),z.lazy(() => BoolFieldUpdateOperationsInputSchema) ]).optional(),
  processingMetadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const SessionToSignalUpdateWithoutSignalInputSchema: z.ZodType<Prisma.SessionToSignalUpdateWithoutSignalInput> = z.object({
  sessions: z.lazy(() => SessionUpdateOneRequiredWithoutSessionToSignalNestedInputSchema).optional()
}).strict();

export const SessionToSignalUncheckedUpdateWithoutSignalInputSchema: z.ZodType<Prisma.SessionToSignalUncheckedUpdateWithoutSignalInput> = z.object({
  A: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const SessionToSignalUncheckedUpdateManyWithoutSignalInputSchema: z.ZodType<Prisma.SessionToSignalUncheckedUpdateManyWithoutSignalInput> = z.object({
  A: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningPatternCreateManyEventInputSchema: z.ZodType<Prisma.LearningPatternCreateManyEventInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  confidence: z.number(),
  features: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const LearningPatternUpdateWithoutEventInputSchema: z.ZodType<Prisma.LearningPatternUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  features: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningPatternUncheckedUpdateWithoutEventInputSchema: z.ZodType<Prisma.LearningPatternUncheckedUpdateWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  features: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const LearningPatternUncheckedUpdateManyWithoutEventInputSchema: z.ZodType<Prisma.LearningPatternUncheckedUpdateManyWithoutEventInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  features: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  metadata: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineLearningResultCreateManyOperationInputSchema: z.ZodType<Prisma.EngineLearningResultCreateManyOperationInput> = z.object({
  id: z.string().cuid().optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  confidence: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.coerce.date().optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const EngineLearningResultUpdateWithoutOperationInputSchema: z.ZodType<Prisma.EngineLearningResultUpdateWithoutOperationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyUpdateManyWithoutLearningResultNestedInputSchema).optional(),
  recommendations: z.lazy(() => EngineRecommendationUpdateManyWithoutLearningResultNestedInputSchema).optional()
}).strict();

export const EngineLearningResultUncheckedUpdateWithoutOperationInputSchema: z.ZodType<Prisma.EngineLearningResultUncheckedUpdateWithoutOperationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  EngineOptimizationStrategy: z.lazy(() => EngineOptimizationStrategyUncheckedUpdateManyWithoutLearningResultNestedInputSchema).optional(),
  recommendations: z.lazy(() => EngineRecommendationUncheckedUpdateManyWithoutLearningResultNestedInputSchema).optional()
}).strict();

export const EngineLearningResultUncheckedUpdateManyWithoutOperationInputSchema: z.ZodType<Prisma.EngineLearningResultUncheckedUpdateManyWithoutOperationInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  patterns: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  performance: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  validatedAt: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  abTestMetrics: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
}).strict();

export const EngineOptimizationStrategyCreateManyLearningResultInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyCreateManyLearningResultInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EngineOptimizationTypeSchema),
  priority: z.number(),
  confidence: z.number(),
  impact: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineRecommendationCreateManyLearningResultInputSchema: z.ZodType<Prisma.EngineRecommendationCreateManyLearningResultInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.lazy(() => EngineOptimizationTypeSchema),
  priority: z.number(),
  confidence: z.number(),
  impact: z.number(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional()
}).strict();

export const EngineOptimizationStrategyUpdateWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUpdateWithoutLearningResultInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  impact: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineOptimizationStrategyUncheckedUpdateWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUncheckedUpdateWithoutLearningResultInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  impact: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineOptimizationStrategyUncheckedUpdateManyWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineOptimizationStrategyUncheckedUpdateManyWithoutLearningResultInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  impact: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineRecommendationUpdateWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineRecommendationUpdateWithoutLearningResultInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  impact: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineRecommendationUncheckedUpdateWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineRecommendationUncheckedUpdateWithoutLearningResultInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  impact: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const EngineRecommendationUncheckedUpdateManyWithoutLearningResultInputSchema: z.ZodType<Prisma.EngineRecommendationUncheckedUpdateManyWithoutLearningResultInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => EngineOptimizationTypeSchema),z.lazy(() => EnumEngineOptimizationTypeFieldUpdateOperationsInputSchema) ]).optional(),
  priority: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  confidence: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  impact: z.union([ z.number(),z.lazy(() => FloatFieldUpdateOperationsInputSchema) ]).optional(),
  metadata: z.union([ z.lazy(() => JsonNullValueInputSchema),InputJsonValueSchema ]).optional(),
  createdAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
  updatedAt: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AccountCreateManyUserInputSchema: z.ZodType<Prisma.AccountCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().optional().nullable(),
  access_token: z.string().optional().nullable(),
  expires_at: z.number().int().optional().nullable(),
  token_type: z.string().optional().nullable(),
  scope: z.string().optional().nullable(),
  id_token: z.string().optional().nullable(),
  session_state: z.string().optional().nullable()
}).strict();

export const AuthSessionCreateManyUserInputSchema: z.ZodType<Prisma.AuthSessionCreateManyUserInput> = z.object({
  id: z.string().cuid().optional(),
  sessionToken: z.string(),
  expires: z.coerce.date()
}).strict();

export const AccountUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AccountUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  provider: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  providerAccountId: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  refresh_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  access_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  expires_at: z.union([ z.number().int(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  token_type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  scope: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_token: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  session_state: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AuthSessionUpdateWithoutUserInputSchema: z.ZodType<Prisma.AuthSessionUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuthSessionUncheckedUpdateWithoutUserInputSchema: z.ZodType<Prisma.AuthSessionUncheckedUpdateWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

export const AuthSessionUncheckedUpdateManyWithoutUserInputSchema: z.ZodType<Prisma.AuthSessionUncheckedUpdateManyWithoutUserInput> = z.object({
  id: z.union([ z.string().cuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  sessionToken: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  expires: z.union([ z.coerce.date(),z.lazy(() => DateTimeFieldUpdateOperationsInputSchema) ]).optional(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const DocumentFindFirstArgsSchema: z.ZodType<Prisma.DocumentFindFirstArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  where: DocumentWhereInputSchema.optional(),
  orderBy: z.union([ DocumentOrderByWithRelationInputSchema.array(),DocumentOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentScalarFieldEnumSchema,DocumentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.DocumentFindFirstOrThrowArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  where: DocumentWhereInputSchema.optional(),
  orderBy: z.union([ DocumentOrderByWithRelationInputSchema.array(),DocumentOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentScalarFieldEnumSchema,DocumentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentFindManyArgsSchema: z.ZodType<Prisma.DocumentFindManyArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  where: DocumentWhereInputSchema.optional(),
  orderBy: z.union([ DocumentOrderByWithRelationInputSchema.array(),DocumentOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ DocumentScalarFieldEnumSchema,DocumentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const DocumentAggregateArgsSchema: z.ZodType<Prisma.DocumentAggregateArgs> = z.object({
  where: DocumentWhereInputSchema.optional(),
  orderBy: z.union([ DocumentOrderByWithRelationInputSchema.array(),DocumentOrderByWithRelationInputSchema ]).optional(),
  cursor: DocumentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DocumentGroupByArgsSchema: z.ZodType<Prisma.DocumentGroupByArgs> = z.object({
  where: DocumentWhereInputSchema.optional(),
  orderBy: z.union([ DocumentOrderByWithAggregationInputSchema.array(),DocumentOrderByWithAggregationInputSchema ]).optional(),
  by: DocumentScalarFieldEnumSchema.array(),
  having: DocumentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const DocumentFindUniqueArgsSchema: z.ZodType<Prisma.DocumentFindUniqueArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  where: DocumentWhereUniqueInputSchema,
}).strict() ;

export const DocumentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.DocumentFindUniqueOrThrowArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  where: DocumentWhereUniqueInputSchema,
}).strict() ;

export const MigrationFindFirstArgsSchema: z.ZodType<Prisma.MigrationFindFirstArgs> = z.object({
  select: MigrationSelectSchema.optional(),
  where: MigrationWhereInputSchema.optional(),
  orderBy: z.union([ MigrationOrderByWithRelationInputSchema.array(),MigrationOrderByWithRelationInputSchema ]).optional(),
  cursor: MigrationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MigrationScalarFieldEnumSchema,MigrationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MigrationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MigrationFindFirstOrThrowArgs> = z.object({
  select: MigrationSelectSchema.optional(),
  where: MigrationWhereInputSchema.optional(),
  orderBy: z.union([ MigrationOrderByWithRelationInputSchema.array(),MigrationOrderByWithRelationInputSchema ]).optional(),
  cursor: MigrationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MigrationScalarFieldEnumSchema,MigrationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MigrationFindManyArgsSchema: z.ZodType<Prisma.MigrationFindManyArgs> = z.object({
  select: MigrationSelectSchema.optional(),
  where: MigrationWhereInputSchema.optional(),
  orderBy: z.union([ MigrationOrderByWithRelationInputSchema.array(),MigrationOrderByWithRelationInputSchema ]).optional(),
  cursor: MigrationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MigrationScalarFieldEnumSchema,MigrationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MigrationAggregateArgsSchema: z.ZodType<Prisma.MigrationAggregateArgs> = z.object({
  where: MigrationWhereInputSchema.optional(),
  orderBy: z.union([ MigrationOrderByWithRelationInputSchema.array(),MigrationOrderByWithRelationInputSchema ]).optional(),
  cursor: MigrationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MigrationGroupByArgsSchema: z.ZodType<Prisma.MigrationGroupByArgs> = z.object({
  where: MigrationWhereInputSchema.optional(),
  orderBy: z.union([ MigrationOrderByWithAggregationInputSchema.array(),MigrationOrderByWithAggregationInputSchema ]).optional(),
  by: MigrationScalarFieldEnumSchema.array(),
  having: MigrationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MigrationFindUniqueArgsSchema: z.ZodType<Prisma.MigrationFindUniqueArgs> = z.object({
  select: MigrationSelectSchema.optional(),
  where: MigrationWhereUniqueInputSchema,
}).strict() ;

export const MigrationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MigrationFindUniqueOrThrowArgs> = z.object({
  select: MigrationSelectSchema.optional(),
  where: MigrationWhereUniqueInputSchema,
}).strict() ;

export const SearchAnalyticsFindFirstArgsSchema: z.ZodType<Prisma.SearchAnalyticsFindFirstArgs> = z.object({
  select: SearchAnalyticsSelectSchema.optional(),
  where: SearchAnalyticsWhereInputSchema.optional(),
  orderBy: z.union([ SearchAnalyticsOrderByWithRelationInputSchema.array(),SearchAnalyticsOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchAnalyticsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchAnalyticsScalarFieldEnumSchema,SearchAnalyticsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchAnalyticsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SearchAnalyticsFindFirstOrThrowArgs> = z.object({
  select: SearchAnalyticsSelectSchema.optional(),
  where: SearchAnalyticsWhereInputSchema.optional(),
  orderBy: z.union([ SearchAnalyticsOrderByWithRelationInputSchema.array(),SearchAnalyticsOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchAnalyticsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchAnalyticsScalarFieldEnumSchema,SearchAnalyticsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchAnalyticsFindManyArgsSchema: z.ZodType<Prisma.SearchAnalyticsFindManyArgs> = z.object({
  select: SearchAnalyticsSelectSchema.optional(),
  where: SearchAnalyticsWhereInputSchema.optional(),
  orderBy: z.union([ SearchAnalyticsOrderByWithRelationInputSchema.array(),SearchAnalyticsOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchAnalyticsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchAnalyticsScalarFieldEnumSchema,SearchAnalyticsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchAnalyticsAggregateArgsSchema: z.ZodType<Prisma.SearchAnalyticsAggregateArgs> = z.object({
  where: SearchAnalyticsWhereInputSchema.optional(),
  orderBy: z.union([ SearchAnalyticsOrderByWithRelationInputSchema.array(),SearchAnalyticsOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchAnalyticsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SearchAnalyticsGroupByArgsSchema: z.ZodType<Prisma.SearchAnalyticsGroupByArgs> = z.object({
  where: SearchAnalyticsWhereInputSchema.optional(),
  orderBy: z.union([ SearchAnalyticsOrderByWithAggregationInputSchema.array(),SearchAnalyticsOrderByWithAggregationInputSchema ]).optional(),
  by: SearchAnalyticsScalarFieldEnumSchema.array(),
  having: SearchAnalyticsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SearchAnalyticsFindUniqueArgsSchema: z.ZodType<Prisma.SearchAnalyticsFindUniqueArgs> = z.object({
  select: SearchAnalyticsSelectSchema.optional(),
  where: SearchAnalyticsWhereUniqueInputSchema,
}).strict() ;

export const SearchAnalyticsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SearchAnalyticsFindUniqueOrThrowArgs> = z.object({
  select: SearchAnalyticsSelectSchema.optional(),
  where: SearchAnalyticsWhereUniqueInputSchema,
}).strict() ;

export const SessionFindFirstArgsSchema: z.ZodType<Prisma.SessionFindFirstArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionFindFirstOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionFindManyArgsSchema: z.ZodType<Prisma.SessionFindManyArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionScalarFieldEnumSchema,SessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionAggregateArgsSchema: z.ZodType<Prisma.SessionAggregateArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithRelationInputSchema.array(),SessionOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionGroupByArgsSchema: z.ZodType<Prisma.SessionGroupByArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
  orderBy: z.union([ SessionOrderByWithAggregationInputSchema.array(),SessionOrderByWithAggregationInputSchema ]).optional(),
  by: SessionScalarFieldEnumSchema.array(),
  having: SessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionFindUniqueArgsSchema: z.ZodType<Prisma.SessionFindUniqueArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionFindUniqueOrThrowArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const ConversationFindFirstArgsSchema: z.ZodType<Prisma.ConversationFindFirstArgs> = z.object({
  select: ConversationSelectSchema.optional(),
  include: ConversationIncludeSchema.optional(),
  where: ConversationWhereInputSchema.optional(),
  orderBy: z.union([ ConversationOrderByWithRelationInputSchema.array(),ConversationOrderByWithRelationInputSchema ]).optional(),
  cursor: ConversationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ConversationScalarFieldEnumSchema,ConversationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ConversationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ConversationFindFirstOrThrowArgs> = z.object({
  select: ConversationSelectSchema.optional(),
  include: ConversationIncludeSchema.optional(),
  where: ConversationWhereInputSchema.optional(),
  orderBy: z.union([ ConversationOrderByWithRelationInputSchema.array(),ConversationOrderByWithRelationInputSchema ]).optional(),
  cursor: ConversationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ConversationScalarFieldEnumSchema,ConversationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ConversationFindManyArgsSchema: z.ZodType<Prisma.ConversationFindManyArgs> = z.object({
  select: ConversationSelectSchema.optional(),
  include: ConversationIncludeSchema.optional(),
  where: ConversationWhereInputSchema.optional(),
  orderBy: z.union([ ConversationOrderByWithRelationInputSchema.array(),ConversationOrderByWithRelationInputSchema ]).optional(),
  cursor: ConversationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ConversationScalarFieldEnumSchema,ConversationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ConversationAggregateArgsSchema: z.ZodType<Prisma.ConversationAggregateArgs> = z.object({
  where: ConversationWhereInputSchema.optional(),
  orderBy: z.union([ ConversationOrderByWithRelationInputSchema.array(),ConversationOrderByWithRelationInputSchema ]).optional(),
  cursor: ConversationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ConversationGroupByArgsSchema: z.ZodType<Prisma.ConversationGroupByArgs> = z.object({
  where: ConversationWhereInputSchema.optional(),
  orderBy: z.union([ ConversationOrderByWithAggregationInputSchema.array(),ConversationOrderByWithAggregationInputSchema ]).optional(),
  by: ConversationScalarFieldEnumSchema.array(),
  having: ConversationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ConversationFindUniqueArgsSchema: z.ZodType<Prisma.ConversationFindUniqueArgs> = z.object({
  select: ConversationSelectSchema.optional(),
  include: ConversationIncludeSchema.optional(),
  where: ConversationWhereUniqueInputSchema,
}).strict() ;

export const ConversationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ConversationFindUniqueOrThrowArgs> = z.object({
  select: ConversationSelectSchema.optional(),
  include: ConversationIncludeSchema.optional(),
  where: ConversationWhereUniqueInputSchema,
}).strict() ;

export const MessageFindFirstArgsSchema: z.ZodType<Prisma.MessageFindFirstArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithRelationInputSchema.array(),MessageOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageScalarFieldEnumSchema,MessageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MessageFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MessageFindFirstOrThrowArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithRelationInputSchema.array(),MessageOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageScalarFieldEnumSchema,MessageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MessageFindManyArgsSchema: z.ZodType<Prisma.MessageFindManyArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithRelationInputSchema.array(),MessageOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ MessageScalarFieldEnumSchema,MessageScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const MessageAggregateArgsSchema: z.ZodType<Prisma.MessageAggregateArgs> = z.object({
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithRelationInputSchema.array(),MessageOrderByWithRelationInputSchema ]).optional(),
  cursor: MessageWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MessageGroupByArgsSchema: z.ZodType<Prisma.MessageGroupByArgs> = z.object({
  where: MessageWhereInputSchema.optional(),
  orderBy: z.union([ MessageOrderByWithAggregationInputSchema.array(),MessageOrderByWithAggregationInputSchema ]).optional(),
  by: MessageScalarFieldEnumSchema.array(),
  having: MessageScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const MessageFindUniqueArgsSchema: z.ZodType<Prisma.MessageFindUniqueArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereUniqueInputSchema,
}).strict() ;

export const MessageFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MessageFindUniqueOrThrowArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereUniqueInputSchema,
}).strict() ;

export const ABTestFindFirstArgsSchema: z.ZodType<Prisma.ABTestFindFirstArgs> = z.object({
  select: ABTestSelectSchema.optional(),
  include: ABTestIncludeSchema.optional(),
  where: ABTestWhereInputSchema.optional(),
  orderBy: z.union([ ABTestOrderByWithRelationInputSchema.array(),ABTestOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ABTestScalarFieldEnumSchema,ABTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ABTestFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ABTestFindFirstOrThrowArgs> = z.object({
  select: ABTestSelectSchema.optional(),
  include: ABTestIncludeSchema.optional(),
  where: ABTestWhereInputSchema.optional(),
  orderBy: z.union([ ABTestOrderByWithRelationInputSchema.array(),ABTestOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ABTestScalarFieldEnumSchema,ABTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ABTestFindManyArgsSchema: z.ZodType<Prisma.ABTestFindManyArgs> = z.object({
  select: ABTestSelectSchema.optional(),
  include: ABTestIncludeSchema.optional(),
  where: ABTestWhereInputSchema.optional(),
  orderBy: z.union([ ABTestOrderByWithRelationInputSchema.array(),ABTestOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ABTestScalarFieldEnumSchema,ABTestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ABTestAggregateArgsSchema: z.ZodType<Prisma.ABTestAggregateArgs> = z.object({
  where: ABTestWhereInputSchema.optional(),
  orderBy: z.union([ ABTestOrderByWithRelationInputSchema.array(),ABTestOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ABTestGroupByArgsSchema: z.ZodType<Prisma.ABTestGroupByArgs> = z.object({
  where: ABTestWhereInputSchema.optional(),
  orderBy: z.union([ ABTestOrderByWithAggregationInputSchema.array(),ABTestOrderByWithAggregationInputSchema ]).optional(),
  by: ABTestScalarFieldEnumSchema.array(),
  having: ABTestScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ABTestFindUniqueArgsSchema: z.ZodType<Prisma.ABTestFindUniqueArgs> = z.object({
  select: ABTestSelectSchema.optional(),
  include: ABTestIncludeSchema.optional(),
  where: ABTestWhereUniqueInputSchema,
}).strict() ;

export const ABTestFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ABTestFindUniqueOrThrowArgs> = z.object({
  select: ABTestSelectSchema.optional(),
  include: ABTestIncludeSchema.optional(),
  where: ABTestWhereUniqueInputSchema,
}).strict() ;

export const ABTestAssignmentFindFirstArgsSchema: z.ZodType<Prisma.ABTestAssignmentFindFirstArgs> = z.object({
  select: ABTestAssignmentSelectSchema.optional(),
  include: ABTestAssignmentIncludeSchema.optional(),
  where: ABTestAssignmentWhereInputSchema.optional(),
  orderBy: z.union([ ABTestAssignmentOrderByWithRelationInputSchema.array(),ABTestAssignmentOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestAssignmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ABTestAssignmentScalarFieldEnumSchema,ABTestAssignmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ABTestAssignmentFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ABTestAssignmentFindFirstOrThrowArgs> = z.object({
  select: ABTestAssignmentSelectSchema.optional(),
  include: ABTestAssignmentIncludeSchema.optional(),
  where: ABTestAssignmentWhereInputSchema.optional(),
  orderBy: z.union([ ABTestAssignmentOrderByWithRelationInputSchema.array(),ABTestAssignmentOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestAssignmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ABTestAssignmentScalarFieldEnumSchema,ABTestAssignmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ABTestAssignmentFindManyArgsSchema: z.ZodType<Prisma.ABTestAssignmentFindManyArgs> = z.object({
  select: ABTestAssignmentSelectSchema.optional(),
  include: ABTestAssignmentIncludeSchema.optional(),
  where: ABTestAssignmentWhereInputSchema.optional(),
  orderBy: z.union([ ABTestAssignmentOrderByWithRelationInputSchema.array(),ABTestAssignmentOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestAssignmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ABTestAssignmentScalarFieldEnumSchema,ABTestAssignmentScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ABTestAssignmentAggregateArgsSchema: z.ZodType<Prisma.ABTestAssignmentAggregateArgs> = z.object({
  where: ABTestAssignmentWhereInputSchema.optional(),
  orderBy: z.union([ ABTestAssignmentOrderByWithRelationInputSchema.array(),ABTestAssignmentOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestAssignmentWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ABTestAssignmentGroupByArgsSchema: z.ZodType<Prisma.ABTestAssignmentGroupByArgs> = z.object({
  where: ABTestAssignmentWhereInputSchema.optional(),
  orderBy: z.union([ ABTestAssignmentOrderByWithAggregationInputSchema.array(),ABTestAssignmentOrderByWithAggregationInputSchema ]).optional(),
  by: ABTestAssignmentScalarFieldEnumSchema.array(),
  having: ABTestAssignmentScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ABTestAssignmentFindUniqueArgsSchema: z.ZodType<Prisma.ABTestAssignmentFindUniqueArgs> = z.object({
  select: ABTestAssignmentSelectSchema.optional(),
  include: ABTestAssignmentIncludeSchema.optional(),
  where: ABTestAssignmentWhereUniqueInputSchema,
}).strict() ;

export const ABTestAssignmentFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ABTestAssignmentFindUniqueOrThrowArgs> = z.object({
  select: ABTestAssignmentSelectSchema.optional(),
  include: ABTestAssignmentIncludeSchema.optional(),
  where: ABTestAssignmentWhereUniqueInputSchema,
}).strict() ;

export const ABTestMetricFindFirstArgsSchema: z.ZodType<Prisma.ABTestMetricFindFirstArgs> = z.object({
  select: ABTestMetricSelectSchema.optional(),
  include: ABTestMetricIncludeSchema.optional(),
  where: ABTestMetricWhereInputSchema.optional(),
  orderBy: z.union([ ABTestMetricOrderByWithRelationInputSchema.array(),ABTestMetricOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestMetricWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ABTestMetricScalarFieldEnumSchema,ABTestMetricScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ABTestMetricFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ABTestMetricFindFirstOrThrowArgs> = z.object({
  select: ABTestMetricSelectSchema.optional(),
  include: ABTestMetricIncludeSchema.optional(),
  where: ABTestMetricWhereInputSchema.optional(),
  orderBy: z.union([ ABTestMetricOrderByWithRelationInputSchema.array(),ABTestMetricOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestMetricWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ABTestMetricScalarFieldEnumSchema,ABTestMetricScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ABTestMetricFindManyArgsSchema: z.ZodType<Prisma.ABTestMetricFindManyArgs> = z.object({
  select: ABTestMetricSelectSchema.optional(),
  include: ABTestMetricIncludeSchema.optional(),
  where: ABTestMetricWhereInputSchema.optional(),
  orderBy: z.union([ ABTestMetricOrderByWithRelationInputSchema.array(),ABTestMetricOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestMetricWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ABTestMetricScalarFieldEnumSchema,ABTestMetricScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ABTestMetricAggregateArgsSchema: z.ZodType<Prisma.ABTestMetricAggregateArgs> = z.object({
  where: ABTestMetricWhereInputSchema.optional(),
  orderBy: z.union([ ABTestMetricOrderByWithRelationInputSchema.array(),ABTestMetricOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestMetricWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ABTestMetricGroupByArgsSchema: z.ZodType<Prisma.ABTestMetricGroupByArgs> = z.object({
  where: ABTestMetricWhereInputSchema.optional(),
  orderBy: z.union([ ABTestMetricOrderByWithAggregationInputSchema.array(),ABTestMetricOrderByWithAggregationInputSchema ]).optional(),
  by: ABTestMetricScalarFieldEnumSchema.array(),
  having: ABTestMetricScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ABTestMetricFindUniqueArgsSchema: z.ZodType<Prisma.ABTestMetricFindUniqueArgs> = z.object({
  select: ABTestMetricSelectSchema.optional(),
  include: ABTestMetricIncludeSchema.optional(),
  where: ABTestMetricWhereUniqueInputSchema,
}).strict() ;

export const ABTestMetricFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ABTestMetricFindUniqueOrThrowArgs> = z.object({
  select: ABTestMetricSelectSchema.optional(),
  include: ABTestMetricIncludeSchema.optional(),
  where: ABTestMetricWhereUniqueInputSchema,
}).strict() ;

export const SearchFeedbackFindFirstArgsSchema: z.ZodType<Prisma.SearchFeedbackFindFirstArgs> = z.object({
  select: SearchFeedbackSelectSchema.optional(),
  include: SearchFeedbackIncludeSchema.optional(),
  where: SearchFeedbackWhereInputSchema.optional(),
  orderBy: z.union([ SearchFeedbackOrderByWithRelationInputSchema.array(),SearchFeedbackOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchFeedbackWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchFeedbackScalarFieldEnumSchema,SearchFeedbackScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchFeedbackFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SearchFeedbackFindFirstOrThrowArgs> = z.object({
  select: SearchFeedbackSelectSchema.optional(),
  include: SearchFeedbackIncludeSchema.optional(),
  where: SearchFeedbackWhereInputSchema.optional(),
  orderBy: z.union([ SearchFeedbackOrderByWithRelationInputSchema.array(),SearchFeedbackOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchFeedbackWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchFeedbackScalarFieldEnumSchema,SearchFeedbackScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchFeedbackFindManyArgsSchema: z.ZodType<Prisma.SearchFeedbackFindManyArgs> = z.object({
  select: SearchFeedbackSelectSchema.optional(),
  include: SearchFeedbackIncludeSchema.optional(),
  where: SearchFeedbackWhereInputSchema.optional(),
  orderBy: z.union([ SearchFeedbackOrderByWithRelationInputSchema.array(),SearchFeedbackOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchFeedbackWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchFeedbackScalarFieldEnumSchema,SearchFeedbackScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchFeedbackAggregateArgsSchema: z.ZodType<Prisma.SearchFeedbackAggregateArgs> = z.object({
  where: SearchFeedbackWhereInputSchema.optional(),
  orderBy: z.union([ SearchFeedbackOrderByWithRelationInputSchema.array(),SearchFeedbackOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchFeedbackWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SearchFeedbackGroupByArgsSchema: z.ZodType<Prisma.SearchFeedbackGroupByArgs> = z.object({
  where: SearchFeedbackWhereInputSchema.optional(),
  orderBy: z.union([ SearchFeedbackOrderByWithAggregationInputSchema.array(),SearchFeedbackOrderByWithAggregationInputSchema ]).optional(),
  by: SearchFeedbackScalarFieldEnumSchema.array(),
  having: SearchFeedbackScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SearchFeedbackFindUniqueArgsSchema: z.ZodType<Prisma.SearchFeedbackFindUniqueArgs> = z.object({
  select: SearchFeedbackSelectSchema.optional(),
  include: SearchFeedbackIncludeSchema.optional(),
  where: SearchFeedbackWhereUniqueInputSchema,
}).strict() ;

export const SearchFeedbackFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SearchFeedbackFindUniqueOrThrowArgs> = z.object({
  select: SearchFeedbackSelectSchema.optional(),
  include: SearchFeedbackIncludeSchema.optional(),
  where: SearchFeedbackWhereUniqueInputSchema,
}).strict() ;

export const BaseEventFindFirstArgsSchema: z.ZodType<Prisma.BaseEventFindFirstArgs> = z.object({
  select: BaseEventSelectSchema.optional(),
  include: BaseEventIncludeSchema.optional(),
  where: BaseEventWhereInputSchema.optional(),
  orderBy: z.union([ BaseEventOrderByWithRelationInputSchema.array(),BaseEventOrderByWithRelationInputSchema ]).optional(),
  cursor: BaseEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BaseEventScalarFieldEnumSchema,BaseEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BaseEventFindFirstOrThrowArgsSchema: z.ZodType<Prisma.BaseEventFindFirstOrThrowArgs> = z.object({
  select: BaseEventSelectSchema.optional(),
  include: BaseEventIncludeSchema.optional(),
  where: BaseEventWhereInputSchema.optional(),
  orderBy: z.union([ BaseEventOrderByWithRelationInputSchema.array(),BaseEventOrderByWithRelationInputSchema ]).optional(),
  cursor: BaseEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BaseEventScalarFieldEnumSchema,BaseEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BaseEventFindManyArgsSchema: z.ZodType<Prisma.BaseEventFindManyArgs> = z.object({
  select: BaseEventSelectSchema.optional(),
  include: BaseEventIncludeSchema.optional(),
  where: BaseEventWhereInputSchema.optional(),
  orderBy: z.union([ BaseEventOrderByWithRelationInputSchema.array(),BaseEventOrderByWithRelationInputSchema ]).optional(),
  cursor: BaseEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ BaseEventScalarFieldEnumSchema,BaseEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const BaseEventAggregateArgsSchema: z.ZodType<Prisma.BaseEventAggregateArgs> = z.object({
  where: BaseEventWhereInputSchema.optional(),
  orderBy: z.union([ BaseEventOrderByWithRelationInputSchema.array(),BaseEventOrderByWithRelationInputSchema ]).optional(),
  cursor: BaseEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BaseEventGroupByArgsSchema: z.ZodType<Prisma.BaseEventGroupByArgs> = z.object({
  where: BaseEventWhereInputSchema.optional(),
  orderBy: z.union([ BaseEventOrderByWithAggregationInputSchema.array(),BaseEventOrderByWithAggregationInputSchema ]).optional(),
  by: BaseEventScalarFieldEnumSchema.array(),
  having: BaseEventScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const BaseEventFindUniqueArgsSchema: z.ZodType<Prisma.BaseEventFindUniqueArgs> = z.object({
  select: BaseEventSelectSchema.optional(),
  include: BaseEventIncludeSchema.optional(),
  where: BaseEventWhereUniqueInputSchema,
}).strict() ;

export const BaseEventFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.BaseEventFindUniqueOrThrowArgs> = z.object({
  select: BaseEventSelectSchema.optional(),
  include: BaseEventIncludeSchema.optional(),
  where: BaseEventWhereUniqueInputSchema,
}).strict() ;

export const ModelEventFindFirstArgsSchema: z.ZodType<Prisma.ModelEventFindFirstArgs> = z.object({
  select: ModelEventSelectSchema.optional(),
  include: ModelEventIncludeSchema.optional(),
  where: ModelEventWhereInputSchema.optional(),
  orderBy: z.union([ ModelEventOrderByWithRelationInputSchema.array(),ModelEventOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelEventScalarFieldEnumSchema,ModelEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelEventFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ModelEventFindFirstOrThrowArgs> = z.object({
  select: ModelEventSelectSchema.optional(),
  include: ModelEventIncludeSchema.optional(),
  where: ModelEventWhereInputSchema.optional(),
  orderBy: z.union([ ModelEventOrderByWithRelationInputSchema.array(),ModelEventOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelEventScalarFieldEnumSchema,ModelEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelEventFindManyArgsSchema: z.ZodType<Prisma.ModelEventFindManyArgs> = z.object({
  select: ModelEventSelectSchema.optional(),
  include: ModelEventIncludeSchema.optional(),
  where: ModelEventWhereInputSchema.optional(),
  orderBy: z.union([ ModelEventOrderByWithRelationInputSchema.array(),ModelEventOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelEventScalarFieldEnumSchema,ModelEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelEventAggregateArgsSchema: z.ZodType<Prisma.ModelEventAggregateArgs> = z.object({
  where: ModelEventWhereInputSchema.optional(),
  orderBy: z.union([ ModelEventOrderByWithRelationInputSchema.array(),ModelEventOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ModelEventGroupByArgsSchema: z.ZodType<Prisma.ModelEventGroupByArgs> = z.object({
  where: ModelEventWhereInputSchema.optional(),
  orderBy: z.union([ ModelEventOrderByWithAggregationInputSchema.array(),ModelEventOrderByWithAggregationInputSchema ]).optional(),
  by: ModelEventScalarFieldEnumSchema.array(),
  having: ModelEventScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ModelEventFindUniqueArgsSchema: z.ZodType<Prisma.ModelEventFindUniqueArgs> = z.object({
  select: ModelEventSelectSchema.optional(),
  include: ModelEventIncludeSchema.optional(),
  where: ModelEventWhereUniqueInputSchema,
}).strict() ;

export const ModelEventFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ModelEventFindUniqueOrThrowArgs> = z.object({
  select: ModelEventSelectSchema.optional(),
  include: ModelEventIncludeSchema.optional(),
  where: ModelEventWhereUniqueInputSchema,
}).strict() ;

export const ProcessedSignalFindFirstArgsSchema: z.ZodType<Prisma.ProcessedSignalFindFirstArgs> = z.object({
  select: ProcessedSignalSelectSchema.optional(),
  include: ProcessedSignalIncludeSchema.optional(),
  where: ProcessedSignalWhereInputSchema.optional(),
  orderBy: z.union([ ProcessedSignalOrderByWithRelationInputSchema.array(),ProcessedSignalOrderByWithRelationInputSchema ]).optional(),
  cursor: ProcessedSignalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProcessedSignalScalarFieldEnumSchema,ProcessedSignalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProcessedSignalFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProcessedSignalFindFirstOrThrowArgs> = z.object({
  select: ProcessedSignalSelectSchema.optional(),
  include: ProcessedSignalIncludeSchema.optional(),
  where: ProcessedSignalWhereInputSchema.optional(),
  orderBy: z.union([ ProcessedSignalOrderByWithRelationInputSchema.array(),ProcessedSignalOrderByWithRelationInputSchema ]).optional(),
  cursor: ProcessedSignalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProcessedSignalScalarFieldEnumSchema,ProcessedSignalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProcessedSignalFindManyArgsSchema: z.ZodType<Prisma.ProcessedSignalFindManyArgs> = z.object({
  select: ProcessedSignalSelectSchema.optional(),
  include: ProcessedSignalIncludeSchema.optional(),
  where: ProcessedSignalWhereInputSchema.optional(),
  orderBy: z.union([ ProcessedSignalOrderByWithRelationInputSchema.array(),ProcessedSignalOrderByWithRelationInputSchema ]).optional(),
  cursor: ProcessedSignalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ProcessedSignalScalarFieldEnumSchema,ProcessedSignalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ProcessedSignalAggregateArgsSchema: z.ZodType<Prisma.ProcessedSignalAggregateArgs> = z.object({
  where: ProcessedSignalWhereInputSchema.optional(),
  orderBy: z.union([ ProcessedSignalOrderByWithRelationInputSchema.array(),ProcessedSignalOrderByWithRelationInputSchema ]).optional(),
  cursor: ProcessedSignalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProcessedSignalGroupByArgsSchema: z.ZodType<Prisma.ProcessedSignalGroupByArgs> = z.object({
  where: ProcessedSignalWhereInputSchema.optional(),
  orderBy: z.union([ ProcessedSignalOrderByWithAggregationInputSchema.array(),ProcessedSignalOrderByWithAggregationInputSchema ]).optional(),
  by: ProcessedSignalScalarFieldEnumSchema.array(),
  having: ProcessedSignalScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ProcessedSignalFindUniqueArgsSchema: z.ZodType<Prisma.ProcessedSignalFindUniqueArgs> = z.object({
  select: ProcessedSignalSelectSchema.optional(),
  include: ProcessedSignalIncludeSchema.optional(),
  where: ProcessedSignalWhereUniqueInputSchema,
}).strict() ;

export const ProcessedSignalFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProcessedSignalFindUniqueOrThrowArgs> = z.object({
  select: ProcessedSignalSelectSchema.optional(),
  include: ProcessedSignalIncludeSchema.optional(),
  where: ProcessedSignalWhereUniqueInputSchema,
}).strict() ;

export const SignalBatchFindFirstArgsSchema: z.ZodType<Prisma.SignalBatchFindFirstArgs> = z.object({
  select: SignalBatchSelectSchema.optional(),
  where: SignalBatchWhereInputSchema.optional(),
  orderBy: z.union([ SignalBatchOrderByWithRelationInputSchema.array(),SignalBatchOrderByWithRelationInputSchema ]).optional(),
  cursor: SignalBatchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SignalBatchScalarFieldEnumSchema,SignalBatchScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SignalBatchFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SignalBatchFindFirstOrThrowArgs> = z.object({
  select: SignalBatchSelectSchema.optional(),
  where: SignalBatchWhereInputSchema.optional(),
  orderBy: z.union([ SignalBatchOrderByWithRelationInputSchema.array(),SignalBatchOrderByWithRelationInputSchema ]).optional(),
  cursor: SignalBatchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SignalBatchScalarFieldEnumSchema,SignalBatchScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SignalBatchFindManyArgsSchema: z.ZodType<Prisma.SignalBatchFindManyArgs> = z.object({
  select: SignalBatchSelectSchema.optional(),
  where: SignalBatchWhereInputSchema.optional(),
  orderBy: z.union([ SignalBatchOrderByWithRelationInputSchema.array(),SignalBatchOrderByWithRelationInputSchema ]).optional(),
  cursor: SignalBatchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SignalBatchScalarFieldEnumSchema,SignalBatchScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SignalBatchAggregateArgsSchema: z.ZodType<Prisma.SignalBatchAggregateArgs> = z.object({
  where: SignalBatchWhereInputSchema.optional(),
  orderBy: z.union([ SignalBatchOrderByWithRelationInputSchema.array(),SignalBatchOrderByWithRelationInputSchema ]).optional(),
  cursor: SignalBatchWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SignalBatchGroupByArgsSchema: z.ZodType<Prisma.SignalBatchGroupByArgs> = z.object({
  where: SignalBatchWhereInputSchema.optional(),
  orderBy: z.union([ SignalBatchOrderByWithAggregationInputSchema.array(),SignalBatchOrderByWithAggregationInputSchema ]).optional(),
  by: SignalBatchScalarFieldEnumSchema.array(),
  having: SignalBatchScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SignalBatchFindUniqueArgsSchema: z.ZodType<Prisma.SignalBatchFindUniqueArgs> = z.object({
  select: SignalBatchSelectSchema.optional(),
  where: SignalBatchWhereUniqueInputSchema,
}).strict() ;

export const SignalBatchFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SignalBatchFindUniqueOrThrowArgs> = z.object({
  select: SignalBatchSelectSchema.optional(),
  where: SignalBatchWhereUniqueInputSchema,
}).strict() ;

export const SignalPatternFindFirstArgsSchema: z.ZodType<Prisma.SignalPatternFindFirstArgs> = z.object({
  select: SignalPatternSelectSchema.optional(),
  where: SignalPatternWhereInputSchema.optional(),
  orderBy: z.union([ SignalPatternOrderByWithRelationInputSchema.array(),SignalPatternOrderByWithRelationInputSchema ]).optional(),
  cursor: SignalPatternWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SignalPatternScalarFieldEnumSchema,SignalPatternScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SignalPatternFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SignalPatternFindFirstOrThrowArgs> = z.object({
  select: SignalPatternSelectSchema.optional(),
  where: SignalPatternWhereInputSchema.optional(),
  orderBy: z.union([ SignalPatternOrderByWithRelationInputSchema.array(),SignalPatternOrderByWithRelationInputSchema ]).optional(),
  cursor: SignalPatternWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SignalPatternScalarFieldEnumSchema,SignalPatternScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SignalPatternFindManyArgsSchema: z.ZodType<Prisma.SignalPatternFindManyArgs> = z.object({
  select: SignalPatternSelectSchema.optional(),
  where: SignalPatternWhereInputSchema.optional(),
  orderBy: z.union([ SignalPatternOrderByWithRelationInputSchema.array(),SignalPatternOrderByWithRelationInputSchema ]).optional(),
  cursor: SignalPatternWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SignalPatternScalarFieldEnumSchema,SignalPatternScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SignalPatternAggregateArgsSchema: z.ZodType<Prisma.SignalPatternAggregateArgs> = z.object({
  where: SignalPatternWhereInputSchema.optional(),
  orderBy: z.union([ SignalPatternOrderByWithRelationInputSchema.array(),SignalPatternOrderByWithRelationInputSchema ]).optional(),
  cursor: SignalPatternWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SignalPatternGroupByArgsSchema: z.ZodType<Prisma.SignalPatternGroupByArgs> = z.object({
  where: SignalPatternWhereInputSchema.optional(),
  orderBy: z.union([ SignalPatternOrderByWithAggregationInputSchema.array(),SignalPatternOrderByWithAggregationInputSchema ]).optional(),
  by: SignalPatternScalarFieldEnumSchema.array(),
  having: SignalPatternScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SignalPatternFindUniqueArgsSchema: z.ZodType<Prisma.SignalPatternFindUniqueArgs> = z.object({
  select: SignalPatternSelectSchema.optional(),
  where: SignalPatternWhereUniqueInputSchema,
}).strict() ;

export const SignalPatternFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SignalPatternFindUniqueOrThrowArgs> = z.object({
  select: SignalPatternSelectSchema.optional(),
  where: SignalPatternWhereUniqueInputSchema,
}).strict() ;

export const AdaptationRuleFindFirstArgsSchema: z.ZodType<Prisma.AdaptationRuleFindFirstArgs> = z.object({
  select: AdaptationRuleSelectSchema.optional(),
  where: AdaptationRuleWhereInputSchema.optional(),
  orderBy: z.union([ AdaptationRuleOrderByWithRelationInputSchema.array(),AdaptationRuleOrderByWithRelationInputSchema ]).optional(),
  cursor: AdaptationRuleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdaptationRuleScalarFieldEnumSchema,AdaptationRuleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdaptationRuleFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AdaptationRuleFindFirstOrThrowArgs> = z.object({
  select: AdaptationRuleSelectSchema.optional(),
  where: AdaptationRuleWhereInputSchema.optional(),
  orderBy: z.union([ AdaptationRuleOrderByWithRelationInputSchema.array(),AdaptationRuleOrderByWithRelationInputSchema ]).optional(),
  cursor: AdaptationRuleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdaptationRuleScalarFieldEnumSchema,AdaptationRuleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdaptationRuleFindManyArgsSchema: z.ZodType<Prisma.AdaptationRuleFindManyArgs> = z.object({
  select: AdaptationRuleSelectSchema.optional(),
  where: AdaptationRuleWhereInputSchema.optional(),
  orderBy: z.union([ AdaptationRuleOrderByWithRelationInputSchema.array(),AdaptationRuleOrderByWithRelationInputSchema ]).optional(),
  cursor: AdaptationRuleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdaptationRuleScalarFieldEnumSchema,AdaptationRuleScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdaptationRuleAggregateArgsSchema: z.ZodType<Prisma.AdaptationRuleAggregateArgs> = z.object({
  where: AdaptationRuleWhereInputSchema.optional(),
  orderBy: z.union([ AdaptationRuleOrderByWithRelationInputSchema.array(),AdaptationRuleOrderByWithRelationInputSchema ]).optional(),
  cursor: AdaptationRuleWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdaptationRuleGroupByArgsSchema: z.ZodType<Prisma.AdaptationRuleGroupByArgs> = z.object({
  where: AdaptationRuleWhereInputSchema.optional(),
  orderBy: z.union([ AdaptationRuleOrderByWithAggregationInputSchema.array(),AdaptationRuleOrderByWithAggregationInputSchema ]).optional(),
  by: AdaptationRuleScalarFieldEnumSchema.array(),
  having: AdaptationRuleScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdaptationRuleFindUniqueArgsSchema: z.ZodType<Prisma.AdaptationRuleFindUniqueArgs> = z.object({
  select: AdaptationRuleSelectSchema.optional(),
  where: AdaptationRuleWhereUniqueInputSchema,
}).strict() ;

export const AdaptationRuleFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AdaptationRuleFindUniqueOrThrowArgs> = z.object({
  select: AdaptationRuleSelectSchema.optional(),
  where: AdaptationRuleWhereUniqueInputSchema,
}).strict() ;

export const ModelConfigFindFirstArgsSchema: z.ZodType<Prisma.ModelConfigFindFirstArgs> = z.object({
  select: ModelConfigSelectSchema.optional(),
  include: ModelConfigIncludeSchema.optional(),
  where: ModelConfigWhereInputSchema.optional(),
  orderBy: z.union([ ModelConfigOrderByWithRelationInputSchema.array(),ModelConfigOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelConfigWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelConfigScalarFieldEnumSchema,ModelConfigScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelConfigFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ModelConfigFindFirstOrThrowArgs> = z.object({
  select: ModelConfigSelectSchema.optional(),
  include: ModelConfigIncludeSchema.optional(),
  where: ModelConfigWhereInputSchema.optional(),
  orderBy: z.union([ ModelConfigOrderByWithRelationInputSchema.array(),ModelConfigOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelConfigWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelConfigScalarFieldEnumSchema,ModelConfigScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelConfigFindManyArgsSchema: z.ZodType<Prisma.ModelConfigFindManyArgs> = z.object({
  select: ModelConfigSelectSchema.optional(),
  include: ModelConfigIncludeSchema.optional(),
  where: ModelConfigWhereInputSchema.optional(),
  orderBy: z.union([ ModelConfigOrderByWithRelationInputSchema.array(),ModelConfigOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelConfigWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelConfigScalarFieldEnumSchema,ModelConfigScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelConfigAggregateArgsSchema: z.ZodType<Prisma.ModelConfigAggregateArgs> = z.object({
  where: ModelConfigWhereInputSchema.optional(),
  orderBy: z.union([ ModelConfigOrderByWithRelationInputSchema.array(),ModelConfigOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelConfigWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ModelConfigGroupByArgsSchema: z.ZodType<Prisma.ModelConfigGroupByArgs> = z.object({
  where: ModelConfigWhereInputSchema.optional(),
  orderBy: z.union([ ModelConfigOrderByWithAggregationInputSchema.array(),ModelConfigOrderByWithAggregationInputSchema ]).optional(),
  by: ModelConfigScalarFieldEnumSchema.array(),
  having: ModelConfigScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ModelConfigFindUniqueArgsSchema: z.ZodType<Prisma.ModelConfigFindUniqueArgs> = z.object({
  select: ModelConfigSelectSchema.optional(),
  include: ModelConfigIncludeSchema.optional(),
  where: ModelConfigWhereUniqueInputSchema,
}).strict() ;

export const ModelConfigFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ModelConfigFindUniqueOrThrowArgs> = z.object({
  select: ModelConfigSelectSchema.optional(),
  include: ModelConfigIncludeSchema.optional(),
  where: ModelConfigWhereUniqueInputSchema,
}).strict() ;

export const ModelVersionFindFirstArgsSchema: z.ZodType<Prisma.ModelVersionFindFirstArgs> = z.object({
  select: ModelVersionSelectSchema.optional(),
  include: ModelVersionIncludeSchema.optional(),
  where: ModelVersionWhereInputSchema.optional(),
  orderBy: z.union([ ModelVersionOrderByWithRelationInputSchema.array(),ModelVersionOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelVersionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelVersionScalarFieldEnumSchema,ModelVersionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelVersionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ModelVersionFindFirstOrThrowArgs> = z.object({
  select: ModelVersionSelectSchema.optional(),
  include: ModelVersionIncludeSchema.optional(),
  where: ModelVersionWhereInputSchema.optional(),
  orderBy: z.union([ ModelVersionOrderByWithRelationInputSchema.array(),ModelVersionOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelVersionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelVersionScalarFieldEnumSchema,ModelVersionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelVersionFindManyArgsSchema: z.ZodType<Prisma.ModelVersionFindManyArgs> = z.object({
  select: ModelVersionSelectSchema.optional(),
  include: ModelVersionIncludeSchema.optional(),
  where: ModelVersionWhereInputSchema.optional(),
  orderBy: z.union([ ModelVersionOrderByWithRelationInputSchema.array(),ModelVersionOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelVersionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelVersionScalarFieldEnumSchema,ModelVersionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelVersionAggregateArgsSchema: z.ZodType<Prisma.ModelVersionAggregateArgs> = z.object({
  where: ModelVersionWhereInputSchema.optional(),
  orderBy: z.union([ ModelVersionOrderByWithRelationInputSchema.array(),ModelVersionOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelVersionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ModelVersionGroupByArgsSchema: z.ZodType<Prisma.ModelVersionGroupByArgs> = z.object({
  where: ModelVersionWhereInputSchema.optional(),
  orderBy: z.union([ ModelVersionOrderByWithAggregationInputSchema.array(),ModelVersionOrderByWithAggregationInputSchema ]).optional(),
  by: ModelVersionScalarFieldEnumSchema.array(),
  having: ModelVersionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ModelVersionFindUniqueArgsSchema: z.ZodType<Prisma.ModelVersionFindUniqueArgs> = z.object({
  select: ModelVersionSelectSchema.optional(),
  include: ModelVersionIncludeSchema.optional(),
  where: ModelVersionWhereUniqueInputSchema,
}).strict() ;

export const ModelVersionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ModelVersionFindUniqueOrThrowArgs> = z.object({
  select: ModelVersionSelectSchema.optional(),
  include: ModelVersionIncludeSchema.optional(),
  where: ModelVersionWhereUniqueInputSchema,
}).strict() ;

export const LearningRequestFindFirstArgsSchema: z.ZodType<Prisma.LearningRequestFindFirstArgs> = z.object({
  select: LearningRequestSelectSchema.optional(),
  where: LearningRequestWhereInputSchema.optional(),
  orderBy: z.union([ LearningRequestOrderByWithRelationInputSchema.array(),LearningRequestOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LearningRequestScalarFieldEnumSchema,LearningRequestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LearningRequestFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LearningRequestFindFirstOrThrowArgs> = z.object({
  select: LearningRequestSelectSchema.optional(),
  where: LearningRequestWhereInputSchema.optional(),
  orderBy: z.union([ LearningRequestOrderByWithRelationInputSchema.array(),LearningRequestOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LearningRequestScalarFieldEnumSchema,LearningRequestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LearningRequestFindManyArgsSchema: z.ZodType<Prisma.LearningRequestFindManyArgs> = z.object({
  select: LearningRequestSelectSchema.optional(),
  where: LearningRequestWhereInputSchema.optional(),
  orderBy: z.union([ LearningRequestOrderByWithRelationInputSchema.array(),LearningRequestOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LearningRequestScalarFieldEnumSchema,LearningRequestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LearningRequestAggregateArgsSchema: z.ZodType<Prisma.LearningRequestAggregateArgs> = z.object({
  where: LearningRequestWhereInputSchema.optional(),
  orderBy: z.union([ LearningRequestOrderByWithRelationInputSchema.array(),LearningRequestOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LearningRequestGroupByArgsSchema: z.ZodType<Prisma.LearningRequestGroupByArgs> = z.object({
  where: LearningRequestWhereInputSchema.optional(),
  orderBy: z.union([ LearningRequestOrderByWithAggregationInputSchema.array(),LearningRequestOrderByWithAggregationInputSchema ]).optional(),
  by: LearningRequestScalarFieldEnumSchema.array(),
  having: LearningRequestScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LearningRequestFindUniqueArgsSchema: z.ZodType<Prisma.LearningRequestFindUniqueArgs> = z.object({
  select: LearningRequestSelectSchema.optional(),
  where: LearningRequestWhereUniqueInputSchema,
}).strict() ;

export const LearningRequestFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LearningRequestFindUniqueOrThrowArgs> = z.object({
  select: LearningRequestSelectSchema.optional(),
  where: LearningRequestWhereUniqueInputSchema,
}).strict() ;

export const FeedbackRequestFindFirstArgsSchema: z.ZodType<Prisma.FeedbackRequestFindFirstArgs> = z.object({
  select: FeedbackRequestSelectSchema.optional(),
  where: FeedbackRequestWhereInputSchema.optional(),
  orderBy: z.union([ FeedbackRequestOrderByWithRelationInputSchema.array(),FeedbackRequestOrderByWithRelationInputSchema ]).optional(),
  cursor: FeedbackRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FeedbackRequestScalarFieldEnumSchema,FeedbackRequestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FeedbackRequestFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FeedbackRequestFindFirstOrThrowArgs> = z.object({
  select: FeedbackRequestSelectSchema.optional(),
  where: FeedbackRequestWhereInputSchema.optional(),
  orderBy: z.union([ FeedbackRequestOrderByWithRelationInputSchema.array(),FeedbackRequestOrderByWithRelationInputSchema ]).optional(),
  cursor: FeedbackRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FeedbackRequestScalarFieldEnumSchema,FeedbackRequestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FeedbackRequestFindManyArgsSchema: z.ZodType<Prisma.FeedbackRequestFindManyArgs> = z.object({
  select: FeedbackRequestSelectSchema.optional(),
  where: FeedbackRequestWhereInputSchema.optional(),
  orderBy: z.union([ FeedbackRequestOrderByWithRelationInputSchema.array(),FeedbackRequestOrderByWithRelationInputSchema ]).optional(),
  cursor: FeedbackRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ FeedbackRequestScalarFieldEnumSchema,FeedbackRequestScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const FeedbackRequestAggregateArgsSchema: z.ZodType<Prisma.FeedbackRequestAggregateArgs> = z.object({
  where: FeedbackRequestWhereInputSchema.optional(),
  orderBy: z.union([ FeedbackRequestOrderByWithRelationInputSchema.array(),FeedbackRequestOrderByWithRelationInputSchema ]).optional(),
  cursor: FeedbackRequestWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FeedbackRequestGroupByArgsSchema: z.ZodType<Prisma.FeedbackRequestGroupByArgs> = z.object({
  where: FeedbackRequestWhereInputSchema.optional(),
  orderBy: z.union([ FeedbackRequestOrderByWithAggregationInputSchema.array(),FeedbackRequestOrderByWithAggregationInputSchema ]).optional(),
  by: FeedbackRequestScalarFieldEnumSchema.array(),
  having: FeedbackRequestScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const FeedbackRequestFindUniqueArgsSchema: z.ZodType<Prisma.FeedbackRequestFindUniqueArgs> = z.object({
  select: FeedbackRequestSelectSchema.optional(),
  where: FeedbackRequestWhereUniqueInputSchema,
}).strict() ;

export const FeedbackRequestFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FeedbackRequestFindUniqueOrThrowArgs> = z.object({
  select: FeedbackRequestSelectSchema.optional(),
  where: FeedbackRequestWhereUniqueInputSchema,
}).strict() ;

export const ModelMetricsFindFirstArgsSchema: z.ZodType<Prisma.ModelMetricsFindFirstArgs> = z.object({
  select: ModelMetricsSelectSchema.optional(),
  include: ModelMetricsIncludeSchema.optional(),
  where: ModelMetricsWhereInputSchema.optional(),
  orderBy: z.union([ ModelMetricsOrderByWithRelationInputSchema.array(),ModelMetricsOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelMetricsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelMetricsScalarFieldEnumSchema,ModelMetricsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelMetricsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ModelMetricsFindFirstOrThrowArgs> = z.object({
  select: ModelMetricsSelectSchema.optional(),
  include: ModelMetricsIncludeSchema.optional(),
  where: ModelMetricsWhereInputSchema.optional(),
  orderBy: z.union([ ModelMetricsOrderByWithRelationInputSchema.array(),ModelMetricsOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelMetricsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelMetricsScalarFieldEnumSchema,ModelMetricsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelMetricsFindManyArgsSchema: z.ZodType<Prisma.ModelMetricsFindManyArgs> = z.object({
  select: ModelMetricsSelectSchema.optional(),
  include: ModelMetricsIncludeSchema.optional(),
  where: ModelMetricsWhereInputSchema.optional(),
  orderBy: z.union([ ModelMetricsOrderByWithRelationInputSchema.array(),ModelMetricsOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelMetricsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelMetricsScalarFieldEnumSchema,ModelMetricsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelMetricsAggregateArgsSchema: z.ZodType<Prisma.ModelMetricsAggregateArgs> = z.object({
  where: ModelMetricsWhereInputSchema.optional(),
  orderBy: z.union([ ModelMetricsOrderByWithRelationInputSchema.array(),ModelMetricsOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelMetricsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ModelMetricsGroupByArgsSchema: z.ZodType<Prisma.ModelMetricsGroupByArgs> = z.object({
  where: ModelMetricsWhereInputSchema.optional(),
  orderBy: z.union([ ModelMetricsOrderByWithAggregationInputSchema.array(),ModelMetricsOrderByWithAggregationInputSchema ]).optional(),
  by: ModelMetricsScalarFieldEnumSchema.array(),
  having: ModelMetricsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ModelMetricsFindUniqueArgsSchema: z.ZodType<Prisma.ModelMetricsFindUniqueArgs> = z.object({
  select: ModelMetricsSelectSchema.optional(),
  include: ModelMetricsIncludeSchema.optional(),
  where: ModelMetricsWhereUniqueInputSchema,
}).strict() ;

export const ModelMetricsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ModelMetricsFindUniqueOrThrowArgs> = z.object({
  select: ModelMetricsSelectSchema.optional(),
  include: ModelMetricsIncludeSchema.optional(),
  where: ModelMetricsWhereUniqueInputSchema,
}).strict() ;

export const ModelStateFindFirstArgsSchema: z.ZodType<Prisma.ModelStateFindFirstArgs> = z.object({
  select: ModelStateSelectSchema.optional(),
  include: ModelStateIncludeSchema.optional(),
  where: ModelStateWhereInputSchema.optional(),
  orderBy: z.union([ ModelStateOrderByWithRelationInputSchema.array(),ModelStateOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelStateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelStateScalarFieldEnumSchema,ModelStateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelStateFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ModelStateFindFirstOrThrowArgs> = z.object({
  select: ModelStateSelectSchema.optional(),
  include: ModelStateIncludeSchema.optional(),
  where: ModelStateWhereInputSchema.optional(),
  orderBy: z.union([ ModelStateOrderByWithRelationInputSchema.array(),ModelStateOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelStateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelStateScalarFieldEnumSchema,ModelStateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelStateFindManyArgsSchema: z.ZodType<Prisma.ModelStateFindManyArgs> = z.object({
  select: ModelStateSelectSchema.optional(),
  include: ModelStateIncludeSchema.optional(),
  where: ModelStateWhereInputSchema.optional(),
  orderBy: z.union([ ModelStateOrderByWithRelationInputSchema.array(),ModelStateOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelStateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ModelStateScalarFieldEnumSchema,ModelStateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ModelStateAggregateArgsSchema: z.ZodType<Prisma.ModelStateAggregateArgs> = z.object({
  where: ModelStateWhereInputSchema.optional(),
  orderBy: z.union([ ModelStateOrderByWithRelationInputSchema.array(),ModelStateOrderByWithRelationInputSchema ]).optional(),
  cursor: ModelStateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ModelStateGroupByArgsSchema: z.ZodType<Prisma.ModelStateGroupByArgs> = z.object({
  where: ModelStateWhereInputSchema.optional(),
  orderBy: z.union([ ModelStateOrderByWithAggregationInputSchema.array(),ModelStateOrderByWithAggregationInputSchema ]).optional(),
  by: ModelStateScalarFieldEnumSchema.array(),
  having: ModelStateScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ModelStateFindUniqueArgsSchema: z.ZodType<Prisma.ModelStateFindUniqueArgs> = z.object({
  select: ModelStateSelectSchema.optional(),
  include: ModelStateIncludeSchema.optional(),
  where: ModelStateWhereUniqueInputSchema,
}).strict() ;

export const ModelStateFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ModelStateFindUniqueOrThrowArgs> = z.object({
  select: ModelStateSelectSchema.optional(),
  include: ModelStateIncludeSchema.optional(),
  where: ModelStateWhereUniqueInputSchema,
}).strict() ;

export const SearchEventFindFirstArgsSchema: z.ZodType<Prisma.SearchEventFindFirstArgs> = z.object({
  select: SearchEventSelectSchema.optional(),
  include: SearchEventIncludeSchema.optional(),
  where: SearchEventWhereInputSchema.optional(),
  orderBy: z.union([ SearchEventOrderByWithRelationInputSchema.array(),SearchEventOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchEventScalarFieldEnumSchema,SearchEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchEventFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SearchEventFindFirstOrThrowArgs> = z.object({
  select: SearchEventSelectSchema.optional(),
  include: SearchEventIncludeSchema.optional(),
  where: SearchEventWhereInputSchema.optional(),
  orderBy: z.union([ SearchEventOrderByWithRelationInputSchema.array(),SearchEventOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchEventScalarFieldEnumSchema,SearchEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchEventFindManyArgsSchema: z.ZodType<Prisma.SearchEventFindManyArgs> = z.object({
  select: SearchEventSelectSchema.optional(),
  include: SearchEventIncludeSchema.optional(),
  where: SearchEventWhereInputSchema.optional(),
  orderBy: z.union([ SearchEventOrderByWithRelationInputSchema.array(),SearchEventOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchEventScalarFieldEnumSchema,SearchEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchEventAggregateArgsSchema: z.ZodType<Prisma.SearchEventAggregateArgs> = z.object({
  where: SearchEventWhereInputSchema.optional(),
  orderBy: z.union([ SearchEventOrderByWithRelationInputSchema.array(),SearchEventOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SearchEventGroupByArgsSchema: z.ZodType<Prisma.SearchEventGroupByArgs> = z.object({
  where: SearchEventWhereInputSchema.optional(),
  orderBy: z.union([ SearchEventOrderByWithAggregationInputSchema.array(),SearchEventOrderByWithAggregationInputSchema ]).optional(),
  by: SearchEventScalarFieldEnumSchema.array(),
  having: SearchEventScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SearchEventFindUniqueArgsSchema: z.ZodType<Prisma.SearchEventFindUniqueArgs> = z.object({
  select: SearchEventSelectSchema.optional(),
  include: SearchEventIncludeSchema.optional(),
  where: SearchEventWhereUniqueInputSchema,
}).strict() ;

export const SearchEventFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SearchEventFindUniqueOrThrowArgs> = z.object({
  select: SearchEventSelectSchema.optional(),
  include: SearchEventIncludeSchema.optional(),
  where: SearchEventWhereUniqueInputSchema,
}).strict() ;

export const ABTestMetricsFindFirstArgsSchema: z.ZodType<Prisma.ABTestMetricsFindFirstArgs> = z.object({
  select: ABTestMetricsSelectSchema.optional(),
  include: ABTestMetricsIncludeSchema.optional(),
  where: ABTestMetricsWhereInputSchema.optional(),
  orderBy: z.union([ ABTestMetricsOrderByWithRelationInputSchema.array(),ABTestMetricsOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestMetricsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ABTestMetricsScalarFieldEnumSchema,ABTestMetricsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ABTestMetricsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ABTestMetricsFindFirstOrThrowArgs> = z.object({
  select: ABTestMetricsSelectSchema.optional(),
  include: ABTestMetricsIncludeSchema.optional(),
  where: ABTestMetricsWhereInputSchema.optional(),
  orderBy: z.union([ ABTestMetricsOrderByWithRelationInputSchema.array(),ABTestMetricsOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestMetricsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ABTestMetricsScalarFieldEnumSchema,ABTestMetricsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ABTestMetricsFindManyArgsSchema: z.ZodType<Prisma.ABTestMetricsFindManyArgs> = z.object({
  select: ABTestMetricsSelectSchema.optional(),
  include: ABTestMetricsIncludeSchema.optional(),
  where: ABTestMetricsWhereInputSchema.optional(),
  orderBy: z.union([ ABTestMetricsOrderByWithRelationInputSchema.array(),ABTestMetricsOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestMetricsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ABTestMetricsScalarFieldEnumSchema,ABTestMetricsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ABTestMetricsAggregateArgsSchema: z.ZodType<Prisma.ABTestMetricsAggregateArgs> = z.object({
  where: ABTestMetricsWhereInputSchema.optional(),
  orderBy: z.union([ ABTestMetricsOrderByWithRelationInputSchema.array(),ABTestMetricsOrderByWithRelationInputSchema ]).optional(),
  cursor: ABTestMetricsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ABTestMetricsGroupByArgsSchema: z.ZodType<Prisma.ABTestMetricsGroupByArgs> = z.object({
  where: ABTestMetricsWhereInputSchema.optional(),
  orderBy: z.union([ ABTestMetricsOrderByWithAggregationInputSchema.array(),ABTestMetricsOrderByWithAggregationInputSchema ]).optional(),
  by: ABTestMetricsScalarFieldEnumSchema.array(),
  having: ABTestMetricsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ABTestMetricsFindUniqueArgsSchema: z.ZodType<Prisma.ABTestMetricsFindUniqueArgs> = z.object({
  select: ABTestMetricsSelectSchema.optional(),
  include: ABTestMetricsIncludeSchema.optional(),
  where: ABTestMetricsWhereUniqueInputSchema,
}).strict() ;

export const ABTestMetricsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ABTestMetricsFindUniqueOrThrowArgs> = z.object({
  select: ABTestMetricsSelectSchema.optional(),
  include: ABTestMetricsIncludeSchema.optional(),
  where: ABTestMetricsWhereUniqueInputSchema,
}).strict() ;

export const SignalFindFirstArgsSchema: z.ZodType<Prisma.SignalFindFirstArgs> = z.object({
  select: SignalSelectSchema.optional(),
  include: SignalIncludeSchema.optional(),
  where: SignalWhereInputSchema.optional(),
  orderBy: z.union([ SignalOrderByWithRelationInputSchema.array(),SignalOrderByWithRelationInputSchema ]).optional(),
  cursor: SignalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SignalScalarFieldEnumSchema,SignalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SignalFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SignalFindFirstOrThrowArgs> = z.object({
  select: SignalSelectSchema.optional(),
  include: SignalIncludeSchema.optional(),
  where: SignalWhereInputSchema.optional(),
  orderBy: z.union([ SignalOrderByWithRelationInputSchema.array(),SignalOrderByWithRelationInputSchema ]).optional(),
  cursor: SignalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SignalScalarFieldEnumSchema,SignalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SignalFindManyArgsSchema: z.ZodType<Prisma.SignalFindManyArgs> = z.object({
  select: SignalSelectSchema.optional(),
  include: SignalIncludeSchema.optional(),
  where: SignalWhereInputSchema.optional(),
  orderBy: z.union([ SignalOrderByWithRelationInputSchema.array(),SignalOrderByWithRelationInputSchema ]).optional(),
  cursor: SignalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SignalScalarFieldEnumSchema,SignalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SignalAggregateArgsSchema: z.ZodType<Prisma.SignalAggregateArgs> = z.object({
  where: SignalWhereInputSchema.optional(),
  orderBy: z.union([ SignalOrderByWithRelationInputSchema.array(),SignalOrderByWithRelationInputSchema ]).optional(),
  cursor: SignalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SignalGroupByArgsSchema: z.ZodType<Prisma.SignalGroupByArgs> = z.object({
  where: SignalWhereInputSchema.optional(),
  orderBy: z.union([ SignalOrderByWithAggregationInputSchema.array(),SignalOrderByWithAggregationInputSchema ]).optional(),
  by: SignalScalarFieldEnumSchema.array(),
  having: SignalScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SignalFindUniqueArgsSchema: z.ZodType<Prisma.SignalFindUniqueArgs> = z.object({
  select: SignalSelectSchema.optional(),
  include: SignalIncludeSchema.optional(),
  where: SignalWhereUniqueInputSchema,
}).strict() ;

export const SignalFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SignalFindUniqueOrThrowArgs> = z.object({
  select: SignalSelectSchema.optional(),
  include: SignalIncludeSchema.optional(),
  where: SignalWhereUniqueInputSchema,
}).strict() ;

export const AnalyticsMetricsFindFirstArgsSchema: z.ZodType<Prisma.AnalyticsMetricsFindFirstArgs> = z.object({
  select: AnalyticsMetricsSelectSchema.optional(),
  include: AnalyticsMetricsIncludeSchema.optional(),
  where: AnalyticsMetricsWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsMetricsOrderByWithRelationInputSchema.array(),AnalyticsMetricsOrderByWithRelationInputSchema ]).optional(),
  cursor: AnalyticsMetricsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnalyticsMetricsScalarFieldEnumSchema,AnalyticsMetricsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnalyticsMetricsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AnalyticsMetricsFindFirstOrThrowArgs> = z.object({
  select: AnalyticsMetricsSelectSchema.optional(),
  include: AnalyticsMetricsIncludeSchema.optional(),
  where: AnalyticsMetricsWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsMetricsOrderByWithRelationInputSchema.array(),AnalyticsMetricsOrderByWithRelationInputSchema ]).optional(),
  cursor: AnalyticsMetricsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnalyticsMetricsScalarFieldEnumSchema,AnalyticsMetricsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnalyticsMetricsFindManyArgsSchema: z.ZodType<Prisma.AnalyticsMetricsFindManyArgs> = z.object({
  select: AnalyticsMetricsSelectSchema.optional(),
  include: AnalyticsMetricsIncludeSchema.optional(),
  where: AnalyticsMetricsWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsMetricsOrderByWithRelationInputSchema.array(),AnalyticsMetricsOrderByWithRelationInputSchema ]).optional(),
  cursor: AnalyticsMetricsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnalyticsMetricsScalarFieldEnumSchema,AnalyticsMetricsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnalyticsMetricsAggregateArgsSchema: z.ZodType<Prisma.AnalyticsMetricsAggregateArgs> = z.object({
  where: AnalyticsMetricsWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsMetricsOrderByWithRelationInputSchema.array(),AnalyticsMetricsOrderByWithRelationInputSchema ]).optional(),
  cursor: AnalyticsMetricsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AnalyticsMetricsGroupByArgsSchema: z.ZodType<Prisma.AnalyticsMetricsGroupByArgs> = z.object({
  where: AnalyticsMetricsWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsMetricsOrderByWithAggregationInputSchema.array(),AnalyticsMetricsOrderByWithAggregationInputSchema ]).optional(),
  by: AnalyticsMetricsScalarFieldEnumSchema.array(),
  having: AnalyticsMetricsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AnalyticsMetricsFindUniqueArgsSchema: z.ZodType<Prisma.AnalyticsMetricsFindUniqueArgs> = z.object({
  select: AnalyticsMetricsSelectSchema.optional(),
  include: AnalyticsMetricsIncludeSchema.optional(),
  where: AnalyticsMetricsWhereUniqueInputSchema,
}).strict() ;

export const AnalyticsMetricsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AnalyticsMetricsFindUniqueOrThrowArgs> = z.object({
  select: AnalyticsMetricsSelectSchema.optional(),
  include: AnalyticsMetricsIncludeSchema.optional(),
  where: AnalyticsMetricsWhereUniqueInputSchema,
}).strict() ;

export const AnalyticsTrendFindFirstArgsSchema: z.ZodType<Prisma.AnalyticsTrendFindFirstArgs> = z.object({
  select: AnalyticsTrendSelectSchema.optional(),
  where: AnalyticsTrendWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsTrendOrderByWithRelationInputSchema.array(),AnalyticsTrendOrderByWithRelationInputSchema ]).optional(),
  cursor: AnalyticsTrendWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnalyticsTrendScalarFieldEnumSchema,AnalyticsTrendScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnalyticsTrendFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AnalyticsTrendFindFirstOrThrowArgs> = z.object({
  select: AnalyticsTrendSelectSchema.optional(),
  where: AnalyticsTrendWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsTrendOrderByWithRelationInputSchema.array(),AnalyticsTrendOrderByWithRelationInputSchema ]).optional(),
  cursor: AnalyticsTrendWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnalyticsTrendScalarFieldEnumSchema,AnalyticsTrendScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnalyticsTrendFindManyArgsSchema: z.ZodType<Prisma.AnalyticsTrendFindManyArgs> = z.object({
  select: AnalyticsTrendSelectSchema.optional(),
  where: AnalyticsTrendWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsTrendOrderByWithRelationInputSchema.array(),AnalyticsTrendOrderByWithRelationInputSchema ]).optional(),
  cursor: AnalyticsTrendWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnalyticsTrendScalarFieldEnumSchema,AnalyticsTrendScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnalyticsTrendAggregateArgsSchema: z.ZodType<Prisma.AnalyticsTrendAggregateArgs> = z.object({
  where: AnalyticsTrendWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsTrendOrderByWithRelationInputSchema.array(),AnalyticsTrendOrderByWithRelationInputSchema ]).optional(),
  cursor: AnalyticsTrendWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AnalyticsTrendGroupByArgsSchema: z.ZodType<Prisma.AnalyticsTrendGroupByArgs> = z.object({
  where: AnalyticsTrendWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsTrendOrderByWithAggregationInputSchema.array(),AnalyticsTrendOrderByWithAggregationInputSchema ]).optional(),
  by: AnalyticsTrendScalarFieldEnumSchema.array(),
  having: AnalyticsTrendScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AnalyticsTrendFindUniqueArgsSchema: z.ZodType<Prisma.AnalyticsTrendFindUniqueArgs> = z.object({
  select: AnalyticsTrendSelectSchema.optional(),
  where: AnalyticsTrendWhereUniqueInputSchema,
}).strict() ;

export const AnalyticsTrendFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AnalyticsTrendFindUniqueOrThrowArgs> = z.object({
  select: AnalyticsTrendSelectSchema.optional(),
  where: AnalyticsTrendWhereUniqueInputSchema,
}).strict() ;

export const PerformanceInsightFindFirstArgsSchema: z.ZodType<Prisma.PerformanceInsightFindFirstArgs> = z.object({
  select: PerformanceInsightSelectSchema.optional(),
  where: PerformanceInsightWhereInputSchema.optional(),
  orderBy: z.union([ PerformanceInsightOrderByWithRelationInputSchema.array(),PerformanceInsightOrderByWithRelationInputSchema ]).optional(),
  cursor: PerformanceInsightWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PerformanceInsightScalarFieldEnumSchema,PerformanceInsightScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PerformanceInsightFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PerformanceInsightFindFirstOrThrowArgs> = z.object({
  select: PerformanceInsightSelectSchema.optional(),
  where: PerformanceInsightWhereInputSchema.optional(),
  orderBy: z.union([ PerformanceInsightOrderByWithRelationInputSchema.array(),PerformanceInsightOrderByWithRelationInputSchema ]).optional(),
  cursor: PerformanceInsightWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PerformanceInsightScalarFieldEnumSchema,PerformanceInsightScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PerformanceInsightFindManyArgsSchema: z.ZodType<Prisma.PerformanceInsightFindManyArgs> = z.object({
  select: PerformanceInsightSelectSchema.optional(),
  where: PerformanceInsightWhereInputSchema.optional(),
  orderBy: z.union([ PerformanceInsightOrderByWithRelationInputSchema.array(),PerformanceInsightOrderByWithRelationInputSchema ]).optional(),
  cursor: PerformanceInsightWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ PerformanceInsightScalarFieldEnumSchema,PerformanceInsightScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const PerformanceInsightAggregateArgsSchema: z.ZodType<Prisma.PerformanceInsightAggregateArgs> = z.object({
  where: PerformanceInsightWhereInputSchema.optional(),
  orderBy: z.union([ PerformanceInsightOrderByWithRelationInputSchema.array(),PerformanceInsightOrderByWithRelationInputSchema ]).optional(),
  cursor: PerformanceInsightWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PerformanceInsightGroupByArgsSchema: z.ZodType<Prisma.PerformanceInsightGroupByArgs> = z.object({
  where: PerformanceInsightWhereInputSchema.optional(),
  orderBy: z.union([ PerformanceInsightOrderByWithAggregationInputSchema.array(),PerformanceInsightOrderByWithAggregationInputSchema ]).optional(),
  by: PerformanceInsightScalarFieldEnumSchema.array(),
  having: PerformanceInsightScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const PerformanceInsightFindUniqueArgsSchema: z.ZodType<Prisma.PerformanceInsightFindUniqueArgs> = z.object({
  select: PerformanceInsightSelectSchema.optional(),
  where: PerformanceInsightWhereUniqueInputSchema,
}).strict() ;

export const PerformanceInsightFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PerformanceInsightFindUniqueOrThrowArgs> = z.object({
  select: PerformanceInsightSelectSchema.optional(),
  where: PerformanceInsightWhereUniqueInputSchema,
}).strict() ;

export const AnalyticsReportFindFirstArgsSchema: z.ZodType<Prisma.AnalyticsReportFindFirstArgs> = z.object({
  select: AnalyticsReportSelectSchema.optional(),
  where: AnalyticsReportWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsReportOrderByWithRelationInputSchema.array(),AnalyticsReportOrderByWithRelationInputSchema ]).optional(),
  cursor: AnalyticsReportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnalyticsReportScalarFieldEnumSchema,AnalyticsReportScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnalyticsReportFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AnalyticsReportFindFirstOrThrowArgs> = z.object({
  select: AnalyticsReportSelectSchema.optional(),
  where: AnalyticsReportWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsReportOrderByWithRelationInputSchema.array(),AnalyticsReportOrderByWithRelationInputSchema ]).optional(),
  cursor: AnalyticsReportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnalyticsReportScalarFieldEnumSchema,AnalyticsReportScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnalyticsReportFindManyArgsSchema: z.ZodType<Prisma.AnalyticsReportFindManyArgs> = z.object({
  select: AnalyticsReportSelectSchema.optional(),
  where: AnalyticsReportWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsReportOrderByWithRelationInputSchema.array(),AnalyticsReportOrderByWithRelationInputSchema ]).optional(),
  cursor: AnalyticsReportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AnalyticsReportScalarFieldEnumSchema,AnalyticsReportScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AnalyticsReportAggregateArgsSchema: z.ZodType<Prisma.AnalyticsReportAggregateArgs> = z.object({
  where: AnalyticsReportWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsReportOrderByWithRelationInputSchema.array(),AnalyticsReportOrderByWithRelationInputSchema ]).optional(),
  cursor: AnalyticsReportWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AnalyticsReportGroupByArgsSchema: z.ZodType<Prisma.AnalyticsReportGroupByArgs> = z.object({
  where: AnalyticsReportWhereInputSchema.optional(),
  orderBy: z.union([ AnalyticsReportOrderByWithAggregationInputSchema.array(),AnalyticsReportOrderByWithAggregationInputSchema ]).optional(),
  by: AnalyticsReportScalarFieldEnumSchema.array(),
  having: AnalyticsReportScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AnalyticsReportFindUniqueArgsSchema: z.ZodType<Prisma.AnalyticsReportFindUniqueArgs> = z.object({
  select: AnalyticsReportSelectSchema.optional(),
  where: AnalyticsReportWhereUniqueInputSchema,
}).strict() ;

export const AnalyticsReportFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AnalyticsReportFindUniqueOrThrowArgs> = z.object({
  select: AnalyticsReportSelectSchema.optional(),
  where: AnalyticsReportWhereUniqueInputSchema,
}).strict() ;

export const AdaptationSuggestionFindFirstArgsSchema: z.ZodType<Prisma.AdaptationSuggestionFindFirstArgs> = z.object({
  select: AdaptationSuggestionSelectSchema.optional(),
  where: AdaptationSuggestionWhereInputSchema.optional(),
  orderBy: z.union([ AdaptationSuggestionOrderByWithRelationInputSchema.array(),AdaptationSuggestionOrderByWithRelationInputSchema ]).optional(),
  cursor: AdaptationSuggestionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdaptationSuggestionScalarFieldEnumSchema,AdaptationSuggestionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdaptationSuggestionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AdaptationSuggestionFindFirstOrThrowArgs> = z.object({
  select: AdaptationSuggestionSelectSchema.optional(),
  where: AdaptationSuggestionWhereInputSchema.optional(),
  orderBy: z.union([ AdaptationSuggestionOrderByWithRelationInputSchema.array(),AdaptationSuggestionOrderByWithRelationInputSchema ]).optional(),
  cursor: AdaptationSuggestionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdaptationSuggestionScalarFieldEnumSchema,AdaptationSuggestionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdaptationSuggestionFindManyArgsSchema: z.ZodType<Prisma.AdaptationSuggestionFindManyArgs> = z.object({
  select: AdaptationSuggestionSelectSchema.optional(),
  where: AdaptationSuggestionWhereInputSchema.optional(),
  orderBy: z.union([ AdaptationSuggestionOrderByWithRelationInputSchema.array(),AdaptationSuggestionOrderByWithRelationInputSchema ]).optional(),
  cursor: AdaptationSuggestionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdaptationSuggestionScalarFieldEnumSchema,AdaptationSuggestionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdaptationSuggestionAggregateArgsSchema: z.ZodType<Prisma.AdaptationSuggestionAggregateArgs> = z.object({
  where: AdaptationSuggestionWhereInputSchema.optional(),
  orderBy: z.union([ AdaptationSuggestionOrderByWithRelationInputSchema.array(),AdaptationSuggestionOrderByWithRelationInputSchema ]).optional(),
  cursor: AdaptationSuggestionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdaptationSuggestionGroupByArgsSchema: z.ZodType<Prisma.AdaptationSuggestionGroupByArgs> = z.object({
  where: AdaptationSuggestionWhereInputSchema.optional(),
  orderBy: z.union([ AdaptationSuggestionOrderByWithAggregationInputSchema.array(),AdaptationSuggestionOrderByWithAggregationInputSchema ]).optional(),
  by: AdaptationSuggestionScalarFieldEnumSchema.array(),
  having: AdaptationSuggestionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdaptationSuggestionFindUniqueArgsSchema: z.ZodType<Prisma.AdaptationSuggestionFindUniqueArgs> = z.object({
  select: AdaptationSuggestionSelectSchema.optional(),
  where: AdaptationSuggestionWhereUniqueInputSchema,
}).strict() ;

export const AdaptationSuggestionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AdaptationSuggestionFindUniqueOrThrowArgs> = z.object({
  select: AdaptationSuggestionSelectSchema.optional(),
  where: AdaptationSuggestionWhereUniqueInputSchema,
}).strict() ;

export const LearningMetricFindFirstArgsSchema: z.ZodType<Prisma.LearningMetricFindFirstArgs> = z.object({
  select: LearningMetricSelectSchema.optional(),
  include: LearningMetricIncludeSchema.optional(),
  where: LearningMetricWhereInputSchema.optional(),
  orderBy: z.union([ LearningMetricOrderByWithRelationInputSchema.array(),LearningMetricOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningMetricWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LearningMetricScalarFieldEnumSchema,LearningMetricScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LearningMetricFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LearningMetricFindFirstOrThrowArgs> = z.object({
  select: LearningMetricSelectSchema.optional(),
  include: LearningMetricIncludeSchema.optional(),
  where: LearningMetricWhereInputSchema.optional(),
  orderBy: z.union([ LearningMetricOrderByWithRelationInputSchema.array(),LearningMetricOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningMetricWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LearningMetricScalarFieldEnumSchema,LearningMetricScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LearningMetricFindManyArgsSchema: z.ZodType<Prisma.LearningMetricFindManyArgs> = z.object({
  select: LearningMetricSelectSchema.optional(),
  include: LearningMetricIncludeSchema.optional(),
  where: LearningMetricWhereInputSchema.optional(),
  orderBy: z.union([ LearningMetricOrderByWithRelationInputSchema.array(),LearningMetricOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningMetricWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LearningMetricScalarFieldEnumSchema,LearningMetricScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LearningMetricAggregateArgsSchema: z.ZodType<Prisma.LearningMetricAggregateArgs> = z.object({
  where: LearningMetricWhereInputSchema.optional(),
  orderBy: z.union([ LearningMetricOrderByWithRelationInputSchema.array(),LearningMetricOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningMetricWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LearningMetricGroupByArgsSchema: z.ZodType<Prisma.LearningMetricGroupByArgs> = z.object({
  where: LearningMetricWhereInputSchema.optional(),
  orderBy: z.union([ LearningMetricOrderByWithAggregationInputSchema.array(),LearningMetricOrderByWithAggregationInputSchema ]).optional(),
  by: LearningMetricScalarFieldEnumSchema.array(),
  having: LearningMetricScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LearningMetricFindUniqueArgsSchema: z.ZodType<Prisma.LearningMetricFindUniqueArgs> = z.object({
  select: LearningMetricSelectSchema.optional(),
  include: LearningMetricIncludeSchema.optional(),
  where: LearningMetricWhereUniqueInputSchema,
}).strict() ;

export const LearningMetricFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LearningMetricFindUniqueOrThrowArgs> = z.object({
  select: LearningMetricSelectSchema.optional(),
  include: LearningMetricIncludeSchema.optional(),
  where: LearningMetricWhereUniqueInputSchema,
}).strict() ;

export const LearningEventFindFirstArgsSchema: z.ZodType<Prisma.LearningEventFindFirstArgs> = z.object({
  select: LearningEventSelectSchema.optional(),
  include: LearningEventIncludeSchema.optional(),
  where: LearningEventWhereInputSchema.optional(),
  orderBy: z.union([ LearningEventOrderByWithRelationInputSchema.array(),LearningEventOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LearningEventScalarFieldEnumSchema,LearningEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LearningEventFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LearningEventFindFirstOrThrowArgs> = z.object({
  select: LearningEventSelectSchema.optional(),
  include: LearningEventIncludeSchema.optional(),
  where: LearningEventWhereInputSchema.optional(),
  orderBy: z.union([ LearningEventOrderByWithRelationInputSchema.array(),LearningEventOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LearningEventScalarFieldEnumSchema,LearningEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LearningEventFindManyArgsSchema: z.ZodType<Prisma.LearningEventFindManyArgs> = z.object({
  select: LearningEventSelectSchema.optional(),
  include: LearningEventIncludeSchema.optional(),
  where: LearningEventWhereInputSchema.optional(),
  orderBy: z.union([ LearningEventOrderByWithRelationInputSchema.array(),LearningEventOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LearningEventScalarFieldEnumSchema,LearningEventScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LearningEventAggregateArgsSchema: z.ZodType<Prisma.LearningEventAggregateArgs> = z.object({
  where: LearningEventWhereInputSchema.optional(),
  orderBy: z.union([ LearningEventOrderByWithRelationInputSchema.array(),LearningEventOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningEventWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LearningEventGroupByArgsSchema: z.ZodType<Prisma.LearningEventGroupByArgs> = z.object({
  where: LearningEventWhereInputSchema.optional(),
  orderBy: z.union([ LearningEventOrderByWithAggregationInputSchema.array(),LearningEventOrderByWithAggregationInputSchema ]).optional(),
  by: LearningEventScalarFieldEnumSchema.array(),
  having: LearningEventScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LearningEventFindUniqueArgsSchema: z.ZodType<Prisma.LearningEventFindUniqueArgs> = z.object({
  select: LearningEventSelectSchema.optional(),
  include: LearningEventIncludeSchema.optional(),
  where: LearningEventWhereUniqueInputSchema,
}).strict() ;

export const LearningEventFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LearningEventFindUniqueOrThrowArgs> = z.object({
  select: LearningEventSelectSchema.optional(),
  include: LearningEventIncludeSchema.optional(),
  where: LearningEventWhereUniqueInputSchema,
}).strict() ;

export const LearningPatternFindFirstArgsSchema: z.ZodType<Prisma.LearningPatternFindFirstArgs> = z.object({
  select: LearningPatternSelectSchema.optional(),
  include: LearningPatternIncludeSchema.optional(),
  where: LearningPatternWhereInputSchema.optional(),
  orderBy: z.union([ LearningPatternOrderByWithRelationInputSchema.array(),LearningPatternOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningPatternWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LearningPatternScalarFieldEnumSchema,LearningPatternScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LearningPatternFindFirstOrThrowArgsSchema: z.ZodType<Prisma.LearningPatternFindFirstOrThrowArgs> = z.object({
  select: LearningPatternSelectSchema.optional(),
  include: LearningPatternIncludeSchema.optional(),
  where: LearningPatternWhereInputSchema.optional(),
  orderBy: z.union([ LearningPatternOrderByWithRelationInputSchema.array(),LearningPatternOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningPatternWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LearningPatternScalarFieldEnumSchema,LearningPatternScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LearningPatternFindManyArgsSchema: z.ZodType<Prisma.LearningPatternFindManyArgs> = z.object({
  select: LearningPatternSelectSchema.optional(),
  include: LearningPatternIncludeSchema.optional(),
  where: LearningPatternWhereInputSchema.optional(),
  orderBy: z.union([ LearningPatternOrderByWithRelationInputSchema.array(),LearningPatternOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningPatternWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ LearningPatternScalarFieldEnumSchema,LearningPatternScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const LearningPatternAggregateArgsSchema: z.ZodType<Prisma.LearningPatternAggregateArgs> = z.object({
  where: LearningPatternWhereInputSchema.optional(),
  orderBy: z.union([ LearningPatternOrderByWithRelationInputSchema.array(),LearningPatternOrderByWithRelationInputSchema ]).optional(),
  cursor: LearningPatternWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LearningPatternGroupByArgsSchema: z.ZodType<Prisma.LearningPatternGroupByArgs> = z.object({
  where: LearningPatternWhereInputSchema.optional(),
  orderBy: z.union([ LearningPatternOrderByWithAggregationInputSchema.array(),LearningPatternOrderByWithAggregationInputSchema ]).optional(),
  by: LearningPatternScalarFieldEnumSchema.array(),
  having: LearningPatternScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const LearningPatternFindUniqueArgsSchema: z.ZodType<Prisma.LearningPatternFindUniqueArgs> = z.object({
  select: LearningPatternSelectSchema.optional(),
  include: LearningPatternIncludeSchema.optional(),
  where: LearningPatternWhereUniqueInputSchema,
}).strict() ;

export const LearningPatternFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.LearningPatternFindUniqueOrThrowArgs> = z.object({
  select: LearningPatternSelectSchema.optional(),
  include: LearningPatternIncludeSchema.optional(),
  where: LearningPatternWhereUniqueInputSchema,
}).strict() ;

export const EngineStateFindFirstArgsSchema: z.ZodType<Prisma.EngineStateFindFirstArgs> = z.object({
  select: EngineStateSelectSchema.optional(),
  where: EngineStateWhereInputSchema.optional(),
  orderBy: z.union([ EngineStateOrderByWithRelationInputSchema.array(),EngineStateOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineStateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineStateScalarFieldEnumSchema,EngineStateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineStateFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EngineStateFindFirstOrThrowArgs> = z.object({
  select: EngineStateSelectSchema.optional(),
  where: EngineStateWhereInputSchema.optional(),
  orderBy: z.union([ EngineStateOrderByWithRelationInputSchema.array(),EngineStateOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineStateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineStateScalarFieldEnumSchema,EngineStateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineStateFindManyArgsSchema: z.ZodType<Prisma.EngineStateFindManyArgs> = z.object({
  select: EngineStateSelectSchema.optional(),
  where: EngineStateWhereInputSchema.optional(),
  orderBy: z.union([ EngineStateOrderByWithRelationInputSchema.array(),EngineStateOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineStateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineStateScalarFieldEnumSchema,EngineStateScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineStateAggregateArgsSchema: z.ZodType<Prisma.EngineStateAggregateArgs> = z.object({
  where: EngineStateWhereInputSchema.optional(),
  orderBy: z.union([ EngineStateOrderByWithRelationInputSchema.array(),EngineStateOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineStateWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EngineStateGroupByArgsSchema: z.ZodType<Prisma.EngineStateGroupByArgs> = z.object({
  where: EngineStateWhereInputSchema.optional(),
  orderBy: z.union([ EngineStateOrderByWithAggregationInputSchema.array(),EngineStateOrderByWithAggregationInputSchema ]).optional(),
  by: EngineStateScalarFieldEnumSchema.array(),
  having: EngineStateScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EngineStateFindUniqueArgsSchema: z.ZodType<Prisma.EngineStateFindUniqueArgs> = z.object({
  select: EngineStateSelectSchema.optional(),
  where: EngineStateWhereUniqueInputSchema,
}).strict() ;

export const EngineStateFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EngineStateFindUniqueOrThrowArgs> = z.object({
  select: EngineStateSelectSchema.optional(),
  where: EngineStateWhereUniqueInputSchema,
}).strict() ;

export const EngineOperationFindFirstArgsSchema: z.ZodType<Prisma.EngineOperationFindFirstArgs> = z.object({
  select: EngineOperationSelectSchema.optional(),
  include: EngineOperationIncludeSchema.optional(),
  where: EngineOperationWhereInputSchema.optional(),
  orderBy: z.union([ EngineOperationOrderByWithRelationInputSchema.array(),EngineOperationOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineOperationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineOperationScalarFieldEnumSchema,EngineOperationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineOperationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EngineOperationFindFirstOrThrowArgs> = z.object({
  select: EngineOperationSelectSchema.optional(),
  include: EngineOperationIncludeSchema.optional(),
  where: EngineOperationWhereInputSchema.optional(),
  orderBy: z.union([ EngineOperationOrderByWithRelationInputSchema.array(),EngineOperationOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineOperationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineOperationScalarFieldEnumSchema,EngineOperationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineOperationFindManyArgsSchema: z.ZodType<Prisma.EngineOperationFindManyArgs> = z.object({
  select: EngineOperationSelectSchema.optional(),
  include: EngineOperationIncludeSchema.optional(),
  where: EngineOperationWhereInputSchema.optional(),
  orderBy: z.union([ EngineOperationOrderByWithRelationInputSchema.array(),EngineOperationOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineOperationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineOperationScalarFieldEnumSchema,EngineOperationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineOperationAggregateArgsSchema: z.ZodType<Prisma.EngineOperationAggregateArgs> = z.object({
  where: EngineOperationWhereInputSchema.optional(),
  orderBy: z.union([ EngineOperationOrderByWithRelationInputSchema.array(),EngineOperationOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineOperationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EngineOperationGroupByArgsSchema: z.ZodType<Prisma.EngineOperationGroupByArgs> = z.object({
  where: EngineOperationWhereInputSchema.optional(),
  orderBy: z.union([ EngineOperationOrderByWithAggregationInputSchema.array(),EngineOperationOrderByWithAggregationInputSchema ]).optional(),
  by: EngineOperationScalarFieldEnumSchema.array(),
  having: EngineOperationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EngineOperationFindUniqueArgsSchema: z.ZodType<Prisma.EngineOperationFindUniqueArgs> = z.object({
  select: EngineOperationSelectSchema.optional(),
  include: EngineOperationIncludeSchema.optional(),
  where: EngineOperationWhereUniqueInputSchema,
}).strict() ;

export const EngineOperationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EngineOperationFindUniqueOrThrowArgs> = z.object({
  select: EngineOperationSelectSchema.optional(),
  include: EngineOperationIncludeSchema.optional(),
  where: EngineOperationWhereUniqueInputSchema,
}).strict() ;

export const EngineMetricFindFirstArgsSchema: z.ZodType<Prisma.EngineMetricFindFirstArgs> = z.object({
  select: EngineMetricSelectSchema.optional(),
  where: EngineMetricWhereInputSchema.optional(),
  orderBy: z.union([ EngineMetricOrderByWithRelationInputSchema.array(),EngineMetricOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineMetricWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineMetricScalarFieldEnumSchema,EngineMetricScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineMetricFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EngineMetricFindFirstOrThrowArgs> = z.object({
  select: EngineMetricSelectSchema.optional(),
  where: EngineMetricWhereInputSchema.optional(),
  orderBy: z.union([ EngineMetricOrderByWithRelationInputSchema.array(),EngineMetricOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineMetricWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineMetricScalarFieldEnumSchema,EngineMetricScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineMetricFindManyArgsSchema: z.ZodType<Prisma.EngineMetricFindManyArgs> = z.object({
  select: EngineMetricSelectSchema.optional(),
  where: EngineMetricWhereInputSchema.optional(),
  orderBy: z.union([ EngineMetricOrderByWithRelationInputSchema.array(),EngineMetricOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineMetricWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineMetricScalarFieldEnumSchema,EngineMetricScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineMetricAggregateArgsSchema: z.ZodType<Prisma.EngineMetricAggregateArgs> = z.object({
  where: EngineMetricWhereInputSchema.optional(),
  orderBy: z.union([ EngineMetricOrderByWithRelationInputSchema.array(),EngineMetricOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineMetricWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EngineMetricGroupByArgsSchema: z.ZodType<Prisma.EngineMetricGroupByArgs> = z.object({
  where: EngineMetricWhereInputSchema.optional(),
  orderBy: z.union([ EngineMetricOrderByWithAggregationInputSchema.array(),EngineMetricOrderByWithAggregationInputSchema ]).optional(),
  by: EngineMetricScalarFieldEnumSchema.array(),
  having: EngineMetricScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EngineMetricFindUniqueArgsSchema: z.ZodType<Prisma.EngineMetricFindUniqueArgs> = z.object({
  select: EngineMetricSelectSchema.optional(),
  where: EngineMetricWhereUniqueInputSchema,
}).strict() ;

export const EngineMetricFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EngineMetricFindUniqueOrThrowArgs> = z.object({
  select: EngineMetricSelectSchema.optional(),
  where: EngineMetricWhereUniqueInputSchema,
}).strict() ;

export const EngineLearningResultFindFirstArgsSchema: z.ZodType<Prisma.EngineLearningResultFindFirstArgs> = z.object({
  select: EngineLearningResultSelectSchema.optional(),
  include: EngineLearningResultIncludeSchema.optional(),
  where: EngineLearningResultWhereInputSchema.optional(),
  orderBy: z.union([ EngineLearningResultOrderByWithRelationInputSchema.array(),EngineLearningResultOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineLearningResultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineLearningResultScalarFieldEnumSchema,EngineLearningResultScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineLearningResultFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EngineLearningResultFindFirstOrThrowArgs> = z.object({
  select: EngineLearningResultSelectSchema.optional(),
  include: EngineLearningResultIncludeSchema.optional(),
  where: EngineLearningResultWhereInputSchema.optional(),
  orderBy: z.union([ EngineLearningResultOrderByWithRelationInputSchema.array(),EngineLearningResultOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineLearningResultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineLearningResultScalarFieldEnumSchema,EngineLearningResultScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineLearningResultFindManyArgsSchema: z.ZodType<Prisma.EngineLearningResultFindManyArgs> = z.object({
  select: EngineLearningResultSelectSchema.optional(),
  include: EngineLearningResultIncludeSchema.optional(),
  where: EngineLearningResultWhereInputSchema.optional(),
  orderBy: z.union([ EngineLearningResultOrderByWithRelationInputSchema.array(),EngineLearningResultOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineLearningResultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineLearningResultScalarFieldEnumSchema,EngineLearningResultScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineLearningResultAggregateArgsSchema: z.ZodType<Prisma.EngineLearningResultAggregateArgs> = z.object({
  where: EngineLearningResultWhereInputSchema.optional(),
  orderBy: z.union([ EngineLearningResultOrderByWithRelationInputSchema.array(),EngineLearningResultOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineLearningResultWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EngineLearningResultGroupByArgsSchema: z.ZodType<Prisma.EngineLearningResultGroupByArgs> = z.object({
  where: EngineLearningResultWhereInputSchema.optional(),
  orderBy: z.union([ EngineLearningResultOrderByWithAggregationInputSchema.array(),EngineLearningResultOrderByWithAggregationInputSchema ]).optional(),
  by: EngineLearningResultScalarFieldEnumSchema.array(),
  having: EngineLearningResultScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EngineLearningResultFindUniqueArgsSchema: z.ZodType<Prisma.EngineLearningResultFindUniqueArgs> = z.object({
  select: EngineLearningResultSelectSchema.optional(),
  include: EngineLearningResultIncludeSchema.optional(),
  where: EngineLearningResultWhereUniqueInputSchema,
}).strict() ;

export const EngineLearningResultFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EngineLearningResultFindUniqueOrThrowArgs> = z.object({
  select: EngineLearningResultSelectSchema.optional(),
  include: EngineLearningResultIncludeSchema.optional(),
  where: EngineLearningResultWhereUniqueInputSchema,
}).strict() ;

export const EngineOptimizationStrategyFindFirstArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyFindFirstArgs> = z.object({
  select: EngineOptimizationStrategySelectSchema.optional(),
  include: EngineOptimizationStrategyIncludeSchema.optional(),
  where: EngineOptimizationStrategyWhereInputSchema.optional(),
  orderBy: z.union([ EngineOptimizationStrategyOrderByWithRelationInputSchema.array(),EngineOptimizationStrategyOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineOptimizationStrategyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineOptimizationStrategyScalarFieldEnumSchema,EngineOptimizationStrategyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineOptimizationStrategyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyFindFirstOrThrowArgs> = z.object({
  select: EngineOptimizationStrategySelectSchema.optional(),
  include: EngineOptimizationStrategyIncludeSchema.optional(),
  where: EngineOptimizationStrategyWhereInputSchema.optional(),
  orderBy: z.union([ EngineOptimizationStrategyOrderByWithRelationInputSchema.array(),EngineOptimizationStrategyOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineOptimizationStrategyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineOptimizationStrategyScalarFieldEnumSchema,EngineOptimizationStrategyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineOptimizationStrategyFindManyArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyFindManyArgs> = z.object({
  select: EngineOptimizationStrategySelectSchema.optional(),
  include: EngineOptimizationStrategyIncludeSchema.optional(),
  where: EngineOptimizationStrategyWhereInputSchema.optional(),
  orderBy: z.union([ EngineOptimizationStrategyOrderByWithRelationInputSchema.array(),EngineOptimizationStrategyOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineOptimizationStrategyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineOptimizationStrategyScalarFieldEnumSchema,EngineOptimizationStrategyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineOptimizationStrategyAggregateArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyAggregateArgs> = z.object({
  where: EngineOptimizationStrategyWhereInputSchema.optional(),
  orderBy: z.union([ EngineOptimizationStrategyOrderByWithRelationInputSchema.array(),EngineOptimizationStrategyOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineOptimizationStrategyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EngineOptimizationStrategyGroupByArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyGroupByArgs> = z.object({
  where: EngineOptimizationStrategyWhereInputSchema.optional(),
  orderBy: z.union([ EngineOptimizationStrategyOrderByWithAggregationInputSchema.array(),EngineOptimizationStrategyOrderByWithAggregationInputSchema ]).optional(),
  by: EngineOptimizationStrategyScalarFieldEnumSchema.array(),
  having: EngineOptimizationStrategyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EngineOptimizationStrategyFindUniqueArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyFindUniqueArgs> = z.object({
  select: EngineOptimizationStrategySelectSchema.optional(),
  include: EngineOptimizationStrategyIncludeSchema.optional(),
  where: EngineOptimizationStrategyWhereUniqueInputSchema,
}).strict() ;

export const EngineOptimizationStrategyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyFindUniqueOrThrowArgs> = z.object({
  select: EngineOptimizationStrategySelectSchema.optional(),
  include: EngineOptimizationStrategyIncludeSchema.optional(),
  where: EngineOptimizationStrategyWhereUniqueInputSchema,
}).strict() ;

export const EngineConfidenceScoreFindFirstArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreFindFirstArgs> = z.object({
  select: EngineConfidenceScoreSelectSchema.optional(),
  where: EngineConfidenceScoreWhereInputSchema.optional(),
  orderBy: z.union([ EngineConfidenceScoreOrderByWithRelationInputSchema.array(),EngineConfidenceScoreOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineConfidenceScoreWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineConfidenceScoreScalarFieldEnumSchema,EngineConfidenceScoreScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineConfidenceScoreFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreFindFirstOrThrowArgs> = z.object({
  select: EngineConfidenceScoreSelectSchema.optional(),
  where: EngineConfidenceScoreWhereInputSchema.optional(),
  orderBy: z.union([ EngineConfidenceScoreOrderByWithRelationInputSchema.array(),EngineConfidenceScoreOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineConfidenceScoreWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineConfidenceScoreScalarFieldEnumSchema,EngineConfidenceScoreScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineConfidenceScoreFindManyArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreFindManyArgs> = z.object({
  select: EngineConfidenceScoreSelectSchema.optional(),
  where: EngineConfidenceScoreWhereInputSchema.optional(),
  orderBy: z.union([ EngineConfidenceScoreOrderByWithRelationInputSchema.array(),EngineConfidenceScoreOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineConfidenceScoreWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineConfidenceScoreScalarFieldEnumSchema,EngineConfidenceScoreScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineConfidenceScoreAggregateArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreAggregateArgs> = z.object({
  where: EngineConfidenceScoreWhereInputSchema.optional(),
  orderBy: z.union([ EngineConfidenceScoreOrderByWithRelationInputSchema.array(),EngineConfidenceScoreOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineConfidenceScoreWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EngineConfidenceScoreGroupByArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreGroupByArgs> = z.object({
  where: EngineConfidenceScoreWhereInputSchema.optional(),
  orderBy: z.union([ EngineConfidenceScoreOrderByWithAggregationInputSchema.array(),EngineConfidenceScoreOrderByWithAggregationInputSchema ]).optional(),
  by: EngineConfidenceScoreScalarFieldEnumSchema.array(),
  having: EngineConfidenceScoreScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EngineConfidenceScoreFindUniqueArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreFindUniqueArgs> = z.object({
  select: EngineConfidenceScoreSelectSchema.optional(),
  where: EngineConfidenceScoreWhereUniqueInputSchema,
}).strict() ;

export const EngineConfidenceScoreFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreFindUniqueOrThrowArgs> = z.object({
  select: EngineConfidenceScoreSelectSchema.optional(),
  where: EngineConfidenceScoreWhereUniqueInputSchema,
}).strict() ;

export const SearchWeightsFindFirstArgsSchema: z.ZodType<Prisma.SearchWeightsFindFirstArgs> = z.object({
  select: SearchWeightsSelectSchema.optional(),
  where: SearchWeightsWhereInputSchema.optional(),
  orderBy: z.union([ SearchWeightsOrderByWithRelationInputSchema.array(),SearchWeightsOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchWeightsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchWeightsScalarFieldEnumSchema,SearchWeightsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchWeightsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SearchWeightsFindFirstOrThrowArgs> = z.object({
  select: SearchWeightsSelectSchema.optional(),
  where: SearchWeightsWhereInputSchema.optional(),
  orderBy: z.union([ SearchWeightsOrderByWithRelationInputSchema.array(),SearchWeightsOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchWeightsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchWeightsScalarFieldEnumSchema,SearchWeightsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchWeightsFindManyArgsSchema: z.ZodType<Prisma.SearchWeightsFindManyArgs> = z.object({
  select: SearchWeightsSelectSchema.optional(),
  where: SearchWeightsWhereInputSchema.optional(),
  orderBy: z.union([ SearchWeightsOrderByWithRelationInputSchema.array(),SearchWeightsOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchWeightsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchWeightsScalarFieldEnumSchema,SearchWeightsScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchWeightsAggregateArgsSchema: z.ZodType<Prisma.SearchWeightsAggregateArgs> = z.object({
  where: SearchWeightsWhereInputSchema.optional(),
  orderBy: z.union([ SearchWeightsOrderByWithRelationInputSchema.array(),SearchWeightsOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchWeightsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SearchWeightsGroupByArgsSchema: z.ZodType<Prisma.SearchWeightsGroupByArgs> = z.object({
  where: SearchWeightsWhereInputSchema.optional(),
  orderBy: z.union([ SearchWeightsOrderByWithAggregationInputSchema.array(),SearchWeightsOrderByWithAggregationInputSchema ]).optional(),
  by: SearchWeightsScalarFieldEnumSchema.array(),
  having: SearchWeightsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SearchWeightsFindUniqueArgsSchema: z.ZodType<Prisma.SearchWeightsFindUniqueArgs> = z.object({
  select: SearchWeightsSelectSchema.optional(),
  where: SearchWeightsWhereUniqueInputSchema,
}).strict() ;

export const SearchWeightsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SearchWeightsFindUniqueOrThrowArgs> = z.object({
  select: SearchWeightsSelectSchema.optional(),
  where: SearchWeightsWhereUniqueInputSchema,
}).strict() ;

export const SearchConfigFindFirstArgsSchema: z.ZodType<Prisma.SearchConfigFindFirstArgs> = z.object({
  select: SearchConfigSelectSchema.optional(),
  where: SearchConfigWhereInputSchema.optional(),
  orderBy: z.union([ SearchConfigOrderByWithRelationInputSchema.array(),SearchConfigOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchConfigWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchConfigScalarFieldEnumSchema,SearchConfigScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchConfigFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SearchConfigFindFirstOrThrowArgs> = z.object({
  select: SearchConfigSelectSchema.optional(),
  where: SearchConfigWhereInputSchema.optional(),
  orderBy: z.union([ SearchConfigOrderByWithRelationInputSchema.array(),SearchConfigOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchConfigWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchConfigScalarFieldEnumSchema,SearchConfigScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchConfigFindManyArgsSchema: z.ZodType<Prisma.SearchConfigFindManyArgs> = z.object({
  select: SearchConfigSelectSchema.optional(),
  where: SearchConfigWhereInputSchema.optional(),
  orderBy: z.union([ SearchConfigOrderByWithRelationInputSchema.array(),SearchConfigOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchConfigWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SearchConfigScalarFieldEnumSchema,SearchConfigScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SearchConfigAggregateArgsSchema: z.ZodType<Prisma.SearchConfigAggregateArgs> = z.object({
  where: SearchConfigWhereInputSchema.optional(),
  orderBy: z.union([ SearchConfigOrderByWithRelationInputSchema.array(),SearchConfigOrderByWithRelationInputSchema ]).optional(),
  cursor: SearchConfigWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SearchConfigGroupByArgsSchema: z.ZodType<Prisma.SearchConfigGroupByArgs> = z.object({
  where: SearchConfigWhereInputSchema.optional(),
  orderBy: z.union([ SearchConfigOrderByWithAggregationInputSchema.array(),SearchConfigOrderByWithAggregationInputSchema ]).optional(),
  by: SearchConfigScalarFieldEnumSchema.array(),
  having: SearchConfigScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SearchConfigFindUniqueArgsSchema: z.ZodType<Prisma.SearchConfigFindUniqueArgs> = z.object({
  select: SearchConfigSelectSchema.optional(),
  where: SearchConfigWhereUniqueInputSchema,
}).strict() ;

export const SearchConfigFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SearchConfigFindUniqueOrThrowArgs> = z.object({
  select: SearchConfigSelectSchema.optional(),
  where: SearchConfigWhereUniqueInputSchema,
}).strict() ;

export const ExperimentConfigFindFirstArgsSchema: z.ZodType<Prisma.ExperimentConfigFindFirstArgs> = z.object({
  select: ExperimentConfigSelectSchema.optional(),
  where: ExperimentConfigWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentConfigOrderByWithRelationInputSchema.array(),ExperimentConfigOrderByWithRelationInputSchema ]).optional(),
  cursor: ExperimentConfigWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExperimentConfigScalarFieldEnumSchema,ExperimentConfigScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExperimentConfigFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ExperimentConfigFindFirstOrThrowArgs> = z.object({
  select: ExperimentConfigSelectSchema.optional(),
  where: ExperimentConfigWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentConfigOrderByWithRelationInputSchema.array(),ExperimentConfigOrderByWithRelationInputSchema ]).optional(),
  cursor: ExperimentConfigWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExperimentConfigScalarFieldEnumSchema,ExperimentConfigScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExperimentConfigFindManyArgsSchema: z.ZodType<Prisma.ExperimentConfigFindManyArgs> = z.object({
  select: ExperimentConfigSelectSchema.optional(),
  where: ExperimentConfigWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentConfigOrderByWithRelationInputSchema.array(),ExperimentConfigOrderByWithRelationInputSchema ]).optional(),
  cursor: ExperimentConfigWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ExperimentConfigScalarFieldEnumSchema,ExperimentConfigScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ExperimentConfigAggregateArgsSchema: z.ZodType<Prisma.ExperimentConfigAggregateArgs> = z.object({
  where: ExperimentConfigWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentConfigOrderByWithRelationInputSchema.array(),ExperimentConfigOrderByWithRelationInputSchema ]).optional(),
  cursor: ExperimentConfigWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExperimentConfigGroupByArgsSchema: z.ZodType<Prisma.ExperimentConfigGroupByArgs> = z.object({
  where: ExperimentConfigWhereInputSchema.optional(),
  orderBy: z.union([ ExperimentConfigOrderByWithAggregationInputSchema.array(),ExperimentConfigOrderByWithAggregationInputSchema ]).optional(),
  by: ExperimentConfigScalarFieldEnumSchema.array(),
  having: ExperimentConfigScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ExperimentConfigFindUniqueArgsSchema: z.ZodType<Prisma.ExperimentConfigFindUniqueArgs> = z.object({
  select: ExperimentConfigSelectSchema.optional(),
  where: ExperimentConfigWhereUniqueInputSchema,
}).strict() ;

export const ExperimentConfigFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ExperimentConfigFindUniqueOrThrowArgs> = z.object({
  select: ExperimentConfigSelectSchema.optional(),
  where: ExperimentConfigWhereUniqueInputSchema,
}).strict() ;

export const EngineRecommendationFindFirstArgsSchema: z.ZodType<Prisma.EngineRecommendationFindFirstArgs> = z.object({
  select: EngineRecommendationSelectSchema.optional(),
  include: EngineRecommendationIncludeSchema.optional(),
  where: EngineRecommendationWhereInputSchema.optional(),
  orderBy: z.union([ EngineRecommendationOrderByWithRelationInputSchema.array(),EngineRecommendationOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineRecommendationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineRecommendationScalarFieldEnumSchema,EngineRecommendationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineRecommendationFindFirstOrThrowArgsSchema: z.ZodType<Prisma.EngineRecommendationFindFirstOrThrowArgs> = z.object({
  select: EngineRecommendationSelectSchema.optional(),
  include: EngineRecommendationIncludeSchema.optional(),
  where: EngineRecommendationWhereInputSchema.optional(),
  orderBy: z.union([ EngineRecommendationOrderByWithRelationInputSchema.array(),EngineRecommendationOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineRecommendationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineRecommendationScalarFieldEnumSchema,EngineRecommendationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineRecommendationFindManyArgsSchema: z.ZodType<Prisma.EngineRecommendationFindManyArgs> = z.object({
  select: EngineRecommendationSelectSchema.optional(),
  include: EngineRecommendationIncludeSchema.optional(),
  where: EngineRecommendationWhereInputSchema.optional(),
  orderBy: z.union([ EngineRecommendationOrderByWithRelationInputSchema.array(),EngineRecommendationOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineRecommendationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ EngineRecommendationScalarFieldEnumSchema,EngineRecommendationScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const EngineRecommendationAggregateArgsSchema: z.ZodType<Prisma.EngineRecommendationAggregateArgs> = z.object({
  where: EngineRecommendationWhereInputSchema.optional(),
  orderBy: z.union([ EngineRecommendationOrderByWithRelationInputSchema.array(),EngineRecommendationOrderByWithRelationInputSchema ]).optional(),
  cursor: EngineRecommendationWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EngineRecommendationGroupByArgsSchema: z.ZodType<Prisma.EngineRecommendationGroupByArgs> = z.object({
  where: EngineRecommendationWhereInputSchema.optional(),
  orderBy: z.union([ EngineRecommendationOrderByWithAggregationInputSchema.array(),EngineRecommendationOrderByWithAggregationInputSchema ]).optional(),
  by: EngineRecommendationScalarFieldEnumSchema.array(),
  having: EngineRecommendationScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const EngineRecommendationFindUniqueArgsSchema: z.ZodType<Prisma.EngineRecommendationFindUniqueArgs> = z.object({
  select: EngineRecommendationSelectSchema.optional(),
  include: EngineRecommendationIncludeSchema.optional(),
  where: EngineRecommendationWhereUniqueInputSchema,
}).strict() ;

export const EngineRecommendationFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.EngineRecommendationFindUniqueOrThrowArgs> = z.object({
  select: EngineRecommendationSelectSchema.optional(),
  include: EngineRecommendationIncludeSchema.optional(),
  where: EngineRecommendationWhereUniqueInputSchema,
}).strict() ;

export const IndexFindFirstArgsSchema: z.ZodType<Prisma.IndexFindFirstArgs> = z.object({
  select: IndexSelectSchema.optional(),
  where: IndexWhereInputSchema.optional(),
  orderBy: z.union([ IndexOrderByWithRelationInputSchema.array(),IndexOrderByWithRelationInputSchema ]).optional(),
  cursor: IndexWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IndexScalarFieldEnumSchema,IndexScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const IndexFindFirstOrThrowArgsSchema: z.ZodType<Prisma.IndexFindFirstOrThrowArgs> = z.object({
  select: IndexSelectSchema.optional(),
  where: IndexWhereInputSchema.optional(),
  orderBy: z.union([ IndexOrderByWithRelationInputSchema.array(),IndexOrderByWithRelationInputSchema ]).optional(),
  cursor: IndexWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IndexScalarFieldEnumSchema,IndexScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const IndexFindManyArgsSchema: z.ZodType<Prisma.IndexFindManyArgs> = z.object({
  select: IndexSelectSchema.optional(),
  where: IndexWhereInputSchema.optional(),
  orderBy: z.union([ IndexOrderByWithRelationInputSchema.array(),IndexOrderByWithRelationInputSchema ]).optional(),
  cursor: IndexWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ IndexScalarFieldEnumSchema,IndexScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const IndexAggregateArgsSchema: z.ZodType<Prisma.IndexAggregateArgs> = z.object({
  where: IndexWhereInputSchema.optional(),
  orderBy: z.union([ IndexOrderByWithRelationInputSchema.array(),IndexOrderByWithRelationInputSchema ]).optional(),
  cursor: IndexWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const IndexGroupByArgsSchema: z.ZodType<Prisma.IndexGroupByArgs> = z.object({
  where: IndexWhereInputSchema.optional(),
  orderBy: z.union([ IndexOrderByWithAggregationInputSchema.array(),IndexOrderByWithAggregationInputSchema ]).optional(),
  by: IndexScalarFieldEnumSchema.array(),
  having: IndexScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const IndexFindUniqueArgsSchema: z.ZodType<Prisma.IndexFindUniqueArgs> = z.object({
  select: IndexSelectSchema.optional(),
  where: IndexWhereUniqueInputSchema,
}).strict() ;

export const IndexFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.IndexFindUniqueOrThrowArgs> = z.object({
  select: IndexSelectSchema.optional(),
  where: IndexWhereUniqueInputSchema,
}).strict() ;

export const UserFindFirstArgsSchema: z.ZodType<Prisma.UserFindFirstArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UserFindFirstOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserFindManyArgsSchema: z.ZodType<Prisma.UserFindManyArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ UserScalarFieldEnumSchema,UserScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const UserAggregateArgsSchema: z.ZodType<Prisma.UserAggregateArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithRelationInputSchema.array(),UserOrderByWithRelationInputSchema ]).optional(),
  cursor: UserWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserGroupByArgsSchema: z.ZodType<Prisma.UserGroupByArgs> = z.object({
  where: UserWhereInputSchema.optional(),
  orderBy: z.union([ UserOrderByWithAggregationInputSchema.array(),UserOrderByWithAggregationInputSchema ]).optional(),
  by: UserScalarFieldEnumSchema.array(),
  having: UserScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const UserFindUniqueArgsSchema: z.ZodType<Prisma.UserFindUniqueArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UserFindUniqueOrThrowArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const AccountFindFirstArgsSchema: z.ZodType<Prisma.AccountFindFirstArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AccountFindFirstOrThrowArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountFindManyArgsSchema: z.ZodType<Prisma.AccountFindManyArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AccountScalarFieldEnumSchema,AccountScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AccountAggregateArgsSchema: z.ZodType<Prisma.AccountAggregateArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithRelationInputSchema.array(),AccountOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountGroupByArgsSchema: z.ZodType<Prisma.AccountGroupByArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
  orderBy: z.union([ AccountOrderByWithAggregationInputSchema.array(),AccountOrderByWithAggregationInputSchema ]).optional(),
  by: AccountScalarFieldEnumSchema.array(),
  having: AccountScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AccountFindUniqueArgsSchema: z.ZodType<Prisma.AccountFindUniqueArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AccountFindUniqueOrThrowArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AuthSessionFindFirstArgsSchema: z.ZodType<Prisma.AuthSessionFindFirstArgs> = z.object({
  select: AuthSessionSelectSchema.optional(),
  include: AuthSessionIncludeSchema.optional(),
  where: AuthSessionWhereInputSchema.optional(),
  orderBy: z.union([ AuthSessionOrderByWithRelationInputSchema.array(),AuthSessionOrderByWithRelationInputSchema ]).optional(),
  cursor: AuthSessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuthSessionScalarFieldEnumSchema,AuthSessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuthSessionFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AuthSessionFindFirstOrThrowArgs> = z.object({
  select: AuthSessionSelectSchema.optional(),
  include: AuthSessionIncludeSchema.optional(),
  where: AuthSessionWhereInputSchema.optional(),
  orderBy: z.union([ AuthSessionOrderByWithRelationInputSchema.array(),AuthSessionOrderByWithRelationInputSchema ]).optional(),
  cursor: AuthSessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuthSessionScalarFieldEnumSchema,AuthSessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuthSessionFindManyArgsSchema: z.ZodType<Prisma.AuthSessionFindManyArgs> = z.object({
  select: AuthSessionSelectSchema.optional(),
  include: AuthSessionIncludeSchema.optional(),
  where: AuthSessionWhereInputSchema.optional(),
  orderBy: z.union([ AuthSessionOrderByWithRelationInputSchema.array(),AuthSessionOrderByWithRelationInputSchema ]).optional(),
  cursor: AuthSessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AuthSessionScalarFieldEnumSchema,AuthSessionScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AuthSessionAggregateArgsSchema: z.ZodType<Prisma.AuthSessionAggregateArgs> = z.object({
  where: AuthSessionWhereInputSchema.optional(),
  orderBy: z.union([ AuthSessionOrderByWithRelationInputSchema.array(),AuthSessionOrderByWithRelationInputSchema ]).optional(),
  cursor: AuthSessionWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AuthSessionGroupByArgsSchema: z.ZodType<Prisma.AuthSessionGroupByArgs> = z.object({
  where: AuthSessionWhereInputSchema.optional(),
  orderBy: z.union([ AuthSessionOrderByWithAggregationInputSchema.array(),AuthSessionOrderByWithAggregationInputSchema ]).optional(),
  by: AuthSessionScalarFieldEnumSchema.array(),
  having: AuthSessionScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AuthSessionFindUniqueArgsSchema: z.ZodType<Prisma.AuthSessionFindUniqueArgs> = z.object({
  select: AuthSessionSelectSchema.optional(),
  include: AuthSessionIncludeSchema.optional(),
  where: AuthSessionWhereUniqueInputSchema,
}).strict() ;

export const AuthSessionFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AuthSessionFindUniqueOrThrowArgs> = z.object({
  select: AuthSessionSelectSchema.optional(),
  include: AuthSessionIncludeSchema.optional(),
  where: AuthSessionWhereUniqueInputSchema,
}).strict() ;

export const VerificationTokenFindFirstArgsSchema: z.ZodType<Prisma.VerificationTokenFindFirstArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationTokenFindFirstOrThrowArgsSchema: z.ZodType<Prisma.VerificationTokenFindFirstOrThrowArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationTokenFindManyArgsSchema: z.ZodType<Prisma.VerificationTokenFindManyArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ VerificationTokenScalarFieldEnumSchema,VerificationTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const VerificationTokenAggregateArgsSchema: z.ZodType<Prisma.VerificationTokenAggregateArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithRelationInputSchema.array(),VerificationTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: VerificationTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationTokenGroupByArgsSchema: z.ZodType<Prisma.VerificationTokenGroupByArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
  orderBy: z.union([ VerificationTokenOrderByWithAggregationInputSchema.array(),VerificationTokenOrderByWithAggregationInputSchema ]).optional(),
  by: VerificationTokenScalarFieldEnumSchema.array(),
  having: VerificationTokenScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const VerificationTokenFindUniqueArgsSchema: z.ZodType<Prisma.VerificationTokenFindUniqueArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict() ;

export const VerificationTokenFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.VerificationTokenFindUniqueOrThrowArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict() ;

export const ApiKeyFindFirstArgsSchema: z.ZodType<Prisma.ApiKeyFindFirstArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithRelationInputSchema.array(),ApiKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ApiKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ApiKeyScalarFieldEnumSchema,ApiKeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ApiKeyFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ApiKeyFindFirstOrThrowArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithRelationInputSchema.array(),ApiKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ApiKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ApiKeyScalarFieldEnumSchema,ApiKeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ApiKeyFindManyArgsSchema: z.ZodType<Prisma.ApiKeyFindManyArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithRelationInputSchema.array(),ApiKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ApiKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ ApiKeyScalarFieldEnumSchema,ApiKeyScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const ApiKeyAggregateArgsSchema: z.ZodType<Prisma.ApiKeyAggregateArgs> = z.object({
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithRelationInputSchema.array(),ApiKeyOrderByWithRelationInputSchema ]).optional(),
  cursor: ApiKeyWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ApiKeyGroupByArgsSchema: z.ZodType<Prisma.ApiKeyGroupByArgs> = z.object({
  where: ApiKeyWhereInputSchema.optional(),
  orderBy: z.union([ ApiKeyOrderByWithAggregationInputSchema.array(),ApiKeyOrderByWithAggregationInputSchema ]).optional(),
  by: ApiKeyScalarFieldEnumSchema.array(),
  having: ApiKeyScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const ApiKeyFindUniqueArgsSchema: z.ZodType<Prisma.ApiKeyFindUniqueArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  where: ApiKeyWhereUniqueInputSchema,
}).strict() ;

export const ApiKeyFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ApiKeyFindUniqueOrThrowArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  where: ApiKeyWhereUniqueInputSchema,
}).strict() ;

export const AdminTokenFindFirstArgsSchema: z.ZodType<Prisma.AdminTokenFindFirstArgs> = z.object({
  select: AdminTokenSelectSchema.optional(),
  where: AdminTokenWhereInputSchema.optional(),
  orderBy: z.union([ AdminTokenOrderByWithRelationInputSchema.array(),AdminTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: AdminTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdminTokenScalarFieldEnumSchema,AdminTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdminTokenFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AdminTokenFindFirstOrThrowArgs> = z.object({
  select: AdminTokenSelectSchema.optional(),
  where: AdminTokenWhereInputSchema.optional(),
  orderBy: z.union([ AdminTokenOrderByWithRelationInputSchema.array(),AdminTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: AdminTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdminTokenScalarFieldEnumSchema,AdminTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdminTokenFindManyArgsSchema: z.ZodType<Prisma.AdminTokenFindManyArgs> = z.object({
  select: AdminTokenSelectSchema.optional(),
  where: AdminTokenWhereInputSchema.optional(),
  orderBy: z.union([ AdminTokenOrderByWithRelationInputSchema.array(),AdminTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: AdminTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ AdminTokenScalarFieldEnumSchema,AdminTokenScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const AdminTokenAggregateArgsSchema: z.ZodType<Prisma.AdminTokenAggregateArgs> = z.object({
  where: AdminTokenWhereInputSchema.optional(),
  orderBy: z.union([ AdminTokenOrderByWithRelationInputSchema.array(),AdminTokenOrderByWithRelationInputSchema ]).optional(),
  cursor: AdminTokenWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdminTokenGroupByArgsSchema: z.ZodType<Prisma.AdminTokenGroupByArgs> = z.object({
  where: AdminTokenWhereInputSchema.optional(),
  orderBy: z.union([ AdminTokenOrderByWithAggregationInputSchema.array(),AdminTokenOrderByWithAggregationInputSchema ]).optional(),
  by: AdminTokenScalarFieldEnumSchema.array(),
  having: AdminTokenScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const AdminTokenFindUniqueArgsSchema: z.ZodType<Prisma.AdminTokenFindUniqueArgs> = z.object({
  select: AdminTokenSelectSchema.optional(),
  where: AdminTokenWhereUniqueInputSchema,
}).strict() ;

export const AdminTokenFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AdminTokenFindUniqueOrThrowArgs> = z.object({
  select: AdminTokenSelectSchema.optional(),
  where: AdminTokenWhereUniqueInputSchema,
}).strict() ;

export const SessionToSignalFindFirstArgsSchema: z.ZodType<Prisma.SessionToSignalFindFirstArgs> = z.object({
  select: SessionToSignalSelectSchema.optional(),
  include: SessionToSignalIncludeSchema.optional(),
  where: SessionToSignalWhereInputSchema.optional(),
  orderBy: z.union([ SessionToSignalOrderByWithRelationInputSchema.array(),SessionToSignalOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionToSignalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionToSignalScalarFieldEnumSchema,SessionToSignalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionToSignalFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SessionToSignalFindFirstOrThrowArgs> = z.object({
  select: SessionToSignalSelectSchema.optional(),
  include: SessionToSignalIncludeSchema.optional(),
  where: SessionToSignalWhereInputSchema.optional(),
  orderBy: z.union([ SessionToSignalOrderByWithRelationInputSchema.array(),SessionToSignalOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionToSignalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionToSignalScalarFieldEnumSchema,SessionToSignalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionToSignalFindManyArgsSchema: z.ZodType<Prisma.SessionToSignalFindManyArgs> = z.object({
  select: SessionToSignalSelectSchema.optional(),
  include: SessionToSignalIncludeSchema.optional(),
  where: SessionToSignalWhereInputSchema.optional(),
  orderBy: z.union([ SessionToSignalOrderByWithRelationInputSchema.array(),SessionToSignalOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionToSignalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: z.union([ SessionToSignalScalarFieldEnumSchema,SessionToSignalScalarFieldEnumSchema.array() ]).optional(),
}).strict() ;

export const SessionToSignalAggregateArgsSchema: z.ZodType<Prisma.SessionToSignalAggregateArgs> = z.object({
  where: SessionToSignalWhereInputSchema.optional(),
  orderBy: z.union([ SessionToSignalOrderByWithRelationInputSchema.array(),SessionToSignalOrderByWithRelationInputSchema ]).optional(),
  cursor: SessionToSignalWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionToSignalGroupByArgsSchema: z.ZodType<Prisma.SessionToSignalGroupByArgs> = z.object({
  where: SessionToSignalWhereInputSchema.optional(),
  orderBy: z.union([ SessionToSignalOrderByWithAggregationInputSchema.array(),SessionToSignalOrderByWithAggregationInputSchema ]).optional(),
  by: SessionToSignalScalarFieldEnumSchema.array(),
  having: SessionToSignalScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() ;

export const SessionToSignalFindUniqueArgsSchema: z.ZodType<Prisma.SessionToSignalFindUniqueArgs> = z.object({
  select: SessionToSignalSelectSchema.optional(),
  include: SessionToSignalIncludeSchema.optional(),
  where: SessionToSignalWhereUniqueInputSchema,
}).strict() ;

export const SessionToSignalFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SessionToSignalFindUniqueOrThrowArgs> = z.object({
  select: SessionToSignalSelectSchema.optional(),
  include: SessionToSignalIncludeSchema.optional(),
  where: SessionToSignalWhereUniqueInputSchema,
}).strict() ;

export const DocumentCreateArgsSchema: z.ZodType<Prisma.DocumentCreateArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  data: z.union([ DocumentCreateInputSchema,DocumentUncheckedCreateInputSchema ]),
}).strict() ;

export const DocumentUpsertArgsSchema: z.ZodType<Prisma.DocumentUpsertArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  where: DocumentWhereUniqueInputSchema,
  create: z.union([ DocumentCreateInputSchema,DocumentUncheckedCreateInputSchema ]),
  update: z.union([ DocumentUpdateInputSchema,DocumentUncheckedUpdateInputSchema ]),
}).strict() ;

export const DocumentCreateManyArgsSchema: z.ZodType<Prisma.DocumentCreateManyArgs> = z.object({
  data: z.union([ DocumentCreateManyInputSchema,DocumentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DocumentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.DocumentCreateManyAndReturnArgs> = z.object({
  data: z.union([ DocumentCreateManyInputSchema,DocumentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const DocumentDeleteArgsSchema: z.ZodType<Prisma.DocumentDeleteArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  where: DocumentWhereUniqueInputSchema,
}).strict() ;

export const DocumentUpdateArgsSchema: z.ZodType<Prisma.DocumentUpdateArgs> = z.object({
  select: DocumentSelectSchema.optional(),
  data: z.union([ DocumentUpdateInputSchema,DocumentUncheckedUpdateInputSchema ]),
  where: DocumentWhereUniqueInputSchema,
}).strict() ;

export const DocumentUpdateManyArgsSchema: z.ZodType<Prisma.DocumentUpdateManyArgs> = z.object({
  data: z.union([ DocumentUpdateManyMutationInputSchema,DocumentUncheckedUpdateManyInputSchema ]),
  where: DocumentWhereInputSchema.optional(),
}).strict() ;

export const DocumentDeleteManyArgsSchema: z.ZodType<Prisma.DocumentDeleteManyArgs> = z.object({
  where: DocumentWhereInputSchema.optional(),
}).strict() ;

export const MigrationCreateArgsSchema: z.ZodType<Prisma.MigrationCreateArgs> = z.object({
  select: MigrationSelectSchema.optional(),
  data: z.union([ MigrationCreateInputSchema,MigrationUncheckedCreateInputSchema ]),
}).strict() ;

export const MigrationUpsertArgsSchema: z.ZodType<Prisma.MigrationUpsertArgs> = z.object({
  select: MigrationSelectSchema.optional(),
  where: MigrationWhereUniqueInputSchema,
  create: z.union([ MigrationCreateInputSchema,MigrationUncheckedCreateInputSchema ]),
  update: z.union([ MigrationUpdateInputSchema,MigrationUncheckedUpdateInputSchema ]),
}).strict() ;

export const MigrationCreateManyArgsSchema: z.ZodType<Prisma.MigrationCreateManyArgs> = z.object({
  data: z.union([ MigrationCreateManyInputSchema,MigrationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MigrationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MigrationCreateManyAndReturnArgs> = z.object({
  data: z.union([ MigrationCreateManyInputSchema,MigrationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MigrationDeleteArgsSchema: z.ZodType<Prisma.MigrationDeleteArgs> = z.object({
  select: MigrationSelectSchema.optional(),
  where: MigrationWhereUniqueInputSchema,
}).strict() ;

export const MigrationUpdateArgsSchema: z.ZodType<Prisma.MigrationUpdateArgs> = z.object({
  select: MigrationSelectSchema.optional(),
  data: z.union([ MigrationUpdateInputSchema,MigrationUncheckedUpdateInputSchema ]),
  where: MigrationWhereUniqueInputSchema,
}).strict() ;

export const MigrationUpdateManyArgsSchema: z.ZodType<Prisma.MigrationUpdateManyArgs> = z.object({
  data: z.union([ MigrationUpdateManyMutationInputSchema,MigrationUncheckedUpdateManyInputSchema ]),
  where: MigrationWhereInputSchema.optional(),
}).strict() ;

export const MigrationDeleteManyArgsSchema: z.ZodType<Prisma.MigrationDeleteManyArgs> = z.object({
  where: MigrationWhereInputSchema.optional(),
}).strict() ;

export const SearchAnalyticsCreateArgsSchema: z.ZodType<Prisma.SearchAnalyticsCreateArgs> = z.object({
  select: SearchAnalyticsSelectSchema.optional(),
  data: z.union([ SearchAnalyticsCreateInputSchema,SearchAnalyticsUncheckedCreateInputSchema ]),
}).strict() ;

export const SearchAnalyticsUpsertArgsSchema: z.ZodType<Prisma.SearchAnalyticsUpsertArgs> = z.object({
  select: SearchAnalyticsSelectSchema.optional(),
  where: SearchAnalyticsWhereUniqueInputSchema,
  create: z.union([ SearchAnalyticsCreateInputSchema,SearchAnalyticsUncheckedCreateInputSchema ]),
  update: z.union([ SearchAnalyticsUpdateInputSchema,SearchAnalyticsUncheckedUpdateInputSchema ]),
}).strict() ;

export const SearchAnalyticsCreateManyArgsSchema: z.ZodType<Prisma.SearchAnalyticsCreateManyArgs> = z.object({
  data: z.union([ SearchAnalyticsCreateManyInputSchema,SearchAnalyticsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SearchAnalyticsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SearchAnalyticsCreateManyAndReturnArgs> = z.object({
  data: z.union([ SearchAnalyticsCreateManyInputSchema,SearchAnalyticsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SearchAnalyticsDeleteArgsSchema: z.ZodType<Prisma.SearchAnalyticsDeleteArgs> = z.object({
  select: SearchAnalyticsSelectSchema.optional(),
  where: SearchAnalyticsWhereUniqueInputSchema,
}).strict() ;

export const SearchAnalyticsUpdateArgsSchema: z.ZodType<Prisma.SearchAnalyticsUpdateArgs> = z.object({
  select: SearchAnalyticsSelectSchema.optional(),
  data: z.union([ SearchAnalyticsUpdateInputSchema,SearchAnalyticsUncheckedUpdateInputSchema ]),
  where: SearchAnalyticsWhereUniqueInputSchema,
}).strict() ;

export const SearchAnalyticsUpdateManyArgsSchema: z.ZodType<Prisma.SearchAnalyticsUpdateManyArgs> = z.object({
  data: z.union([ SearchAnalyticsUpdateManyMutationInputSchema,SearchAnalyticsUncheckedUpdateManyInputSchema ]),
  where: SearchAnalyticsWhereInputSchema.optional(),
}).strict() ;

export const SearchAnalyticsDeleteManyArgsSchema: z.ZodType<Prisma.SearchAnalyticsDeleteManyArgs> = z.object({
  where: SearchAnalyticsWhereInputSchema.optional(),
}).strict() ;

export const SessionCreateArgsSchema: z.ZodType<Prisma.SessionCreateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
}).strict() ;

export const SessionUpsertArgsSchema: z.ZodType<Prisma.SessionUpsertArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
  create: z.union([ SessionCreateInputSchema,SessionUncheckedCreateInputSchema ]),
  update: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
}).strict() ;

export const SessionCreateManyArgsSchema: z.ZodType<Prisma.SessionCreateManyArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionCreateManyAndReturnArgs> = z.object({
  data: z.union([ SessionCreateManyInputSchema,SessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionDeleteArgsSchema: z.ZodType<Prisma.SessionDeleteArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateArgsSchema: z.ZodType<Prisma.SessionUpdateArgs> = z.object({
  select: SessionSelectSchema.optional(),
  include: SessionIncludeSchema.optional(),
  data: z.union([ SessionUpdateInputSchema,SessionUncheckedUpdateInputSchema ]),
  where: SessionWhereUniqueInputSchema,
}).strict() ;

export const SessionUpdateManyArgsSchema: z.ZodType<Prisma.SessionUpdateManyArgs> = z.object({
  data: z.union([ SessionUpdateManyMutationInputSchema,SessionUncheckedUpdateManyInputSchema ]),
  where: SessionWhereInputSchema.optional(),
}).strict() ;

export const SessionDeleteManyArgsSchema: z.ZodType<Prisma.SessionDeleteManyArgs> = z.object({
  where: SessionWhereInputSchema.optional(),
}).strict() ;

export const ConversationCreateArgsSchema: z.ZodType<Prisma.ConversationCreateArgs> = z.object({
  select: ConversationSelectSchema.optional(),
  include: ConversationIncludeSchema.optional(),
  data: z.union([ ConversationCreateInputSchema,ConversationUncheckedCreateInputSchema ]),
}).strict() ;

export const ConversationUpsertArgsSchema: z.ZodType<Prisma.ConversationUpsertArgs> = z.object({
  select: ConversationSelectSchema.optional(),
  include: ConversationIncludeSchema.optional(),
  where: ConversationWhereUniqueInputSchema,
  create: z.union([ ConversationCreateInputSchema,ConversationUncheckedCreateInputSchema ]),
  update: z.union([ ConversationUpdateInputSchema,ConversationUncheckedUpdateInputSchema ]),
}).strict() ;

export const ConversationCreateManyArgsSchema: z.ZodType<Prisma.ConversationCreateManyArgs> = z.object({
  data: z.union([ ConversationCreateManyInputSchema,ConversationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ConversationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ConversationCreateManyAndReturnArgs> = z.object({
  data: z.union([ ConversationCreateManyInputSchema,ConversationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ConversationDeleteArgsSchema: z.ZodType<Prisma.ConversationDeleteArgs> = z.object({
  select: ConversationSelectSchema.optional(),
  include: ConversationIncludeSchema.optional(),
  where: ConversationWhereUniqueInputSchema,
}).strict() ;

export const ConversationUpdateArgsSchema: z.ZodType<Prisma.ConversationUpdateArgs> = z.object({
  select: ConversationSelectSchema.optional(),
  include: ConversationIncludeSchema.optional(),
  data: z.union([ ConversationUpdateInputSchema,ConversationUncheckedUpdateInputSchema ]),
  where: ConversationWhereUniqueInputSchema,
}).strict() ;

export const ConversationUpdateManyArgsSchema: z.ZodType<Prisma.ConversationUpdateManyArgs> = z.object({
  data: z.union([ ConversationUpdateManyMutationInputSchema,ConversationUncheckedUpdateManyInputSchema ]),
  where: ConversationWhereInputSchema.optional(),
}).strict() ;

export const ConversationDeleteManyArgsSchema: z.ZodType<Prisma.ConversationDeleteManyArgs> = z.object({
  where: ConversationWhereInputSchema.optional(),
}).strict() ;

export const MessageCreateArgsSchema: z.ZodType<Prisma.MessageCreateArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  data: z.union([ MessageCreateInputSchema,MessageUncheckedCreateInputSchema ]),
}).strict() ;

export const MessageUpsertArgsSchema: z.ZodType<Prisma.MessageUpsertArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereUniqueInputSchema,
  create: z.union([ MessageCreateInputSchema,MessageUncheckedCreateInputSchema ]),
  update: z.union([ MessageUpdateInputSchema,MessageUncheckedUpdateInputSchema ]),
}).strict() ;

export const MessageCreateManyArgsSchema: z.ZodType<Prisma.MessageCreateManyArgs> = z.object({
  data: z.union([ MessageCreateManyInputSchema,MessageCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MessageCreateManyAndReturnArgsSchema: z.ZodType<Prisma.MessageCreateManyAndReturnArgs> = z.object({
  data: z.union([ MessageCreateManyInputSchema,MessageCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const MessageDeleteArgsSchema: z.ZodType<Prisma.MessageDeleteArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  where: MessageWhereUniqueInputSchema,
}).strict() ;

export const MessageUpdateArgsSchema: z.ZodType<Prisma.MessageUpdateArgs> = z.object({
  select: MessageSelectSchema.optional(),
  include: MessageIncludeSchema.optional(),
  data: z.union([ MessageUpdateInputSchema,MessageUncheckedUpdateInputSchema ]),
  where: MessageWhereUniqueInputSchema,
}).strict() ;

export const MessageUpdateManyArgsSchema: z.ZodType<Prisma.MessageUpdateManyArgs> = z.object({
  data: z.union([ MessageUpdateManyMutationInputSchema,MessageUncheckedUpdateManyInputSchema ]),
  where: MessageWhereInputSchema.optional(),
}).strict() ;

export const MessageDeleteManyArgsSchema: z.ZodType<Prisma.MessageDeleteManyArgs> = z.object({
  where: MessageWhereInputSchema.optional(),
}).strict() ;

export const ABTestCreateArgsSchema: z.ZodType<Prisma.ABTestCreateArgs> = z.object({
  select: ABTestSelectSchema.optional(),
  include: ABTestIncludeSchema.optional(),
  data: z.union([ ABTestCreateInputSchema,ABTestUncheckedCreateInputSchema ]),
}).strict() ;

export const ABTestUpsertArgsSchema: z.ZodType<Prisma.ABTestUpsertArgs> = z.object({
  select: ABTestSelectSchema.optional(),
  include: ABTestIncludeSchema.optional(),
  where: ABTestWhereUniqueInputSchema,
  create: z.union([ ABTestCreateInputSchema,ABTestUncheckedCreateInputSchema ]),
  update: z.union([ ABTestUpdateInputSchema,ABTestUncheckedUpdateInputSchema ]),
}).strict() ;

export const ABTestCreateManyArgsSchema: z.ZodType<Prisma.ABTestCreateManyArgs> = z.object({
  data: z.union([ ABTestCreateManyInputSchema,ABTestCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ABTestCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ABTestCreateManyAndReturnArgs> = z.object({
  data: z.union([ ABTestCreateManyInputSchema,ABTestCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ABTestDeleteArgsSchema: z.ZodType<Prisma.ABTestDeleteArgs> = z.object({
  select: ABTestSelectSchema.optional(),
  include: ABTestIncludeSchema.optional(),
  where: ABTestWhereUniqueInputSchema,
}).strict() ;

export const ABTestUpdateArgsSchema: z.ZodType<Prisma.ABTestUpdateArgs> = z.object({
  select: ABTestSelectSchema.optional(),
  include: ABTestIncludeSchema.optional(),
  data: z.union([ ABTestUpdateInputSchema,ABTestUncheckedUpdateInputSchema ]),
  where: ABTestWhereUniqueInputSchema,
}).strict() ;

export const ABTestUpdateManyArgsSchema: z.ZodType<Prisma.ABTestUpdateManyArgs> = z.object({
  data: z.union([ ABTestUpdateManyMutationInputSchema,ABTestUncheckedUpdateManyInputSchema ]),
  where: ABTestWhereInputSchema.optional(),
}).strict() ;

export const ABTestDeleteManyArgsSchema: z.ZodType<Prisma.ABTestDeleteManyArgs> = z.object({
  where: ABTestWhereInputSchema.optional(),
}).strict() ;

export const ABTestAssignmentCreateArgsSchema: z.ZodType<Prisma.ABTestAssignmentCreateArgs> = z.object({
  select: ABTestAssignmentSelectSchema.optional(),
  include: ABTestAssignmentIncludeSchema.optional(),
  data: z.union([ ABTestAssignmentCreateInputSchema,ABTestAssignmentUncheckedCreateInputSchema ]),
}).strict() ;

export const ABTestAssignmentUpsertArgsSchema: z.ZodType<Prisma.ABTestAssignmentUpsertArgs> = z.object({
  select: ABTestAssignmentSelectSchema.optional(),
  include: ABTestAssignmentIncludeSchema.optional(),
  where: ABTestAssignmentWhereUniqueInputSchema,
  create: z.union([ ABTestAssignmentCreateInputSchema,ABTestAssignmentUncheckedCreateInputSchema ]),
  update: z.union([ ABTestAssignmentUpdateInputSchema,ABTestAssignmentUncheckedUpdateInputSchema ]),
}).strict() ;

export const ABTestAssignmentCreateManyArgsSchema: z.ZodType<Prisma.ABTestAssignmentCreateManyArgs> = z.object({
  data: z.union([ ABTestAssignmentCreateManyInputSchema,ABTestAssignmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ABTestAssignmentCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ABTestAssignmentCreateManyAndReturnArgs> = z.object({
  data: z.union([ ABTestAssignmentCreateManyInputSchema,ABTestAssignmentCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ABTestAssignmentDeleteArgsSchema: z.ZodType<Prisma.ABTestAssignmentDeleteArgs> = z.object({
  select: ABTestAssignmentSelectSchema.optional(),
  include: ABTestAssignmentIncludeSchema.optional(),
  where: ABTestAssignmentWhereUniqueInputSchema,
}).strict() ;

export const ABTestAssignmentUpdateArgsSchema: z.ZodType<Prisma.ABTestAssignmentUpdateArgs> = z.object({
  select: ABTestAssignmentSelectSchema.optional(),
  include: ABTestAssignmentIncludeSchema.optional(),
  data: z.union([ ABTestAssignmentUpdateInputSchema,ABTestAssignmentUncheckedUpdateInputSchema ]),
  where: ABTestAssignmentWhereUniqueInputSchema,
}).strict() ;

export const ABTestAssignmentUpdateManyArgsSchema: z.ZodType<Prisma.ABTestAssignmentUpdateManyArgs> = z.object({
  data: z.union([ ABTestAssignmentUpdateManyMutationInputSchema,ABTestAssignmentUncheckedUpdateManyInputSchema ]),
  where: ABTestAssignmentWhereInputSchema.optional(),
}).strict() ;

export const ABTestAssignmentDeleteManyArgsSchema: z.ZodType<Prisma.ABTestAssignmentDeleteManyArgs> = z.object({
  where: ABTestAssignmentWhereInputSchema.optional(),
}).strict() ;

export const ABTestMetricCreateArgsSchema: z.ZodType<Prisma.ABTestMetricCreateArgs> = z.object({
  select: ABTestMetricSelectSchema.optional(),
  include: ABTestMetricIncludeSchema.optional(),
  data: z.union([ ABTestMetricCreateInputSchema,ABTestMetricUncheckedCreateInputSchema ]),
}).strict() ;

export const ABTestMetricUpsertArgsSchema: z.ZodType<Prisma.ABTestMetricUpsertArgs> = z.object({
  select: ABTestMetricSelectSchema.optional(),
  include: ABTestMetricIncludeSchema.optional(),
  where: ABTestMetricWhereUniqueInputSchema,
  create: z.union([ ABTestMetricCreateInputSchema,ABTestMetricUncheckedCreateInputSchema ]),
  update: z.union([ ABTestMetricUpdateInputSchema,ABTestMetricUncheckedUpdateInputSchema ]),
}).strict() ;

export const ABTestMetricCreateManyArgsSchema: z.ZodType<Prisma.ABTestMetricCreateManyArgs> = z.object({
  data: z.union([ ABTestMetricCreateManyInputSchema,ABTestMetricCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ABTestMetricCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ABTestMetricCreateManyAndReturnArgs> = z.object({
  data: z.union([ ABTestMetricCreateManyInputSchema,ABTestMetricCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ABTestMetricDeleteArgsSchema: z.ZodType<Prisma.ABTestMetricDeleteArgs> = z.object({
  select: ABTestMetricSelectSchema.optional(),
  include: ABTestMetricIncludeSchema.optional(),
  where: ABTestMetricWhereUniqueInputSchema,
}).strict() ;

export const ABTestMetricUpdateArgsSchema: z.ZodType<Prisma.ABTestMetricUpdateArgs> = z.object({
  select: ABTestMetricSelectSchema.optional(),
  include: ABTestMetricIncludeSchema.optional(),
  data: z.union([ ABTestMetricUpdateInputSchema,ABTestMetricUncheckedUpdateInputSchema ]),
  where: ABTestMetricWhereUniqueInputSchema,
}).strict() ;

export const ABTestMetricUpdateManyArgsSchema: z.ZodType<Prisma.ABTestMetricUpdateManyArgs> = z.object({
  data: z.union([ ABTestMetricUpdateManyMutationInputSchema,ABTestMetricUncheckedUpdateManyInputSchema ]),
  where: ABTestMetricWhereInputSchema.optional(),
}).strict() ;

export const ABTestMetricDeleteManyArgsSchema: z.ZodType<Prisma.ABTestMetricDeleteManyArgs> = z.object({
  where: ABTestMetricWhereInputSchema.optional(),
}).strict() ;

export const SearchFeedbackCreateArgsSchema: z.ZodType<Prisma.SearchFeedbackCreateArgs> = z.object({
  select: SearchFeedbackSelectSchema.optional(),
  include: SearchFeedbackIncludeSchema.optional(),
  data: z.union([ SearchFeedbackCreateInputSchema,SearchFeedbackUncheckedCreateInputSchema ]),
}).strict() ;

export const SearchFeedbackUpsertArgsSchema: z.ZodType<Prisma.SearchFeedbackUpsertArgs> = z.object({
  select: SearchFeedbackSelectSchema.optional(),
  include: SearchFeedbackIncludeSchema.optional(),
  where: SearchFeedbackWhereUniqueInputSchema,
  create: z.union([ SearchFeedbackCreateInputSchema,SearchFeedbackUncheckedCreateInputSchema ]),
  update: z.union([ SearchFeedbackUpdateInputSchema,SearchFeedbackUncheckedUpdateInputSchema ]),
}).strict() ;

export const SearchFeedbackCreateManyArgsSchema: z.ZodType<Prisma.SearchFeedbackCreateManyArgs> = z.object({
  data: z.union([ SearchFeedbackCreateManyInputSchema,SearchFeedbackCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SearchFeedbackCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SearchFeedbackCreateManyAndReturnArgs> = z.object({
  data: z.union([ SearchFeedbackCreateManyInputSchema,SearchFeedbackCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SearchFeedbackDeleteArgsSchema: z.ZodType<Prisma.SearchFeedbackDeleteArgs> = z.object({
  select: SearchFeedbackSelectSchema.optional(),
  include: SearchFeedbackIncludeSchema.optional(),
  where: SearchFeedbackWhereUniqueInputSchema,
}).strict() ;

export const SearchFeedbackUpdateArgsSchema: z.ZodType<Prisma.SearchFeedbackUpdateArgs> = z.object({
  select: SearchFeedbackSelectSchema.optional(),
  include: SearchFeedbackIncludeSchema.optional(),
  data: z.union([ SearchFeedbackUpdateInputSchema,SearchFeedbackUncheckedUpdateInputSchema ]),
  where: SearchFeedbackWhereUniqueInputSchema,
}).strict() ;

export const SearchFeedbackUpdateManyArgsSchema: z.ZodType<Prisma.SearchFeedbackUpdateManyArgs> = z.object({
  data: z.union([ SearchFeedbackUpdateManyMutationInputSchema,SearchFeedbackUncheckedUpdateManyInputSchema ]),
  where: SearchFeedbackWhereInputSchema.optional(),
}).strict() ;

export const SearchFeedbackDeleteManyArgsSchema: z.ZodType<Prisma.SearchFeedbackDeleteManyArgs> = z.object({
  where: SearchFeedbackWhereInputSchema.optional(),
}).strict() ;

export const BaseEventCreateArgsSchema: z.ZodType<Prisma.BaseEventCreateArgs> = z.object({
  select: BaseEventSelectSchema.optional(),
  include: BaseEventIncludeSchema.optional(),
  data: z.union([ BaseEventCreateInputSchema,BaseEventUncheckedCreateInputSchema ]),
}).strict() ;

export const BaseEventUpsertArgsSchema: z.ZodType<Prisma.BaseEventUpsertArgs> = z.object({
  select: BaseEventSelectSchema.optional(),
  include: BaseEventIncludeSchema.optional(),
  where: BaseEventWhereUniqueInputSchema,
  create: z.union([ BaseEventCreateInputSchema,BaseEventUncheckedCreateInputSchema ]),
  update: z.union([ BaseEventUpdateInputSchema,BaseEventUncheckedUpdateInputSchema ]),
}).strict() ;

export const BaseEventCreateManyArgsSchema: z.ZodType<Prisma.BaseEventCreateManyArgs> = z.object({
  data: z.union([ BaseEventCreateManyInputSchema,BaseEventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BaseEventCreateManyAndReturnArgsSchema: z.ZodType<Prisma.BaseEventCreateManyAndReturnArgs> = z.object({
  data: z.union([ BaseEventCreateManyInputSchema,BaseEventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const BaseEventDeleteArgsSchema: z.ZodType<Prisma.BaseEventDeleteArgs> = z.object({
  select: BaseEventSelectSchema.optional(),
  include: BaseEventIncludeSchema.optional(),
  where: BaseEventWhereUniqueInputSchema,
}).strict() ;

export const BaseEventUpdateArgsSchema: z.ZodType<Prisma.BaseEventUpdateArgs> = z.object({
  select: BaseEventSelectSchema.optional(),
  include: BaseEventIncludeSchema.optional(),
  data: z.union([ BaseEventUpdateInputSchema,BaseEventUncheckedUpdateInputSchema ]),
  where: BaseEventWhereUniqueInputSchema,
}).strict() ;

export const BaseEventUpdateManyArgsSchema: z.ZodType<Prisma.BaseEventUpdateManyArgs> = z.object({
  data: z.union([ BaseEventUpdateManyMutationInputSchema,BaseEventUncheckedUpdateManyInputSchema ]),
  where: BaseEventWhereInputSchema.optional(),
}).strict() ;

export const BaseEventDeleteManyArgsSchema: z.ZodType<Prisma.BaseEventDeleteManyArgs> = z.object({
  where: BaseEventWhereInputSchema.optional(),
}).strict() ;

export const ModelEventCreateArgsSchema: z.ZodType<Prisma.ModelEventCreateArgs> = z.object({
  select: ModelEventSelectSchema.optional(),
  include: ModelEventIncludeSchema.optional(),
  data: z.union([ ModelEventCreateInputSchema,ModelEventUncheckedCreateInputSchema ]),
}).strict() ;

export const ModelEventUpsertArgsSchema: z.ZodType<Prisma.ModelEventUpsertArgs> = z.object({
  select: ModelEventSelectSchema.optional(),
  include: ModelEventIncludeSchema.optional(),
  where: ModelEventWhereUniqueInputSchema,
  create: z.union([ ModelEventCreateInputSchema,ModelEventUncheckedCreateInputSchema ]),
  update: z.union([ ModelEventUpdateInputSchema,ModelEventUncheckedUpdateInputSchema ]),
}).strict() ;

export const ModelEventCreateManyArgsSchema: z.ZodType<Prisma.ModelEventCreateManyArgs> = z.object({
  data: z.union([ ModelEventCreateManyInputSchema,ModelEventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ModelEventCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ModelEventCreateManyAndReturnArgs> = z.object({
  data: z.union([ ModelEventCreateManyInputSchema,ModelEventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ModelEventDeleteArgsSchema: z.ZodType<Prisma.ModelEventDeleteArgs> = z.object({
  select: ModelEventSelectSchema.optional(),
  include: ModelEventIncludeSchema.optional(),
  where: ModelEventWhereUniqueInputSchema,
}).strict() ;

export const ModelEventUpdateArgsSchema: z.ZodType<Prisma.ModelEventUpdateArgs> = z.object({
  select: ModelEventSelectSchema.optional(),
  include: ModelEventIncludeSchema.optional(),
  data: z.union([ ModelEventUpdateInputSchema,ModelEventUncheckedUpdateInputSchema ]),
  where: ModelEventWhereUniqueInputSchema,
}).strict() ;

export const ModelEventUpdateManyArgsSchema: z.ZodType<Prisma.ModelEventUpdateManyArgs> = z.object({
  data: z.union([ ModelEventUpdateManyMutationInputSchema,ModelEventUncheckedUpdateManyInputSchema ]),
  where: ModelEventWhereInputSchema.optional(),
}).strict() ;

export const ModelEventDeleteManyArgsSchema: z.ZodType<Prisma.ModelEventDeleteManyArgs> = z.object({
  where: ModelEventWhereInputSchema.optional(),
}).strict() ;

export const ProcessedSignalCreateArgsSchema: z.ZodType<Prisma.ProcessedSignalCreateArgs> = z.object({
  select: ProcessedSignalSelectSchema.optional(),
  include: ProcessedSignalIncludeSchema.optional(),
  data: z.union([ ProcessedSignalCreateInputSchema,ProcessedSignalUncheckedCreateInputSchema ]),
}).strict() ;

export const ProcessedSignalUpsertArgsSchema: z.ZodType<Prisma.ProcessedSignalUpsertArgs> = z.object({
  select: ProcessedSignalSelectSchema.optional(),
  include: ProcessedSignalIncludeSchema.optional(),
  where: ProcessedSignalWhereUniqueInputSchema,
  create: z.union([ ProcessedSignalCreateInputSchema,ProcessedSignalUncheckedCreateInputSchema ]),
  update: z.union([ ProcessedSignalUpdateInputSchema,ProcessedSignalUncheckedUpdateInputSchema ]),
}).strict() ;

export const ProcessedSignalCreateManyArgsSchema: z.ZodType<Prisma.ProcessedSignalCreateManyArgs> = z.object({
  data: z.union([ ProcessedSignalCreateManyInputSchema,ProcessedSignalCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProcessedSignalCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ProcessedSignalCreateManyAndReturnArgs> = z.object({
  data: z.union([ ProcessedSignalCreateManyInputSchema,ProcessedSignalCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ProcessedSignalDeleteArgsSchema: z.ZodType<Prisma.ProcessedSignalDeleteArgs> = z.object({
  select: ProcessedSignalSelectSchema.optional(),
  include: ProcessedSignalIncludeSchema.optional(),
  where: ProcessedSignalWhereUniqueInputSchema,
}).strict() ;

export const ProcessedSignalUpdateArgsSchema: z.ZodType<Prisma.ProcessedSignalUpdateArgs> = z.object({
  select: ProcessedSignalSelectSchema.optional(),
  include: ProcessedSignalIncludeSchema.optional(),
  data: z.union([ ProcessedSignalUpdateInputSchema,ProcessedSignalUncheckedUpdateInputSchema ]),
  where: ProcessedSignalWhereUniqueInputSchema,
}).strict() ;

export const ProcessedSignalUpdateManyArgsSchema: z.ZodType<Prisma.ProcessedSignalUpdateManyArgs> = z.object({
  data: z.union([ ProcessedSignalUpdateManyMutationInputSchema,ProcessedSignalUncheckedUpdateManyInputSchema ]),
  where: ProcessedSignalWhereInputSchema.optional(),
}).strict() ;

export const ProcessedSignalDeleteManyArgsSchema: z.ZodType<Prisma.ProcessedSignalDeleteManyArgs> = z.object({
  where: ProcessedSignalWhereInputSchema.optional(),
}).strict() ;

export const SignalBatchCreateArgsSchema: z.ZodType<Prisma.SignalBatchCreateArgs> = z.object({
  select: SignalBatchSelectSchema.optional(),
  data: z.union([ SignalBatchCreateInputSchema,SignalBatchUncheckedCreateInputSchema ]),
}).strict() ;

export const SignalBatchUpsertArgsSchema: z.ZodType<Prisma.SignalBatchUpsertArgs> = z.object({
  select: SignalBatchSelectSchema.optional(),
  where: SignalBatchWhereUniqueInputSchema,
  create: z.union([ SignalBatchCreateInputSchema,SignalBatchUncheckedCreateInputSchema ]),
  update: z.union([ SignalBatchUpdateInputSchema,SignalBatchUncheckedUpdateInputSchema ]),
}).strict() ;

export const SignalBatchCreateManyArgsSchema: z.ZodType<Prisma.SignalBatchCreateManyArgs> = z.object({
  data: z.union([ SignalBatchCreateManyInputSchema,SignalBatchCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SignalBatchCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SignalBatchCreateManyAndReturnArgs> = z.object({
  data: z.union([ SignalBatchCreateManyInputSchema,SignalBatchCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SignalBatchDeleteArgsSchema: z.ZodType<Prisma.SignalBatchDeleteArgs> = z.object({
  select: SignalBatchSelectSchema.optional(),
  where: SignalBatchWhereUniqueInputSchema,
}).strict() ;

export const SignalBatchUpdateArgsSchema: z.ZodType<Prisma.SignalBatchUpdateArgs> = z.object({
  select: SignalBatchSelectSchema.optional(),
  data: z.union([ SignalBatchUpdateInputSchema,SignalBatchUncheckedUpdateInputSchema ]),
  where: SignalBatchWhereUniqueInputSchema,
}).strict() ;

export const SignalBatchUpdateManyArgsSchema: z.ZodType<Prisma.SignalBatchUpdateManyArgs> = z.object({
  data: z.union([ SignalBatchUpdateManyMutationInputSchema,SignalBatchUncheckedUpdateManyInputSchema ]),
  where: SignalBatchWhereInputSchema.optional(),
}).strict() ;

export const SignalBatchDeleteManyArgsSchema: z.ZodType<Prisma.SignalBatchDeleteManyArgs> = z.object({
  where: SignalBatchWhereInputSchema.optional(),
}).strict() ;

export const SignalPatternCreateArgsSchema: z.ZodType<Prisma.SignalPatternCreateArgs> = z.object({
  select: SignalPatternSelectSchema.optional(),
  data: z.union([ SignalPatternCreateInputSchema,SignalPatternUncheckedCreateInputSchema ]),
}).strict() ;

export const SignalPatternUpsertArgsSchema: z.ZodType<Prisma.SignalPatternUpsertArgs> = z.object({
  select: SignalPatternSelectSchema.optional(),
  where: SignalPatternWhereUniqueInputSchema,
  create: z.union([ SignalPatternCreateInputSchema,SignalPatternUncheckedCreateInputSchema ]),
  update: z.union([ SignalPatternUpdateInputSchema,SignalPatternUncheckedUpdateInputSchema ]),
}).strict() ;

export const SignalPatternCreateManyArgsSchema: z.ZodType<Prisma.SignalPatternCreateManyArgs> = z.object({
  data: z.union([ SignalPatternCreateManyInputSchema,SignalPatternCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SignalPatternCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SignalPatternCreateManyAndReturnArgs> = z.object({
  data: z.union([ SignalPatternCreateManyInputSchema,SignalPatternCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SignalPatternDeleteArgsSchema: z.ZodType<Prisma.SignalPatternDeleteArgs> = z.object({
  select: SignalPatternSelectSchema.optional(),
  where: SignalPatternWhereUniqueInputSchema,
}).strict() ;

export const SignalPatternUpdateArgsSchema: z.ZodType<Prisma.SignalPatternUpdateArgs> = z.object({
  select: SignalPatternSelectSchema.optional(),
  data: z.union([ SignalPatternUpdateInputSchema,SignalPatternUncheckedUpdateInputSchema ]),
  where: SignalPatternWhereUniqueInputSchema,
}).strict() ;

export const SignalPatternUpdateManyArgsSchema: z.ZodType<Prisma.SignalPatternUpdateManyArgs> = z.object({
  data: z.union([ SignalPatternUpdateManyMutationInputSchema,SignalPatternUncheckedUpdateManyInputSchema ]),
  where: SignalPatternWhereInputSchema.optional(),
}).strict() ;

export const SignalPatternDeleteManyArgsSchema: z.ZodType<Prisma.SignalPatternDeleteManyArgs> = z.object({
  where: SignalPatternWhereInputSchema.optional(),
}).strict() ;

export const AdaptationRuleCreateArgsSchema: z.ZodType<Prisma.AdaptationRuleCreateArgs> = z.object({
  select: AdaptationRuleSelectSchema.optional(),
  data: z.union([ AdaptationRuleCreateInputSchema,AdaptationRuleUncheckedCreateInputSchema ]),
}).strict() ;

export const AdaptationRuleUpsertArgsSchema: z.ZodType<Prisma.AdaptationRuleUpsertArgs> = z.object({
  select: AdaptationRuleSelectSchema.optional(),
  where: AdaptationRuleWhereUniqueInputSchema,
  create: z.union([ AdaptationRuleCreateInputSchema,AdaptationRuleUncheckedCreateInputSchema ]),
  update: z.union([ AdaptationRuleUpdateInputSchema,AdaptationRuleUncheckedUpdateInputSchema ]),
}).strict() ;

export const AdaptationRuleCreateManyArgsSchema: z.ZodType<Prisma.AdaptationRuleCreateManyArgs> = z.object({
  data: z.union([ AdaptationRuleCreateManyInputSchema,AdaptationRuleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AdaptationRuleCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AdaptationRuleCreateManyAndReturnArgs> = z.object({
  data: z.union([ AdaptationRuleCreateManyInputSchema,AdaptationRuleCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AdaptationRuleDeleteArgsSchema: z.ZodType<Prisma.AdaptationRuleDeleteArgs> = z.object({
  select: AdaptationRuleSelectSchema.optional(),
  where: AdaptationRuleWhereUniqueInputSchema,
}).strict() ;

export const AdaptationRuleUpdateArgsSchema: z.ZodType<Prisma.AdaptationRuleUpdateArgs> = z.object({
  select: AdaptationRuleSelectSchema.optional(),
  data: z.union([ AdaptationRuleUpdateInputSchema,AdaptationRuleUncheckedUpdateInputSchema ]),
  where: AdaptationRuleWhereUniqueInputSchema,
}).strict() ;

export const AdaptationRuleUpdateManyArgsSchema: z.ZodType<Prisma.AdaptationRuleUpdateManyArgs> = z.object({
  data: z.union([ AdaptationRuleUpdateManyMutationInputSchema,AdaptationRuleUncheckedUpdateManyInputSchema ]),
  where: AdaptationRuleWhereInputSchema.optional(),
}).strict() ;

export const AdaptationRuleDeleteManyArgsSchema: z.ZodType<Prisma.AdaptationRuleDeleteManyArgs> = z.object({
  where: AdaptationRuleWhereInputSchema.optional(),
}).strict() ;

export const ModelConfigCreateArgsSchema: z.ZodType<Prisma.ModelConfigCreateArgs> = z.object({
  select: ModelConfigSelectSchema.optional(),
  include: ModelConfigIncludeSchema.optional(),
  data: z.union([ ModelConfigCreateInputSchema,ModelConfigUncheckedCreateInputSchema ]),
}).strict() ;

export const ModelConfigUpsertArgsSchema: z.ZodType<Prisma.ModelConfigUpsertArgs> = z.object({
  select: ModelConfigSelectSchema.optional(),
  include: ModelConfigIncludeSchema.optional(),
  where: ModelConfigWhereUniqueInputSchema,
  create: z.union([ ModelConfigCreateInputSchema,ModelConfigUncheckedCreateInputSchema ]),
  update: z.union([ ModelConfigUpdateInputSchema,ModelConfigUncheckedUpdateInputSchema ]),
}).strict() ;

export const ModelConfigCreateManyArgsSchema: z.ZodType<Prisma.ModelConfigCreateManyArgs> = z.object({
  data: z.union([ ModelConfigCreateManyInputSchema,ModelConfigCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ModelConfigCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ModelConfigCreateManyAndReturnArgs> = z.object({
  data: z.union([ ModelConfigCreateManyInputSchema,ModelConfigCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ModelConfigDeleteArgsSchema: z.ZodType<Prisma.ModelConfigDeleteArgs> = z.object({
  select: ModelConfigSelectSchema.optional(),
  include: ModelConfigIncludeSchema.optional(),
  where: ModelConfigWhereUniqueInputSchema,
}).strict() ;

export const ModelConfigUpdateArgsSchema: z.ZodType<Prisma.ModelConfigUpdateArgs> = z.object({
  select: ModelConfigSelectSchema.optional(),
  include: ModelConfigIncludeSchema.optional(),
  data: z.union([ ModelConfigUpdateInputSchema,ModelConfigUncheckedUpdateInputSchema ]),
  where: ModelConfigWhereUniqueInputSchema,
}).strict() ;

export const ModelConfigUpdateManyArgsSchema: z.ZodType<Prisma.ModelConfigUpdateManyArgs> = z.object({
  data: z.union([ ModelConfigUpdateManyMutationInputSchema,ModelConfigUncheckedUpdateManyInputSchema ]),
  where: ModelConfigWhereInputSchema.optional(),
}).strict() ;

export const ModelConfigDeleteManyArgsSchema: z.ZodType<Prisma.ModelConfigDeleteManyArgs> = z.object({
  where: ModelConfigWhereInputSchema.optional(),
}).strict() ;

export const ModelVersionCreateArgsSchema: z.ZodType<Prisma.ModelVersionCreateArgs> = z.object({
  select: ModelVersionSelectSchema.optional(),
  include: ModelVersionIncludeSchema.optional(),
  data: z.union([ ModelVersionCreateInputSchema,ModelVersionUncheckedCreateInputSchema ]),
}).strict() ;

export const ModelVersionUpsertArgsSchema: z.ZodType<Prisma.ModelVersionUpsertArgs> = z.object({
  select: ModelVersionSelectSchema.optional(),
  include: ModelVersionIncludeSchema.optional(),
  where: ModelVersionWhereUniqueInputSchema,
  create: z.union([ ModelVersionCreateInputSchema,ModelVersionUncheckedCreateInputSchema ]),
  update: z.union([ ModelVersionUpdateInputSchema,ModelVersionUncheckedUpdateInputSchema ]),
}).strict() ;

export const ModelVersionCreateManyArgsSchema: z.ZodType<Prisma.ModelVersionCreateManyArgs> = z.object({
  data: z.union([ ModelVersionCreateManyInputSchema,ModelVersionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ModelVersionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ModelVersionCreateManyAndReturnArgs> = z.object({
  data: z.union([ ModelVersionCreateManyInputSchema,ModelVersionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ModelVersionDeleteArgsSchema: z.ZodType<Prisma.ModelVersionDeleteArgs> = z.object({
  select: ModelVersionSelectSchema.optional(),
  include: ModelVersionIncludeSchema.optional(),
  where: ModelVersionWhereUniqueInputSchema,
}).strict() ;

export const ModelVersionUpdateArgsSchema: z.ZodType<Prisma.ModelVersionUpdateArgs> = z.object({
  select: ModelVersionSelectSchema.optional(),
  include: ModelVersionIncludeSchema.optional(),
  data: z.union([ ModelVersionUpdateInputSchema,ModelVersionUncheckedUpdateInputSchema ]),
  where: ModelVersionWhereUniqueInputSchema,
}).strict() ;

export const ModelVersionUpdateManyArgsSchema: z.ZodType<Prisma.ModelVersionUpdateManyArgs> = z.object({
  data: z.union([ ModelVersionUpdateManyMutationInputSchema,ModelVersionUncheckedUpdateManyInputSchema ]),
  where: ModelVersionWhereInputSchema.optional(),
}).strict() ;

export const ModelVersionDeleteManyArgsSchema: z.ZodType<Prisma.ModelVersionDeleteManyArgs> = z.object({
  where: ModelVersionWhereInputSchema.optional(),
}).strict() ;

export const LearningRequestCreateArgsSchema: z.ZodType<Prisma.LearningRequestCreateArgs> = z.object({
  select: LearningRequestSelectSchema.optional(),
  data: z.union([ LearningRequestCreateInputSchema,LearningRequestUncheckedCreateInputSchema ]),
}).strict() ;

export const LearningRequestUpsertArgsSchema: z.ZodType<Prisma.LearningRequestUpsertArgs> = z.object({
  select: LearningRequestSelectSchema.optional(),
  where: LearningRequestWhereUniqueInputSchema,
  create: z.union([ LearningRequestCreateInputSchema,LearningRequestUncheckedCreateInputSchema ]),
  update: z.union([ LearningRequestUpdateInputSchema,LearningRequestUncheckedUpdateInputSchema ]),
}).strict() ;

export const LearningRequestCreateManyArgsSchema: z.ZodType<Prisma.LearningRequestCreateManyArgs> = z.object({
  data: z.union([ LearningRequestCreateManyInputSchema,LearningRequestCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LearningRequestCreateManyAndReturnArgsSchema: z.ZodType<Prisma.LearningRequestCreateManyAndReturnArgs> = z.object({
  data: z.union([ LearningRequestCreateManyInputSchema,LearningRequestCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LearningRequestDeleteArgsSchema: z.ZodType<Prisma.LearningRequestDeleteArgs> = z.object({
  select: LearningRequestSelectSchema.optional(),
  where: LearningRequestWhereUniqueInputSchema,
}).strict() ;

export const LearningRequestUpdateArgsSchema: z.ZodType<Prisma.LearningRequestUpdateArgs> = z.object({
  select: LearningRequestSelectSchema.optional(),
  data: z.union([ LearningRequestUpdateInputSchema,LearningRequestUncheckedUpdateInputSchema ]),
  where: LearningRequestWhereUniqueInputSchema,
}).strict() ;

export const LearningRequestUpdateManyArgsSchema: z.ZodType<Prisma.LearningRequestUpdateManyArgs> = z.object({
  data: z.union([ LearningRequestUpdateManyMutationInputSchema,LearningRequestUncheckedUpdateManyInputSchema ]),
  where: LearningRequestWhereInputSchema.optional(),
}).strict() ;

export const LearningRequestDeleteManyArgsSchema: z.ZodType<Prisma.LearningRequestDeleteManyArgs> = z.object({
  where: LearningRequestWhereInputSchema.optional(),
}).strict() ;

export const FeedbackRequestCreateArgsSchema: z.ZodType<Prisma.FeedbackRequestCreateArgs> = z.object({
  select: FeedbackRequestSelectSchema.optional(),
  data: z.union([ FeedbackRequestCreateInputSchema,FeedbackRequestUncheckedCreateInputSchema ]),
}).strict() ;

export const FeedbackRequestUpsertArgsSchema: z.ZodType<Prisma.FeedbackRequestUpsertArgs> = z.object({
  select: FeedbackRequestSelectSchema.optional(),
  where: FeedbackRequestWhereUniqueInputSchema,
  create: z.union([ FeedbackRequestCreateInputSchema,FeedbackRequestUncheckedCreateInputSchema ]),
  update: z.union([ FeedbackRequestUpdateInputSchema,FeedbackRequestUncheckedUpdateInputSchema ]),
}).strict() ;

export const FeedbackRequestCreateManyArgsSchema: z.ZodType<Prisma.FeedbackRequestCreateManyArgs> = z.object({
  data: z.union([ FeedbackRequestCreateManyInputSchema,FeedbackRequestCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FeedbackRequestCreateManyAndReturnArgsSchema: z.ZodType<Prisma.FeedbackRequestCreateManyAndReturnArgs> = z.object({
  data: z.union([ FeedbackRequestCreateManyInputSchema,FeedbackRequestCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const FeedbackRequestDeleteArgsSchema: z.ZodType<Prisma.FeedbackRequestDeleteArgs> = z.object({
  select: FeedbackRequestSelectSchema.optional(),
  where: FeedbackRequestWhereUniqueInputSchema,
}).strict() ;

export const FeedbackRequestUpdateArgsSchema: z.ZodType<Prisma.FeedbackRequestUpdateArgs> = z.object({
  select: FeedbackRequestSelectSchema.optional(),
  data: z.union([ FeedbackRequestUpdateInputSchema,FeedbackRequestUncheckedUpdateInputSchema ]),
  where: FeedbackRequestWhereUniqueInputSchema,
}).strict() ;

export const FeedbackRequestUpdateManyArgsSchema: z.ZodType<Prisma.FeedbackRequestUpdateManyArgs> = z.object({
  data: z.union([ FeedbackRequestUpdateManyMutationInputSchema,FeedbackRequestUncheckedUpdateManyInputSchema ]),
  where: FeedbackRequestWhereInputSchema.optional(),
}).strict() ;

export const FeedbackRequestDeleteManyArgsSchema: z.ZodType<Prisma.FeedbackRequestDeleteManyArgs> = z.object({
  where: FeedbackRequestWhereInputSchema.optional(),
}).strict() ;

export const ModelMetricsCreateArgsSchema: z.ZodType<Prisma.ModelMetricsCreateArgs> = z.object({
  select: ModelMetricsSelectSchema.optional(),
  include: ModelMetricsIncludeSchema.optional(),
  data: z.union([ ModelMetricsCreateInputSchema,ModelMetricsUncheckedCreateInputSchema ]),
}).strict() ;

export const ModelMetricsUpsertArgsSchema: z.ZodType<Prisma.ModelMetricsUpsertArgs> = z.object({
  select: ModelMetricsSelectSchema.optional(),
  include: ModelMetricsIncludeSchema.optional(),
  where: ModelMetricsWhereUniqueInputSchema,
  create: z.union([ ModelMetricsCreateInputSchema,ModelMetricsUncheckedCreateInputSchema ]),
  update: z.union([ ModelMetricsUpdateInputSchema,ModelMetricsUncheckedUpdateInputSchema ]),
}).strict() ;

export const ModelMetricsCreateManyArgsSchema: z.ZodType<Prisma.ModelMetricsCreateManyArgs> = z.object({
  data: z.union([ ModelMetricsCreateManyInputSchema,ModelMetricsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ModelMetricsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ModelMetricsCreateManyAndReturnArgs> = z.object({
  data: z.union([ ModelMetricsCreateManyInputSchema,ModelMetricsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ModelMetricsDeleteArgsSchema: z.ZodType<Prisma.ModelMetricsDeleteArgs> = z.object({
  select: ModelMetricsSelectSchema.optional(),
  include: ModelMetricsIncludeSchema.optional(),
  where: ModelMetricsWhereUniqueInputSchema,
}).strict() ;

export const ModelMetricsUpdateArgsSchema: z.ZodType<Prisma.ModelMetricsUpdateArgs> = z.object({
  select: ModelMetricsSelectSchema.optional(),
  include: ModelMetricsIncludeSchema.optional(),
  data: z.union([ ModelMetricsUpdateInputSchema,ModelMetricsUncheckedUpdateInputSchema ]),
  where: ModelMetricsWhereUniqueInputSchema,
}).strict() ;

export const ModelMetricsUpdateManyArgsSchema: z.ZodType<Prisma.ModelMetricsUpdateManyArgs> = z.object({
  data: z.union([ ModelMetricsUpdateManyMutationInputSchema,ModelMetricsUncheckedUpdateManyInputSchema ]),
  where: ModelMetricsWhereInputSchema.optional(),
}).strict() ;

export const ModelMetricsDeleteManyArgsSchema: z.ZodType<Prisma.ModelMetricsDeleteManyArgs> = z.object({
  where: ModelMetricsWhereInputSchema.optional(),
}).strict() ;

export const ModelStateCreateArgsSchema: z.ZodType<Prisma.ModelStateCreateArgs> = z.object({
  select: ModelStateSelectSchema.optional(),
  include: ModelStateIncludeSchema.optional(),
  data: z.union([ ModelStateCreateInputSchema,ModelStateUncheckedCreateInputSchema ]),
}).strict() ;

export const ModelStateUpsertArgsSchema: z.ZodType<Prisma.ModelStateUpsertArgs> = z.object({
  select: ModelStateSelectSchema.optional(),
  include: ModelStateIncludeSchema.optional(),
  where: ModelStateWhereUniqueInputSchema,
  create: z.union([ ModelStateCreateInputSchema,ModelStateUncheckedCreateInputSchema ]),
  update: z.union([ ModelStateUpdateInputSchema,ModelStateUncheckedUpdateInputSchema ]),
}).strict() ;

export const ModelStateCreateManyArgsSchema: z.ZodType<Prisma.ModelStateCreateManyArgs> = z.object({
  data: z.union([ ModelStateCreateManyInputSchema,ModelStateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ModelStateCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ModelStateCreateManyAndReturnArgs> = z.object({
  data: z.union([ ModelStateCreateManyInputSchema,ModelStateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ModelStateDeleteArgsSchema: z.ZodType<Prisma.ModelStateDeleteArgs> = z.object({
  select: ModelStateSelectSchema.optional(),
  include: ModelStateIncludeSchema.optional(),
  where: ModelStateWhereUniqueInputSchema,
}).strict() ;

export const ModelStateUpdateArgsSchema: z.ZodType<Prisma.ModelStateUpdateArgs> = z.object({
  select: ModelStateSelectSchema.optional(),
  include: ModelStateIncludeSchema.optional(),
  data: z.union([ ModelStateUpdateInputSchema,ModelStateUncheckedUpdateInputSchema ]),
  where: ModelStateWhereUniqueInputSchema,
}).strict() ;

export const ModelStateUpdateManyArgsSchema: z.ZodType<Prisma.ModelStateUpdateManyArgs> = z.object({
  data: z.union([ ModelStateUpdateManyMutationInputSchema,ModelStateUncheckedUpdateManyInputSchema ]),
  where: ModelStateWhereInputSchema.optional(),
}).strict() ;

export const ModelStateDeleteManyArgsSchema: z.ZodType<Prisma.ModelStateDeleteManyArgs> = z.object({
  where: ModelStateWhereInputSchema.optional(),
}).strict() ;

export const SearchEventCreateArgsSchema: z.ZodType<Prisma.SearchEventCreateArgs> = z.object({
  select: SearchEventSelectSchema.optional(),
  include: SearchEventIncludeSchema.optional(),
  data: z.union([ SearchEventCreateInputSchema,SearchEventUncheckedCreateInputSchema ]),
}).strict() ;

export const SearchEventUpsertArgsSchema: z.ZodType<Prisma.SearchEventUpsertArgs> = z.object({
  select: SearchEventSelectSchema.optional(),
  include: SearchEventIncludeSchema.optional(),
  where: SearchEventWhereUniqueInputSchema,
  create: z.union([ SearchEventCreateInputSchema,SearchEventUncheckedCreateInputSchema ]),
  update: z.union([ SearchEventUpdateInputSchema,SearchEventUncheckedUpdateInputSchema ]),
}).strict() ;

export const SearchEventCreateManyArgsSchema: z.ZodType<Prisma.SearchEventCreateManyArgs> = z.object({
  data: z.union([ SearchEventCreateManyInputSchema,SearchEventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SearchEventCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SearchEventCreateManyAndReturnArgs> = z.object({
  data: z.union([ SearchEventCreateManyInputSchema,SearchEventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SearchEventDeleteArgsSchema: z.ZodType<Prisma.SearchEventDeleteArgs> = z.object({
  select: SearchEventSelectSchema.optional(),
  include: SearchEventIncludeSchema.optional(),
  where: SearchEventWhereUniqueInputSchema,
}).strict() ;

export const SearchEventUpdateArgsSchema: z.ZodType<Prisma.SearchEventUpdateArgs> = z.object({
  select: SearchEventSelectSchema.optional(),
  include: SearchEventIncludeSchema.optional(),
  data: z.union([ SearchEventUpdateInputSchema,SearchEventUncheckedUpdateInputSchema ]),
  where: SearchEventWhereUniqueInputSchema,
}).strict() ;

export const SearchEventUpdateManyArgsSchema: z.ZodType<Prisma.SearchEventUpdateManyArgs> = z.object({
  data: z.union([ SearchEventUpdateManyMutationInputSchema,SearchEventUncheckedUpdateManyInputSchema ]),
  where: SearchEventWhereInputSchema.optional(),
}).strict() ;

export const SearchEventDeleteManyArgsSchema: z.ZodType<Prisma.SearchEventDeleteManyArgs> = z.object({
  where: SearchEventWhereInputSchema.optional(),
}).strict() ;

export const ABTestMetricsCreateArgsSchema: z.ZodType<Prisma.ABTestMetricsCreateArgs> = z.object({
  select: ABTestMetricsSelectSchema.optional(),
  include: ABTestMetricsIncludeSchema.optional(),
  data: z.union([ ABTestMetricsCreateInputSchema,ABTestMetricsUncheckedCreateInputSchema ]),
}).strict() ;

export const ABTestMetricsUpsertArgsSchema: z.ZodType<Prisma.ABTestMetricsUpsertArgs> = z.object({
  select: ABTestMetricsSelectSchema.optional(),
  include: ABTestMetricsIncludeSchema.optional(),
  where: ABTestMetricsWhereUniqueInputSchema,
  create: z.union([ ABTestMetricsCreateInputSchema,ABTestMetricsUncheckedCreateInputSchema ]),
  update: z.union([ ABTestMetricsUpdateInputSchema,ABTestMetricsUncheckedUpdateInputSchema ]),
}).strict() ;

export const ABTestMetricsCreateManyArgsSchema: z.ZodType<Prisma.ABTestMetricsCreateManyArgs> = z.object({
  data: z.union([ ABTestMetricsCreateManyInputSchema,ABTestMetricsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ABTestMetricsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ABTestMetricsCreateManyAndReturnArgs> = z.object({
  data: z.union([ ABTestMetricsCreateManyInputSchema,ABTestMetricsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ABTestMetricsDeleteArgsSchema: z.ZodType<Prisma.ABTestMetricsDeleteArgs> = z.object({
  select: ABTestMetricsSelectSchema.optional(),
  include: ABTestMetricsIncludeSchema.optional(),
  where: ABTestMetricsWhereUniqueInputSchema,
}).strict() ;

export const ABTestMetricsUpdateArgsSchema: z.ZodType<Prisma.ABTestMetricsUpdateArgs> = z.object({
  select: ABTestMetricsSelectSchema.optional(),
  include: ABTestMetricsIncludeSchema.optional(),
  data: z.union([ ABTestMetricsUpdateInputSchema,ABTestMetricsUncheckedUpdateInputSchema ]),
  where: ABTestMetricsWhereUniqueInputSchema,
}).strict() ;

export const ABTestMetricsUpdateManyArgsSchema: z.ZodType<Prisma.ABTestMetricsUpdateManyArgs> = z.object({
  data: z.union([ ABTestMetricsUpdateManyMutationInputSchema,ABTestMetricsUncheckedUpdateManyInputSchema ]),
  where: ABTestMetricsWhereInputSchema.optional(),
}).strict() ;

export const ABTestMetricsDeleteManyArgsSchema: z.ZodType<Prisma.ABTestMetricsDeleteManyArgs> = z.object({
  where: ABTestMetricsWhereInputSchema.optional(),
}).strict() ;

export const SignalCreateArgsSchema: z.ZodType<Prisma.SignalCreateArgs> = z.object({
  select: SignalSelectSchema.optional(),
  include: SignalIncludeSchema.optional(),
  data: z.union([ SignalCreateInputSchema,SignalUncheckedCreateInputSchema ]),
}).strict() ;

export const SignalUpsertArgsSchema: z.ZodType<Prisma.SignalUpsertArgs> = z.object({
  select: SignalSelectSchema.optional(),
  include: SignalIncludeSchema.optional(),
  where: SignalWhereUniqueInputSchema,
  create: z.union([ SignalCreateInputSchema,SignalUncheckedCreateInputSchema ]),
  update: z.union([ SignalUpdateInputSchema,SignalUncheckedUpdateInputSchema ]),
}).strict() ;

export const SignalCreateManyArgsSchema: z.ZodType<Prisma.SignalCreateManyArgs> = z.object({
  data: z.union([ SignalCreateManyInputSchema,SignalCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SignalCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SignalCreateManyAndReturnArgs> = z.object({
  data: z.union([ SignalCreateManyInputSchema,SignalCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SignalDeleteArgsSchema: z.ZodType<Prisma.SignalDeleteArgs> = z.object({
  select: SignalSelectSchema.optional(),
  include: SignalIncludeSchema.optional(),
  where: SignalWhereUniqueInputSchema,
}).strict() ;

export const SignalUpdateArgsSchema: z.ZodType<Prisma.SignalUpdateArgs> = z.object({
  select: SignalSelectSchema.optional(),
  include: SignalIncludeSchema.optional(),
  data: z.union([ SignalUpdateInputSchema,SignalUncheckedUpdateInputSchema ]),
  where: SignalWhereUniqueInputSchema,
}).strict() ;

export const SignalUpdateManyArgsSchema: z.ZodType<Prisma.SignalUpdateManyArgs> = z.object({
  data: z.union([ SignalUpdateManyMutationInputSchema,SignalUncheckedUpdateManyInputSchema ]),
  where: SignalWhereInputSchema.optional(),
}).strict() ;

export const SignalDeleteManyArgsSchema: z.ZodType<Prisma.SignalDeleteManyArgs> = z.object({
  where: SignalWhereInputSchema.optional(),
}).strict() ;

export const AnalyticsMetricsCreateArgsSchema: z.ZodType<Prisma.AnalyticsMetricsCreateArgs> = z.object({
  select: AnalyticsMetricsSelectSchema.optional(),
  include: AnalyticsMetricsIncludeSchema.optional(),
  data: z.union([ AnalyticsMetricsCreateInputSchema,AnalyticsMetricsUncheckedCreateInputSchema ]),
}).strict() ;

export const AnalyticsMetricsUpsertArgsSchema: z.ZodType<Prisma.AnalyticsMetricsUpsertArgs> = z.object({
  select: AnalyticsMetricsSelectSchema.optional(),
  include: AnalyticsMetricsIncludeSchema.optional(),
  where: AnalyticsMetricsWhereUniqueInputSchema,
  create: z.union([ AnalyticsMetricsCreateInputSchema,AnalyticsMetricsUncheckedCreateInputSchema ]),
  update: z.union([ AnalyticsMetricsUpdateInputSchema,AnalyticsMetricsUncheckedUpdateInputSchema ]),
}).strict() ;

export const AnalyticsMetricsCreateManyArgsSchema: z.ZodType<Prisma.AnalyticsMetricsCreateManyArgs> = z.object({
  data: z.union([ AnalyticsMetricsCreateManyInputSchema,AnalyticsMetricsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AnalyticsMetricsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AnalyticsMetricsCreateManyAndReturnArgs> = z.object({
  data: z.union([ AnalyticsMetricsCreateManyInputSchema,AnalyticsMetricsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AnalyticsMetricsDeleteArgsSchema: z.ZodType<Prisma.AnalyticsMetricsDeleteArgs> = z.object({
  select: AnalyticsMetricsSelectSchema.optional(),
  include: AnalyticsMetricsIncludeSchema.optional(),
  where: AnalyticsMetricsWhereUniqueInputSchema,
}).strict() ;

export const AnalyticsMetricsUpdateArgsSchema: z.ZodType<Prisma.AnalyticsMetricsUpdateArgs> = z.object({
  select: AnalyticsMetricsSelectSchema.optional(),
  include: AnalyticsMetricsIncludeSchema.optional(),
  data: z.union([ AnalyticsMetricsUpdateInputSchema,AnalyticsMetricsUncheckedUpdateInputSchema ]),
  where: AnalyticsMetricsWhereUniqueInputSchema,
}).strict() ;

export const AnalyticsMetricsUpdateManyArgsSchema: z.ZodType<Prisma.AnalyticsMetricsUpdateManyArgs> = z.object({
  data: z.union([ AnalyticsMetricsUpdateManyMutationInputSchema,AnalyticsMetricsUncheckedUpdateManyInputSchema ]),
  where: AnalyticsMetricsWhereInputSchema.optional(),
}).strict() ;

export const AnalyticsMetricsDeleteManyArgsSchema: z.ZodType<Prisma.AnalyticsMetricsDeleteManyArgs> = z.object({
  where: AnalyticsMetricsWhereInputSchema.optional(),
}).strict() ;

export const AnalyticsTrendCreateArgsSchema: z.ZodType<Prisma.AnalyticsTrendCreateArgs> = z.object({
  select: AnalyticsTrendSelectSchema.optional(),
  data: z.union([ AnalyticsTrendCreateInputSchema,AnalyticsTrendUncheckedCreateInputSchema ]),
}).strict() ;

export const AnalyticsTrendUpsertArgsSchema: z.ZodType<Prisma.AnalyticsTrendUpsertArgs> = z.object({
  select: AnalyticsTrendSelectSchema.optional(),
  where: AnalyticsTrendWhereUniqueInputSchema,
  create: z.union([ AnalyticsTrendCreateInputSchema,AnalyticsTrendUncheckedCreateInputSchema ]),
  update: z.union([ AnalyticsTrendUpdateInputSchema,AnalyticsTrendUncheckedUpdateInputSchema ]),
}).strict() ;

export const AnalyticsTrendCreateManyArgsSchema: z.ZodType<Prisma.AnalyticsTrendCreateManyArgs> = z.object({
  data: z.union([ AnalyticsTrendCreateManyInputSchema,AnalyticsTrendCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AnalyticsTrendCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AnalyticsTrendCreateManyAndReturnArgs> = z.object({
  data: z.union([ AnalyticsTrendCreateManyInputSchema,AnalyticsTrendCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AnalyticsTrendDeleteArgsSchema: z.ZodType<Prisma.AnalyticsTrendDeleteArgs> = z.object({
  select: AnalyticsTrendSelectSchema.optional(),
  where: AnalyticsTrendWhereUniqueInputSchema,
}).strict() ;

export const AnalyticsTrendUpdateArgsSchema: z.ZodType<Prisma.AnalyticsTrendUpdateArgs> = z.object({
  select: AnalyticsTrendSelectSchema.optional(),
  data: z.union([ AnalyticsTrendUpdateInputSchema,AnalyticsTrendUncheckedUpdateInputSchema ]),
  where: AnalyticsTrendWhereUniqueInputSchema,
}).strict() ;

export const AnalyticsTrendUpdateManyArgsSchema: z.ZodType<Prisma.AnalyticsTrendUpdateManyArgs> = z.object({
  data: z.union([ AnalyticsTrendUpdateManyMutationInputSchema,AnalyticsTrendUncheckedUpdateManyInputSchema ]),
  where: AnalyticsTrendWhereInputSchema.optional(),
}).strict() ;

export const AnalyticsTrendDeleteManyArgsSchema: z.ZodType<Prisma.AnalyticsTrendDeleteManyArgs> = z.object({
  where: AnalyticsTrendWhereInputSchema.optional(),
}).strict() ;

export const PerformanceInsightCreateArgsSchema: z.ZodType<Prisma.PerformanceInsightCreateArgs> = z.object({
  select: PerformanceInsightSelectSchema.optional(),
  data: z.union([ PerformanceInsightCreateInputSchema,PerformanceInsightUncheckedCreateInputSchema ]),
}).strict() ;

export const PerformanceInsightUpsertArgsSchema: z.ZodType<Prisma.PerformanceInsightUpsertArgs> = z.object({
  select: PerformanceInsightSelectSchema.optional(),
  where: PerformanceInsightWhereUniqueInputSchema,
  create: z.union([ PerformanceInsightCreateInputSchema,PerformanceInsightUncheckedCreateInputSchema ]),
  update: z.union([ PerformanceInsightUpdateInputSchema,PerformanceInsightUncheckedUpdateInputSchema ]),
}).strict() ;

export const PerformanceInsightCreateManyArgsSchema: z.ZodType<Prisma.PerformanceInsightCreateManyArgs> = z.object({
  data: z.union([ PerformanceInsightCreateManyInputSchema,PerformanceInsightCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PerformanceInsightCreateManyAndReturnArgsSchema: z.ZodType<Prisma.PerformanceInsightCreateManyAndReturnArgs> = z.object({
  data: z.union([ PerformanceInsightCreateManyInputSchema,PerformanceInsightCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const PerformanceInsightDeleteArgsSchema: z.ZodType<Prisma.PerformanceInsightDeleteArgs> = z.object({
  select: PerformanceInsightSelectSchema.optional(),
  where: PerformanceInsightWhereUniqueInputSchema,
}).strict() ;

export const PerformanceInsightUpdateArgsSchema: z.ZodType<Prisma.PerformanceInsightUpdateArgs> = z.object({
  select: PerformanceInsightSelectSchema.optional(),
  data: z.union([ PerformanceInsightUpdateInputSchema,PerformanceInsightUncheckedUpdateInputSchema ]),
  where: PerformanceInsightWhereUniqueInputSchema,
}).strict() ;

export const PerformanceInsightUpdateManyArgsSchema: z.ZodType<Prisma.PerformanceInsightUpdateManyArgs> = z.object({
  data: z.union([ PerformanceInsightUpdateManyMutationInputSchema,PerformanceInsightUncheckedUpdateManyInputSchema ]),
  where: PerformanceInsightWhereInputSchema.optional(),
}).strict() ;

export const PerformanceInsightDeleteManyArgsSchema: z.ZodType<Prisma.PerformanceInsightDeleteManyArgs> = z.object({
  where: PerformanceInsightWhereInputSchema.optional(),
}).strict() ;

export const AnalyticsReportCreateArgsSchema: z.ZodType<Prisma.AnalyticsReportCreateArgs> = z.object({
  select: AnalyticsReportSelectSchema.optional(),
  data: z.union([ AnalyticsReportCreateInputSchema,AnalyticsReportUncheckedCreateInputSchema ]),
}).strict() ;

export const AnalyticsReportUpsertArgsSchema: z.ZodType<Prisma.AnalyticsReportUpsertArgs> = z.object({
  select: AnalyticsReportSelectSchema.optional(),
  where: AnalyticsReportWhereUniqueInputSchema,
  create: z.union([ AnalyticsReportCreateInputSchema,AnalyticsReportUncheckedCreateInputSchema ]),
  update: z.union([ AnalyticsReportUpdateInputSchema,AnalyticsReportUncheckedUpdateInputSchema ]),
}).strict() ;

export const AnalyticsReportCreateManyArgsSchema: z.ZodType<Prisma.AnalyticsReportCreateManyArgs> = z.object({
  data: z.union([ AnalyticsReportCreateManyInputSchema,AnalyticsReportCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AnalyticsReportCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AnalyticsReportCreateManyAndReturnArgs> = z.object({
  data: z.union([ AnalyticsReportCreateManyInputSchema,AnalyticsReportCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AnalyticsReportDeleteArgsSchema: z.ZodType<Prisma.AnalyticsReportDeleteArgs> = z.object({
  select: AnalyticsReportSelectSchema.optional(),
  where: AnalyticsReportWhereUniqueInputSchema,
}).strict() ;

export const AnalyticsReportUpdateArgsSchema: z.ZodType<Prisma.AnalyticsReportUpdateArgs> = z.object({
  select: AnalyticsReportSelectSchema.optional(),
  data: z.union([ AnalyticsReportUpdateInputSchema,AnalyticsReportUncheckedUpdateInputSchema ]),
  where: AnalyticsReportWhereUniqueInputSchema,
}).strict() ;

export const AnalyticsReportUpdateManyArgsSchema: z.ZodType<Prisma.AnalyticsReportUpdateManyArgs> = z.object({
  data: z.union([ AnalyticsReportUpdateManyMutationInputSchema,AnalyticsReportUncheckedUpdateManyInputSchema ]),
  where: AnalyticsReportWhereInputSchema.optional(),
}).strict() ;

export const AnalyticsReportDeleteManyArgsSchema: z.ZodType<Prisma.AnalyticsReportDeleteManyArgs> = z.object({
  where: AnalyticsReportWhereInputSchema.optional(),
}).strict() ;

export const AdaptationSuggestionCreateArgsSchema: z.ZodType<Prisma.AdaptationSuggestionCreateArgs> = z.object({
  select: AdaptationSuggestionSelectSchema.optional(),
  data: z.union([ AdaptationSuggestionCreateInputSchema,AdaptationSuggestionUncheckedCreateInputSchema ]),
}).strict() ;

export const AdaptationSuggestionUpsertArgsSchema: z.ZodType<Prisma.AdaptationSuggestionUpsertArgs> = z.object({
  select: AdaptationSuggestionSelectSchema.optional(),
  where: AdaptationSuggestionWhereUniqueInputSchema,
  create: z.union([ AdaptationSuggestionCreateInputSchema,AdaptationSuggestionUncheckedCreateInputSchema ]),
  update: z.union([ AdaptationSuggestionUpdateInputSchema,AdaptationSuggestionUncheckedUpdateInputSchema ]),
}).strict() ;

export const AdaptationSuggestionCreateManyArgsSchema: z.ZodType<Prisma.AdaptationSuggestionCreateManyArgs> = z.object({
  data: z.union([ AdaptationSuggestionCreateManyInputSchema,AdaptationSuggestionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AdaptationSuggestionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AdaptationSuggestionCreateManyAndReturnArgs> = z.object({
  data: z.union([ AdaptationSuggestionCreateManyInputSchema,AdaptationSuggestionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AdaptationSuggestionDeleteArgsSchema: z.ZodType<Prisma.AdaptationSuggestionDeleteArgs> = z.object({
  select: AdaptationSuggestionSelectSchema.optional(),
  where: AdaptationSuggestionWhereUniqueInputSchema,
}).strict() ;

export const AdaptationSuggestionUpdateArgsSchema: z.ZodType<Prisma.AdaptationSuggestionUpdateArgs> = z.object({
  select: AdaptationSuggestionSelectSchema.optional(),
  data: z.union([ AdaptationSuggestionUpdateInputSchema,AdaptationSuggestionUncheckedUpdateInputSchema ]),
  where: AdaptationSuggestionWhereUniqueInputSchema,
}).strict() ;

export const AdaptationSuggestionUpdateManyArgsSchema: z.ZodType<Prisma.AdaptationSuggestionUpdateManyArgs> = z.object({
  data: z.union([ AdaptationSuggestionUpdateManyMutationInputSchema,AdaptationSuggestionUncheckedUpdateManyInputSchema ]),
  where: AdaptationSuggestionWhereInputSchema.optional(),
}).strict() ;

export const AdaptationSuggestionDeleteManyArgsSchema: z.ZodType<Prisma.AdaptationSuggestionDeleteManyArgs> = z.object({
  where: AdaptationSuggestionWhereInputSchema.optional(),
}).strict() ;

export const LearningMetricCreateArgsSchema: z.ZodType<Prisma.LearningMetricCreateArgs> = z.object({
  select: LearningMetricSelectSchema.optional(),
  include: LearningMetricIncludeSchema.optional(),
  data: z.union([ LearningMetricCreateInputSchema,LearningMetricUncheckedCreateInputSchema ]),
}).strict() ;

export const LearningMetricUpsertArgsSchema: z.ZodType<Prisma.LearningMetricUpsertArgs> = z.object({
  select: LearningMetricSelectSchema.optional(),
  include: LearningMetricIncludeSchema.optional(),
  where: LearningMetricWhereUniqueInputSchema,
  create: z.union([ LearningMetricCreateInputSchema,LearningMetricUncheckedCreateInputSchema ]),
  update: z.union([ LearningMetricUpdateInputSchema,LearningMetricUncheckedUpdateInputSchema ]),
}).strict() ;

export const LearningMetricCreateManyArgsSchema: z.ZodType<Prisma.LearningMetricCreateManyArgs> = z.object({
  data: z.union([ LearningMetricCreateManyInputSchema,LearningMetricCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LearningMetricCreateManyAndReturnArgsSchema: z.ZodType<Prisma.LearningMetricCreateManyAndReturnArgs> = z.object({
  data: z.union([ LearningMetricCreateManyInputSchema,LearningMetricCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LearningMetricDeleteArgsSchema: z.ZodType<Prisma.LearningMetricDeleteArgs> = z.object({
  select: LearningMetricSelectSchema.optional(),
  include: LearningMetricIncludeSchema.optional(),
  where: LearningMetricWhereUniqueInputSchema,
}).strict() ;

export const LearningMetricUpdateArgsSchema: z.ZodType<Prisma.LearningMetricUpdateArgs> = z.object({
  select: LearningMetricSelectSchema.optional(),
  include: LearningMetricIncludeSchema.optional(),
  data: z.union([ LearningMetricUpdateInputSchema,LearningMetricUncheckedUpdateInputSchema ]),
  where: LearningMetricWhereUniqueInputSchema,
}).strict() ;

export const LearningMetricUpdateManyArgsSchema: z.ZodType<Prisma.LearningMetricUpdateManyArgs> = z.object({
  data: z.union([ LearningMetricUpdateManyMutationInputSchema,LearningMetricUncheckedUpdateManyInputSchema ]),
  where: LearningMetricWhereInputSchema.optional(),
}).strict() ;

export const LearningMetricDeleteManyArgsSchema: z.ZodType<Prisma.LearningMetricDeleteManyArgs> = z.object({
  where: LearningMetricWhereInputSchema.optional(),
}).strict() ;

export const LearningEventCreateArgsSchema: z.ZodType<Prisma.LearningEventCreateArgs> = z.object({
  select: LearningEventSelectSchema.optional(),
  include: LearningEventIncludeSchema.optional(),
  data: z.union([ LearningEventCreateInputSchema,LearningEventUncheckedCreateInputSchema ]),
}).strict() ;

export const LearningEventUpsertArgsSchema: z.ZodType<Prisma.LearningEventUpsertArgs> = z.object({
  select: LearningEventSelectSchema.optional(),
  include: LearningEventIncludeSchema.optional(),
  where: LearningEventWhereUniqueInputSchema,
  create: z.union([ LearningEventCreateInputSchema,LearningEventUncheckedCreateInputSchema ]),
  update: z.union([ LearningEventUpdateInputSchema,LearningEventUncheckedUpdateInputSchema ]),
}).strict() ;

export const LearningEventCreateManyArgsSchema: z.ZodType<Prisma.LearningEventCreateManyArgs> = z.object({
  data: z.union([ LearningEventCreateManyInputSchema,LearningEventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LearningEventCreateManyAndReturnArgsSchema: z.ZodType<Prisma.LearningEventCreateManyAndReturnArgs> = z.object({
  data: z.union([ LearningEventCreateManyInputSchema,LearningEventCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LearningEventDeleteArgsSchema: z.ZodType<Prisma.LearningEventDeleteArgs> = z.object({
  select: LearningEventSelectSchema.optional(),
  include: LearningEventIncludeSchema.optional(),
  where: LearningEventWhereUniqueInputSchema,
}).strict() ;

export const LearningEventUpdateArgsSchema: z.ZodType<Prisma.LearningEventUpdateArgs> = z.object({
  select: LearningEventSelectSchema.optional(),
  include: LearningEventIncludeSchema.optional(),
  data: z.union([ LearningEventUpdateInputSchema,LearningEventUncheckedUpdateInputSchema ]),
  where: LearningEventWhereUniqueInputSchema,
}).strict() ;

export const LearningEventUpdateManyArgsSchema: z.ZodType<Prisma.LearningEventUpdateManyArgs> = z.object({
  data: z.union([ LearningEventUpdateManyMutationInputSchema,LearningEventUncheckedUpdateManyInputSchema ]),
  where: LearningEventWhereInputSchema.optional(),
}).strict() ;

export const LearningEventDeleteManyArgsSchema: z.ZodType<Prisma.LearningEventDeleteManyArgs> = z.object({
  where: LearningEventWhereInputSchema.optional(),
}).strict() ;

export const LearningPatternCreateArgsSchema: z.ZodType<Prisma.LearningPatternCreateArgs> = z.object({
  select: LearningPatternSelectSchema.optional(),
  include: LearningPatternIncludeSchema.optional(),
  data: z.union([ LearningPatternCreateInputSchema,LearningPatternUncheckedCreateInputSchema ]),
}).strict() ;

export const LearningPatternUpsertArgsSchema: z.ZodType<Prisma.LearningPatternUpsertArgs> = z.object({
  select: LearningPatternSelectSchema.optional(),
  include: LearningPatternIncludeSchema.optional(),
  where: LearningPatternWhereUniqueInputSchema,
  create: z.union([ LearningPatternCreateInputSchema,LearningPatternUncheckedCreateInputSchema ]),
  update: z.union([ LearningPatternUpdateInputSchema,LearningPatternUncheckedUpdateInputSchema ]),
}).strict() ;

export const LearningPatternCreateManyArgsSchema: z.ZodType<Prisma.LearningPatternCreateManyArgs> = z.object({
  data: z.union([ LearningPatternCreateManyInputSchema,LearningPatternCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LearningPatternCreateManyAndReturnArgsSchema: z.ZodType<Prisma.LearningPatternCreateManyAndReturnArgs> = z.object({
  data: z.union([ LearningPatternCreateManyInputSchema,LearningPatternCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const LearningPatternDeleteArgsSchema: z.ZodType<Prisma.LearningPatternDeleteArgs> = z.object({
  select: LearningPatternSelectSchema.optional(),
  include: LearningPatternIncludeSchema.optional(),
  where: LearningPatternWhereUniqueInputSchema,
}).strict() ;

export const LearningPatternUpdateArgsSchema: z.ZodType<Prisma.LearningPatternUpdateArgs> = z.object({
  select: LearningPatternSelectSchema.optional(),
  include: LearningPatternIncludeSchema.optional(),
  data: z.union([ LearningPatternUpdateInputSchema,LearningPatternUncheckedUpdateInputSchema ]),
  where: LearningPatternWhereUniqueInputSchema,
}).strict() ;

export const LearningPatternUpdateManyArgsSchema: z.ZodType<Prisma.LearningPatternUpdateManyArgs> = z.object({
  data: z.union([ LearningPatternUpdateManyMutationInputSchema,LearningPatternUncheckedUpdateManyInputSchema ]),
  where: LearningPatternWhereInputSchema.optional(),
}).strict() ;

export const LearningPatternDeleteManyArgsSchema: z.ZodType<Prisma.LearningPatternDeleteManyArgs> = z.object({
  where: LearningPatternWhereInputSchema.optional(),
}).strict() ;

export const EngineStateCreateArgsSchema: z.ZodType<Prisma.EngineStateCreateArgs> = z.object({
  select: EngineStateSelectSchema.optional(),
  data: z.union([ EngineStateCreateInputSchema,EngineStateUncheckedCreateInputSchema ]),
}).strict() ;

export const EngineStateUpsertArgsSchema: z.ZodType<Prisma.EngineStateUpsertArgs> = z.object({
  select: EngineStateSelectSchema.optional(),
  where: EngineStateWhereUniqueInputSchema,
  create: z.union([ EngineStateCreateInputSchema,EngineStateUncheckedCreateInputSchema ]),
  update: z.union([ EngineStateUpdateInputSchema,EngineStateUncheckedUpdateInputSchema ]),
}).strict() ;

export const EngineStateCreateManyArgsSchema: z.ZodType<Prisma.EngineStateCreateManyArgs> = z.object({
  data: z.union([ EngineStateCreateManyInputSchema,EngineStateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EngineStateCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EngineStateCreateManyAndReturnArgs> = z.object({
  data: z.union([ EngineStateCreateManyInputSchema,EngineStateCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EngineStateDeleteArgsSchema: z.ZodType<Prisma.EngineStateDeleteArgs> = z.object({
  select: EngineStateSelectSchema.optional(),
  where: EngineStateWhereUniqueInputSchema,
}).strict() ;

export const EngineStateUpdateArgsSchema: z.ZodType<Prisma.EngineStateUpdateArgs> = z.object({
  select: EngineStateSelectSchema.optional(),
  data: z.union([ EngineStateUpdateInputSchema,EngineStateUncheckedUpdateInputSchema ]),
  where: EngineStateWhereUniqueInputSchema,
}).strict() ;

export const EngineStateUpdateManyArgsSchema: z.ZodType<Prisma.EngineStateUpdateManyArgs> = z.object({
  data: z.union([ EngineStateUpdateManyMutationInputSchema,EngineStateUncheckedUpdateManyInputSchema ]),
  where: EngineStateWhereInputSchema.optional(),
}).strict() ;

export const EngineStateDeleteManyArgsSchema: z.ZodType<Prisma.EngineStateDeleteManyArgs> = z.object({
  where: EngineStateWhereInputSchema.optional(),
}).strict() ;

export const EngineOperationCreateArgsSchema: z.ZodType<Prisma.EngineOperationCreateArgs> = z.object({
  select: EngineOperationSelectSchema.optional(),
  include: EngineOperationIncludeSchema.optional(),
  data: z.union([ EngineOperationCreateInputSchema,EngineOperationUncheckedCreateInputSchema ]),
}).strict() ;

export const EngineOperationUpsertArgsSchema: z.ZodType<Prisma.EngineOperationUpsertArgs> = z.object({
  select: EngineOperationSelectSchema.optional(),
  include: EngineOperationIncludeSchema.optional(),
  where: EngineOperationWhereUniqueInputSchema,
  create: z.union([ EngineOperationCreateInputSchema,EngineOperationUncheckedCreateInputSchema ]),
  update: z.union([ EngineOperationUpdateInputSchema,EngineOperationUncheckedUpdateInputSchema ]),
}).strict() ;

export const EngineOperationCreateManyArgsSchema: z.ZodType<Prisma.EngineOperationCreateManyArgs> = z.object({
  data: z.union([ EngineOperationCreateManyInputSchema,EngineOperationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EngineOperationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EngineOperationCreateManyAndReturnArgs> = z.object({
  data: z.union([ EngineOperationCreateManyInputSchema,EngineOperationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EngineOperationDeleteArgsSchema: z.ZodType<Prisma.EngineOperationDeleteArgs> = z.object({
  select: EngineOperationSelectSchema.optional(),
  include: EngineOperationIncludeSchema.optional(),
  where: EngineOperationWhereUniqueInputSchema,
}).strict() ;

export const EngineOperationUpdateArgsSchema: z.ZodType<Prisma.EngineOperationUpdateArgs> = z.object({
  select: EngineOperationSelectSchema.optional(),
  include: EngineOperationIncludeSchema.optional(),
  data: z.union([ EngineOperationUpdateInputSchema,EngineOperationUncheckedUpdateInputSchema ]),
  where: EngineOperationWhereUniqueInputSchema,
}).strict() ;

export const EngineOperationUpdateManyArgsSchema: z.ZodType<Prisma.EngineOperationUpdateManyArgs> = z.object({
  data: z.union([ EngineOperationUpdateManyMutationInputSchema,EngineOperationUncheckedUpdateManyInputSchema ]),
  where: EngineOperationWhereInputSchema.optional(),
}).strict() ;

export const EngineOperationDeleteManyArgsSchema: z.ZodType<Prisma.EngineOperationDeleteManyArgs> = z.object({
  where: EngineOperationWhereInputSchema.optional(),
}).strict() ;

export const EngineMetricCreateArgsSchema: z.ZodType<Prisma.EngineMetricCreateArgs> = z.object({
  select: EngineMetricSelectSchema.optional(),
  data: z.union([ EngineMetricCreateInputSchema,EngineMetricUncheckedCreateInputSchema ]),
}).strict() ;

export const EngineMetricUpsertArgsSchema: z.ZodType<Prisma.EngineMetricUpsertArgs> = z.object({
  select: EngineMetricSelectSchema.optional(),
  where: EngineMetricWhereUniqueInputSchema,
  create: z.union([ EngineMetricCreateInputSchema,EngineMetricUncheckedCreateInputSchema ]),
  update: z.union([ EngineMetricUpdateInputSchema,EngineMetricUncheckedUpdateInputSchema ]),
}).strict() ;

export const EngineMetricCreateManyArgsSchema: z.ZodType<Prisma.EngineMetricCreateManyArgs> = z.object({
  data: z.union([ EngineMetricCreateManyInputSchema,EngineMetricCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EngineMetricCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EngineMetricCreateManyAndReturnArgs> = z.object({
  data: z.union([ EngineMetricCreateManyInputSchema,EngineMetricCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EngineMetricDeleteArgsSchema: z.ZodType<Prisma.EngineMetricDeleteArgs> = z.object({
  select: EngineMetricSelectSchema.optional(),
  where: EngineMetricWhereUniqueInputSchema,
}).strict() ;

export const EngineMetricUpdateArgsSchema: z.ZodType<Prisma.EngineMetricUpdateArgs> = z.object({
  select: EngineMetricSelectSchema.optional(),
  data: z.union([ EngineMetricUpdateInputSchema,EngineMetricUncheckedUpdateInputSchema ]),
  where: EngineMetricWhereUniqueInputSchema,
}).strict() ;

export const EngineMetricUpdateManyArgsSchema: z.ZodType<Prisma.EngineMetricUpdateManyArgs> = z.object({
  data: z.union([ EngineMetricUpdateManyMutationInputSchema,EngineMetricUncheckedUpdateManyInputSchema ]),
  where: EngineMetricWhereInputSchema.optional(),
}).strict() ;

export const EngineMetricDeleteManyArgsSchema: z.ZodType<Prisma.EngineMetricDeleteManyArgs> = z.object({
  where: EngineMetricWhereInputSchema.optional(),
}).strict() ;

export const EngineLearningResultCreateArgsSchema: z.ZodType<Prisma.EngineLearningResultCreateArgs> = z.object({
  select: EngineLearningResultSelectSchema.optional(),
  include: EngineLearningResultIncludeSchema.optional(),
  data: z.union([ EngineLearningResultCreateInputSchema,EngineLearningResultUncheckedCreateInputSchema ]),
}).strict() ;

export const EngineLearningResultUpsertArgsSchema: z.ZodType<Prisma.EngineLearningResultUpsertArgs> = z.object({
  select: EngineLearningResultSelectSchema.optional(),
  include: EngineLearningResultIncludeSchema.optional(),
  where: EngineLearningResultWhereUniqueInputSchema,
  create: z.union([ EngineLearningResultCreateInputSchema,EngineLearningResultUncheckedCreateInputSchema ]),
  update: z.union([ EngineLearningResultUpdateInputSchema,EngineLearningResultUncheckedUpdateInputSchema ]),
}).strict() ;

export const EngineLearningResultCreateManyArgsSchema: z.ZodType<Prisma.EngineLearningResultCreateManyArgs> = z.object({
  data: z.union([ EngineLearningResultCreateManyInputSchema,EngineLearningResultCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EngineLearningResultCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EngineLearningResultCreateManyAndReturnArgs> = z.object({
  data: z.union([ EngineLearningResultCreateManyInputSchema,EngineLearningResultCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EngineLearningResultDeleteArgsSchema: z.ZodType<Prisma.EngineLearningResultDeleteArgs> = z.object({
  select: EngineLearningResultSelectSchema.optional(),
  include: EngineLearningResultIncludeSchema.optional(),
  where: EngineLearningResultWhereUniqueInputSchema,
}).strict() ;

export const EngineLearningResultUpdateArgsSchema: z.ZodType<Prisma.EngineLearningResultUpdateArgs> = z.object({
  select: EngineLearningResultSelectSchema.optional(),
  include: EngineLearningResultIncludeSchema.optional(),
  data: z.union([ EngineLearningResultUpdateInputSchema,EngineLearningResultUncheckedUpdateInputSchema ]),
  where: EngineLearningResultWhereUniqueInputSchema,
}).strict() ;

export const EngineLearningResultUpdateManyArgsSchema: z.ZodType<Prisma.EngineLearningResultUpdateManyArgs> = z.object({
  data: z.union([ EngineLearningResultUpdateManyMutationInputSchema,EngineLearningResultUncheckedUpdateManyInputSchema ]),
  where: EngineLearningResultWhereInputSchema.optional(),
}).strict() ;

export const EngineLearningResultDeleteManyArgsSchema: z.ZodType<Prisma.EngineLearningResultDeleteManyArgs> = z.object({
  where: EngineLearningResultWhereInputSchema.optional(),
}).strict() ;

export const EngineOptimizationStrategyCreateArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyCreateArgs> = z.object({
  select: EngineOptimizationStrategySelectSchema.optional(),
  include: EngineOptimizationStrategyIncludeSchema.optional(),
  data: z.union([ EngineOptimizationStrategyCreateInputSchema,EngineOptimizationStrategyUncheckedCreateInputSchema ]),
}).strict() ;

export const EngineOptimizationStrategyUpsertArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyUpsertArgs> = z.object({
  select: EngineOptimizationStrategySelectSchema.optional(),
  include: EngineOptimizationStrategyIncludeSchema.optional(),
  where: EngineOptimizationStrategyWhereUniqueInputSchema,
  create: z.union([ EngineOptimizationStrategyCreateInputSchema,EngineOptimizationStrategyUncheckedCreateInputSchema ]),
  update: z.union([ EngineOptimizationStrategyUpdateInputSchema,EngineOptimizationStrategyUncheckedUpdateInputSchema ]),
}).strict() ;

export const EngineOptimizationStrategyCreateManyArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyCreateManyArgs> = z.object({
  data: z.union([ EngineOptimizationStrategyCreateManyInputSchema,EngineOptimizationStrategyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EngineOptimizationStrategyCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyCreateManyAndReturnArgs> = z.object({
  data: z.union([ EngineOptimizationStrategyCreateManyInputSchema,EngineOptimizationStrategyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EngineOptimizationStrategyDeleteArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyDeleteArgs> = z.object({
  select: EngineOptimizationStrategySelectSchema.optional(),
  include: EngineOptimizationStrategyIncludeSchema.optional(),
  where: EngineOptimizationStrategyWhereUniqueInputSchema,
}).strict() ;

export const EngineOptimizationStrategyUpdateArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyUpdateArgs> = z.object({
  select: EngineOptimizationStrategySelectSchema.optional(),
  include: EngineOptimizationStrategyIncludeSchema.optional(),
  data: z.union([ EngineOptimizationStrategyUpdateInputSchema,EngineOptimizationStrategyUncheckedUpdateInputSchema ]),
  where: EngineOptimizationStrategyWhereUniqueInputSchema,
}).strict() ;

export const EngineOptimizationStrategyUpdateManyArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyUpdateManyArgs> = z.object({
  data: z.union([ EngineOptimizationStrategyUpdateManyMutationInputSchema,EngineOptimizationStrategyUncheckedUpdateManyInputSchema ]),
  where: EngineOptimizationStrategyWhereInputSchema.optional(),
}).strict() ;

export const EngineOptimizationStrategyDeleteManyArgsSchema: z.ZodType<Prisma.EngineOptimizationStrategyDeleteManyArgs> = z.object({
  where: EngineOptimizationStrategyWhereInputSchema.optional(),
}).strict() ;

export const EngineConfidenceScoreCreateArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreCreateArgs> = z.object({
  select: EngineConfidenceScoreSelectSchema.optional(),
  data: z.union([ EngineConfidenceScoreCreateInputSchema,EngineConfidenceScoreUncheckedCreateInputSchema ]),
}).strict() ;

export const EngineConfidenceScoreUpsertArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreUpsertArgs> = z.object({
  select: EngineConfidenceScoreSelectSchema.optional(),
  where: EngineConfidenceScoreWhereUniqueInputSchema,
  create: z.union([ EngineConfidenceScoreCreateInputSchema,EngineConfidenceScoreUncheckedCreateInputSchema ]),
  update: z.union([ EngineConfidenceScoreUpdateInputSchema,EngineConfidenceScoreUncheckedUpdateInputSchema ]),
}).strict() ;

export const EngineConfidenceScoreCreateManyArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreCreateManyArgs> = z.object({
  data: z.union([ EngineConfidenceScoreCreateManyInputSchema,EngineConfidenceScoreCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EngineConfidenceScoreCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreCreateManyAndReturnArgs> = z.object({
  data: z.union([ EngineConfidenceScoreCreateManyInputSchema,EngineConfidenceScoreCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EngineConfidenceScoreDeleteArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreDeleteArgs> = z.object({
  select: EngineConfidenceScoreSelectSchema.optional(),
  where: EngineConfidenceScoreWhereUniqueInputSchema,
}).strict() ;

export const EngineConfidenceScoreUpdateArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreUpdateArgs> = z.object({
  select: EngineConfidenceScoreSelectSchema.optional(),
  data: z.union([ EngineConfidenceScoreUpdateInputSchema,EngineConfidenceScoreUncheckedUpdateInputSchema ]),
  where: EngineConfidenceScoreWhereUniqueInputSchema,
}).strict() ;

export const EngineConfidenceScoreUpdateManyArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreUpdateManyArgs> = z.object({
  data: z.union([ EngineConfidenceScoreUpdateManyMutationInputSchema,EngineConfidenceScoreUncheckedUpdateManyInputSchema ]),
  where: EngineConfidenceScoreWhereInputSchema.optional(),
}).strict() ;

export const EngineConfidenceScoreDeleteManyArgsSchema: z.ZodType<Prisma.EngineConfidenceScoreDeleteManyArgs> = z.object({
  where: EngineConfidenceScoreWhereInputSchema.optional(),
}).strict() ;

export const SearchWeightsCreateArgsSchema: z.ZodType<Prisma.SearchWeightsCreateArgs> = z.object({
  select: SearchWeightsSelectSchema.optional(),
  data: z.union([ SearchWeightsCreateInputSchema,SearchWeightsUncheckedCreateInputSchema ]),
}).strict() ;

export const SearchWeightsUpsertArgsSchema: z.ZodType<Prisma.SearchWeightsUpsertArgs> = z.object({
  select: SearchWeightsSelectSchema.optional(),
  where: SearchWeightsWhereUniqueInputSchema,
  create: z.union([ SearchWeightsCreateInputSchema,SearchWeightsUncheckedCreateInputSchema ]),
  update: z.union([ SearchWeightsUpdateInputSchema,SearchWeightsUncheckedUpdateInputSchema ]),
}).strict() ;

export const SearchWeightsCreateManyArgsSchema: z.ZodType<Prisma.SearchWeightsCreateManyArgs> = z.object({
  data: z.union([ SearchWeightsCreateManyInputSchema,SearchWeightsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SearchWeightsCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SearchWeightsCreateManyAndReturnArgs> = z.object({
  data: z.union([ SearchWeightsCreateManyInputSchema,SearchWeightsCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SearchWeightsDeleteArgsSchema: z.ZodType<Prisma.SearchWeightsDeleteArgs> = z.object({
  select: SearchWeightsSelectSchema.optional(),
  where: SearchWeightsWhereUniqueInputSchema,
}).strict() ;

export const SearchWeightsUpdateArgsSchema: z.ZodType<Prisma.SearchWeightsUpdateArgs> = z.object({
  select: SearchWeightsSelectSchema.optional(),
  data: z.union([ SearchWeightsUpdateInputSchema,SearchWeightsUncheckedUpdateInputSchema ]),
  where: SearchWeightsWhereUniqueInputSchema,
}).strict() ;

export const SearchWeightsUpdateManyArgsSchema: z.ZodType<Prisma.SearchWeightsUpdateManyArgs> = z.object({
  data: z.union([ SearchWeightsUpdateManyMutationInputSchema,SearchWeightsUncheckedUpdateManyInputSchema ]),
  where: SearchWeightsWhereInputSchema.optional(),
}).strict() ;

export const SearchWeightsDeleteManyArgsSchema: z.ZodType<Prisma.SearchWeightsDeleteManyArgs> = z.object({
  where: SearchWeightsWhereInputSchema.optional(),
}).strict() ;

export const SearchConfigCreateArgsSchema: z.ZodType<Prisma.SearchConfigCreateArgs> = z.object({
  select: SearchConfigSelectSchema.optional(),
  data: z.union([ SearchConfigCreateInputSchema,SearchConfigUncheckedCreateInputSchema ]),
}).strict() ;

export const SearchConfigUpsertArgsSchema: z.ZodType<Prisma.SearchConfigUpsertArgs> = z.object({
  select: SearchConfigSelectSchema.optional(),
  where: SearchConfigWhereUniqueInputSchema,
  create: z.union([ SearchConfigCreateInputSchema,SearchConfigUncheckedCreateInputSchema ]),
  update: z.union([ SearchConfigUpdateInputSchema,SearchConfigUncheckedUpdateInputSchema ]),
}).strict() ;

export const SearchConfigCreateManyArgsSchema: z.ZodType<Prisma.SearchConfigCreateManyArgs> = z.object({
  data: z.union([ SearchConfigCreateManyInputSchema,SearchConfigCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SearchConfigCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SearchConfigCreateManyAndReturnArgs> = z.object({
  data: z.union([ SearchConfigCreateManyInputSchema,SearchConfigCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SearchConfigDeleteArgsSchema: z.ZodType<Prisma.SearchConfigDeleteArgs> = z.object({
  select: SearchConfigSelectSchema.optional(),
  where: SearchConfigWhereUniqueInputSchema,
}).strict() ;

export const SearchConfigUpdateArgsSchema: z.ZodType<Prisma.SearchConfigUpdateArgs> = z.object({
  select: SearchConfigSelectSchema.optional(),
  data: z.union([ SearchConfigUpdateInputSchema,SearchConfigUncheckedUpdateInputSchema ]),
  where: SearchConfigWhereUniqueInputSchema,
}).strict() ;

export const SearchConfigUpdateManyArgsSchema: z.ZodType<Prisma.SearchConfigUpdateManyArgs> = z.object({
  data: z.union([ SearchConfigUpdateManyMutationInputSchema,SearchConfigUncheckedUpdateManyInputSchema ]),
  where: SearchConfigWhereInputSchema.optional(),
}).strict() ;

export const SearchConfigDeleteManyArgsSchema: z.ZodType<Prisma.SearchConfigDeleteManyArgs> = z.object({
  where: SearchConfigWhereInputSchema.optional(),
}).strict() ;

export const ExperimentConfigCreateArgsSchema: z.ZodType<Prisma.ExperimentConfigCreateArgs> = z.object({
  select: ExperimentConfigSelectSchema.optional(),
  data: z.union([ ExperimentConfigCreateInputSchema,ExperimentConfigUncheckedCreateInputSchema ]),
}).strict() ;

export const ExperimentConfigUpsertArgsSchema: z.ZodType<Prisma.ExperimentConfigUpsertArgs> = z.object({
  select: ExperimentConfigSelectSchema.optional(),
  where: ExperimentConfigWhereUniqueInputSchema,
  create: z.union([ ExperimentConfigCreateInputSchema,ExperimentConfigUncheckedCreateInputSchema ]),
  update: z.union([ ExperimentConfigUpdateInputSchema,ExperimentConfigUncheckedUpdateInputSchema ]),
}).strict() ;

export const ExperimentConfigCreateManyArgsSchema: z.ZodType<Prisma.ExperimentConfigCreateManyArgs> = z.object({
  data: z.union([ ExperimentConfigCreateManyInputSchema,ExperimentConfigCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExperimentConfigCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ExperimentConfigCreateManyAndReturnArgs> = z.object({
  data: z.union([ ExperimentConfigCreateManyInputSchema,ExperimentConfigCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ExperimentConfigDeleteArgsSchema: z.ZodType<Prisma.ExperimentConfigDeleteArgs> = z.object({
  select: ExperimentConfigSelectSchema.optional(),
  where: ExperimentConfigWhereUniqueInputSchema,
}).strict() ;

export const ExperimentConfigUpdateArgsSchema: z.ZodType<Prisma.ExperimentConfigUpdateArgs> = z.object({
  select: ExperimentConfigSelectSchema.optional(),
  data: z.union([ ExperimentConfigUpdateInputSchema,ExperimentConfigUncheckedUpdateInputSchema ]),
  where: ExperimentConfigWhereUniqueInputSchema,
}).strict() ;

export const ExperimentConfigUpdateManyArgsSchema: z.ZodType<Prisma.ExperimentConfigUpdateManyArgs> = z.object({
  data: z.union([ ExperimentConfigUpdateManyMutationInputSchema,ExperimentConfigUncheckedUpdateManyInputSchema ]),
  where: ExperimentConfigWhereInputSchema.optional(),
}).strict() ;

export const ExperimentConfigDeleteManyArgsSchema: z.ZodType<Prisma.ExperimentConfigDeleteManyArgs> = z.object({
  where: ExperimentConfigWhereInputSchema.optional(),
}).strict() ;

export const EngineRecommendationCreateArgsSchema: z.ZodType<Prisma.EngineRecommendationCreateArgs> = z.object({
  select: EngineRecommendationSelectSchema.optional(),
  include: EngineRecommendationIncludeSchema.optional(),
  data: z.union([ EngineRecommendationCreateInputSchema,EngineRecommendationUncheckedCreateInputSchema ]),
}).strict() ;

export const EngineRecommendationUpsertArgsSchema: z.ZodType<Prisma.EngineRecommendationUpsertArgs> = z.object({
  select: EngineRecommendationSelectSchema.optional(),
  include: EngineRecommendationIncludeSchema.optional(),
  where: EngineRecommendationWhereUniqueInputSchema,
  create: z.union([ EngineRecommendationCreateInputSchema,EngineRecommendationUncheckedCreateInputSchema ]),
  update: z.union([ EngineRecommendationUpdateInputSchema,EngineRecommendationUncheckedUpdateInputSchema ]),
}).strict() ;

export const EngineRecommendationCreateManyArgsSchema: z.ZodType<Prisma.EngineRecommendationCreateManyArgs> = z.object({
  data: z.union([ EngineRecommendationCreateManyInputSchema,EngineRecommendationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EngineRecommendationCreateManyAndReturnArgsSchema: z.ZodType<Prisma.EngineRecommendationCreateManyAndReturnArgs> = z.object({
  data: z.union([ EngineRecommendationCreateManyInputSchema,EngineRecommendationCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const EngineRecommendationDeleteArgsSchema: z.ZodType<Prisma.EngineRecommendationDeleteArgs> = z.object({
  select: EngineRecommendationSelectSchema.optional(),
  include: EngineRecommendationIncludeSchema.optional(),
  where: EngineRecommendationWhereUniqueInputSchema,
}).strict() ;

export const EngineRecommendationUpdateArgsSchema: z.ZodType<Prisma.EngineRecommendationUpdateArgs> = z.object({
  select: EngineRecommendationSelectSchema.optional(),
  include: EngineRecommendationIncludeSchema.optional(),
  data: z.union([ EngineRecommendationUpdateInputSchema,EngineRecommendationUncheckedUpdateInputSchema ]),
  where: EngineRecommendationWhereUniqueInputSchema,
}).strict() ;

export const EngineRecommendationUpdateManyArgsSchema: z.ZodType<Prisma.EngineRecommendationUpdateManyArgs> = z.object({
  data: z.union([ EngineRecommendationUpdateManyMutationInputSchema,EngineRecommendationUncheckedUpdateManyInputSchema ]),
  where: EngineRecommendationWhereInputSchema.optional(),
}).strict() ;

export const EngineRecommendationDeleteManyArgsSchema: z.ZodType<Prisma.EngineRecommendationDeleteManyArgs> = z.object({
  where: EngineRecommendationWhereInputSchema.optional(),
}).strict() ;

export const IndexCreateArgsSchema: z.ZodType<Prisma.IndexCreateArgs> = z.object({
  select: IndexSelectSchema.optional(),
  data: z.union([ IndexCreateInputSchema,IndexUncheckedCreateInputSchema ]),
}).strict() ;

export const IndexUpsertArgsSchema: z.ZodType<Prisma.IndexUpsertArgs> = z.object({
  select: IndexSelectSchema.optional(),
  where: IndexWhereUniqueInputSchema,
  create: z.union([ IndexCreateInputSchema,IndexUncheckedCreateInputSchema ]),
  update: z.union([ IndexUpdateInputSchema,IndexUncheckedUpdateInputSchema ]),
}).strict() ;

export const IndexCreateManyArgsSchema: z.ZodType<Prisma.IndexCreateManyArgs> = z.object({
  data: z.union([ IndexCreateManyInputSchema,IndexCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const IndexCreateManyAndReturnArgsSchema: z.ZodType<Prisma.IndexCreateManyAndReturnArgs> = z.object({
  data: z.union([ IndexCreateManyInputSchema,IndexCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const IndexDeleteArgsSchema: z.ZodType<Prisma.IndexDeleteArgs> = z.object({
  select: IndexSelectSchema.optional(),
  where: IndexWhereUniqueInputSchema,
}).strict() ;

export const IndexUpdateArgsSchema: z.ZodType<Prisma.IndexUpdateArgs> = z.object({
  select: IndexSelectSchema.optional(),
  data: z.union([ IndexUpdateInputSchema,IndexUncheckedUpdateInputSchema ]),
  where: IndexWhereUniqueInputSchema,
}).strict() ;

export const IndexUpdateManyArgsSchema: z.ZodType<Prisma.IndexUpdateManyArgs> = z.object({
  data: z.union([ IndexUpdateManyMutationInputSchema,IndexUncheckedUpdateManyInputSchema ]),
  where: IndexWhereInputSchema.optional(),
}).strict() ;

export const IndexDeleteManyArgsSchema: z.ZodType<Prisma.IndexDeleteManyArgs> = z.object({
  where: IndexWhereInputSchema.optional(),
}).strict() ;

export const UserCreateArgsSchema: z.ZodType<Prisma.UserCreateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
}).strict() ;

export const UserUpsertArgsSchema: z.ZodType<Prisma.UserUpsertArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
  create: z.union([ UserCreateInputSchema,UserUncheckedCreateInputSchema ]),
  update: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
}).strict() ;

export const UserCreateManyArgsSchema: z.ZodType<Prisma.UserCreateManyArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserCreateManyAndReturnArgsSchema: z.ZodType<Prisma.UserCreateManyAndReturnArgs> = z.object({
  data: z.union([ UserCreateManyInputSchema,UserCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const UserDeleteArgsSchema: z.ZodType<Prisma.UserDeleteArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateArgsSchema: z.ZodType<Prisma.UserUpdateArgs> = z.object({
  select: UserSelectSchema.optional(),
  include: UserIncludeSchema.optional(),
  data: z.union([ UserUpdateInputSchema,UserUncheckedUpdateInputSchema ]),
  where: UserWhereUniqueInputSchema,
}).strict() ;

export const UserUpdateManyArgsSchema: z.ZodType<Prisma.UserUpdateManyArgs> = z.object({
  data: z.union([ UserUpdateManyMutationInputSchema,UserUncheckedUpdateManyInputSchema ]),
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const UserDeleteManyArgsSchema: z.ZodType<Prisma.UserDeleteManyArgs> = z.object({
  where: UserWhereInputSchema.optional(),
}).strict() ;

export const AccountCreateArgsSchema: z.ZodType<Prisma.AccountCreateArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
}).strict() ;

export const AccountUpsertArgsSchema: z.ZodType<Prisma.AccountUpsertArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
  create: z.union([ AccountCreateInputSchema,AccountUncheckedCreateInputSchema ]),
  update: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
}).strict() ;

export const AccountCreateManyArgsSchema: z.ZodType<Prisma.AccountCreateManyArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AccountCreateManyAndReturnArgs> = z.object({
  data: z.union([ AccountCreateManyInputSchema,AccountCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AccountDeleteArgsSchema: z.ZodType<Prisma.AccountDeleteArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateArgsSchema: z.ZodType<Prisma.AccountUpdateArgs> = z.object({
  select: AccountSelectSchema.optional(),
  include: AccountIncludeSchema.optional(),
  data: z.union([ AccountUpdateInputSchema,AccountUncheckedUpdateInputSchema ]),
  where: AccountWhereUniqueInputSchema,
}).strict() ;

export const AccountUpdateManyArgsSchema: z.ZodType<Prisma.AccountUpdateManyArgs> = z.object({
  data: z.union([ AccountUpdateManyMutationInputSchema,AccountUncheckedUpdateManyInputSchema ]),
  where: AccountWhereInputSchema.optional(),
}).strict() ;

export const AccountDeleteManyArgsSchema: z.ZodType<Prisma.AccountDeleteManyArgs> = z.object({
  where: AccountWhereInputSchema.optional(),
}).strict() ;

export const AuthSessionCreateArgsSchema: z.ZodType<Prisma.AuthSessionCreateArgs> = z.object({
  select: AuthSessionSelectSchema.optional(),
  include: AuthSessionIncludeSchema.optional(),
  data: z.union([ AuthSessionCreateInputSchema,AuthSessionUncheckedCreateInputSchema ]),
}).strict() ;

export const AuthSessionUpsertArgsSchema: z.ZodType<Prisma.AuthSessionUpsertArgs> = z.object({
  select: AuthSessionSelectSchema.optional(),
  include: AuthSessionIncludeSchema.optional(),
  where: AuthSessionWhereUniqueInputSchema,
  create: z.union([ AuthSessionCreateInputSchema,AuthSessionUncheckedCreateInputSchema ]),
  update: z.union([ AuthSessionUpdateInputSchema,AuthSessionUncheckedUpdateInputSchema ]),
}).strict() ;

export const AuthSessionCreateManyArgsSchema: z.ZodType<Prisma.AuthSessionCreateManyArgs> = z.object({
  data: z.union([ AuthSessionCreateManyInputSchema,AuthSessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AuthSessionCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AuthSessionCreateManyAndReturnArgs> = z.object({
  data: z.union([ AuthSessionCreateManyInputSchema,AuthSessionCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AuthSessionDeleteArgsSchema: z.ZodType<Prisma.AuthSessionDeleteArgs> = z.object({
  select: AuthSessionSelectSchema.optional(),
  include: AuthSessionIncludeSchema.optional(),
  where: AuthSessionWhereUniqueInputSchema,
}).strict() ;

export const AuthSessionUpdateArgsSchema: z.ZodType<Prisma.AuthSessionUpdateArgs> = z.object({
  select: AuthSessionSelectSchema.optional(),
  include: AuthSessionIncludeSchema.optional(),
  data: z.union([ AuthSessionUpdateInputSchema,AuthSessionUncheckedUpdateInputSchema ]),
  where: AuthSessionWhereUniqueInputSchema,
}).strict() ;

export const AuthSessionUpdateManyArgsSchema: z.ZodType<Prisma.AuthSessionUpdateManyArgs> = z.object({
  data: z.union([ AuthSessionUpdateManyMutationInputSchema,AuthSessionUncheckedUpdateManyInputSchema ]),
  where: AuthSessionWhereInputSchema.optional(),
}).strict() ;

export const AuthSessionDeleteManyArgsSchema: z.ZodType<Prisma.AuthSessionDeleteManyArgs> = z.object({
  where: AuthSessionWhereInputSchema.optional(),
}).strict() ;

export const VerificationTokenCreateArgsSchema: z.ZodType<Prisma.VerificationTokenCreateArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  data: z.union([ VerificationTokenCreateInputSchema,VerificationTokenUncheckedCreateInputSchema ]),
}).strict() ;

export const VerificationTokenUpsertArgsSchema: z.ZodType<Prisma.VerificationTokenUpsertArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
  create: z.union([ VerificationTokenCreateInputSchema,VerificationTokenUncheckedCreateInputSchema ]),
  update: z.union([ VerificationTokenUpdateInputSchema,VerificationTokenUncheckedUpdateInputSchema ]),
}).strict() ;

export const VerificationTokenCreateManyArgsSchema: z.ZodType<Prisma.VerificationTokenCreateManyArgs> = z.object({
  data: z.union([ VerificationTokenCreateManyInputSchema,VerificationTokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VerificationTokenCreateManyAndReturnArgsSchema: z.ZodType<Prisma.VerificationTokenCreateManyAndReturnArgs> = z.object({
  data: z.union([ VerificationTokenCreateManyInputSchema,VerificationTokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const VerificationTokenDeleteArgsSchema: z.ZodType<Prisma.VerificationTokenDeleteArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict() ;

export const VerificationTokenUpdateArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateArgs> = z.object({
  select: VerificationTokenSelectSchema.optional(),
  data: z.union([ VerificationTokenUpdateInputSchema,VerificationTokenUncheckedUpdateInputSchema ]),
  where: VerificationTokenWhereUniqueInputSchema,
}).strict() ;

export const VerificationTokenUpdateManyArgsSchema: z.ZodType<Prisma.VerificationTokenUpdateManyArgs> = z.object({
  data: z.union([ VerificationTokenUpdateManyMutationInputSchema,VerificationTokenUncheckedUpdateManyInputSchema ]),
  where: VerificationTokenWhereInputSchema.optional(),
}).strict() ;

export const VerificationTokenDeleteManyArgsSchema: z.ZodType<Prisma.VerificationTokenDeleteManyArgs> = z.object({
  where: VerificationTokenWhereInputSchema.optional(),
}).strict() ;

export const ApiKeyCreateArgsSchema: z.ZodType<Prisma.ApiKeyCreateArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  data: z.union([ ApiKeyCreateInputSchema,ApiKeyUncheckedCreateInputSchema ]),
}).strict() ;

export const ApiKeyUpsertArgsSchema: z.ZodType<Prisma.ApiKeyUpsertArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  where: ApiKeyWhereUniqueInputSchema,
  create: z.union([ ApiKeyCreateInputSchema,ApiKeyUncheckedCreateInputSchema ]),
  update: z.union([ ApiKeyUpdateInputSchema,ApiKeyUncheckedUpdateInputSchema ]),
}).strict() ;

export const ApiKeyCreateManyArgsSchema: z.ZodType<Prisma.ApiKeyCreateManyArgs> = z.object({
  data: z.union([ ApiKeyCreateManyInputSchema,ApiKeyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ApiKeyCreateManyAndReturnArgsSchema: z.ZodType<Prisma.ApiKeyCreateManyAndReturnArgs> = z.object({
  data: z.union([ ApiKeyCreateManyInputSchema,ApiKeyCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const ApiKeyDeleteArgsSchema: z.ZodType<Prisma.ApiKeyDeleteArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  where: ApiKeyWhereUniqueInputSchema,
}).strict() ;

export const ApiKeyUpdateArgsSchema: z.ZodType<Prisma.ApiKeyUpdateArgs> = z.object({
  select: ApiKeySelectSchema.optional(),
  data: z.union([ ApiKeyUpdateInputSchema,ApiKeyUncheckedUpdateInputSchema ]),
  where: ApiKeyWhereUniqueInputSchema,
}).strict() ;

export const ApiKeyUpdateManyArgsSchema: z.ZodType<Prisma.ApiKeyUpdateManyArgs> = z.object({
  data: z.union([ ApiKeyUpdateManyMutationInputSchema,ApiKeyUncheckedUpdateManyInputSchema ]),
  where: ApiKeyWhereInputSchema.optional(),
}).strict() ;

export const ApiKeyDeleteManyArgsSchema: z.ZodType<Prisma.ApiKeyDeleteManyArgs> = z.object({
  where: ApiKeyWhereInputSchema.optional(),
}).strict() ;

export const AdminTokenCreateArgsSchema: z.ZodType<Prisma.AdminTokenCreateArgs> = z.object({
  select: AdminTokenSelectSchema.optional(),
  data: z.union([ AdminTokenCreateInputSchema,AdminTokenUncheckedCreateInputSchema ]),
}).strict() ;

export const AdminTokenUpsertArgsSchema: z.ZodType<Prisma.AdminTokenUpsertArgs> = z.object({
  select: AdminTokenSelectSchema.optional(),
  where: AdminTokenWhereUniqueInputSchema,
  create: z.union([ AdminTokenCreateInputSchema,AdminTokenUncheckedCreateInputSchema ]),
  update: z.union([ AdminTokenUpdateInputSchema,AdminTokenUncheckedUpdateInputSchema ]),
}).strict() ;

export const AdminTokenCreateManyArgsSchema: z.ZodType<Prisma.AdminTokenCreateManyArgs> = z.object({
  data: z.union([ AdminTokenCreateManyInputSchema,AdminTokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AdminTokenCreateManyAndReturnArgsSchema: z.ZodType<Prisma.AdminTokenCreateManyAndReturnArgs> = z.object({
  data: z.union([ AdminTokenCreateManyInputSchema,AdminTokenCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const AdminTokenDeleteArgsSchema: z.ZodType<Prisma.AdminTokenDeleteArgs> = z.object({
  select: AdminTokenSelectSchema.optional(),
  where: AdminTokenWhereUniqueInputSchema,
}).strict() ;

export const AdminTokenUpdateArgsSchema: z.ZodType<Prisma.AdminTokenUpdateArgs> = z.object({
  select: AdminTokenSelectSchema.optional(),
  data: z.union([ AdminTokenUpdateInputSchema,AdminTokenUncheckedUpdateInputSchema ]),
  where: AdminTokenWhereUniqueInputSchema,
}).strict() ;

export const AdminTokenUpdateManyArgsSchema: z.ZodType<Prisma.AdminTokenUpdateManyArgs> = z.object({
  data: z.union([ AdminTokenUpdateManyMutationInputSchema,AdminTokenUncheckedUpdateManyInputSchema ]),
  where: AdminTokenWhereInputSchema.optional(),
}).strict() ;

export const AdminTokenDeleteManyArgsSchema: z.ZodType<Prisma.AdminTokenDeleteManyArgs> = z.object({
  where: AdminTokenWhereInputSchema.optional(),
}).strict() ;

export const SessionToSignalCreateArgsSchema: z.ZodType<Prisma.SessionToSignalCreateArgs> = z.object({
  select: SessionToSignalSelectSchema.optional(),
  include: SessionToSignalIncludeSchema.optional(),
  data: z.union([ SessionToSignalCreateInputSchema,SessionToSignalUncheckedCreateInputSchema ]),
}).strict() ;

export const SessionToSignalUpsertArgsSchema: z.ZodType<Prisma.SessionToSignalUpsertArgs> = z.object({
  select: SessionToSignalSelectSchema.optional(),
  include: SessionToSignalIncludeSchema.optional(),
  where: SessionToSignalWhereUniqueInputSchema,
  create: z.union([ SessionToSignalCreateInputSchema,SessionToSignalUncheckedCreateInputSchema ]),
  update: z.union([ SessionToSignalUpdateInputSchema,SessionToSignalUncheckedUpdateInputSchema ]),
}).strict() ;

export const SessionToSignalCreateManyArgsSchema: z.ZodType<Prisma.SessionToSignalCreateManyArgs> = z.object({
  data: z.union([ SessionToSignalCreateManyInputSchema,SessionToSignalCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionToSignalCreateManyAndReturnArgsSchema: z.ZodType<Prisma.SessionToSignalCreateManyAndReturnArgs> = z.object({
  data: z.union([ SessionToSignalCreateManyInputSchema,SessionToSignalCreateManyInputSchema.array() ]),
  skipDuplicates: z.boolean().optional(),
}).strict() ;

export const SessionToSignalDeleteArgsSchema: z.ZodType<Prisma.SessionToSignalDeleteArgs> = z.object({
  select: SessionToSignalSelectSchema.optional(),
  include: SessionToSignalIncludeSchema.optional(),
  where: SessionToSignalWhereUniqueInputSchema,
}).strict() ;

export const SessionToSignalUpdateArgsSchema: z.ZodType<Prisma.SessionToSignalUpdateArgs> = z.object({
  select: SessionToSignalSelectSchema.optional(),
  include: SessionToSignalIncludeSchema.optional(),
  data: z.union([ SessionToSignalUpdateInputSchema,SessionToSignalUncheckedUpdateInputSchema ]),
  where: SessionToSignalWhereUniqueInputSchema,
}).strict() ;

export const SessionToSignalUpdateManyArgsSchema: z.ZodType<Prisma.SessionToSignalUpdateManyArgs> = z.object({
  data: z.union([ SessionToSignalUpdateManyMutationInputSchema,SessionToSignalUncheckedUpdateManyInputSchema ]),
  where: SessionToSignalWhereInputSchema.optional(),
}).strict() ;

export const SessionToSignalDeleteManyArgsSchema: z.ZodType<Prisma.SessionToSignalDeleteManyArgs> = z.object({
  where: SessionToSignalWhereInputSchema.optional(),
}).strict() ;