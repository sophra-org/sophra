datasource db {
  provider = "postgresql"
  url      = env("TEST_ANALYZER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./test-analyzer-client"
}

enum TestHealthScore {
  EXCELLENT
  GOOD
  FAIR
  POOR
  CRITICAL
}

enum FixType {
  ASSERTION
  SETUP
  TEARDOWN
  ASYNC
  MOCK
  TIMING
  DEPENDENCY
  LOGIC
  OTHER
}

enum GenerationType {
  COVERAGE_GAP
  ENHANCEMENT
  REGRESSION
  EDGE_CASE
}

enum SessionStatus {
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
}

enum PatternType {
  TEST_STRUCTURE
  ASSERTION_STYLE
  MOCK_USAGE
  SETUP_PATTERN
  ERROR_HANDLING
  ASYNC_PATTERN
}

model AnalysisSession {
  id          String        @id @default(cuid())
  startedAt   DateTime      @default(now())
  endedAt     DateTime?
  status      SessionStatus @default(ACTIVE)
  context     Json?         // Store session context
  decisions   Json[]        // Track decisions made
  operations  Json[]        // Track operations performed
  
  // Relations
  testFiles   TestFile[]
  analyses    TestAnalysis[]

  @@index([status])
  @@index([startedAt])
}

model TestFile {
  id                String          @id @default(cuid())
  filePath          String          @unique
  fileName          String
  firstSeen         DateTime        @default(now())
  lastUpdated       DateTime        @updatedAt
  totalRuns         Int             @default(0)
  avgPassRate       Float           @default(0)
  currentPassRate   Float           @default(0)
  avgDuration       Float           @default(0)
  currentCoverage   Float           @default(0)
  avgCoverage       Float           @default(0)
  totalFixes        Int             @default(0)
  flakyTests        Int             @default(0)
  metadata          Json?
  healthScore       TestHealthScore @default(GOOD)
  totalTests        Int             @default(0)
  criticalTests     Int             @default(0)
  lastFailureReason String?

  // Relations
  sessions    AnalysisSession[]  // Sessions that analyzed this file
  executions  TestExecution[]
  coverage    TestCoverage[]
  fixes       TestFix[]
  generations TestGeneration[]
  analyses    TestAnalysis[]     // Detailed analysis records

  @@index([healthScore])
  @@index([currentPassRate])
  @@index([currentCoverage])
}

model TestAnalysis {
  id           String   @id @default(cuid())
  session      AnalysisSession @relation(fields: [sessionId], references: [id])
  sessionId    String
  testFile     TestFile @relation(fields: [testFileId], references: [id])
  testFileId   String
  patterns     Json     // Identified patterns
  antiPatterns Json     // Identified anti-patterns
  suggestions  Json     // Improvement suggestions
  context      Json     // Analysis context
  timestamp    DateTime @default(now())

  @@index([sessionId])
  @@index([testFileId])
  @@index([timestamp])
}

model TestPattern {
  id          String      @id @default(cuid())
  type        PatternType
  pattern     String      // The actual pattern
  context     Json        // When to apply
  successRate Float       @default(0)
  usageCount  Int         @default(0)
  lastUsed    DateTime    @updatedAt
  createdAt   DateTime    @default(now())

  @@index([type])
  @@index([successRate])
  @@index([usageCount])
}

model FixPattern {
  id          String   @id @default(cuid())
  problem     String   // Problem signature
  solution    String   // Solution template
  context     Json     // When to apply
  successRate Float    @default(0)
  usageCount  Int      @default(0)
  lastUsed    DateTime @updatedAt
  createdAt   DateTime @default(now())

  @@index([successRate])
  @@index([usageCount])
}

model TestExecution {
  id           String   @id @default(cuid())
  testFile     TestFile @relation(fields: [testFileId], references: [id])
  testFileId   String
  executedAt   DateTime @default(now())
  passed       Boolean
  duration     Float
  errorMessage String?
  testResults  Json
  environment  String
  commitHash   String?
  performance  Json?

  @@index([testFileId, executedAt])
  @@index([passed])
}

model TestCoverage {
  id               String   @id @default(cuid())
  testFile         TestFile @relation(fields: [testFileId], references: [id])
  testFileId       String
  measuredAt       DateTime @default(now())
  coveragePercent  Float
  linesCovered     Json
  linesUncovered   Json
  branchCoverage   Json?
  functionCoverage Json?
  suggestedAreas   Json?
  coverageType     String

  @@index([testFileId, measuredAt])
  @@index([coveragePercent])
}

model TestFix {
  id             String   @id @default(cuid())
  testFile       TestFile @relation(fields: [testFileId], references: [id])
  testFileId     String
  appliedAt      DateTime @default(now())
  fixType        FixType
  problem        String
  solution       String
  successful     Boolean
  confidenceScore Float
  beforeState    Json
  afterState     Json
  patternUsed    String?
  impactScore    Float

  @@index([testFileId, appliedAt])
  @@index([successful])
  @@index([fixType])
}

model TestGeneration {
  id                  String        @id @default(cuid())
  testFile           TestFile      @relation(fields: [testFileId], references: [id])
  testFileId         String
  generatedAt        DateTime      @default(now())
  generationType     GenerationType
  newTests           Json
  accepted           Boolean
  targetArea         String
  coverageImprovement Float
  generationStrategy String
  context            Json

  @@index([testFileId, generatedAt])
  @@index([accepted])
  @@index([generationType])
} 